import "steammessages.proto";
import "matchmaker_common.proto";

enum EDOTAGCMsg {
	k_EMsgGCDOTABase = 7000;
	k_EMsgGCGeneralResponse = 7001;
	k_EMsgGCGameMatchSignOut = 7004;
	k_EMsgGCGameMatchSignOutResponse = 7005;
	k_EMsgGCJoinChatChannel = 7009;
	k_EMsgGCJoinChatChannelResponse = 7010;
	k_EMsgGCLeaveChatChannel = 7011;
	k_EMsgGCOtherJoinedChannel = 7013;
	k_EMsgGCOtherLeftChannel = 7014;
	k_EMsgGCRequestMatchHistoryList = 7016;
	k_EMsgGCMatchHistoryList = 7017;
	k_EMsgGCGetNews = 7024;
	k_EMsgGCNewsResponse = 7025;
	k_EMsgGCStatus = 7026;
	k_EMsgGCGetRecentMatches = 7027;
	k_EMsgGCRecentMatchesResponse = 7028;
	k_EMsgGCFindSourceTVGames = 7031;
	k_EMsgGCSourceTVGamesResponse = 7032;
	k_EMsgGCStartFindingMatch = 7033;
	k_EMsgGCConnectedPlayers = 7034;
	k_EMsgGCAbandonCurrentGame = 7035;
	k_EMsgGCStopFindingMatch = 7036;
	k_EMsgForceSOCacheResend = 7037;
	k_EMsgGCPracticeLobbyCreate = 7038;
	k_EMsgGCPracticeLobbyLeave = 7040;
	k_EMsgGCPracticeLobbyLaunch = 7041;
	k_EMsgGCPracticeLobbyList = 7042;
	k_EMsgGCPracticeLobbyListResponse = 7043;
	k_EMsgGCPracticeLobbyJoin = 7044;
	k_EMsgGCSetAvatar = 7045;
	k_EMsgGCPracticeLobbySetDetails = 7046;
	k_EMsgGCPracticeLobbySetTeamSlot = 7047;
	k_EMsgGCTutorialLobbyCreate = 7048;
	k_EMsgGCInitialQuestionnaireResponse = 7049;
	k_EMsgGCGCTrackedEvent = 7050;
	k_EMsgGCTournamentRequest = 7051;
	k_EMsgGCTournamentResponse = 7052;
	k_EMsgGCBetaParticiaptionRequest = 7053;
	k_EMsgGCBetaParticiaptionResponse = 7054;
	k_EMsgGCPracticeLobbyResponse = 7055;
	k_EMsgGCBroadcastNotification = 7056;
	k_EMsgGCLiveScoreboardUpdate = 7057;
	k_EMsgGCRequestDefaultChatChannel = 7058;
	k_EMsgGCRequestDefaultChatChannelResponse = 7059;
	k_EMsgGCRequestChatChannelList = 7060;
	k_EMsgGCRequestChatChannelListResponse = 7061;
	k_EMsgGCRequestMatches = 7064;
	k_EMsgGCRequestMatchesResponse = 7065;
	k_EMsgGCMatchmakingSearchCountRequest = 7066;
	k_EMsgGCMatchmakingSearchCountResponse = 7067;
	k_EMsgGCRequestPlayerResources = 7068;
	k_EMsgGCRequestPlayerResourcesResponse = 7069;
	k_EMsgGCReadyUp = 7070;
	k_EMsgGCKickedFromMatchmakingQueue = 7071;
	k_EMsgGCLeaverDetected = 7072;
	k_EMsgGCSpectateFriendGame = 7073;
	k_EMsgGCSpectateFriendGameResponse = 7074;
	k_EMsgGCPlayerReports = 7075;
	k_EMsgGCReportsRemainingRequest = 7076;
	k_EMsgGCReportsRemainingResponse = 7077;
	k_EMsgGCSubmitPlayerReport = 7078;
	k_EMsgGCSubmitPlayerReportResponse = 7079;
	k_EMsgGCGameChatLog = 7080;
	k_EMsgGCPracticeLobbyKick = 7081;
	k_EMsgGCReportCountsRequest = 7082;
	k_EMsgGCReportCountsResponse = 7083;
	k_EMsgGCRequestSaveGames = 7084;
	k_EMsgGCRequestSaveGamesServer = 7085;
	k_EMsgGCRequestSaveGamesResponse = 7086;
	k_EMsgGCLeaverDetectedResponse = 7087;
	k_EMsgGCPlayerFailedToConnect = 7088;
	k_EMsgGCGCToRelayConnect = 7089;
	k_EMsgGCGCToRelayConnectresponse = 7090;
	k_EMsgGCWatchGame = 7091;
	k_EMsgGCWatchGameResponse = 7092;
	k_EMsgGCBanStatusRequest = 7093;
	k_EMsgGCBanStatusResponse = 7094;
	k_EMsgGCMatchDetailsRequest = 7095;
	k_EMsgGCMatchDetailsResponse = 7096;
	k_EMsgGCCancelWatchGame = 7097;
	k_EMsgGCProfileRequest = 7098;
	k_EMsgGCProfileResponse = 7099;
	k_EMsgGCDOTAIntraGCRankRequest = 7100;
	k_EMsgGCDOTAIntraGCRankResponse = 7101;
	k_EMsgGCPopup = 7102;
	k_EMsgGCDOTANotifySuccessfulReport = 7103;
	k_EMsgGCDOTAClearNotifySuccessfulReport = 7104;
	k_EMsgGCUnpickedHeroListRequest = 7105;
	k_EMsgGCUnpickedHeroListResponse = 7106;
	k_EMsgGCRemoveFromUnpickedHeroList = 7107;
	k_EMsgGCGenericResult = 7108;
	k_EMsgGCMatchGroupWaitTimesRequest = 7109;
	k_EMsgGCMatchGroupWaitTimesResponse = 7110;
	k_EMsgGCFriendPracticeLobbyListRequest = 7111;
	k_EMsgGCFriendPracticeLobbyListResponse = 7112;
	k_EMsgGCPracticeLobbyJoinResponse = 7113;
	k_EMsgClientEconNotification_Job = 7114;
	k_EMsgGCCreateTeam = 7115;
	k_EMsgGCCreateTeamResponse = 7116;
	k_EMsgGCDisbandTeam = 7117;
	k_EMsgGCDisbandTeamResponse = 7118;
	k_EMsgGCRequestTeamData = 7119;
	k_EMsgGCRequestTeamDataResponse = 7120;
	k_EMsgGCTeamData = 7121;
	k_EMsgGCInitiateTeamInvite = 7122;
	k_EMsgGCInitiateTeamInviteResponse = 7123;
	k_EMsgGCTeamInvite = 7124;
	k_EMsgGCTeamInviteReply = 7125;
	k_EMsgGCTeamInviteReplyResponse = 7126;
	k_EMsgGCTeamInviteComplete = 7127;
	k_EMsgGCKickTeamMember = 7128;
	k_EMsgGCKickTeamMemberResponse = 7129;
	k_EMsgGCLeaveTeam = 7130;
	k_EMsgGCLeaveTeamResponse = 7131;
	k_EMsgGCSuggestTeamMatchmaking = 7132;
	k_EMsgGCPlayerHeroesFavoritesAdd = 7133;
	k_EMsgGCPlayerHeroesFavoritesRemove = 7134;
	k_EMsgGCPlayerHeroesRecentRequest = 7135;
	k_EMsgGCPlayerHeroesRecentResponse = 7136;
	k_EMsgGCSetChatChannelVerbosity = 7137;
	k_EMsgDOTAChatChannelFullUpdate = 7138;
	k_EMsgGCEditTeamLogo = 7139;
	k_EMsgGCEditTeamLogoResponse = 7140;
	k_EMsgGCSetShowcaseHero = 7141;
	k_EMsgGCApplyTeamToPracticeLobby = 7142;
	k_EMsgGCRequestInternatinalTicketEmail = 7143;
	k_EMsgGCTransferTeamAdmin = 7144;
	k_EMsgGCClearTournamentGame = 7145;
	k_EMsgGCChatMessage = 7146;
	k_EMsgRequestLeagueInfo = 7147;
	k_EMsgResponseLeagueInfo = 7148;
	k_EMsgGCPracticeLobbyJoinBroadcastChannel = 7149;
	k_EMsgGC_TournamentItemEvent = 7150;
	k_EMsgGC_TournamentItemEventResponse = 7151;
	k_EMsgCastMatchVote = 7152;
	k_EMsgCastMatchVoteResponse = 7153;
	k_EMsgRetrieveMatchVote = 7154;
	k_EMsgRetrieveMatchVoteResponse = 7155;
	k_EMsgTeamFanfare = 7156;
	k_EMsgResponseTeamFanfare = 7157;
	k_EMsgGC_GameServerUploadSaveGame = 7158;
	k_EMsgGC_GameServerSaveGameResult = 7159;
	k_EMsgGC_GameServerGetLoadGame = 7160;
	k_EMsgGC_GameServerGetLoadGameResult = 7161;
	k_EMsgCheckSpectatorOnly = 7162;
	k_EMsgCheckSpectatorOnlyResponse = 7163;
	k_EMsgGCTeamProfileRequest = 7164;
	k_EMsgGCTeamProfileResponse = 7165;
	k_EMsgGCEditTeamDetails = 7166;
	k_EMsgGCEditTeamDetailsResponse = 7167;
	k_EMsgGCProTeamListRequest = 7168;
	k_EMsgGCProTeamListResponse = 7169;
	k_EMsgGCReadyUpStatus = 7170;
	k_EMsgGCHallOfFame = 7171;
	k_EMsgGCHallOfFameRequest = 7172;
	k_EMsgGCHallOfFameResponse = 7173;
	k_EMsgGCGenerateDiretidePrizeList = 7174;
	k_EMsgGCDiretidePrizeResponse = 7175;
	k_EMsgGCRewardDiretidePrizes = 7176;
	k_EMsgGCDiretidePrizesRewardedResponse = 7177;
	k_EMsgGCHalloweenHighScoreRequest = 7178;
	k_EMsgGCHalloweenHighScoreResponse = 7179;
	k_EMsgGCGenerateDiretidePrizeListResponse = 7180;
	k_EMsgGCDev_GrantWarKill = 8001;
}

enum DOTA_GameMode {
	DOTA_GAMEMODE_NONE = 0;
	DOTA_GAMEMODE_AP = 1;
	DOTA_GAMEMODE_CM = 2;
	DOTA_GAMEMODE_RD = 3;
	DOTA_GAMEMODE_SD = 4;
	DOTA_GAMEMODE_AR = 5;
	DOTA_GAMEMODE_INTRO = 6;
	DOTA_GAMEMODE_HW = 7;
	DOTA_GAMEMODE_REVERSE_CM = 8;
}

enum DOTA_GameState {
	DOTA_GAMERULES_STATE_INIT = 0;
	DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD = 1;
	DOTA_GAMERULES_STATE_HERO_SELECTION = 2;
	DOTA_GAMERULES_STATE_STRATEGY_TIME = 3;
	DOTA_GAMERULES_STATE_PRE_GAME = 4;
	DOTA_GAMERULES_STATE_GAME_IN_PROGRESS = 5;
	DOTA_GAMERULES_STATE_POST_GAME = 6;
	DOTA_GAMERULES_STATE_DISCONNECT = 7;
	DOTA_GAMERULES_STATE_LAST = 8;
}

enum DOTA_GC_TEAM {
	DOTA_GC_TEAM_GOOD_GUYS = 0;
	DOTA_GC_TEAM_BAD_GUYS = 1;
	DOTA_GC_TEAM_BROADCASTER = 2;
	DOTA_GC_TEAM_SPECTATOR = 3;
	DOTA_GC_TEAM_PLAYER_POOL = 4;
	DOTA_GC_TEAM_NOTEAM = 5;
}

enum DOTA_CM_PICK {
	DOTA_CM_RANDOM = 0;
	DOTA_CM_GOOD_GUYS = 1;
	DOTA_CM_BAD_GUYS = 2;
}

enum DOTALeaverStatus_t {
	DOTA_LEAVER_NONE = 0;
	DOTA_LEAVER_DISCONNECTED = 1;
	DOTA_LEAVER_DISCONNECTED_TOO_LONG = 2;
	DOTA_LEAVER_ABANDONED = 3;
	DOTA_LEAVER_AFK = 4;
	DOTA_LEAVER_NEVER_CONNECTED = 5;
	DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG = 6;
}

enum DOTALobbyReadyState {
	DOTALobbyReadyState_UNDECLARED = 0;
	DOTALobbyReadyState_ACCEPTED = 1;
	DOTALobbyReadyState_DECLINED = 2;
}

enum DOTAGameVersion {
	GAME_VERSION_CURRENT = 0;
	GAME_VERSION_STABLE = 1;
}

enum DOTAJoinLobbyResult {
	DOTA_JOIN_RESULT_SUCCESS = 0;
	DOTA_JOIN_RESULT_ALREADY_IN_GAME = 1;
	DOTA_JOIN_RESULT_INVALID_LOBBY = 2;
	DOTA_JOIN_RESULT_INCORRECT_PASSWORD = 3;
	DOTA_JOIN_RESULT_ACCESS_DENIED = 4;
	DOTA_JOIN_RESULT_GENERIC_ERROR = 5;
	DOTA_JOIN_RESULT_INCORRECT_VERSION = 6;
	DOTA_JOIN_RESULT_IN_TEAM_PARTY = 7;
}

enum DOTAMatchVote {
	DOTAMatchVote_INVALID = 0;
	DOTAMatchVote_POSITIVE = 1;
	DOTAMatchVote_NEGATIVE = 2;
}

enum DOTAChatChannelType_t {
	DOTAChannelType_Regional = 0;
	DOTAChannelType_Custom = 1;
	DOTAChannelType_Party = 2;
	DOTAChannelType_Lobby = 3;
	DOTAChannelType_Team = 4;
}

enum DOTA_TournamentEvents {
	TE_FIRST_BLOOD = 0;
	TE_GAME_END = 1;
	TE_MULTI_KILL = 2;
	TE_HERO_DENY = 3;
	TE_AEGIS_DENY = 4;
	TE_AEGIS_STOLEN = 5;
}

message CSODOTAGameAccountClient {
	optional uint32 account_id = 1 [(key_field) = true];
	optional uint32 wins = 3;
	optional uint32 losses = 4;
	optional uint32 avatar = 7;
	optional uint32 xp = 12;
	optional uint32 level = 13;
	optional uint32 initial_skill = 14;
	optional uint32 leaver_count = 15;
	optional uint32 prevent_match_until_date = 18;
	optional uint32 prevent_text_chat_until_date = 20;
	optional uint32 prevent_voice_until_date = 21;
	optional uint32 last_abandoned_game_date = 22;
	optional uint32 leaver_penalty_count = 23;
	optional uint32 completed_game_streak = 24;
	optional uint32 teaching = 28;
	optional uint32 leadership = 29;
	optional uint32 friendly = 30;
	optional uint32 forgiving = 31;
	optional uint32 successful_report_count = 36;
	optional uint32 notify_successful_report = 37;
	optional uint32 account_disabled_until_date = 38;
	optional uint32 account_disabled_count = 39;
	optional uint32 showcase_hero_id = 40;
	optional uint32 match_disabled_until_date = 41;
	optional uint32 match_disabled_count = 42;
	optional uint32 team_creation_disabled_until_date = 43;
}

message CSODOTAGameAccountClientInternal {
	optional uint32 rank = 1;
	optional uint32 rank_uncertainty = 2;
	optional int32 win_loss_streak = 3;
	optional uint32 feeding_count = 5;
	optional uint32 voice_reports = 7;
	optional uint32 text_reports = 8;
	optional uint32 ability_reports = 9;
	optional uint32 feeding_reports = 10;
	optional uint32 automatic_report_penalty = 11;
	optional uint32 games_since_report_penalty = 12;
	optional uint32 report_penalty_count = 13;
	optional uint32 pending_detected_reports = 14;
	optional uint32 pending_in_game_reports = 15;
	optional uint32 pending_out_of_game_reports = 16;
	optional uint32 automated_penalty_date = 17;
}

message CSODOTAGameHeroStandings {
	optional uint32 account_id = 1 [(key_field) = true];
	optional uint32 hero_id = 2 [(key_field) = true];
	optional uint32 wins = 3;
	optional uint32 losses = 4;
	optional float hero_performance = 5;
	optional float hero_variance = 6;
}

message CSODOTAParty {
	enum State {
		UI = 0;
		FINDING_MATCH = 1;
		IN_MATCH = 2;
	}

	optional uint64 party_id = 1 [(key_field) = true];
	optional fixed64 leader_id = 2;
	repeated fixed64 member_ids = 3;
	optional uint32 game_modes = 4;
	repeated fixed64 pending_invites = 5;
	optional .CSODOTAParty.State state = 6 [default = UI];
	optional uint32 started_matchmaking_time = 7;
	optional uint32 matchgroups = 11;
	optional uint32 prevent_match_until_date = 18;
	optional uint32 prevent_match_account_id = 19;
	optional .MatchType match_type = 21 [default = MATCH_TYPE_RANKED];
	optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
	optional uint32 team_id = 23;
	optional uint32 match_disabled_until_date = 24;
	optional uint32 match_disabled_account_id = 25;
	optional uint32 matchmaking_max_range_minutes = 26;
}

message CSODOTAPartyInternal {
	optional string search_key = 1;
}

message CSODOTAPartyMemcached {
	optional .CSODOTAParty party = 1;
	optional .CSODOTAPartyInternal internal = 2;
}

message CSODOTAPartyInvite {
	message PartyMember {
		optional string name = 1;
		optional fixed64 steam_id = 2;
		optional uint32 avatar = 3;
	}

	optional uint64 group_id = 1 [(key_field) = true];
	optional fixed64 sender_id = 2;
	optional string sender_name = 3;
	repeated .CSODOTAPartyInvite.PartyMember members = 4;
}

message CDOTALobbyMember {
	optional fixed64 id = 1 [(key_field) = true];
	optional uint32 hero_id = 2;
	optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
	optional bool connected_to_game_server = 4;
	optional string name = 6;
	optional uint32 slot = 7;
	optional float latitude = 8;
	optional float longitude = 9;
	optional .DOTALobbyReadyState ready_state = 11 [default = DOTALobbyReadyState_UNDECLARED];
	optional uint64 party_id = 12;
	optional uint32 meta_level = 13;
	optional uint32 meta_xp = 14;
	optional uint32 meta_xp_awarded = 15;
	optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
	optional uint32 channel = 17;
	optional uint32 prize_def_index = 18;
}

message CLobbyTeamDetails {
	optional string team_name = 1;
	optional string team_tag = 3;
	optional uint32 team_id = 4;
	optional uint64 team_logo = 5;
	optional uint64 team_base_logo = 6;
	optional uint64 team_banner_logo = 7;
	optional bool complete_team = 8;
}

message CLobbyPendingPlayerReport {
	optional uint32 account_id = 1;
	optional fixed32 date = 2;
}

message CLobbyTimedRewardDetails {
	optional uint64 item_id = 1;
	optional uint32 item_def_index = 2;
	optional bool is_supply_crate = 3;
	optional bool is_timed_drop = 4;
	optional uint32 account_id = 5;
}

message CSODOTALobby {
	enum State {
		UI = 0;
		READYUP = 4;
		SERVERSETUP = 1;
		RUN = 2;
		POSTGAME = 3;
		NOTREADY = 5;
		SERVERASSIGN = 6;
	}

	enum LobbyType {
		INVALID = -1;
		MATCH = 0;
		PRACTICE = 1;
		TOURNAMENT = 2;
		TUTORIAL = 3;
		COOP_BOT_MATCH = 4;
		TEAM_MATCH = 5;
	}

	optional uint64 lobby_id = 1 [(key_field) = true];
	repeated .CDOTALobbyMember members = 2;
	repeated .CDOTALobbyMember left_members = 7;
	optional fixed64 leader_id = 11;
	optional fixed64 server_id = 6 [default = 0];
	optional uint32 game_mode = 3;
	repeated fixed64 pending_invites = 10;
	optional .CSODOTALobby.State state = 4 [default = UI];
	optional string connect = 5;
	optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
	optional bool allow_cheats = 13;
	optional bool fill_with_bots = 14;
	optional bool intro_mode = 15;
	optional string game_name = 16;
	repeated .CLobbyTeamDetails team_details = 17;
	optional uint32 tutorial_lesson = 18;
	optional uint32 tournament_id = 19;
	optional uint32 tournament_game_id = 20;
	optional uint32 server_region = 21 [default = 0];
	optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
	optional uint32 num_spectators = 23;
	optional uint32 tower_state = 24;
	optional uint32 matchgroup = 25;
	optional bool leaver_detected = 27;
	optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
	optional uint32 match_id = 30;
	optional bool allow_spectating = 31 [default = true];
	optional .DOTABotDifficulty bot_difficulty = 36 [default = BOT_DIFFICULTY_HARD];
	optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
	repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
	optional string pass_key = 39;
	optional float drop_rate_bonus = 40;
	repeated .DOTABotDifficulty bot_slot_difficulty = 41;
	optional uint32 leagueid = 42;
	optional uint32 penalty_level_radiant = 43 [default = 0];
	optional uint32 penalty_level_dire = 44 [default = 0];
	optional uint32 load_game_id = 45;
	optional uint32 series_type = 46;
	optional uint32 radiant_series_wins = 47;
	optional uint32 dire_series_wins = 48;
	optional uint32 loot_generated = 49;
	optional uint32 loot_awarded = 50;
}

message CSODOTALobbyInternal {
	optional string search_key = 1;
	repeated .CLobbyPendingPlayerReport pending_player_reports = 2;
	optional uint32 average_rank = 3;
	optional fixed32 replay_salt = 4;
	optional bool disable_radiant_automatic_team_detection = 5;
	optional bool disable_dire_automatic_team_detection = 6;
	optional uint32 final_match_duration = 7;
	optional bool submitted_match_history = 8;
}

message CSODOTALobbyMemcached {
	optional .CSODOTALobby lobby = 1;
	optional .CSODOTALobbyInternal internal = 2;
}

message CMsgConnectedPlayers {
	message Player {
		optional fixed64 steam_id = 1;
		optional uint32 hero_id = 2;
	}

	repeated .CMsgConnectedPlayers.Player players = 1;
	optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
	optional uint32 num_spectators = 3;
	optional uint32 tower_state = 4;
}

message CMsgStartFindingMatch {
	optional string key = 1;
	optional uint32 matchgroups = 2 [default = 4294967295];
	optional uint32 client_version = 3;
	optional uint32 game_modes = 4 [default = 4294967295];
	optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
	optional .MatchType match_type = 6 [default = MATCH_TYPE_RANKED];
}

message CMsgStopFindingMatch {
}

message CMsgReadyUp {
	optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
}

message CMsgReadyUpStatus {
	optional fixed64 lobby_id = 1;
	repeated uint32 accepted_ids = 2;
	repeated uint32 declined_ids = 3;
}

message CMsgMatchmakingSearchCountRequest {
}

message CMsgMatchmakingSearchCountResponse {
	repeated uint32 searching_players_by_group = 1;
}

message CSourceTVGame {
	message Player {
		optional fixed64 steam_id = 1;
		optional string name = 2;
		optional uint32 hero_id = 3;
	}

	optional uint32 source_tv_public_addr = 1;
	optional uint32 source_tv_private_addr = 2;
	optional uint32 source_tv_port = 3;
	repeated .CSourceTVGame.Player good_players = 14;
	repeated .CSourceTVGame.Player bad_players = 15;
	repeated .CSourceTVGame.Player other_players = 16;
	optional string game_name = 7;
	repeated .CLobbyTeamDetails team_details = 9;
	optional uint32 num_spectators = 10;
	optional uint32 tournament_id = 11;
	optional uint32 tournament_game_id = 12;
	optional uint32 tower_state = 13;
	optional float tv_broadcast_time = 17;
	optional float game_time = 18;
	optional fixed64 server_steamid = 19;
	optional uint32 leagueid = 20;
}

message CMsgSourceTVGamesResponse {
	repeated .CSourceTVGame games = 1;
	optional uint32 num_total_games = 2;
}

message CMsgFindSourceTVGames {
	optional string search_key = 1;
	optional uint32 start = 2;
	optional uint32 num_games = 3;
	optional uint32 leagueid = 4;
	optional uint32 heroid = 5;
	optional bool diretide = 6;
}

message CMsgSpectateFriendGame {
	optional fixed64 steam_id = 1;
}

message CMsgSpectateFriendGameResponse {
	optional fixed64 server_steamid = 4;
}

message CMsgAbandonCurrentGame {
}

message CMsgGameServerInfo {
	enum ServerType {
		UNSPECIFIED = 0;
		GAME = 1;
		PROXY = 2;
	}

	optional fixed32 server_public_ip_addr = 1;
	optional fixed32 server_private_ip_addr = 2;
	optional uint32 server_port = 3;
	optional uint32 server_tv_port = 4;
	optional string server_key = 5;
	optional bool server_hibernation = 6;
	optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
	optional uint32 server_region = 8;
	optional float server_loadavg = 9;
	optional float server_tv_broadcast_time = 10;
	optional float server_game_time = 11;
	optional fixed64 server_relay_connected_steam_id = 12;
	optional uint32 relay_slots_max = 13;
	optional int32 relays_connected = 14;
	optional int32 relay_clients_connected = 15;
	optional fixed64 relayed_game_server_steam_id = 16;
	optional uint32 parent_relay_count = 17;
	optional fixed64 tv_secret_code = 18;
}

message CMsgLeaverDetected {
	optional fixed64 steam_id = 1;
	optional uint32 leaver_status = 2;
}

message CMsgLeaverDetectedResponse {
	optional uint32 result = 1;
}

message CMsgForceSOCacheResend {
}

message CMsgPracticeLobbySetDetails {
	optional uint64 lobby_id = 1;
	optional string game_name = 2;
	repeated .CLobbyTeamDetails team_details = 3;
	optional uint32 server_region = 4;
	optional uint32 game_mode = 5;
	optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
	optional .DOTABotDifficulty bot_difficulty = 9 [default = BOT_DIFFICULTY_MEDIUM];
	optional bool allow_cheats = 10;
	optional bool fill_with_bots = 11;
	optional bool intro_mode = 12;
	optional bool allow_spectating = 13;
	optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
	optional string pass_key = 15;
	optional uint32 leagueid = 16;
	optional uint32 penalty_level_radiant = 17;
	optional uint32 penalty_level_dire = 18;
	optional uint32 load_game_id = 19;
	optional uint32 series_type = 20;
	optional uint32 radiant_series_wins = 21;
	optional uint32 dire_series_wins = 22;
}

message CMsgPracticeLobbyCreate {
	optional string search_key = 1;
	optional bool tournament_game = 2;
	optional uint32 tournament_game_id = 3;
	optional uint32 tournament_id = 4;
	optional string pass_key = 5;
	optional uint32 client_version = 6;
	optional .CMsgPracticeLobbySetDetails lobby_details = 7;
}

message CMsgPracticeLobbySetTeamSlot {
	optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
	optional uint32 slot = 2;
	optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_INVALID];
}

message CMsgPracticeLobbyJoinBroadcastChannel {
	optional uint32 channel = 1;
}

message CMsgPracticeLobbyKick {
	optional uint32 account_id = 3;
}

message CMsgPracticeLobbyLeave {
}

message CMsgPracticeLobbyLaunch {
	optional uint32 client_version = 5;
}

message CMsgApplyTeamToPracticeLobby {
}

message CMsgPracticeLobbyList {
	optional bool tournament_games = 1;
	optional string pass_key = 2;
}

message CMsgPracticeLobbyListResponseEntry {
	message CLobbyMember {
		optional uint32 account_id = 1;
		optional string player_name = 2;
	}

	optional uint64 id = 1 [(key_field) = true];
	optional uint32 tournament_id = 3;
	optional uint32 tournament_game_id = 4;
	repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
	optional bool requires_pass_key = 6;
	optional uint32 leader_account_id = 7;
}

message CMsgPracticeLobbyListResponse {
	optional bool tournament_games = 1;
	repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
}

message CMsgPracticeLobbyJoin {
	optional uint64 lobby_id = 1;
	optional uint32 client_version = 2;
	optional string pass_key = 3;
}

message CMsgPracticeLobbyJoinResponse {
	optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
}

message CMsgFriendPracticeLobbyListRequest {
	repeated uint32 friends = 1;
}

message CMsgFriendPracticeLobbyListResponse {
	repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
}

message CMsgSetAvatar {
	optional uint32 avatar = 1;
}

message CMsgRequestInternationalTicket {
}

message CMsgTrackedEvent {
	optional uint64 submitter_id = 1 [(key_field) = true];
	optional uint32 event_id = 2 [(key_field) = true];
	optional fixed64 time_submitted = 3 [(key_field) = true];
	optional uint32 event_type = 4 [(key_field) = true];
	repeated uint32 vars_uint32 = 5;
	repeated uint64 vars_uint64 = 6;
	repeated int32 vars_int32 = 7;
	repeated int64 vars_int64 = 8;
	repeated float vars_float = 9;
	repeated double vars_double = 10;
}

message CMsgSendTrackedEvents {
	repeated .CMsgTrackedEvent events = 1;
}

message CMsgGameMatchSignOut {
	message CTeam {
		message CPlayer {
			optional fixed64 account_id = 1;
			optional uint32 fake_client_id = 2;
			optional uint32 hero_id = 3;
			repeated uint32 items = 4;
			optional uint32 gold = 5;
			optional uint32 kills = 6;
			optional uint32 deaths = 7;
			optional uint32 assists = 8;
			optional uint32 leaver_status = 9;
			optional uint32 last_hits = 10;
			optional uint32 denies = 11;
			optional uint32 gold_per_min = 12;
			optional uint32 xp_per_minute = 13;
			optional uint32 gold_spent = 14;
			optional uint32 level = 15;
			optional uint32 hero_damage = 16;
			optional uint32 tower_damage = 17;
			optional uint32 hero_healing = 18;
			optional uint32 time_last_seen = 19;
			optional uint32 support_ability_value = 20;
			optional uint64 party_id = 21;
			optional float scaled_kills = 24;
			optional float scaled_deaths = 25;
			optional float scaled_assists = 26;
			optional uint32 claimed_farm_gold = 27;
			optional uint32 support_gold = 28;
			optional uint32 claimed_denies = 29;
			optional uint32 claimed_misses = 30;
			optional uint32 misses = 31;
		}

		repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
	}

	optional uint32 match_id = 1 [(key_field) = true];
	optional uint32 duration = 2;
	optional bool good_guys_win = 3;
	optional fixed32 date = 4;
	repeated uint32 num_players = 5;
	repeated .CMsgGameMatchSignOut.CTeam teams = 6;
	optional string computer_name = 7;
	repeated uint32 tower_status = 8;
	repeated uint32 barracks_status = 9;
	optional uint32 cluster = 10;
	optional string server_addr = 11;
	optional uint32 first_blood_time = 12;
	optional float game_balance = 13;
	optional uint32 event_score = 14;
}

message CMsgGameMatchSignoutResponse {
	optional uint32 match_id = 1;
	optional fixed32 replay_salt = 2;
	repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
	repeated .CDOTALobbyMember xp_reward_details = 4;
	optional uint32 leagueid = 5;
}

message CMsgGameChatLog {
	message CChatLine {
		optional uint32 account_id = 1;
		optional uint32 team_only = 2;
		optional string text = 3;
		optional uint32 game_time = 4;
	}

	optional uint32 match_id = 1;
	repeated .CMsgGameChatLog.CChatLine lines = 2;
}

message CMsgTutorialLobbyCreate {
	optional string search_key = 1;
	optional uint32 tutorial_lesson = 2;
	optional uint32 client_version = 3;
}

message CMsgInitialQuestionnaireResponse {
	optional uint32 initial_skill = 1;
}

message CMsgInterGCSurgeTest {
}

message CMsgInterGCProfile {
	optional bool start = 1;
}

message CMsgDOTATournament {
	message Team {
		optional uint32 team_id = 1;
		optional string team_name = 2;
		optional string team_abbrev = 3;
		repeated uint32 players = 4;
		optional uint32 seed = 5;
		optional uint64 team_logo = 6;
	}

	message Game {
		message ReplayURL {
			optional uint32 provider_id = 1;
			optional uint32 stream_id = 2;
			optional string url = 3;
			optional string description = 4;
		}

		optional uint32 game_id = 1;
		optional uint32 good_team_id = 2;
		optional uint32 bad_team_id = 3;
		optional fixed64 lobby_id = 4;
		optional uint32 match_id = 5;
		optional string game_name = 6;
		optional bool live_stream = 7;
		optional string message = 9;
		optional bool results_final = 10;
		repeated .CMsgDOTATournament.Game.ReplayURL replay_urls = 11;
	}

	repeated .CMsgDOTATournament.Team teams = 1;
	repeated .CMsgDOTATournament.Game games = 2;
	optional uint64 gid = 3;
}

message CMsgDOTATournamentRequest {
	optional uint32 tournament_id = 1;
	optional uint64 client_tournament_gid = 2;
}

message CMsgDOTATournamentResponse {
	optional uint32 result = 1 [default = 2];
	optional .CMsgDOTATournament tournament = 2;
}

message CMsgDOTAClearTournamentGame {
	optional uint32 tournament_id = 1;
	optional uint32 game_id = 2;
}

message CMsgDOTAMatch {
	message Player {
		optional uint32 account_id = 1;
		optional uint32 player_slot = 2;
		optional uint32 hero_id = 3;
		optional uint32 item_0 = 4;
		optional uint32 item_1 = 5;
		optional uint32 item_2 = 6;
		optional uint32 item_3 = 7;
		optional uint32 item_4 = 8;
		optional uint32 item_5 = 9;
		optional float expected_team_contribution = 10;
		optional float scaled_metric = 11;
		optional uint32 previous_rank = 12;
		optional uint32 rank_change = 13;
		optional uint32 kills = 14;
		optional uint32 deaths = 15;
		optional uint32 assists = 16;
		optional uint32 leaver_status = 17;
		optional uint32 gold = 18;
		optional uint32 last_hits = 19;
		optional uint32 denies = 20;
		optional uint32 gold_per_min = 21;
		optional uint32 XP_per_min = 22;
		optional uint32 gold_spent = 23;
		optional uint32 hero_damage = 24;
		optional uint32 tower_damage = 25;
		optional uint32 hero_healing = 26;
		optional uint32 level = 27;
		optional uint32 time_last_seen = 28;
		optional string player_name = 29;
		optional uint32 support_ability_value = 30;
		optional bool feeding_detected = 32;
		optional uint32 search_rank = 34;
		optional uint32 search_rank_uncertainty = 35;
		optional uint32 rank_uncertainty_change = 36;
		optional uint32 hero_play_count = 37;
		optional fixed64 party_id = 38;
		optional float scaled_kills = 39;
		optional float scaled_deaths = 40;
		optional float scaled_assists = 41;
		optional uint32 claimed_farm_gold = 42;
		optional uint32 support_gold = 43;
		optional uint32 claimed_denies = 44;
		optional uint32 claimed_misses = 45;
		optional uint32 misses = 46;
	}

	optional uint32 season = 1;
	optional bool good_guys_win = 2;
	optional uint32 duration = 3;
	optional fixed32 startTime = 4;
	repeated .CMsgDOTAMatch.Player players = 5;
	optional uint32 match_id = 6;
	repeated uint32 tower_status = 8;
	repeated uint32 barracks_status = 9;
	optional uint32 cluster = 10;
	optional uint32 first_blood_time = 12;
	optional fixed32 replay_salt = 13;
	optional fixed32 server_ip = 14;
	optional uint32 server_port = 15;
	optional uint32 lobby_type = 16;
	optional uint32 human_players = 17;
	optional uint32 average_skill = 18;
	optional float game_balance = 19;
	optional uint32 radiant_team_id = 20;
	optional uint32 dire_team_id = 21;
	optional uint32 leagueid = 22;
	optional string radiant_name = 23;
	optional string dire_name = 24;
	optional uint64 radiant_logo = 25;
	optional uint64 dire_logo = 26;
	optional uint32 radiant_team_complete = 27;
	optional uint32 dire_team_complete = 28;
	optional uint32 positive_votes = 29;
	optional uint32 negative_votes = 30;
	optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
}

message CMsgDOTAPlayerMatchHistory {
	repeated uint32 match_ids = 1;
}

message CMsgDOTAMatchHistoryFilter {
	repeated uint32 match_ids = 1;
	optional uint32 newest_match_id_at_last_query = 2;
	optional uint32 time_last_query = 3;
}

message CMsgDOTARequestMatches {
	enum SkillLevel {
		Any = 0;
		Normal = 1;
		High = 2;
		VeryHigh = 3;
	}

	optional string player_name = 1;
	optional uint32 hero_id = 2;
	optional uint32 game_mode = 3;
	optional fixed32 date_min = 6;
	optional fixed32 date_max = 7;
	optional bool friends_only = 8;
	optional bool recently_played_only = 9;
	optional uint32 matches_requested = 10;
	optional uint32 start_at_match_id = 11;
	optional fixed32 min_players = 12;
	optional uint32 request_id = 13;
	optional bool tournament_games_only = 14;
	optional uint32 account_id = 15;
	optional uint32 league_id = 16;
	optional .CMsgDOTARequestMatches.SkillLevel skill = 17 [default = Any];
}

message CMsgDOTARequestMatchesResponse {
	repeated .CMsgDOTAMatch matches = 1;
	optional uint32 request_id = 2;
	optional uint32 total_results = 3;
	optional uint32 results_remaining = 4;
}

message CMsgDOTAPopup {
	enum PopupID {
		KICKED_FROM_LOBBY = 0;
		KICKED_FROM_PARTY = 1;
		KICKED_FROM_TEAM = 2;
		TEAM_WAS_DISBANDED = 3;
		TEAM_MATCHMAKE_ALREADY_MATCH = 4;
		TEAM_MATCHMAKE_ALREADY_FINDING = 5;
		TEAM_MATCHMAKE_FULL = 6;
		TEAM_MATCHMAKE_FAIL_ADD = 7;
		TEAM_MATCHMAKE_FAIL_ADD_CURRENT = 8;
		TEAM_MATCHMAKE_FAILED_TEAM_MEMBER = 9;
		TEAM_MATCHMAKE_ALREADY_GAME = 10;
		TEAM_MATCHMAKE_FAIL_GET_PARTY = 11;
		MATCHMAKING_DISABLED = 12;
		INVITE_DENIED = 13;
		PARTY_FULL = 14;
	}

	optional .CMsgDOTAPopup.PopupID id = 1 [default = KICKED_FROM_LOBBY];
	optional string custom_text = 2;
}

message CMsgDOTATeamMemberSDO {
	optional uint32 account_id = 1;
	optional uint32 team_id = 2;
}

message CMsgDOTATeamMember {
	optional uint32 account_id = 1;
	optional uint32 team_id = 2;
	optional uint32 permissions = 3;
	optional uint32 time_joined = 4;
}

message CMsgDOTATeam {
	repeated .CMsgDOTATeamMember members = 1;
	optional uint32 team_id = 2;
	optional string name = 3;
	optional string tag = 4;
	optional uint32 admin_id = 5;
	optional uint32 time_created = 6;
	optional bool disbanded = 7;
	optional uint32 wins = 8;
	optional uint32 losses = 9;
	optional uint32 rank = 10;
	optional uint64 logo = 11;
	optional uint64 base_logo = 12;
	optional uint64 banner_logo = 13;
	optional uint64 sponsor_logo = 14;
	optional string country_code = 15;
	optional string url = 16;
	optional uint32 fullgamesplayed = 17;
	repeated uint32 leagues = 18;
}

message CMsgDOTACreateTeam {
	optional string name = 1;
	optional string tag = 2;
	optional uint64 logo = 3;
	optional uint64 base_logo = 4;
	optional uint64 banner_logo = 5;
	optional uint64 sponsor_logo = 6;
	optional string country_code = 7;
	optional string url = 8;
}

message CMsgDOTACreateTeamResponse {
	enum Result {
		INVALID = -1;
		SUCCESS = 0;
		NAME_EMPTY = 1;
		NAME_BAD_CHARACTERS = 2;
		NAME_TAKEN = 3;
		NAME_TOO_LONG = 4;
		TAG_EMPTY = 5;
		TAG_BAD_CHARACTERS = 6;
		TAG_TAKEN = 7;
		TAG_TOO_LONG = 8;
		CREATOR_BUSY = 9;
		UNSPECIFIED_ERROR = 10;
		CREATOR_TEAM_LIMIT_REACHED = 11;
		NO_LOGO = 12;
		CREATOR_TEAM_CREATION_COOLDOWN = 13;
	}

	repeated .CMsgDOTACreateTeamResponse.Result results = 1;
}

message CMsgDOTAEditTeamLogo {
	optional uint64 logo = 1;
	optional uint64 base_logo = 2;
	optional uint64 banner_logo = 3;
	optional uint64 sponsor_logo = 4;
}

message CMsgDOTAEditTeamLogoResponse {
	enum Result {
		INVALID = -1;
		SUCCESS = 0;
		CREATOR_BUSY = 9;
		UNSPECIFIED_ERROR = 10;
		NO_LOGO = 12;
	}

	repeated .CMsgDOTAEditTeamLogoResponse.Result results = 1;
}

message CMsgDOTAEditTeamDetails {
	optional string country_code = 1;
	optional string url = 2;
}

message CMsgDOTAEditTeamDetailsResponse {
	enum Result {
		INVALID = -1;
		SUCCESS = 0;
		CREATOR_BUSY = 9;
		UNSPECIFIED_ERROR = 10;
	}

	repeated .CMsgDOTAEditTeamDetailsResponse.Result results = 1;
}

message CMsgDOTADisbandTeam {
}

message CMsgDOTADisbandTeamResponse {
	enum Result {
		SUCCESS = 0;
		FAILURE = 1;
	}

	optional .CMsgDOTADisbandTeamResponse.Result result = 1 [default = SUCCESS];
	optional string team_name = 2;
}

message CMsgDOTARequestTeamData {
}

message CMsgDOTARequestTeamDataResponse {
	enum Result {
		SUCCESS = 0;
		FAILURE = 1;
	}

	optional .CMsgDOTARequestTeamDataResponse.Result result = 1 [default = SUCCESS];
	optional .CMsgDOTATeamData data = 2;
}

message CMsgDOTATeamData {
	optional bool on_team = 1;
	optional .CMsgDOTATeam team = 2;
}

message CMsgDOTATeamProfileRequest {
	optional uint32 team_id = 1;
}

message CMsgDOTATeamProfileResponse {
	optional uint32 eresult = 1;
	optional .CMsgDOTATeam team = 2;
}

message CMsgDOTAProTeamListRequest {
}

message CMsgDOTAProTeamListResponse {
	message TeamEntry {
		optional uint32 team_id = 1;
		optional string tag = 2;
		optional uint32 time_created = 3;
		optional uint64 logo = 4;
		optional string country_code = 5;
	}

	repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
	optional uint32 eresult = 2;
}

message CMsgDOTAInitiateTeamInvite {
	optional uint32 account_id = 1;
}

message CMsgDOTAInitiateTeamInviteResponse {
	enum Result {
		SUCCESS = 0;
		MEMBER_LIMIT = 1;
		INVITEE_NOT_AVAILABLE = 2;
		INVITEE_BUSY = 3;
		INVITEE_ALREADY_ON_A_TEAM = 4;
		UNSPECIFIED_ERROR = 5;
	}

	optional .CMsgDOTAInitiateTeamInviteResponse.Result result = 1 [default = SUCCESS];
	optional string invitee_name = 2;
}

message CMsgDOTATeamInvite {
	optional uint32 inviter_account_id = 1;
	optional string team_name = 2;
	optional string team_tag = 3;
	optional uint64 logo = 4;
}

message CMsgDOTATeamInviteReply {
	enum Reply {
		JOIN = 0;
		REJECT = 1;
		TIMEOUT = 2;
	}

	optional .CMsgDOTATeamInviteReply.Reply reply = 1 [default = JOIN];
}

message CMsgDOTATeamInviteReplyResponse {
	enum Result {
		SUCCESS = 0;
		FAILURE = 1;
	}

	optional .CMsgDOTATeamInviteReplyResponse.Result result = 1 [default = SUCCESS];
	optional string team_name = 2;
}

message CMsgDOTATeamInviteComplete {
	enum Result {
		JOINED = 0;
		REJECTION = 1;
		TIMEOUT = 2;
		UNSPECIFIED_ERROR = 3;
	}

	optional .CMsgDOTATeamInviteComplete.Result result = 1 [default = JOINED];
	optional string invitee_name = 2;
}

message CMsgDOTAKickTeamMember {
	optional uint32 account_id = 1;
}

message CMsgDOTAKickTeamMemberResponse {
	enum Result {
		SUCCESS = 0;
		FAILURE = 1;
	}

	optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
}

message CMsgDOTATransferTeamAdmin {
	optional uint32 new_admin_account_id = 1;
}

message CMsgDOTALeaveTeam {
}

message CMsgDOTALeaveTeamResponse {
	enum Result {
		SUCCESS = 0;
		FAILURE = 1;
	}

	optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
	optional string team_name = 2;
}

message CMsgDOTASuggestTeamMatchmaking {
	optional string teammate_name = 1;
}

message CMsgDOTABetaParticipationRequest {
}

message CMsgDOTABetaParticipation {
	optional uint32 access_rights = 1;
	optional fixed32 beta_join_time = 2;
}

message CMsgDOTAGenericResult {
	optional uint32 eresult = 1 [default = 2];
}

message CMsgDOTABroadcastNotification {
	optional string message = 1;
}

message CMsgDOTALiveScoreboardUpdate {
	message Team {
		message Player {
			enum DOTAUltimateState {
				k_EDOTAUltimateStateNotLearned = 0;
				k_EDOTAUltimateStateCooldown = 1;
				k_EDOTAUltimateStateNeedsMana = 2;
				k_EDOTAUltimateStateReady = 3;
			}

			optional uint32 player_slot = 1;
			optional string player_name = 2;
			optional string hero_name = 3;
			optional uint32 hero_id = 4;
			optional uint32 kills = 5;
			optional uint32 deaths = 6;
			optional uint32 assists = 7;
			optional uint32 last_hits = 8;
			optional uint32 denies = 9;
			optional uint32 gold = 10;
			optional uint32 level = 11;
			optional float gold_per_min = 12;
			optional float xp_per_min = 13;
			optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
			optional float ultimate_cooldown = 15;
			optional uint32 item0 = 16;
			optional uint32 item1 = 17;
			optional uint32 item2 = 18;
			optional uint32 item3 = 19;
			optional uint32 item4 = 20;
			optional uint32 item5 = 21;
			optional uint32 respawn_timer = 22;
		}

		repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
		optional uint32 score = 2;
	}

	optional uint32 tournament_id = 1;
	optional uint32 tournament_game_id = 2;
	optional float duration = 3;
	optional int32 hltv_delay = 4;
	optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
	optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
	optional uint32 roshan_respawn_timer = 7;
}

message CMsgDOTAJoinChatChannel {
	optional string persona_name = 1;
	optional string channel_name = 2;
	optional string password = 3;
	optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
}

message CMsgDOTALeaveChatChannel {
	optional string channel_name = 1;
}

message CMsgDOTAChatMessage {
	optional uint32 account_id = 1;
	optional string channel_name = 2;
	optional string persona_name = 3;
	optional string text = 4;
	optional uint32 timestamp = 5;
	optional uint32 suggest_invite_account_id = 6;
	optional string suggest_invite_name = 7;
}

message CMsgDOTASetChatChannelVerbosity {
	message ChannelVerbosity {
		optional fixed64 channel_id = 1;
		optional uint32 suppression_flags = 2 [default = 0];
	}

	enum DOTAChatChannelSuppressNotificationsFlags_t {
		DOTAChannel_AllVerbose = 0;
		DOTAChannelIgnore_OthersJoined = 1;
	}

	repeated .CMsgDOTASetChatChannelVerbosity.ChannelVerbosity verbosities = 1;
}

message CMsgDOTAChatMember {
	optional fixed64 steam_id = 1;
	optional string persona_name = 2;
}

message CMsgDOTAJoinChatChannelResponse {
	optional uint32 response = 1;
	optional string channel_name = 2;
	optional fixed64 channel_id = 3;
	optional uint32 max_members = 4;
	repeated .CMsgDOTAChatMember members = 5;
}

message CMsgDOTAChatChannelFullUpdate {
	optional fixed64 channel_id = 1;
	repeated .CMsgDOTAChatMember members = 2;
}

message CMsgDOTAOtherJoinedChatChannel {
	optional fixed64 channel_id = 1;
	optional string persona_name = 2;
	optional fixed64 steam_id = 3;
}

message CMsgDOTAOtherLeftChatChannel {
	optional fixed64 channel_id = 1;
	optional fixed64 steam_id = 2;
}

message CMsgDOTARequestDefaultChatChannel {
}

message CMsgDOTARequestDefaultChatChannelResponse {
	optional string channel_name = 1;
	optional fixed64 channel_id = 2;
}

message CMsgDOTARequestChatChannelList {
}

message CMsgDOTARequestChatChannelListResponse {
	message ChatChannel {
		optional string channel_name = 1;
		optional uint32 num_members = 2;
		optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
	}

	repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
}

message CMsgDOTAPlayerReports {
	message PlayerReport {
		optional uint32 report_id = 1;
		optional uint32 reporter_account_id = 2;
		optional uint32 target_account_id = 3;
		optional uint32 report_flags = 4;
		optional uint32 match_id = 5;
		optional fixed32 date = 6;
		optional string comment = 7;
	}

	repeated .CMsgDOTAPlayerReports.PlayerReport reports = 1;
}

message CMsgDOTAReportsRemainingRequest {
}

message CMsgDOTAReportsRemainingResponse {
	optional uint32 num_positive_reports_remaining = 1;
	optional uint32 num_negative_reports_remaining = 2;
	optional uint32 num_positive_reports_total = 3;
	optional uint32 num_negative_reports_total = 4;
}

message CMsgDOTASubmitPlayerReport {
	optional uint32 target_account_id = 1;
	optional uint32 report_flags = 2;
	optional string comment = 5;
}

message CMsgDOTASubmitPlayerReportResponse {
	optional uint32 target_account_id = 1;
	optional uint32 report_flags = 2;
	optional uint32 result = 3;
}

message CMsgDOTAReportCountsRequest {
	optional uint32 target_account_id = 1;
}

message CMsgDOTAReportCountsResponse {
	optional uint32 target_account_id = 1;
	optional uint32 leadership_count = 2;
	optional uint32 teaching_count = 3;
	optional uint32 friendly_count = 4;
	optional uint32 forgiving_count = 5;
}

message CMsgDOTARequestPlayerResources {
	optional fixed64 steam_id = 1;
	optional uint32 player_id = 2;
}

message CMsgDOTARequestPlayerResourcesResponse {
	optional fixed64 steam_id = 1;
	optional uint32 rank = 2;
	optional uint32 player_id = 3;
	optional bool prevent_text_chat = 4;
	optional bool prevent_voice_chat = 5;
	optional bool match_making_ban = 6;
}

message CMsgDOTAKickedFromMatchmakingQueue {
	optional .MatchType match_type = 1 [default = MATCH_TYPE_RANKED];
}

message CMsgDOTARequestSaveGames {
	optional uint32 server_region = 1;
}

message CMsgDOTARequestSaveGamesServer {
	optional fixed64 steam_id = 1;
}

message CMsgDOTARequestSaveGamesResponse {
	message SaveGame {
		message Player {
			optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
			optional string name = 2;
			optional string hero = 3;
		}

		message SaveInstance {
			message PlayerPositions {
				optional float x = 1;
				optional float y = 2;
			}

			optional uint32 save_number = 1;
			optional uint32 game_time = 2;
			optional uint32 team1_score = 3;
			optional uint32 team2_score = 4;
			repeated .CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance.PlayerPositions player_positions = 5;
			optional uint32 save_id = 6;
		}

		optional fixed64 lobby_id = 1;
		optional uint32 save_time = 2;
		repeated .CMsgDOTARequestSaveGamesResponse.SaveGame.Player players = 3;
		repeated .CMsgDOTARequestSaveGamesResponse.SaveGame.SaveInstance save_instances = 4;
	}

	optional fixed64 steam_id = 1;
	repeated .CMsgDOTARequestSaveGamesResponse.SaveGame save_games = 2;
}

message CMsgDOTAPlayerFailedToConnect {
	repeated fixed64 failed_loaders = 1;
}

message CMsgGCToRelayConnect {
	optional uint32 source_tv_public_addr = 1;
	optional uint32 source_tv_private_addr = 2;
	optional uint32 source_tv_port = 3;
	optional uint64 game_server_steam_id = 4;
	optional uint32 parent_count = 5;
	optional fixed64 tv_unique_secret_code = 6;
}

message CMsgGCToRelayConnectResponse {
}

message CMsgWatchGame {
	optional fixed64 server_steamid = 1;
	optional uint32 client_version = 2;
	optional fixed64 watch_server_steamid = 3;
	optional uint64 lobby_id = 4;
}

message CMsgCancelWatchGame {
}

message CMsgWatchGameResponse {
	enum WatchGameResult {
		PENDING = 0;
		READY = 1;
		GAMESERVERNOTFOUND = 2;
		UNAVAILABLE = 3;
		CANCELLED = 4;
		INCOMPATIBLEVERSION = 5;
		MISSINGLEAGUESUBSCRIPTION = 6;
		LOBBYNOTFOUND = 7;
	}

	optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
	optional uint32 source_tv_public_addr = 2;
	optional uint32 source_tv_private_addr = 3;
	optional uint32 source_tv_port = 4;
	optional fixed64 game_server_steamid = 5;
	optional fixed64 watch_server_steamid = 6;
	optional fixed64 watch_tv_unique_secret_code = 7;
}

message CMsgGCBanStatusRequest {
	optional uint32 account_id = 1;
}

message CMsgGCBanStatusResponse {
	optional uint32 result = 1;
	optional bool match_banned = 2;
	optional bool text_chat_banned = 3;
	optional bool voice_chat_banned = 4;
}

message CMsgDOTADailyStats {
	optional fixed32 date = 1;
	optional uint32 hero_id = 2;
	optional uint32 popularity = 3;
}

message CMsgDOTARequestDailyStats {
}

message CMsgGCMatchDetailsRequest {
	optional uint32 match_id = 1;
}

message CMsgGCMatchDetailsResponse {
	optional uint32 result = 1;
	optional .CMsgDOTAMatch match = 2;
	optional .DOTAMatchVote vote = 3 [default = DOTAMatchVote_INVALID];
}

message CMsgDOTAProfileRequest {
	optional uint32 account_id = 1;
	optional bool request_name = 2;
}

message CMsgDOTAProfileResponse {
	message PlayedHero {
		optional uint32 hero_id = 1;
		optional uint32 wins = 2;
	}

	message ShowcaseHero {
		optional uint32 hero_id = 1;
		repeated bytes object_data = 2;
	}

	message LeaguePass {
		optional uint32 league_id = 1;
		optional uint32 item_def = 2;
	}

	message EventTicket {
		optional uint32 event_id = 1;
	}

	optional uint32 result = 1;
	optional .CSODOTAGameAccountClient game_account_client = 2;
	repeated .CMsgDOTAMatch latest_matches = 3;
	repeated .CMsgDOTAProfileResponse.PlayedHero heroes = 4;
	optional string player_name = 5;
	optional string team_name = 6;
	optional string team_tag = 7;
	optional uint64 team_logo = 8;
	optional .CMsgDOTAProfileResponse.ShowcaseHero showcase_hero = 9;
	repeated .CMsgDOTAProfileResponse.LeaguePass league_passes = 10;
	repeated .CMsgDOTAProfileResponse.EventTicket event_tickets = 11;
	optional uint32 team_id = 12;
}

message CMsgDOTAIntraGCRankRequest {
	optional uint32 account_id = 1;
}

message CMsgDOTAIntraGCRankResponse {
	optional uint32 rank = 1;
}

message CMsgDOTANotifySuccessfulReport {
}

message CMsgDOTAClearNotifySuccessfulReport {
}

message CMsgUnpickedHeroListRequest {
}

message CMsgUnpickedHeroListResponse {
	repeated uint32 hero_ids = 1;
}

message CMsgRemoveFromUnpickedHeroList {
	optional uint32 hero_id = 1;
}

message CMsgDOTAMatchGroupWaitTimesRequest {
}

message CMsgDOTAMatchGroupWaitTimesResponse {
	repeated uint32 wait_times_by_group = 1;
}

message CItemDropEvent {
	optional uint32 account_id = 1;
	optional uint32 time_stamp = 2;
	optional uint32 def_index = 3;
	optional uint64 item_id = 4;
	optional uint32 games_played_since_last_drop = 5;
	optional uint32 time_played_since_last_drop = 6;
	optional float drop_bonus = 7;
	optional uint32 rarity = 8;
	optional uint32 current_score = 9;
	optional uint32 next_drop_at = 10;
	optional bool is_crate = 11;
	optional bool is_level_reward = 12;
	optional uint32 xp = 13;
	optional uint32 level = 14;
	optional uint32 match_id = 15;
}

message CXPGainEvent {
	optional uint32 match_id = 1;
	optional uint32 account_id = 2;
	optional uint32 time_stamp = 3;
	optional uint32 duration = 4;
	optional uint32 base_xp = 5;
	optional uint32 time_reward_xp = 6;
	optional uint32 drop_rate_bonus_xp = 7;
	optional uint32 final_xp = 8;
	optional float drop_rate_bonus = 9;
	optional bool leveled_up = 10;
}

message CLowPriPenalty {
	optional uint32 match_id = 1;
	optional uint32 account_id = 2;
	optional uint32 time_stamp = 3;
	optional uint32 games_since_report_penalty = 4;
	optional uint32 pending_in_game_reports = 5;
	optional uint32 pending_out_of_game_reports = 6;
	optional uint32 pending_detected_reports = 7;
	optional uint32 report_penalty_count = 8;
	optional uint32 last_penalty_date = 9;
	optional uint32 last_abandon_date = 10;
	optional uint32 abandon_penalty_count = 11;
	optional uint32 completed_game_streak = 12;
	optional uint32 abandon_time_given = 13;
	optional uint32 report_time_given = 14;
	optional uint32 rank = 15;
}

message CMsgDOTAWelcome {
	optional bool spectator_only = 1;
	optional bool allow_team_creation = 2;
	optional bool tournament_admin = 3;
	optional bool tournament_broadcaster = 4;
	optional uint32 store_item_hash = 5;
}

message CSODOTAGameHeroFavorites {
	optional uint32 account_id = 1 [(key_field) = true];
	optional uint32 hero_id = 2 [(key_field) = true];
}

message CMsgDOTAHeroFavoritesAdd {
	optional uint32 hero_id = 1;
}

message CMsgDOTAHeroFavoritesRemove {
	optional uint32 hero_id = 1;
}

message CMsgDOTAPlayerHeroesRecentRequest {
}

message CMsgDOTAPlayerHeroesRecentResponse {
	optional uint32 result = 1;
	repeated uint32 hero_ids = 2;
}

message CDOTAOverview {
	message PlayersByRegion {
		optional int32 region = 1;
		optional int32 total = 2;
		optional int32 in_queue = 3;
		optional int32 in_match = 4;
		optional int32 in_practice = 5;
		optional int32 in_tournament = 6;
		optional int32 in_tutorial = 7;
		optional int32 in_coop = 8;
		optional int32 in_team_match = 9;
		optional int32 spectating = 10;
		optional int32 idle = 11;
	}

	message ServersByRegion {
		optional int32 region = 1;
		optional int32 in_use = 2;
		optional int32 available = 3;
	}

	repeated .CDOTAOverview.PlayersByRegion players_by_region = 1;
	repeated .CDOTAOverview.ServersByRegion game_servers_by_region = 2;
	repeated .CDOTAOverview.ServersByRegion proxy_servers_by_region = 3;
}

message CMsgSetShowcaseHero {
	optional uint32 showcase_hero_id = 1;
}

message CMsgRequestLeagueInfo {
}

message CLeague {
	optional uint32 leagueid = 1;
	optional bool live = 2;
	optional bool freeleague = 3;
}

message CMsgResponseLeagueInfo {
	repeated .CLeague leagues = 1;
}

message CMsgTournamentItemEvent {
	optional fixed32 killer_account_id = 1;
	optional fixed32 victim_account_id = 2;
	optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
	optional int32 tv_delay = 4;
	optional int32 dota_time = 5;
	optional float replay_time = 6;
	optional string loot_list = 7;
	optional uint32 event_team = 8;
	optional uint32 multi_kill_count = 9;
	optional uint32 winner_score = 10;
	optional uint32 loser_score = 11;
}

message CMsgTournamentItemEventResponse {
	optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
	optional string winner_name = 2;
}

message CMsgDOTAMatchVotes {
	message PlayerVote {
		optional uint32 account_id = 1;
		optional uint32 vote = 2;
	}

	optional uint32 match_id = 1;
	repeated .CMsgDOTAMatchVotes.PlayerVote votes = 2;
}

message CMsgCastMatchVote {
	optional uint32 match_id = 1;
	optional .DOTAMatchVote vote = 2 [default = DOTAMatchVote_INVALID];
}

message CMsgRetrieveMatchVote {
	optional uint32 match_id = 1;
	optional uint32 incremental = 2;
}

message CMsgMatchVoteResponse {
	optional uint32 eresult = 1 [default = 2];
	optional .DOTAMatchVote vote = 2 [default = DOTAMatchVote_INVALID];
	optional uint32 positive_votes = 3;
	optional uint32 negative_votes = 4;
}

message CMsgTeamFanfare {
	optional uint32 match_id = 1;
}

message CMsgResponseTeamFanfare {
	optional uint32 fanfare_goodguys = 1;
	optional uint32 fanfare_badguys = 2;
}

message CMsgSpectatorConnect {
	optional fixed64 spectator_id = 1;
}

message CMsgSpectatorDisconnect {
	optional fixed64 spectator_id = 1;
}

message CMsgGameServerUploadSaveGame {
	optional uint32 game_time = 1;
	optional bytes save_game_data = 2;
	optional uint64 lobby_id = 3;
	repeated uint64 player_steam_ids = 4;
}

message CMsgGameServerSaveGameResult {
	enum Result {
		SaveSuccessful = 0;
		SessionNotFound = 1;
		DatabaseError = 2;
		TooBig = 3;
	}

	optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
}

message CMsgGameServerGetLoadGame {
	optional uint32 save_id = 1;
}

message CMsgGameServerGetLoadGameResult {
	optional bytes save_game_data = 1;
}

message CMsgCheckSpectatorOnly {
}

message CMsgCheckSpectatorOnlyResponse {
	optional uint32 eresult = 1 [default = 2];
	optional bool spectator_only = 2;
}

message CMsgDOTAHallOfFame {
	message FeaturedPlayer {
		optional uint32 account_id = 1;
		optional uint32 hero_id = 2;
		optional float average_scaled_metric = 3;
		optional uint32 num_games = 4;
	}

	message FeaturedFarmer {
		optional uint32 account_id = 1;
		optional uint32 hero_id = 2;
		optional uint32 gold_per_min = 3;
		optional uint32 match_id = 4;
	}

	optional uint32 week = 1;
	repeated .CMsgDOTAHallOfFame.FeaturedPlayer featured_players = 2;
	optional .CMsgDOTAHallOfFame.FeaturedFarmer featured_farmer = 3;
}

message CMsgDOTAHallOfFameRequest {
	optional uint32 week = 1;
}

message CMsgDOTAHallOfFameResponse {
	optional .CMsgDOTAHallOfFame hall_of_fame = 1;
	optional uint32 eresult = 2 [default = 2];
}

message CMsgDOTAGenerateDiretidePrizeList {
	optional uint32 prize_list = 1;
}

message CMsgDOTAGenerateDiretidePrizeListResponse {
	repeated uint32 item_defs = 1;
	repeated fixed64 steam_ids = 2;
	optional uint32 prize_list = 3;
}

message CMsgDOTARewardDiretidePrizes {
	optional uint32 team = 1;
	optional uint32 prize_list = 2;
}

message CMsgDOTADiretidePrizesRewardedResponse {
	optional uint32 prize_list = 1;
}

message CMsgDOTADiretidePrizeResponse {
	optional uint32 item_def = 1;
	optional uint32 prize_list = 2;
}

message CMsgDOTAHalloweenHighScoreRequest {
	optional int32 round = 1 [default = -1];
}

message CMsgDOTAHalloweenHighScoreResponse {
	optional uint32 score = 1;
	optional .CMsgDOTAMatch match = 2;
	optional uint32 eresult = 3;
	optional int32 round = 4;
}

