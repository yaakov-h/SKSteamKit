// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "dota_gcmessages.pb.h"

@implementation DotaGcmessagesRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [DotaGcmessagesRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [SteammessagesRoot registerAllExtensions:registry];
    [MatchmakerCommonRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL EDOTAGCMsgIsValidValue(EDOTAGCMsg value) {
  switch (value) {
    case EDOTAGCMsgk_EMsgGCDOTABase:
    case EDOTAGCMsgk_EMsgGCGeneralResponse:
    case EDOTAGCMsgk_EMsgGCGameMatchSignOut:
    case EDOTAGCMsgk_EMsgGCGameMatchSignOutResponse:
    case EDOTAGCMsgk_EMsgGCJoinChatChannel:
    case EDOTAGCMsgk_EMsgGCJoinChatChannelResponse:
    case EDOTAGCMsgk_EMsgGCLeaveChatChannel:
    case EDOTAGCMsgk_EMsgGCOtherJoinedChannel:
    case EDOTAGCMsgk_EMsgGCOtherLeftChannel:
    case EDOTAGCMsgk_EMsgGCRequestMatchHistoryList:
    case EDOTAGCMsgk_EMsgGCMatchHistoryList:
    case EDOTAGCMsgk_EMsgGCGetNews:
    case EDOTAGCMsgk_EMsgGCNewsResponse:
    case EDOTAGCMsgk_EMsgGCStatus:
    case EDOTAGCMsgk_EMsgGCGetRecentMatches:
    case EDOTAGCMsgk_EMsgGCRecentMatchesResponse:
    case EDOTAGCMsgk_EMsgGCFindSourceTVGames:
    case EDOTAGCMsgk_EMsgGCSourceTVGamesResponse:
    case EDOTAGCMsgk_EMsgGCStartFindingMatch:
    case EDOTAGCMsgk_EMsgGCConnectedPlayers:
    case EDOTAGCMsgk_EMsgGCAbandonCurrentGame:
    case EDOTAGCMsgk_EMsgGCStopFindingMatch:
    case EDOTAGCMsgk_EMsgForceSOCacheResend:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyCreate:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyLeave:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyLaunch:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyList:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyListResponse:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyJoin:
    case EDOTAGCMsgk_EMsgGCSetAvatar:
    case EDOTAGCMsgk_EMsgGCPracticeLobbySetDetails:
    case EDOTAGCMsgk_EMsgGCPracticeLobbySetTeamSlot:
    case EDOTAGCMsgk_EMsgGCTutorialLobbyCreate:
    case EDOTAGCMsgk_EMsgGCInitialQuestionnaireResponse:
    case EDOTAGCMsgk_EMsgGCGCTrackedEvent:
    case EDOTAGCMsgk_EMsgGCTournamentRequest:
    case EDOTAGCMsgk_EMsgGCTournamentResponse:
    case EDOTAGCMsgk_EMsgGCBetaParticiaptionRequest:
    case EDOTAGCMsgk_EMsgGCBetaParticiaptionResponse:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyResponse:
    case EDOTAGCMsgk_EMsgGCBroadcastNotification:
    case EDOTAGCMsgk_EMsgGCLiveScoreboardUpdate:
    case EDOTAGCMsgk_EMsgGCRequestDefaultChatChannel:
    case EDOTAGCMsgk_EMsgGCRequestDefaultChatChannelResponse:
    case EDOTAGCMsgk_EMsgGCRequestChatChannelList:
    case EDOTAGCMsgk_EMsgGCRequestChatChannelListResponse:
    case EDOTAGCMsgk_EMsgGCRequestMatches:
    case EDOTAGCMsgk_EMsgGCRequestMatchesResponse:
    case EDOTAGCMsgk_EMsgGCMatchmakingSearchCountRequest:
    case EDOTAGCMsgk_EMsgGCMatchmakingSearchCountResponse:
    case EDOTAGCMsgk_EMsgGCRequestPlayerResources:
    case EDOTAGCMsgk_EMsgGCRequestPlayerResourcesResponse:
    case EDOTAGCMsgk_EMsgGCReadyUp:
    case EDOTAGCMsgk_EMsgGCKickedFromMatchmakingQueue:
    case EDOTAGCMsgk_EMsgGCLeaverDetected:
    case EDOTAGCMsgk_EMsgGCSpectateFriendGame:
    case EDOTAGCMsgk_EMsgGCSpectateFriendGameResponse:
    case EDOTAGCMsgk_EMsgGCPlayerReports:
    case EDOTAGCMsgk_EMsgGCReportsRemainingRequest:
    case EDOTAGCMsgk_EMsgGCReportsRemainingResponse:
    case EDOTAGCMsgk_EMsgGCSubmitPlayerReport:
    case EDOTAGCMsgk_EMsgGCSubmitPlayerReportResponse:
    case EDOTAGCMsgk_EMsgGCGameChatLog:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyKick:
    case EDOTAGCMsgk_EMsgGCReportCountsRequest:
    case EDOTAGCMsgk_EMsgGCReportCountsResponse:
    case EDOTAGCMsgk_EMsgGCRequestSaveGames:
    case EDOTAGCMsgk_EMsgGCRequestSaveGamesServer:
    case EDOTAGCMsgk_EMsgGCRequestSaveGamesResponse:
    case EDOTAGCMsgk_EMsgGCLeaverDetectedResponse:
    case EDOTAGCMsgk_EMsgGCPlayerFailedToConnect:
    case EDOTAGCMsgk_EMsgGCGCToRelayConnect:
    case EDOTAGCMsgk_EMsgGCGCToRelayConnectresponse:
    case EDOTAGCMsgk_EMsgGCWatchGame:
    case EDOTAGCMsgk_EMsgGCWatchGameResponse:
    case EDOTAGCMsgk_EMsgGCBanStatusRequest:
    case EDOTAGCMsgk_EMsgGCBanStatusResponse:
    case EDOTAGCMsgk_EMsgGCMatchDetailsRequest:
    case EDOTAGCMsgk_EMsgGCMatchDetailsResponse:
    case EDOTAGCMsgk_EMsgGCCancelWatchGame:
    case EDOTAGCMsgk_EMsgGCProfileRequest:
    case EDOTAGCMsgk_EMsgGCProfileResponse:
    case EDOTAGCMsgk_EMsgGCPopup:
    case EDOTAGCMsgk_EMsgGCDOTANotifySuccessfulReport:
    case EDOTAGCMsgk_EMsgGCDOTAClearNotifySuccessfulReport:
    case EDOTAGCMsgk_EMsgGCUnpickedHeroListRequest:
    case EDOTAGCMsgk_EMsgGCUnpickedHeroListResponse:
    case EDOTAGCMsgk_EMsgGCRemoveFromUnpickedHeroList:
    case EDOTAGCMsgk_EMsgGCGenericResult:
    case EDOTAGCMsgk_EMsgGCMatchGroupWaitTimesRequest:
    case EDOTAGCMsgk_EMsgGCMatchGroupWaitTimesResponse:
    case EDOTAGCMsgk_EMsgGCFriendPracticeLobbyListRequest:
    case EDOTAGCMsgk_EMsgGCFriendPracticeLobbyListResponse:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyJoinResponse:
    case EDOTAGCMsgk_EMsgClientEconNotification_Job:
    case EDOTAGCMsgk_EMsgGCCreateTeam:
    case EDOTAGCMsgk_EMsgGCCreateTeamResponse:
    case EDOTAGCMsgk_EMsgGCDisbandTeam:
    case EDOTAGCMsgk_EMsgGCDisbandTeamResponse:
    case EDOTAGCMsgk_EMsgGCRequestTeamData:
    case EDOTAGCMsgk_EMsgGCRequestTeamDataResponse:
    case EDOTAGCMsgk_EMsgGCTeamData:
    case EDOTAGCMsgk_EMsgGCInitiateTeamInvite:
    case EDOTAGCMsgk_EMsgGCInitiateTeamInviteResponse:
    case EDOTAGCMsgk_EMsgGCTeamInvite:
    case EDOTAGCMsgk_EMsgGCTeamInviteReply:
    case EDOTAGCMsgk_EMsgGCTeamInviteReplyResponse:
    case EDOTAGCMsgk_EMsgGCTeamInviteComplete:
    case EDOTAGCMsgk_EMsgGCKickTeamMember:
    case EDOTAGCMsgk_EMsgGCKickTeamMemberResponse:
    case EDOTAGCMsgk_EMsgGCLeaveTeam:
    case EDOTAGCMsgk_EMsgGCLeaveTeamResponse:
    case EDOTAGCMsgk_EMsgGCSuggestTeamMatchmaking:
    case EDOTAGCMsgk_EMsgGCPlayerHeroesFavoritesAdd:
    case EDOTAGCMsgk_EMsgGCPlayerHeroesFavoritesRemove:
    case EDOTAGCMsgk_EMsgGCPlayerHeroesRecentRequest:
    case EDOTAGCMsgk_EMsgGCPlayerHeroesRecentResponse:
    case EDOTAGCMsgk_EMsgGCEditTeamLogo:
    case EDOTAGCMsgk_EMsgGCEditTeamLogoResponse:
    case EDOTAGCMsgk_EMsgGCSetShowcaseHero:
    case EDOTAGCMsgk_EMsgGCApplyTeamToPracticeLobby:
    case EDOTAGCMsgk_EMsgGCRequestInternatinalTicketEmail:
    case EDOTAGCMsgk_EMsgGCTransferTeamAdmin:
    case EDOTAGCMsgk_EMsgGCClearTournamentGame:
    case EDOTAGCMsgk_EMsgGCChatMessage:
    case EDOTAGCMsgk_EMsgRequestLeagueInfo:
    case EDOTAGCMsgk_EMsgResponseLeagueInfo:
    case EDOTAGCMsgk_EMsgGCPracticeLobbyJoinBroadcastChannel:
    case EDOTAGCMsgk_EMsgGC_TournamentItemEvent:
    case EDOTAGCMsgk_EMsgGC_TournamentItemEventResponse:
    case EDOTAGCMsgk_EMsgCastMatchVote:
    case EDOTAGCMsgk_EMsgCastMatchVoteResponse:
    case EDOTAGCMsgk_EMsgRetrieveMatchVote:
    case EDOTAGCMsgk_EMsgRetrieveMatchVoteResponse:
    case EDOTAGCMsgk_EMsgTeamFanfare:
    case EDOTAGCMsgk_EMsgResponseTeamFanfare:
    case EDOTAGCMsgk_EMsgGC_GameServerUploadSaveGame:
    case EDOTAGCMsgk_EMsgGC_GameServerSaveGameResult:
    case EDOTAGCMsgk_EMsgGC_GameServerGetLoadGame:
    case EDOTAGCMsgk_EMsgGC_GameServerGetLoadGameResult:
    case EDOTAGCMsgk_EMsgCheckSpectatorOnly:
    case EDOTAGCMsgk_EMsgCheckSpectatorOnlyResponse:
    case EDOTAGCMsgk_EMsgGCTeamProfileRequest:
    case EDOTAGCMsgk_EMsgGCTeamProfileResponse:
    case EDOTAGCMsgk_EMsgGCEditTeamDetails:
    case EDOTAGCMsgk_EMsgGCEditTeamDetailsResponse:
    case EDOTAGCMsgk_EMsgGCProTeamListRequest:
    case EDOTAGCMsgk_EMsgGCProTeamListResponse:
    case EDOTAGCMsgk_EMsgGCReadyUpStatus:
    case EDOTAGCMsgk_EMsgGCHallOfFame:
    case EDOTAGCMsgk_EMsgGCHallOfFameRequest:
    case EDOTAGCMsgk_EMsgGCHallOfFameResponse:
    case EDOTAGCMsgk_EMsgGCGenerateDiretidePrizeList:
    case EDOTAGCMsgk_EMsgGCDiretidePrizeResponse:
    case EDOTAGCMsgk_EMsgGCRewardDiretidePrizes:
    case EDOTAGCMsgk_EMsgGCDiretidePrizesRewardedResponse:
    case EDOTAGCMsgk_EMsgGCHalloweenHighScoreRequest:
    case EDOTAGCMsgk_EMsgGCHalloweenHighScoreResponse:
    case EDOTAGCMsgk_EMsgGCGenerateDiretidePrizeListResponse:
    case EDOTAGCMsgk_EMsgGCNotifyResetKeybindings:
    case EDOTAGCMsgk_EMsgGCStorePromoPagesRequest:
    case EDOTAGCMsgk_EMsgGCStorePromoPagesResponse:
    case EDOTAGCMsgk_EMsgGCSpawnLootGreevil:
    case EDOTAGCMsgk_EMsgGCDismissLootGreevil:
    case EDOTAGCMsgk_EMsgGCToGCMatchCompleted:
    case EDOTAGCMsgk_EMsgGCDev_GrantWarKill:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTA_GameModeIsValidValue(DOTA_GameMode value) {
  switch (value) {
    case DOTA_GameModeDOTA_GAMEMODE_NONE:
    case DOTA_GameModeDOTA_GAMEMODE_AP:
    case DOTA_GameModeDOTA_GAMEMODE_CM:
    case DOTA_GameModeDOTA_GAMEMODE_RD:
    case DOTA_GameModeDOTA_GAMEMODE_SD:
    case DOTA_GameModeDOTA_GAMEMODE_AR:
    case DOTA_GameModeDOTA_GAMEMODE_INTRO:
    case DOTA_GameModeDOTA_GAMEMODE_HW:
    case DOTA_GameModeDOTA_GAMEMODE_REVERSE_CM:
    case DOTA_GameModeDOTA_GAMEMODE_XMAS:
    case DOTA_GameModeDOTA_GAMEMODE_TUTORIAL:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTA_GameStateIsValidValue(DOTA_GameState value) {
  switch (value) {
    case DOTA_GameStateDOTA_GAMERULES_STATE_INIT:
    case DOTA_GameStateDOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD:
    case DOTA_GameStateDOTA_GAMERULES_STATE_HERO_SELECTION:
    case DOTA_GameStateDOTA_GAMERULES_STATE_STRATEGY_TIME:
    case DOTA_GameStateDOTA_GAMERULES_STATE_PRE_GAME:
    case DOTA_GameStateDOTA_GAMERULES_STATE_GAME_IN_PROGRESS:
    case DOTA_GameStateDOTA_GAMERULES_STATE_POST_GAME:
    case DOTA_GameStateDOTA_GAMERULES_STATE_DISCONNECT:
    case DOTA_GameStateDOTA_GAMERULES_STATE_LAST:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTA_GC_TEAMIsValidValue(DOTA_GC_TEAM value) {
  switch (value) {
    case DOTA_GC_TEAMDOTA_GC_TEAM_GOOD_GUYS:
    case DOTA_GC_TEAMDOTA_GC_TEAM_BAD_GUYS:
    case DOTA_GC_TEAMDOTA_GC_TEAM_BROADCASTER:
    case DOTA_GC_TEAMDOTA_GC_TEAM_SPECTATOR:
    case DOTA_GC_TEAMDOTA_GC_TEAM_PLAYER_POOL:
    case DOTA_GC_TEAMDOTA_GC_TEAM_NOTEAM:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTA_CM_PICKIsValidValue(DOTA_CM_PICK value) {
  switch (value) {
    case DOTA_CM_PICKDOTA_CM_RANDOM:
    case DOTA_CM_PICKDOTA_CM_GOOD_GUYS:
    case DOTA_CM_PICKDOTA_CM_BAD_GUYS:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTALeaverStatus_tIsValidValue(DOTALeaverStatus_t value) {
  switch (value) {
    case DOTALeaverStatus_tDOTA_LEAVER_NONE:
    case DOTALeaverStatus_tDOTA_LEAVER_DISCONNECTED:
    case DOTALeaverStatus_tDOTA_LEAVER_DISCONNECTED_TOO_LONG:
    case DOTALeaverStatus_tDOTA_LEAVER_ABANDONED:
    case DOTALeaverStatus_tDOTA_LEAVER_AFK:
    case DOTALeaverStatus_tDOTA_LEAVER_NEVER_CONNECTED:
    case DOTALeaverStatus_tDOTA_LEAVER_NEVER_CONNECTED_TOO_LONG:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTALobbyReadyStateIsValidValue(DOTALobbyReadyState value) {
  switch (value) {
    case DOTALobbyReadyStateDOTALobbyReadyState_UNDECLARED:
    case DOTALobbyReadyStateDOTALobbyReadyState_ACCEPTED:
    case DOTALobbyReadyStateDOTALobbyReadyState_DECLINED:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTAGameVersionIsValidValue(DOTAGameVersion value) {
  switch (value) {
    case DOTAGameVersionGAME_VERSION_CURRENT:
    case DOTAGameVersionGAME_VERSION_STABLE:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTAJoinLobbyResultIsValidValue(DOTAJoinLobbyResult value) {
  switch (value) {
    case DOTAJoinLobbyResultDOTA_JOIN_RESULT_SUCCESS:
    case DOTAJoinLobbyResultDOTA_JOIN_RESULT_ALREADY_IN_GAME:
    case DOTAJoinLobbyResultDOTA_JOIN_RESULT_INVALID_LOBBY:
    case DOTAJoinLobbyResultDOTA_JOIN_RESULT_INCORRECT_PASSWORD:
    case DOTAJoinLobbyResultDOTA_JOIN_RESULT_ACCESS_DENIED:
    case DOTAJoinLobbyResultDOTA_JOIN_RESULT_GENERIC_ERROR:
    case DOTAJoinLobbyResultDOTA_JOIN_RESULT_INCORRECT_VERSION:
    case DOTAJoinLobbyResultDOTA_JOIN_RESULT_IN_TEAM_PARTY:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTAMatchVoteIsValidValue(DOTAMatchVote value) {
  switch (value) {
    case DOTAMatchVoteDOTAMatchVote_INVALID:
    case DOTAMatchVoteDOTAMatchVote_POSITIVE:
    case DOTAMatchVoteDOTAMatchVote_NEGATIVE:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTAChatChannelType_tIsValidValue(DOTAChatChannelType_t value) {
  switch (value) {
    case DOTAChatChannelType_tDOTAChannelType_Regional:
    case DOTAChatChannelType_tDOTAChannelType_Custom:
    case DOTAChatChannelType_tDOTAChannelType_Party:
    case DOTAChatChannelType_tDOTAChannelType_Lobby:
    case DOTAChatChannelType_tDOTAChannelType_Team:
      return YES;
    default:
      return NO;
  }
}
BOOL DOTA_TournamentEventsIsValidValue(DOTA_TournamentEvents value) {
  switch (value) {
    case DOTA_TournamentEventsTE_FIRST_BLOOD:
    case DOTA_TournamentEventsTE_GAME_END:
    case DOTA_TournamentEventsTE_MULTI_KILL:
    case DOTA_TournamentEventsTE_HERO_DENY:
    case DOTA_TournamentEventsTE_AEGIS_DENY:
    case DOTA_TournamentEventsTE_AEGIS_STOLEN:
      return YES;
    default:
      return NO;
  }
}
@interface CSODOTAGameAccountClient ()
@property uint32_t accountId;
@property uint32_t wins;
@property uint32_t losses;
@property uint32_t avatar;
@property uint32_t xp;
@property uint32_t level;
@property uint32_t initialSkill;
@property uint32_t leaverCount;
@property uint32_t preventMatchUntilDate;
@property uint32_t preventTextChatUntilDate;
@property uint32_t preventVoiceUntilDate;
@property uint32_t lastAbandonedGameDate;
@property uint32_t leaverPenaltyCount;
@property uint32_t completedGameStreak;
@property uint32_t teaching;
@property uint32_t leadership;
@property uint32_t friendly;
@property uint32_t forgiving;
@property uint32_t successfulReportCount;
@property uint32_t notifySuccessfulReport;
@property uint32_t accountDisabledUntilDate;
@property uint32_t accountDisabledCount;
@property uint32_t showcaseHeroId;
@property uint32_t matchDisabledUntilDate;
@property uint32_t matchDisabledCount;
@property uint32_t teamCreationDisabledUntilDate;
@end

@implementation CSODOTAGameAccountClient

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasWins {
  return !!hasWins_;
}
- (void) setHasWins:(BOOL) value_ {
  hasWins_ = !!value_;
}
@synthesize wins;
- (BOOL) hasLosses {
  return !!hasLosses_;
}
- (void) setHasLosses:(BOOL) value_ {
  hasLosses_ = !!value_;
}
@synthesize losses;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value_ {
  hasAvatar_ = !!value_;
}
@synthesize avatar;
- (BOOL) hasXp {
  return !!hasXp_;
}
- (void) setHasXp:(BOOL) value_ {
  hasXp_ = !!value_;
}
@synthesize xp;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasInitialSkill {
  return !!hasInitialSkill_;
}
- (void) setHasInitialSkill:(BOOL) value_ {
  hasInitialSkill_ = !!value_;
}
@synthesize initialSkill;
- (BOOL) hasLeaverCount {
  return !!hasLeaverCount_;
}
- (void) setHasLeaverCount:(BOOL) value_ {
  hasLeaverCount_ = !!value_;
}
@synthesize leaverCount;
- (BOOL) hasPreventMatchUntilDate {
  return !!hasPreventMatchUntilDate_;
}
- (void) setHasPreventMatchUntilDate:(BOOL) value_ {
  hasPreventMatchUntilDate_ = !!value_;
}
@synthesize preventMatchUntilDate;
- (BOOL) hasPreventTextChatUntilDate {
  return !!hasPreventTextChatUntilDate_;
}
- (void) setHasPreventTextChatUntilDate:(BOOL) value_ {
  hasPreventTextChatUntilDate_ = !!value_;
}
@synthesize preventTextChatUntilDate;
- (BOOL) hasPreventVoiceUntilDate {
  return !!hasPreventVoiceUntilDate_;
}
- (void) setHasPreventVoiceUntilDate:(BOOL) value_ {
  hasPreventVoiceUntilDate_ = !!value_;
}
@synthesize preventVoiceUntilDate;
- (BOOL) hasLastAbandonedGameDate {
  return !!hasLastAbandonedGameDate_;
}
- (void) setHasLastAbandonedGameDate:(BOOL) value_ {
  hasLastAbandonedGameDate_ = !!value_;
}
@synthesize lastAbandonedGameDate;
- (BOOL) hasLeaverPenaltyCount {
  return !!hasLeaverPenaltyCount_;
}
- (void) setHasLeaverPenaltyCount:(BOOL) value_ {
  hasLeaverPenaltyCount_ = !!value_;
}
@synthesize leaverPenaltyCount;
- (BOOL) hasCompletedGameStreak {
  return !!hasCompletedGameStreak_;
}
- (void) setHasCompletedGameStreak:(BOOL) value_ {
  hasCompletedGameStreak_ = !!value_;
}
@synthesize completedGameStreak;
- (BOOL) hasTeaching {
  return !!hasTeaching_;
}
- (void) setHasTeaching:(BOOL) value_ {
  hasTeaching_ = !!value_;
}
@synthesize teaching;
- (BOOL) hasLeadership {
  return !!hasLeadership_;
}
- (void) setHasLeadership:(BOOL) value_ {
  hasLeadership_ = !!value_;
}
@synthesize leadership;
- (BOOL) hasFriendly {
  return !!hasFriendly_;
}
- (void) setHasFriendly:(BOOL) value_ {
  hasFriendly_ = !!value_;
}
@synthesize friendly;
- (BOOL) hasForgiving {
  return !!hasForgiving_;
}
- (void) setHasForgiving:(BOOL) value_ {
  hasForgiving_ = !!value_;
}
@synthesize forgiving;
- (BOOL) hasSuccessfulReportCount {
  return !!hasSuccessfulReportCount_;
}
- (void) setHasSuccessfulReportCount:(BOOL) value_ {
  hasSuccessfulReportCount_ = !!value_;
}
@synthesize successfulReportCount;
- (BOOL) hasNotifySuccessfulReport {
  return !!hasNotifySuccessfulReport_;
}
- (void) setHasNotifySuccessfulReport:(BOOL) value_ {
  hasNotifySuccessfulReport_ = !!value_;
}
@synthesize notifySuccessfulReport;
- (BOOL) hasAccountDisabledUntilDate {
  return !!hasAccountDisabledUntilDate_;
}
- (void) setHasAccountDisabledUntilDate:(BOOL) value_ {
  hasAccountDisabledUntilDate_ = !!value_;
}
@synthesize accountDisabledUntilDate;
- (BOOL) hasAccountDisabledCount {
  return !!hasAccountDisabledCount_;
}
- (void) setHasAccountDisabledCount:(BOOL) value_ {
  hasAccountDisabledCount_ = !!value_;
}
@synthesize accountDisabledCount;
- (BOOL) hasShowcaseHeroId {
  return !!hasShowcaseHeroId_;
}
- (void) setHasShowcaseHeroId:(BOOL) value_ {
  hasShowcaseHeroId_ = !!value_;
}
@synthesize showcaseHeroId;
- (BOOL) hasMatchDisabledUntilDate {
  return !!hasMatchDisabledUntilDate_;
}
- (void) setHasMatchDisabledUntilDate:(BOOL) value_ {
  hasMatchDisabledUntilDate_ = !!value_;
}
@synthesize matchDisabledUntilDate;
- (BOOL) hasMatchDisabledCount {
  return !!hasMatchDisabledCount_;
}
- (void) setHasMatchDisabledCount:(BOOL) value_ {
  hasMatchDisabledCount_ = !!value_;
}
@synthesize matchDisabledCount;
- (BOOL) hasTeamCreationDisabledUntilDate {
  return !!hasTeamCreationDisabledUntilDate_;
}
- (void) setHasTeamCreationDisabledUntilDate:(BOOL) value_ {
  hasTeamCreationDisabledUntilDate_ = !!value_;
}
@synthesize teamCreationDisabledUntilDate;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.wins = 0;
    self.losses = 0;
    self.avatar = 0;
    self.xp = 0;
    self.level = 0;
    self.initialSkill = 0;
    self.leaverCount = 0;
    self.preventMatchUntilDate = 0;
    self.preventTextChatUntilDate = 0;
    self.preventVoiceUntilDate = 0;
    self.lastAbandonedGameDate = 0;
    self.leaverPenaltyCount = 0;
    self.completedGameStreak = 0;
    self.teaching = 0;
    self.leadership = 0;
    self.friendly = 0;
    self.forgiving = 0;
    self.successfulReportCount = 0;
    self.notifySuccessfulReport = 0;
    self.accountDisabledUntilDate = 0;
    self.accountDisabledCount = 0;
    self.showcaseHeroId = 0;
    self.matchDisabledUntilDate = 0;
    self.matchDisabledCount = 0;
    self.teamCreationDisabledUntilDate = 0;
  }
  return self;
}
static CSODOTAGameAccountClient* defaultCSODOTAGameAccountClientInstance = nil;
+ (void) initialize {
  if (self == [CSODOTAGameAccountClient class]) {
    defaultCSODOTAGameAccountClientInstance = [[CSODOTAGameAccountClient alloc] init];
  }
}
+ (CSODOTAGameAccountClient*) defaultInstance {
  return defaultCSODOTAGameAccountClientInstance;
}
- (CSODOTAGameAccountClient*) defaultInstance {
  return defaultCSODOTAGameAccountClientInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasWins) {
    [output writeUInt32:3 value:self.wins];
  }
  if (self.hasLosses) {
    [output writeUInt32:4 value:self.losses];
  }
  if (self.hasAvatar) {
    [output writeUInt32:7 value:self.avatar];
  }
  if (self.hasXp) {
    [output writeUInt32:12 value:self.xp];
  }
  if (self.hasLevel) {
    [output writeUInt32:13 value:self.level];
  }
  if (self.hasInitialSkill) {
    [output writeUInt32:14 value:self.initialSkill];
  }
  if (self.hasLeaverCount) {
    [output writeUInt32:15 value:self.leaverCount];
  }
  if (self.hasPreventMatchUntilDate) {
    [output writeUInt32:18 value:self.preventMatchUntilDate];
  }
  if (self.hasPreventTextChatUntilDate) {
    [output writeUInt32:20 value:self.preventTextChatUntilDate];
  }
  if (self.hasPreventVoiceUntilDate) {
    [output writeUInt32:21 value:self.preventVoiceUntilDate];
  }
  if (self.hasLastAbandonedGameDate) {
    [output writeUInt32:22 value:self.lastAbandonedGameDate];
  }
  if (self.hasLeaverPenaltyCount) {
    [output writeUInt32:23 value:self.leaverPenaltyCount];
  }
  if (self.hasCompletedGameStreak) {
    [output writeUInt32:24 value:self.completedGameStreak];
  }
  if (self.hasTeaching) {
    [output writeUInt32:28 value:self.teaching];
  }
  if (self.hasLeadership) {
    [output writeUInt32:29 value:self.leadership];
  }
  if (self.hasFriendly) {
    [output writeUInt32:30 value:self.friendly];
  }
  if (self.hasForgiving) {
    [output writeUInt32:31 value:self.forgiving];
  }
  if (self.hasSuccessfulReportCount) {
    [output writeUInt32:36 value:self.successfulReportCount];
  }
  if (self.hasNotifySuccessfulReport) {
    [output writeUInt32:37 value:self.notifySuccessfulReport];
  }
  if (self.hasAccountDisabledUntilDate) {
    [output writeUInt32:38 value:self.accountDisabledUntilDate];
  }
  if (self.hasAccountDisabledCount) {
    [output writeUInt32:39 value:self.accountDisabledCount];
  }
  if (self.hasShowcaseHeroId) {
    [output writeUInt32:40 value:self.showcaseHeroId];
  }
  if (self.hasMatchDisabledUntilDate) {
    [output writeUInt32:41 value:self.matchDisabledUntilDate];
  }
  if (self.hasMatchDisabledCount) {
    [output writeUInt32:42 value:self.matchDisabledCount];
  }
  if (self.hasTeamCreationDisabledUntilDate) {
    [output writeUInt32:43 value:self.teamCreationDisabledUntilDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasWins) {
    size_ += computeUInt32Size(3, self.wins);
  }
  if (self.hasLosses) {
    size_ += computeUInt32Size(4, self.losses);
  }
  if (self.hasAvatar) {
    size_ += computeUInt32Size(7, self.avatar);
  }
  if (self.hasXp) {
    size_ += computeUInt32Size(12, self.xp);
  }
  if (self.hasLevel) {
    size_ += computeUInt32Size(13, self.level);
  }
  if (self.hasInitialSkill) {
    size_ += computeUInt32Size(14, self.initialSkill);
  }
  if (self.hasLeaverCount) {
    size_ += computeUInt32Size(15, self.leaverCount);
  }
  if (self.hasPreventMatchUntilDate) {
    size_ += computeUInt32Size(18, self.preventMatchUntilDate);
  }
  if (self.hasPreventTextChatUntilDate) {
    size_ += computeUInt32Size(20, self.preventTextChatUntilDate);
  }
  if (self.hasPreventVoiceUntilDate) {
    size_ += computeUInt32Size(21, self.preventVoiceUntilDate);
  }
  if (self.hasLastAbandonedGameDate) {
    size_ += computeUInt32Size(22, self.lastAbandonedGameDate);
  }
  if (self.hasLeaverPenaltyCount) {
    size_ += computeUInt32Size(23, self.leaverPenaltyCount);
  }
  if (self.hasCompletedGameStreak) {
    size_ += computeUInt32Size(24, self.completedGameStreak);
  }
  if (self.hasTeaching) {
    size_ += computeUInt32Size(28, self.teaching);
  }
  if (self.hasLeadership) {
    size_ += computeUInt32Size(29, self.leadership);
  }
  if (self.hasFriendly) {
    size_ += computeUInt32Size(30, self.friendly);
  }
  if (self.hasForgiving) {
    size_ += computeUInt32Size(31, self.forgiving);
  }
  if (self.hasSuccessfulReportCount) {
    size_ += computeUInt32Size(36, self.successfulReportCount);
  }
  if (self.hasNotifySuccessfulReport) {
    size_ += computeUInt32Size(37, self.notifySuccessfulReport);
  }
  if (self.hasAccountDisabledUntilDate) {
    size_ += computeUInt32Size(38, self.accountDisabledUntilDate);
  }
  if (self.hasAccountDisabledCount) {
    size_ += computeUInt32Size(39, self.accountDisabledCount);
  }
  if (self.hasShowcaseHeroId) {
    size_ += computeUInt32Size(40, self.showcaseHeroId);
  }
  if (self.hasMatchDisabledUntilDate) {
    size_ += computeUInt32Size(41, self.matchDisabledUntilDate);
  }
  if (self.hasMatchDisabledCount) {
    size_ += computeUInt32Size(42, self.matchDisabledCount);
  }
  if (self.hasTeamCreationDisabledUntilDate) {
    size_ += computeUInt32Size(43, self.teamCreationDisabledUntilDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTAGameAccountClient*) parseFromData:(NSData*) data {
  return (CSODOTAGameAccountClient*)[[[CSODOTAGameAccountClient builder] mergeFromData:data] build];
}
+ (CSODOTAGameAccountClient*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameAccountClient*)[[[CSODOTAGameAccountClient builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameAccountClient*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTAGameAccountClient*)[[[CSODOTAGameAccountClient builder] mergeFromInputStream:input] build];
}
+ (CSODOTAGameAccountClient*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameAccountClient*)[[[CSODOTAGameAccountClient builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameAccountClient*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTAGameAccountClient*)[[[CSODOTAGameAccountClient builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTAGameAccountClient*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameAccountClient*)[[[CSODOTAGameAccountClient builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameAccountClient_Builder*) builder {
  return [[[CSODOTAGameAccountClient_Builder alloc] init] autorelease];
}
+ (CSODOTAGameAccountClient_Builder*) builderWithPrototype:(CSODOTAGameAccountClient*) prototype {
  return [[CSODOTAGameAccountClient builder] mergeFrom:prototype];
}
- (CSODOTAGameAccountClient_Builder*) builder {
  return [CSODOTAGameAccountClient builder];
}
- (CSODOTAGameAccountClient_Builder*) toBuilder {
  return [CSODOTAGameAccountClient builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasWins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wins", [NSNumber numberWithInt:self.wins]];
  }
  if (self.hasLosses) {
    [output appendFormat:@"%@%@: %@\n", indent, @"losses", [NSNumber numberWithInt:self.losses]];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", [NSNumber numberWithInt:self.avatar]];
  }
  if (self.hasXp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xp", [NSNumber numberWithInt:self.xp]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInt:self.level]];
  }
  if (self.hasInitialSkill) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initialSkill", [NSNumber numberWithInt:self.initialSkill]];
  }
  if (self.hasLeaverCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaverCount", [NSNumber numberWithInt:self.leaverCount]];
  }
  if (self.hasPreventMatchUntilDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preventMatchUntilDate", [NSNumber numberWithInt:self.preventMatchUntilDate]];
  }
  if (self.hasPreventTextChatUntilDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preventTextChatUntilDate", [NSNumber numberWithInt:self.preventTextChatUntilDate]];
  }
  if (self.hasPreventVoiceUntilDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preventVoiceUntilDate", [NSNumber numberWithInt:self.preventVoiceUntilDate]];
  }
  if (self.hasLastAbandonedGameDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastAbandonedGameDate", [NSNumber numberWithInt:self.lastAbandonedGameDate]];
  }
  if (self.hasLeaverPenaltyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaverPenaltyCount", [NSNumber numberWithInt:self.leaverPenaltyCount]];
  }
  if (self.hasCompletedGameStreak) {
    [output appendFormat:@"%@%@: %@\n", indent, @"completedGameStreak", [NSNumber numberWithInt:self.completedGameStreak]];
  }
  if (self.hasTeaching) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teaching", [NSNumber numberWithInt:self.teaching]];
  }
  if (self.hasLeadership) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leadership", [NSNumber numberWithInt:self.leadership]];
  }
  if (self.hasFriendly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendly", [NSNumber numberWithInt:self.friendly]];
  }
  if (self.hasForgiving) {
    [output appendFormat:@"%@%@: %@\n", indent, @"forgiving", [NSNumber numberWithInt:self.forgiving]];
  }
  if (self.hasSuccessfulReportCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"successfulReportCount", [NSNumber numberWithInt:self.successfulReportCount]];
  }
  if (self.hasNotifySuccessfulReport) {
    [output appendFormat:@"%@%@: %@\n", indent, @"notifySuccessfulReport", [NSNumber numberWithInt:self.notifySuccessfulReport]];
  }
  if (self.hasAccountDisabledUntilDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountDisabledUntilDate", [NSNumber numberWithInt:self.accountDisabledUntilDate]];
  }
  if (self.hasAccountDisabledCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountDisabledCount", [NSNumber numberWithInt:self.accountDisabledCount]];
  }
  if (self.hasShowcaseHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showcaseHeroId", [NSNumber numberWithInt:self.showcaseHeroId]];
  }
  if (self.hasMatchDisabledUntilDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchDisabledUntilDate", [NSNumber numberWithInt:self.matchDisabledUntilDate]];
  }
  if (self.hasMatchDisabledCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchDisabledCount", [NSNumber numberWithInt:self.matchDisabledCount]];
  }
  if (self.hasTeamCreationDisabledUntilDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamCreationDisabledUntilDate", [NSNumber numberWithInt:self.teamCreationDisabledUntilDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTAGameAccountClient class]]) {
    return NO;
  }
  CSODOTAGameAccountClient *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasWins == otherMessage.hasWins &&
      (!self.hasWins || self.wins == otherMessage.wins) &&
      self.hasLosses == otherMessage.hasLosses &&
      (!self.hasLosses || self.losses == otherMessage.losses) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || self.avatar == otherMessage.avatar) &&
      self.hasXp == otherMessage.hasXp &&
      (!self.hasXp || self.xp == otherMessage.xp) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasInitialSkill == otherMessage.hasInitialSkill &&
      (!self.hasInitialSkill || self.initialSkill == otherMessage.initialSkill) &&
      self.hasLeaverCount == otherMessage.hasLeaverCount &&
      (!self.hasLeaverCount || self.leaverCount == otherMessage.leaverCount) &&
      self.hasPreventMatchUntilDate == otherMessage.hasPreventMatchUntilDate &&
      (!self.hasPreventMatchUntilDate || self.preventMatchUntilDate == otherMessage.preventMatchUntilDate) &&
      self.hasPreventTextChatUntilDate == otherMessage.hasPreventTextChatUntilDate &&
      (!self.hasPreventTextChatUntilDate || self.preventTextChatUntilDate == otherMessage.preventTextChatUntilDate) &&
      self.hasPreventVoiceUntilDate == otherMessage.hasPreventVoiceUntilDate &&
      (!self.hasPreventVoiceUntilDate || self.preventVoiceUntilDate == otherMessage.preventVoiceUntilDate) &&
      self.hasLastAbandonedGameDate == otherMessage.hasLastAbandonedGameDate &&
      (!self.hasLastAbandonedGameDate || self.lastAbandonedGameDate == otherMessage.lastAbandonedGameDate) &&
      self.hasLeaverPenaltyCount == otherMessage.hasLeaverPenaltyCount &&
      (!self.hasLeaverPenaltyCount || self.leaverPenaltyCount == otherMessage.leaverPenaltyCount) &&
      self.hasCompletedGameStreak == otherMessage.hasCompletedGameStreak &&
      (!self.hasCompletedGameStreak || self.completedGameStreak == otherMessage.completedGameStreak) &&
      self.hasTeaching == otherMessage.hasTeaching &&
      (!self.hasTeaching || self.teaching == otherMessage.teaching) &&
      self.hasLeadership == otherMessage.hasLeadership &&
      (!self.hasLeadership || self.leadership == otherMessage.leadership) &&
      self.hasFriendly == otherMessage.hasFriendly &&
      (!self.hasFriendly || self.friendly == otherMessage.friendly) &&
      self.hasForgiving == otherMessage.hasForgiving &&
      (!self.hasForgiving || self.forgiving == otherMessage.forgiving) &&
      self.hasSuccessfulReportCount == otherMessage.hasSuccessfulReportCount &&
      (!self.hasSuccessfulReportCount || self.successfulReportCount == otherMessage.successfulReportCount) &&
      self.hasNotifySuccessfulReport == otherMessage.hasNotifySuccessfulReport &&
      (!self.hasNotifySuccessfulReport || self.notifySuccessfulReport == otherMessage.notifySuccessfulReport) &&
      self.hasAccountDisabledUntilDate == otherMessage.hasAccountDisabledUntilDate &&
      (!self.hasAccountDisabledUntilDate || self.accountDisabledUntilDate == otherMessage.accountDisabledUntilDate) &&
      self.hasAccountDisabledCount == otherMessage.hasAccountDisabledCount &&
      (!self.hasAccountDisabledCount || self.accountDisabledCount == otherMessage.accountDisabledCount) &&
      self.hasShowcaseHeroId == otherMessage.hasShowcaseHeroId &&
      (!self.hasShowcaseHeroId || self.showcaseHeroId == otherMessage.showcaseHeroId) &&
      self.hasMatchDisabledUntilDate == otherMessage.hasMatchDisabledUntilDate &&
      (!self.hasMatchDisabledUntilDate || self.matchDisabledUntilDate == otherMessage.matchDisabledUntilDate) &&
      self.hasMatchDisabledCount == otherMessage.hasMatchDisabledCount &&
      (!self.hasMatchDisabledCount || self.matchDisabledCount == otherMessage.matchDisabledCount) &&
      self.hasTeamCreationDisabledUntilDate == otherMessage.hasTeamCreationDisabledUntilDate &&
      (!self.hasTeamCreationDisabledUntilDate || self.teamCreationDisabledUntilDate == otherMessage.teamCreationDisabledUntilDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasWins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.wins] hash];
  }
  if (self.hasLosses) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.losses] hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.avatar] hash];
  }
  if (self.hasXp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.xp] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.level] hash];
  }
  if (self.hasInitialSkill) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.initialSkill] hash];
  }
  if (self.hasLeaverCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leaverCount] hash];
  }
  if (self.hasPreventMatchUntilDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.preventMatchUntilDate] hash];
  }
  if (self.hasPreventTextChatUntilDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.preventTextChatUntilDate] hash];
  }
  if (self.hasPreventVoiceUntilDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.preventVoiceUntilDate] hash];
  }
  if (self.hasLastAbandonedGameDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lastAbandonedGameDate] hash];
  }
  if (self.hasLeaverPenaltyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leaverPenaltyCount] hash];
  }
  if (self.hasCompletedGameStreak) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.completedGameStreak] hash];
  }
  if (self.hasTeaching) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teaching] hash];
  }
  if (self.hasLeadership) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leadership] hash];
  }
  if (self.hasFriendly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.friendly] hash];
  }
  if (self.hasForgiving) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.forgiving] hash];
  }
  if (self.hasSuccessfulReportCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.successfulReportCount] hash];
  }
  if (self.hasNotifySuccessfulReport) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.notifySuccessfulReport] hash];
  }
  if (self.hasAccountDisabledUntilDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountDisabledUntilDate] hash];
  }
  if (self.hasAccountDisabledCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountDisabledCount] hash];
  }
  if (self.hasShowcaseHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.showcaseHeroId] hash];
  }
  if (self.hasMatchDisabledUntilDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchDisabledUntilDate] hash];
  }
  if (self.hasMatchDisabledCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchDisabledCount] hash];
  }
  if (self.hasTeamCreationDisabledUntilDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamCreationDisabledUntilDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTAGameAccountClient_Builder()
@property (retain) CSODOTAGameAccountClient* _builderResult;
@end

@implementation CSODOTAGameAccountClient_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTAGameAccountClient alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTAGameAccountClient_Builder*) clear {
  _builderResult = [[[CSODOTAGameAccountClient alloc] init] autorelease];
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clone {
  return [CSODOTAGameAccountClient builderWithPrototype:_builderResult];
}
- (CSODOTAGameAccountClient*) defaultInstance {
  return [CSODOTAGameAccountClient defaultInstance];
}
- (CSODOTAGameAccountClient*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTAGameAccountClient*) buildPartial {
  CSODOTAGameAccountClient* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTAGameAccountClient_Builder*) mergeFrom:(CSODOTAGameAccountClient*) other {
  if (other == [CSODOTAGameAccountClient defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasWins) {
    [self setWins:other.wins];
  }
  if (other.hasLosses) {
    [self setLosses:other.losses];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasXp) {
    [self setXp:other.xp];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasInitialSkill) {
    [self setInitialSkill:other.initialSkill];
  }
  if (other.hasLeaverCount) {
    [self setLeaverCount:other.leaverCount];
  }
  if (other.hasPreventMatchUntilDate) {
    [self setPreventMatchUntilDate:other.preventMatchUntilDate];
  }
  if (other.hasPreventTextChatUntilDate) {
    [self setPreventTextChatUntilDate:other.preventTextChatUntilDate];
  }
  if (other.hasPreventVoiceUntilDate) {
    [self setPreventVoiceUntilDate:other.preventVoiceUntilDate];
  }
  if (other.hasLastAbandonedGameDate) {
    [self setLastAbandonedGameDate:other.lastAbandonedGameDate];
  }
  if (other.hasLeaverPenaltyCount) {
    [self setLeaverPenaltyCount:other.leaverPenaltyCount];
  }
  if (other.hasCompletedGameStreak) {
    [self setCompletedGameStreak:other.completedGameStreak];
  }
  if (other.hasTeaching) {
    [self setTeaching:other.teaching];
  }
  if (other.hasLeadership) {
    [self setLeadership:other.leadership];
  }
  if (other.hasFriendly) {
    [self setFriendly:other.friendly];
  }
  if (other.hasForgiving) {
    [self setForgiving:other.forgiving];
  }
  if (other.hasSuccessfulReportCount) {
    [self setSuccessfulReportCount:other.successfulReportCount];
  }
  if (other.hasNotifySuccessfulReport) {
    [self setNotifySuccessfulReport:other.notifySuccessfulReport];
  }
  if (other.hasAccountDisabledUntilDate) {
    [self setAccountDisabledUntilDate:other.accountDisabledUntilDate];
  }
  if (other.hasAccountDisabledCount) {
    [self setAccountDisabledCount:other.accountDisabledCount];
  }
  if (other.hasShowcaseHeroId) {
    [self setShowcaseHeroId:other.showcaseHeroId];
  }
  if (other.hasMatchDisabledUntilDate) {
    [self setMatchDisabledUntilDate:other.matchDisabledUntilDate];
  }
  if (other.hasMatchDisabledCount) {
    [self setMatchDisabledCount:other.matchDisabledCount];
  }
  if (other.hasTeamCreationDisabledUntilDate) {
    [self setTeamCreationDisabledUntilDate:other.teamCreationDisabledUntilDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTAGameAccountClient_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTAGameAccountClient_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setWins:[input readUInt32]];
        break;
      }
      case 32: {
        [self setLosses:[input readUInt32]];
        break;
      }
      case 56: {
        [self setAvatar:[input readUInt32]];
        break;
      }
      case 96: {
        [self setXp:[input readUInt32]];
        break;
      }
      case 104: {
        [self setLevel:[input readUInt32]];
        break;
      }
      case 112: {
        [self setInitialSkill:[input readUInt32]];
        break;
      }
      case 120: {
        [self setLeaverCount:[input readUInt32]];
        break;
      }
      case 144: {
        [self setPreventMatchUntilDate:[input readUInt32]];
        break;
      }
      case 160: {
        [self setPreventTextChatUntilDate:[input readUInt32]];
        break;
      }
      case 168: {
        [self setPreventVoiceUntilDate:[input readUInt32]];
        break;
      }
      case 176: {
        [self setLastAbandonedGameDate:[input readUInt32]];
        break;
      }
      case 184: {
        [self setLeaverPenaltyCount:[input readUInt32]];
        break;
      }
      case 192: {
        [self setCompletedGameStreak:[input readUInt32]];
        break;
      }
      case 224: {
        [self setTeaching:[input readUInt32]];
        break;
      }
      case 232: {
        [self setLeadership:[input readUInt32]];
        break;
      }
      case 240: {
        [self setFriendly:[input readUInt32]];
        break;
      }
      case 248: {
        [self setForgiving:[input readUInt32]];
        break;
      }
      case 288: {
        [self setSuccessfulReportCount:[input readUInt32]];
        break;
      }
      case 296: {
        [self setNotifySuccessfulReport:[input readUInt32]];
        break;
      }
      case 304: {
        [self setAccountDisabledUntilDate:[input readUInt32]];
        break;
      }
      case 312: {
        [self setAccountDisabledCount:[input readUInt32]];
        break;
      }
      case 320: {
        [self setShowcaseHeroId:[input readUInt32]];
        break;
      }
      case 328: {
        [self setMatchDisabledUntilDate:[input readUInt32]];
        break;
      }
      case 336: {
        [self setMatchDisabledCount:[input readUInt32]];
        break;
      }
      case 344: {
        [self setTeamCreationDisabledUntilDate:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CSODOTAGameAccountClient_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasWins {
  return _builderResult.hasWins;
}
- (uint32_t) wins {
  return _builderResult.wins;
}
- (CSODOTAGameAccountClient_Builder*) setWins:(uint32_t) value {
  _builderResult.hasWins = YES;
  _builderResult.wins = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearWins {
  _builderResult.hasWins = NO;
  _builderResult.wins = 0;
  return self;
}
- (BOOL) hasLosses {
  return _builderResult.hasLosses;
}
- (uint32_t) losses {
  return _builderResult.losses;
}
- (CSODOTAGameAccountClient_Builder*) setLosses:(uint32_t) value {
  _builderResult.hasLosses = YES;
  _builderResult.losses = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearLosses {
  _builderResult.hasLosses = NO;
  _builderResult.losses = 0;
  return self;
}
- (BOOL) hasAvatar {
  return _builderResult.hasAvatar;
}
- (uint32_t) avatar {
  return _builderResult.avatar;
}
- (CSODOTAGameAccountClient_Builder*) setAvatar:(uint32_t) value {
  _builderResult.hasAvatar = YES;
  _builderResult.avatar = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearAvatar {
  _builderResult.hasAvatar = NO;
  _builderResult.avatar = 0;
  return self;
}
- (BOOL) hasXp {
  return _builderResult.hasXp;
}
- (uint32_t) xp {
  return _builderResult.xp;
}
- (CSODOTAGameAccountClient_Builder*) setXp:(uint32_t) value {
  _builderResult.hasXp = YES;
  _builderResult.xp = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearXp {
  _builderResult.hasXp = NO;
  _builderResult.xp = 0;
  return self;
}
- (BOOL) hasLevel {
  return _builderResult.hasLevel;
}
- (uint32_t) level {
  return _builderResult.level;
}
- (CSODOTAGameAccountClient_Builder*) setLevel:(uint32_t) value {
  _builderResult.hasLevel = YES;
  _builderResult.level = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearLevel {
  _builderResult.hasLevel = NO;
  _builderResult.level = 0;
  return self;
}
- (BOOL) hasInitialSkill {
  return _builderResult.hasInitialSkill;
}
- (uint32_t) initialSkill {
  return _builderResult.initialSkill;
}
- (CSODOTAGameAccountClient_Builder*) setInitialSkill:(uint32_t) value {
  _builderResult.hasInitialSkill = YES;
  _builderResult.initialSkill = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearInitialSkill {
  _builderResult.hasInitialSkill = NO;
  _builderResult.initialSkill = 0;
  return self;
}
- (BOOL) hasLeaverCount {
  return _builderResult.hasLeaverCount;
}
- (uint32_t) leaverCount {
  return _builderResult.leaverCount;
}
- (CSODOTAGameAccountClient_Builder*) setLeaverCount:(uint32_t) value {
  _builderResult.hasLeaverCount = YES;
  _builderResult.leaverCount = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearLeaverCount {
  _builderResult.hasLeaverCount = NO;
  _builderResult.leaverCount = 0;
  return self;
}
- (BOOL) hasPreventMatchUntilDate {
  return _builderResult.hasPreventMatchUntilDate;
}
- (uint32_t) preventMatchUntilDate {
  return _builderResult.preventMatchUntilDate;
}
- (CSODOTAGameAccountClient_Builder*) setPreventMatchUntilDate:(uint32_t) value {
  _builderResult.hasPreventMatchUntilDate = YES;
  _builderResult.preventMatchUntilDate = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearPreventMatchUntilDate {
  _builderResult.hasPreventMatchUntilDate = NO;
  _builderResult.preventMatchUntilDate = 0;
  return self;
}
- (BOOL) hasPreventTextChatUntilDate {
  return _builderResult.hasPreventTextChatUntilDate;
}
- (uint32_t) preventTextChatUntilDate {
  return _builderResult.preventTextChatUntilDate;
}
- (CSODOTAGameAccountClient_Builder*) setPreventTextChatUntilDate:(uint32_t) value {
  _builderResult.hasPreventTextChatUntilDate = YES;
  _builderResult.preventTextChatUntilDate = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearPreventTextChatUntilDate {
  _builderResult.hasPreventTextChatUntilDate = NO;
  _builderResult.preventTextChatUntilDate = 0;
  return self;
}
- (BOOL) hasPreventVoiceUntilDate {
  return _builderResult.hasPreventVoiceUntilDate;
}
- (uint32_t) preventVoiceUntilDate {
  return _builderResult.preventVoiceUntilDate;
}
- (CSODOTAGameAccountClient_Builder*) setPreventVoiceUntilDate:(uint32_t) value {
  _builderResult.hasPreventVoiceUntilDate = YES;
  _builderResult.preventVoiceUntilDate = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearPreventVoiceUntilDate {
  _builderResult.hasPreventVoiceUntilDate = NO;
  _builderResult.preventVoiceUntilDate = 0;
  return self;
}
- (BOOL) hasLastAbandonedGameDate {
  return _builderResult.hasLastAbandonedGameDate;
}
- (uint32_t) lastAbandonedGameDate {
  return _builderResult.lastAbandonedGameDate;
}
- (CSODOTAGameAccountClient_Builder*) setLastAbandonedGameDate:(uint32_t) value {
  _builderResult.hasLastAbandonedGameDate = YES;
  _builderResult.lastAbandonedGameDate = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearLastAbandonedGameDate {
  _builderResult.hasLastAbandonedGameDate = NO;
  _builderResult.lastAbandonedGameDate = 0;
  return self;
}
- (BOOL) hasLeaverPenaltyCount {
  return _builderResult.hasLeaverPenaltyCount;
}
- (uint32_t) leaverPenaltyCount {
  return _builderResult.leaverPenaltyCount;
}
- (CSODOTAGameAccountClient_Builder*) setLeaverPenaltyCount:(uint32_t) value {
  _builderResult.hasLeaverPenaltyCount = YES;
  _builderResult.leaverPenaltyCount = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearLeaverPenaltyCount {
  _builderResult.hasLeaverPenaltyCount = NO;
  _builderResult.leaverPenaltyCount = 0;
  return self;
}
- (BOOL) hasCompletedGameStreak {
  return _builderResult.hasCompletedGameStreak;
}
- (uint32_t) completedGameStreak {
  return _builderResult.completedGameStreak;
}
- (CSODOTAGameAccountClient_Builder*) setCompletedGameStreak:(uint32_t) value {
  _builderResult.hasCompletedGameStreak = YES;
  _builderResult.completedGameStreak = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearCompletedGameStreak {
  _builderResult.hasCompletedGameStreak = NO;
  _builderResult.completedGameStreak = 0;
  return self;
}
- (BOOL) hasTeaching {
  return _builderResult.hasTeaching;
}
- (uint32_t) teaching {
  return _builderResult.teaching;
}
- (CSODOTAGameAccountClient_Builder*) setTeaching:(uint32_t) value {
  _builderResult.hasTeaching = YES;
  _builderResult.teaching = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearTeaching {
  _builderResult.hasTeaching = NO;
  _builderResult.teaching = 0;
  return self;
}
- (BOOL) hasLeadership {
  return _builderResult.hasLeadership;
}
- (uint32_t) leadership {
  return _builderResult.leadership;
}
- (CSODOTAGameAccountClient_Builder*) setLeadership:(uint32_t) value {
  _builderResult.hasLeadership = YES;
  _builderResult.leadership = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearLeadership {
  _builderResult.hasLeadership = NO;
  _builderResult.leadership = 0;
  return self;
}
- (BOOL) hasFriendly {
  return _builderResult.hasFriendly;
}
- (uint32_t) friendly {
  return _builderResult.friendly;
}
- (CSODOTAGameAccountClient_Builder*) setFriendly:(uint32_t) value {
  _builderResult.hasFriendly = YES;
  _builderResult.friendly = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearFriendly {
  _builderResult.hasFriendly = NO;
  _builderResult.friendly = 0;
  return self;
}
- (BOOL) hasForgiving {
  return _builderResult.hasForgiving;
}
- (uint32_t) forgiving {
  return _builderResult.forgiving;
}
- (CSODOTAGameAccountClient_Builder*) setForgiving:(uint32_t) value {
  _builderResult.hasForgiving = YES;
  _builderResult.forgiving = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearForgiving {
  _builderResult.hasForgiving = NO;
  _builderResult.forgiving = 0;
  return self;
}
- (BOOL) hasSuccessfulReportCount {
  return _builderResult.hasSuccessfulReportCount;
}
- (uint32_t) successfulReportCount {
  return _builderResult.successfulReportCount;
}
- (CSODOTAGameAccountClient_Builder*) setSuccessfulReportCount:(uint32_t) value {
  _builderResult.hasSuccessfulReportCount = YES;
  _builderResult.successfulReportCount = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearSuccessfulReportCount {
  _builderResult.hasSuccessfulReportCount = NO;
  _builderResult.successfulReportCount = 0;
  return self;
}
- (BOOL) hasNotifySuccessfulReport {
  return _builderResult.hasNotifySuccessfulReport;
}
- (uint32_t) notifySuccessfulReport {
  return _builderResult.notifySuccessfulReport;
}
- (CSODOTAGameAccountClient_Builder*) setNotifySuccessfulReport:(uint32_t) value {
  _builderResult.hasNotifySuccessfulReport = YES;
  _builderResult.notifySuccessfulReport = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearNotifySuccessfulReport {
  _builderResult.hasNotifySuccessfulReport = NO;
  _builderResult.notifySuccessfulReport = 0;
  return self;
}
- (BOOL) hasAccountDisabledUntilDate {
  return _builderResult.hasAccountDisabledUntilDate;
}
- (uint32_t) accountDisabledUntilDate {
  return _builderResult.accountDisabledUntilDate;
}
- (CSODOTAGameAccountClient_Builder*) setAccountDisabledUntilDate:(uint32_t) value {
  _builderResult.hasAccountDisabledUntilDate = YES;
  _builderResult.accountDisabledUntilDate = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearAccountDisabledUntilDate {
  _builderResult.hasAccountDisabledUntilDate = NO;
  _builderResult.accountDisabledUntilDate = 0;
  return self;
}
- (BOOL) hasAccountDisabledCount {
  return _builderResult.hasAccountDisabledCount;
}
- (uint32_t) accountDisabledCount {
  return _builderResult.accountDisabledCount;
}
- (CSODOTAGameAccountClient_Builder*) setAccountDisabledCount:(uint32_t) value {
  _builderResult.hasAccountDisabledCount = YES;
  _builderResult.accountDisabledCount = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearAccountDisabledCount {
  _builderResult.hasAccountDisabledCount = NO;
  _builderResult.accountDisabledCount = 0;
  return self;
}
- (BOOL) hasShowcaseHeroId {
  return _builderResult.hasShowcaseHeroId;
}
- (uint32_t) showcaseHeroId {
  return _builderResult.showcaseHeroId;
}
- (CSODOTAGameAccountClient_Builder*) setShowcaseHeroId:(uint32_t) value {
  _builderResult.hasShowcaseHeroId = YES;
  _builderResult.showcaseHeroId = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearShowcaseHeroId {
  _builderResult.hasShowcaseHeroId = NO;
  _builderResult.showcaseHeroId = 0;
  return self;
}
- (BOOL) hasMatchDisabledUntilDate {
  return _builderResult.hasMatchDisabledUntilDate;
}
- (uint32_t) matchDisabledUntilDate {
  return _builderResult.matchDisabledUntilDate;
}
- (CSODOTAGameAccountClient_Builder*) setMatchDisabledUntilDate:(uint32_t) value {
  _builderResult.hasMatchDisabledUntilDate = YES;
  _builderResult.matchDisabledUntilDate = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearMatchDisabledUntilDate {
  _builderResult.hasMatchDisabledUntilDate = NO;
  _builderResult.matchDisabledUntilDate = 0;
  return self;
}
- (BOOL) hasMatchDisabledCount {
  return _builderResult.hasMatchDisabledCount;
}
- (uint32_t) matchDisabledCount {
  return _builderResult.matchDisabledCount;
}
- (CSODOTAGameAccountClient_Builder*) setMatchDisabledCount:(uint32_t) value {
  _builderResult.hasMatchDisabledCount = YES;
  _builderResult.matchDisabledCount = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearMatchDisabledCount {
  _builderResult.hasMatchDisabledCount = NO;
  _builderResult.matchDisabledCount = 0;
  return self;
}
- (BOOL) hasTeamCreationDisabledUntilDate {
  return _builderResult.hasTeamCreationDisabledUntilDate;
}
- (uint32_t) teamCreationDisabledUntilDate {
  return _builderResult.teamCreationDisabledUntilDate;
}
- (CSODOTAGameAccountClient_Builder*) setTeamCreationDisabledUntilDate:(uint32_t) value {
  _builderResult.hasTeamCreationDisabledUntilDate = YES;
  _builderResult.teamCreationDisabledUntilDate = value;
  return self;
}
- (CSODOTAGameAccountClient_Builder*) clearTeamCreationDisabledUntilDate {
  _builderResult.hasTeamCreationDisabledUntilDate = NO;
  _builderResult.teamCreationDisabledUntilDate = 0;
  return self;
}
@end

@interface CSODOTAGameAccountClientInternal ()
@property uint32_t rank;
@property uint32_t rankUncertainty;
@property int32_t winLossStreak;
@property uint32_t feedingCount;
@property uint32_t voiceReports;
@property uint32_t textReports;
@property uint32_t abilityReports;
@property uint32_t feedingReports;
@property uint32_t automaticReportPenalty;
@property uint32_t gamesSinceReportPenalty;
@property uint32_t reportPenaltyCount;
@property uint32_t pendingDetectedReports;
@property uint32_t pendingInGameReports;
@property uint32_t pendingOutOfGameReports;
@property uint32_t automatedPenaltyDate;
@end

@implementation CSODOTAGameAccountClientInternal

- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value_ {
  hasRank_ = !!value_;
}
@synthesize rank;
- (BOOL) hasRankUncertainty {
  return !!hasRankUncertainty_;
}
- (void) setHasRankUncertainty:(BOOL) value_ {
  hasRankUncertainty_ = !!value_;
}
@synthesize rankUncertainty;
- (BOOL) hasWinLossStreak {
  return !!hasWinLossStreak_;
}
- (void) setHasWinLossStreak:(BOOL) value_ {
  hasWinLossStreak_ = !!value_;
}
@synthesize winLossStreak;
- (BOOL) hasFeedingCount {
  return !!hasFeedingCount_;
}
- (void) setHasFeedingCount:(BOOL) value_ {
  hasFeedingCount_ = !!value_;
}
@synthesize feedingCount;
- (BOOL) hasVoiceReports {
  return !!hasVoiceReports_;
}
- (void) setHasVoiceReports:(BOOL) value_ {
  hasVoiceReports_ = !!value_;
}
@synthesize voiceReports;
- (BOOL) hasTextReports {
  return !!hasTextReports_;
}
- (void) setHasTextReports:(BOOL) value_ {
  hasTextReports_ = !!value_;
}
@synthesize textReports;
- (BOOL) hasAbilityReports {
  return !!hasAbilityReports_;
}
- (void) setHasAbilityReports:(BOOL) value_ {
  hasAbilityReports_ = !!value_;
}
@synthesize abilityReports;
- (BOOL) hasFeedingReports {
  return !!hasFeedingReports_;
}
- (void) setHasFeedingReports:(BOOL) value_ {
  hasFeedingReports_ = !!value_;
}
@synthesize feedingReports;
- (BOOL) hasAutomaticReportPenalty {
  return !!hasAutomaticReportPenalty_;
}
- (void) setHasAutomaticReportPenalty:(BOOL) value_ {
  hasAutomaticReportPenalty_ = !!value_;
}
@synthesize automaticReportPenalty;
- (BOOL) hasGamesSinceReportPenalty {
  return !!hasGamesSinceReportPenalty_;
}
- (void) setHasGamesSinceReportPenalty:(BOOL) value_ {
  hasGamesSinceReportPenalty_ = !!value_;
}
@synthesize gamesSinceReportPenalty;
- (BOOL) hasReportPenaltyCount {
  return !!hasReportPenaltyCount_;
}
- (void) setHasReportPenaltyCount:(BOOL) value_ {
  hasReportPenaltyCount_ = !!value_;
}
@synthesize reportPenaltyCount;
- (BOOL) hasPendingDetectedReports {
  return !!hasPendingDetectedReports_;
}
- (void) setHasPendingDetectedReports:(BOOL) value_ {
  hasPendingDetectedReports_ = !!value_;
}
@synthesize pendingDetectedReports;
- (BOOL) hasPendingInGameReports {
  return !!hasPendingInGameReports_;
}
- (void) setHasPendingInGameReports:(BOOL) value_ {
  hasPendingInGameReports_ = !!value_;
}
@synthesize pendingInGameReports;
- (BOOL) hasPendingOutOfGameReports {
  return !!hasPendingOutOfGameReports_;
}
- (void) setHasPendingOutOfGameReports:(BOOL) value_ {
  hasPendingOutOfGameReports_ = !!value_;
}
@synthesize pendingOutOfGameReports;
- (BOOL) hasAutomatedPenaltyDate {
  return !!hasAutomatedPenaltyDate_;
}
- (void) setHasAutomatedPenaltyDate:(BOOL) value_ {
  hasAutomatedPenaltyDate_ = !!value_;
}
@synthesize automatedPenaltyDate;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.rank = 0;
    self.rankUncertainty = 0;
    self.winLossStreak = 0;
    self.feedingCount = 0;
    self.voiceReports = 0;
    self.textReports = 0;
    self.abilityReports = 0;
    self.feedingReports = 0;
    self.automaticReportPenalty = 0;
    self.gamesSinceReportPenalty = 0;
    self.reportPenaltyCount = 0;
    self.pendingDetectedReports = 0;
    self.pendingInGameReports = 0;
    self.pendingOutOfGameReports = 0;
    self.automatedPenaltyDate = 0;
  }
  return self;
}
static CSODOTAGameAccountClientInternal* defaultCSODOTAGameAccountClientInternalInstance = nil;
+ (void) initialize {
  if (self == [CSODOTAGameAccountClientInternal class]) {
    defaultCSODOTAGameAccountClientInternalInstance = [[CSODOTAGameAccountClientInternal alloc] init];
  }
}
+ (CSODOTAGameAccountClientInternal*) defaultInstance {
  return defaultCSODOTAGameAccountClientInternalInstance;
}
- (CSODOTAGameAccountClientInternal*) defaultInstance {
  return defaultCSODOTAGameAccountClientInternalInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRank) {
    [output writeUInt32:1 value:self.rank];
  }
  if (self.hasRankUncertainty) {
    [output writeUInt32:2 value:self.rankUncertainty];
  }
  if (self.hasWinLossStreak) {
    [output writeInt32:3 value:self.winLossStreak];
  }
  if (self.hasFeedingCount) {
    [output writeUInt32:5 value:self.feedingCount];
  }
  if (self.hasVoiceReports) {
    [output writeUInt32:7 value:self.voiceReports];
  }
  if (self.hasTextReports) {
    [output writeUInt32:8 value:self.textReports];
  }
  if (self.hasAbilityReports) {
    [output writeUInt32:9 value:self.abilityReports];
  }
  if (self.hasFeedingReports) {
    [output writeUInt32:10 value:self.feedingReports];
  }
  if (self.hasAutomaticReportPenalty) {
    [output writeUInt32:11 value:self.automaticReportPenalty];
  }
  if (self.hasGamesSinceReportPenalty) {
    [output writeUInt32:12 value:self.gamesSinceReportPenalty];
  }
  if (self.hasReportPenaltyCount) {
    [output writeUInt32:13 value:self.reportPenaltyCount];
  }
  if (self.hasPendingDetectedReports) {
    [output writeUInt32:14 value:self.pendingDetectedReports];
  }
  if (self.hasPendingInGameReports) {
    [output writeUInt32:15 value:self.pendingInGameReports];
  }
  if (self.hasPendingOutOfGameReports) {
    [output writeUInt32:16 value:self.pendingOutOfGameReports];
  }
  if (self.hasAutomatedPenaltyDate) {
    [output writeUInt32:17 value:self.automatedPenaltyDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRank) {
    size_ += computeUInt32Size(1, self.rank);
  }
  if (self.hasRankUncertainty) {
    size_ += computeUInt32Size(2, self.rankUncertainty);
  }
  if (self.hasWinLossStreak) {
    size_ += computeInt32Size(3, self.winLossStreak);
  }
  if (self.hasFeedingCount) {
    size_ += computeUInt32Size(5, self.feedingCount);
  }
  if (self.hasVoiceReports) {
    size_ += computeUInt32Size(7, self.voiceReports);
  }
  if (self.hasTextReports) {
    size_ += computeUInt32Size(8, self.textReports);
  }
  if (self.hasAbilityReports) {
    size_ += computeUInt32Size(9, self.abilityReports);
  }
  if (self.hasFeedingReports) {
    size_ += computeUInt32Size(10, self.feedingReports);
  }
  if (self.hasAutomaticReportPenalty) {
    size_ += computeUInt32Size(11, self.automaticReportPenalty);
  }
  if (self.hasGamesSinceReportPenalty) {
    size_ += computeUInt32Size(12, self.gamesSinceReportPenalty);
  }
  if (self.hasReportPenaltyCount) {
    size_ += computeUInt32Size(13, self.reportPenaltyCount);
  }
  if (self.hasPendingDetectedReports) {
    size_ += computeUInt32Size(14, self.pendingDetectedReports);
  }
  if (self.hasPendingInGameReports) {
    size_ += computeUInt32Size(15, self.pendingInGameReports);
  }
  if (self.hasPendingOutOfGameReports) {
    size_ += computeUInt32Size(16, self.pendingOutOfGameReports);
  }
  if (self.hasAutomatedPenaltyDate) {
    size_ += computeUInt32Size(17, self.automatedPenaltyDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTAGameAccountClientInternal*) parseFromData:(NSData*) data {
  return (CSODOTAGameAccountClientInternal*)[[[CSODOTAGameAccountClientInternal builder] mergeFromData:data] build];
}
+ (CSODOTAGameAccountClientInternal*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameAccountClientInternal*)[[[CSODOTAGameAccountClientInternal builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameAccountClientInternal*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTAGameAccountClientInternal*)[[[CSODOTAGameAccountClientInternal builder] mergeFromInputStream:input] build];
}
+ (CSODOTAGameAccountClientInternal*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameAccountClientInternal*)[[[CSODOTAGameAccountClientInternal builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameAccountClientInternal*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTAGameAccountClientInternal*)[[[CSODOTAGameAccountClientInternal builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTAGameAccountClientInternal*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameAccountClientInternal*)[[[CSODOTAGameAccountClientInternal builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameAccountClientInternal_Builder*) builder {
  return [[[CSODOTAGameAccountClientInternal_Builder alloc] init] autorelease];
}
+ (CSODOTAGameAccountClientInternal_Builder*) builderWithPrototype:(CSODOTAGameAccountClientInternal*) prototype {
  return [[CSODOTAGameAccountClientInternal builder] mergeFrom:prototype];
}
- (CSODOTAGameAccountClientInternal_Builder*) builder {
  return [CSODOTAGameAccountClientInternal builder];
}
- (CSODOTAGameAccountClientInternal_Builder*) toBuilder {
  return [CSODOTAGameAccountClientInternal builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rank", [NSNumber numberWithInt:self.rank]];
  }
  if (self.hasRankUncertainty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rankUncertainty", [NSNumber numberWithInt:self.rankUncertainty]];
  }
  if (self.hasWinLossStreak) {
    [output appendFormat:@"%@%@: %@\n", indent, @"winLossStreak", [NSNumber numberWithInt:self.winLossStreak]];
  }
  if (self.hasFeedingCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedingCount", [NSNumber numberWithInt:self.feedingCount]];
  }
  if (self.hasVoiceReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voiceReports", [NSNumber numberWithInt:self.voiceReports]];
  }
  if (self.hasTextReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textReports", [NSNumber numberWithInt:self.textReports]];
  }
  if (self.hasAbilityReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abilityReports", [NSNumber numberWithInt:self.abilityReports]];
  }
  if (self.hasFeedingReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedingReports", [NSNumber numberWithInt:self.feedingReports]];
  }
  if (self.hasAutomaticReportPenalty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"automaticReportPenalty", [NSNumber numberWithInt:self.automaticReportPenalty]];
  }
  if (self.hasGamesSinceReportPenalty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gamesSinceReportPenalty", [NSNumber numberWithInt:self.gamesSinceReportPenalty]];
  }
  if (self.hasReportPenaltyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reportPenaltyCount", [NSNumber numberWithInt:self.reportPenaltyCount]];
  }
  if (self.hasPendingDetectedReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pendingDetectedReports", [NSNumber numberWithInt:self.pendingDetectedReports]];
  }
  if (self.hasPendingInGameReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pendingInGameReports", [NSNumber numberWithInt:self.pendingInGameReports]];
  }
  if (self.hasPendingOutOfGameReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pendingOutOfGameReports", [NSNumber numberWithInt:self.pendingOutOfGameReports]];
  }
  if (self.hasAutomatedPenaltyDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"automatedPenaltyDate", [NSNumber numberWithInt:self.automatedPenaltyDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTAGameAccountClientInternal class]]) {
    return NO;
  }
  CSODOTAGameAccountClientInternal *otherMessage = other;
  return
      self.hasRank == otherMessage.hasRank &&
      (!self.hasRank || self.rank == otherMessage.rank) &&
      self.hasRankUncertainty == otherMessage.hasRankUncertainty &&
      (!self.hasRankUncertainty || self.rankUncertainty == otherMessage.rankUncertainty) &&
      self.hasWinLossStreak == otherMessage.hasWinLossStreak &&
      (!self.hasWinLossStreak || self.winLossStreak == otherMessage.winLossStreak) &&
      self.hasFeedingCount == otherMessage.hasFeedingCount &&
      (!self.hasFeedingCount || self.feedingCount == otherMessage.feedingCount) &&
      self.hasVoiceReports == otherMessage.hasVoiceReports &&
      (!self.hasVoiceReports || self.voiceReports == otherMessage.voiceReports) &&
      self.hasTextReports == otherMessage.hasTextReports &&
      (!self.hasTextReports || self.textReports == otherMessage.textReports) &&
      self.hasAbilityReports == otherMessage.hasAbilityReports &&
      (!self.hasAbilityReports || self.abilityReports == otherMessage.abilityReports) &&
      self.hasFeedingReports == otherMessage.hasFeedingReports &&
      (!self.hasFeedingReports || self.feedingReports == otherMessage.feedingReports) &&
      self.hasAutomaticReportPenalty == otherMessage.hasAutomaticReportPenalty &&
      (!self.hasAutomaticReportPenalty || self.automaticReportPenalty == otherMessage.automaticReportPenalty) &&
      self.hasGamesSinceReportPenalty == otherMessage.hasGamesSinceReportPenalty &&
      (!self.hasGamesSinceReportPenalty || self.gamesSinceReportPenalty == otherMessage.gamesSinceReportPenalty) &&
      self.hasReportPenaltyCount == otherMessage.hasReportPenaltyCount &&
      (!self.hasReportPenaltyCount || self.reportPenaltyCount == otherMessage.reportPenaltyCount) &&
      self.hasPendingDetectedReports == otherMessage.hasPendingDetectedReports &&
      (!self.hasPendingDetectedReports || self.pendingDetectedReports == otherMessage.pendingDetectedReports) &&
      self.hasPendingInGameReports == otherMessage.hasPendingInGameReports &&
      (!self.hasPendingInGameReports || self.pendingInGameReports == otherMessage.pendingInGameReports) &&
      self.hasPendingOutOfGameReports == otherMessage.hasPendingOutOfGameReports &&
      (!self.hasPendingOutOfGameReports || self.pendingOutOfGameReports == otherMessage.pendingOutOfGameReports) &&
      self.hasAutomatedPenaltyDate == otherMessage.hasAutomatedPenaltyDate &&
      (!self.hasAutomatedPenaltyDate || self.automatedPenaltyDate == otherMessage.automatedPenaltyDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rank] hash];
  }
  if (self.hasRankUncertainty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rankUncertainty] hash];
  }
  if (self.hasWinLossStreak) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.winLossStreak] hash];
  }
  if (self.hasFeedingCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.feedingCount] hash];
  }
  if (self.hasVoiceReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.voiceReports] hash];
  }
  if (self.hasTextReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.textReports] hash];
  }
  if (self.hasAbilityReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.abilityReports] hash];
  }
  if (self.hasFeedingReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.feedingReports] hash];
  }
  if (self.hasAutomaticReportPenalty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.automaticReportPenalty] hash];
  }
  if (self.hasGamesSinceReportPenalty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gamesSinceReportPenalty] hash];
  }
  if (self.hasReportPenaltyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reportPenaltyCount] hash];
  }
  if (self.hasPendingDetectedReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.pendingDetectedReports] hash];
  }
  if (self.hasPendingInGameReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.pendingInGameReports] hash];
  }
  if (self.hasPendingOutOfGameReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.pendingOutOfGameReports] hash];
  }
  if (self.hasAutomatedPenaltyDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.automatedPenaltyDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTAGameAccountClientInternal_Builder()
@property (retain) CSODOTAGameAccountClientInternal* _builderResult;
@end

@implementation CSODOTAGameAccountClientInternal_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTAGameAccountClientInternal alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTAGameAccountClientInternal_Builder*) clear {
  _builderResult = [[[CSODOTAGameAccountClientInternal alloc] init] autorelease];
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clone {
  return [CSODOTAGameAccountClientInternal builderWithPrototype:_builderResult];
}
- (CSODOTAGameAccountClientInternal*) defaultInstance {
  return [CSODOTAGameAccountClientInternal defaultInstance];
}
- (CSODOTAGameAccountClientInternal*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTAGameAccountClientInternal*) buildPartial {
  CSODOTAGameAccountClientInternal* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTAGameAccountClientInternal_Builder*) mergeFrom:(CSODOTAGameAccountClientInternal*) other {
  if (other == [CSODOTAGameAccountClientInternal defaultInstance]) {
    return self;
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasRankUncertainty) {
    [self setRankUncertainty:other.rankUncertainty];
  }
  if (other.hasWinLossStreak) {
    [self setWinLossStreak:other.winLossStreak];
  }
  if (other.hasFeedingCount) {
    [self setFeedingCount:other.feedingCount];
  }
  if (other.hasVoiceReports) {
    [self setVoiceReports:other.voiceReports];
  }
  if (other.hasTextReports) {
    [self setTextReports:other.textReports];
  }
  if (other.hasAbilityReports) {
    [self setAbilityReports:other.abilityReports];
  }
  if (other.hasFeedingReports) {
    [self setFeedingReports:other.feedingReports];
  }
  if (other.hasAutomaticReportPenalty) {
    [self setAutomaticReportPenalty:other.automaticReportPenalty];
  }
  if (other.hasGamesSinceReportPenalty) {
    [self setGamesSinceReportPenalty:other.gamesSinceReportPenalty];
  }
  if (other.hasReportPenaltyCount) {
    [self setReportPenaltyCount:other.reportPenaltyCount];
  }
  if (other.hasPendingDetectedReports) {
    [self setPendingDetectedReports:other.pendingDetectedReports];
  }
  if (other.hasPendingInGameReports) {
    [self setPendingInGameReports:other.pendingInGameReports];
  }
  if (other.hasPendingOutOfGameReports) {
    [self setPendingOutOfGameReports:other.pendingOutOfGameReports];
  }
  if (other.hasAutomatedPenaltyDate) {
    [self setAutomatedPenaltyDate:other.automatedPenaltyDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTAGameAccountClientInternal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRank:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRankUncertainty:[input readUInt32]];
        break;
      }
      case 24: {
        [self setWinLossStreak:[input readInt32]];
        break;
      }
      case 40: {
        [self setFeedingCount:[input readUInt32]];
        break;
      }
      case 56: {
        [self setVoiceReports:[input readUInt32]];
        break;
      }
      case 64: {
        [self setTextReports:[input readUInt32]];
        break;
      }
      case 72: {
        [self setAbilityReports:[input readUInt32]];
        break;
      }
      case 80: {
        [self setFeedingReports:[input readUInt32]];
        break;
      }
      case 88: {
        [self setAutomaticReportPenalty:[input readUInt32]];
        break;
      }
      case 96: {
        [self setGamesSinceReportPenalty:[input readUInt32]];
        break;
      }
      case 104: {
        [self setReportPenaltyCount:[input readUInt32]];
        break;
      }
      case 112: {
        [self setPendingDetectedReports:[input readUInt32]];
        break;
      }
      case 120: {
        [self setPendingInGameReports:[input readUInt32]];
        break;
      }
      case 128: {
        [self setPendingOutOfGameReports:[input readUInt32]];
        break;
      }
      case 136: {
        [self setAutomatedPenaltyDate:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRank {
  return _builderResult.hasRank;
}
- (uint32_t) rank {
  return _builderResult.rank;
}
- (CSODOTAGameAccountClientInternal_Builder*) setRank:(uint32_t) value {
  _builderResult.hasRank = YES;
  _builderResult.rank = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearRank {
  _builderResult.hasRank = NO;
  _builderResult.rank = 0;
  return self;
}
- (BOOL) hasRankUncertainty {
  return _builderResult.hasRankUncertainty;
}
- (uint32_t) rankUncertainty {
  return _builderResult.rankUncertainty;
}
- (CSODOTAGameAccountClientInternal_Builder*) setRankUncertainty:(uint32_t) value {
  _builderResult.hasRankUncertainty = YES;
  _builderResult.rankUncertainty = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearRankUncertainty {
  _builderResult.hasRankUncertainty = NO;
  _builderResult.rankUncertainty = 0;
  return self;
}
- (BOOL) hasWinLossStreak {
  return _builderResult.hasWinLossStreak;
}
- (int32_t) winLossStreak {
  return _builderResult.winLossStreak;
}
- (CSODOTAGameAccountClientInternal_Builder*) setWinLossStreak:(int32_t) value {
  _builderResult.hasWinLossStreak = YES;
  _builderResult.winLossStreak = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearWinLossStreak {
  _builderResult.hasWinLossStreak = NO;
  _builderResult.winLossStreak = 0;
  return self;
}
- (BOOL) hasFeedingCount {
  return _builderResult.hasFeedingCount;
}
- (uint32_t) feedingCount {
  return _builderResult.feedingCount;
}
- (CSODOTAGameAccountClientInternal_Builder*) setFeedingCount:(uint32_t) value {
  _builderResult.hasFeedingCount = YES;
  _builderResult.feedingCount = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearFeedingCount {
  _builderResult.hasFeedingCount = NO;
  _builderResult.feedingCount = 0;
  return self;
}
- (BOOL) hasVoiceReports {
  return _builderResult.hasVoiceReports;
}
- (uint32_t) voiceReports {
  return _builderResult.voiceReports;
}
- (CSODOTAGameAccountClientInternal_Builder*) setVoiceReports:(uint32_t) value {
  _builderResult.hasVoiceReports = YES;
  _builderResult.voiceReports = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearVoiceReports {
  _builderResult.hasVoiceReports = NO;
  _builderResult.voiceReports = 0;
  return self;
}
- (BOOL) hasTextReports {
  return _builderResult.hasTextReports;
}
- (uint32_t) textReports {
  return _builderResult.textReports;
}
- (CSODOTAGameAccountClientInternal_Builder*) setTextReports:(uint32_t) value {
  _builderResult.hasTextReports = YES;
  _builderResult.textReports = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearTextReports {
  _builderResult.hasTextReports = NO;
  _builderResult.textReports = 0;
  return self;
}
- (BOOL) hasAbilityReports {
  return _builderResult.hasAbilityReports;
}
- (uint32_t) abilityReports {
  return _builderResult.abilityReports;
}
- (CSODOTAGameAccountClientInternal_Builder*) setAbilityReports:(uint32_t) value {
  _builderResult.hasAbilityReports = YES;
  _builderResult.abilityReports = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearAbilityReports {
  _builderResult.hasAbilityReports = NO;
  _builderResult.abilityReports = 0;
  return self;
}
- (BOOL) hasFeedingReports {
  return _builderResult.hasFeedingReports;
}
- (uint32_t) feedingReports {
  return _builderResult.feedingReports;
}
- (CSODOTAGameAccountClientInternal_Builder*) setFeedingReports:(uint32_t) value {
  _builderResult.hasFeedingReports = YES;
  _builderResult.feedingReports = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearFeedingReports {
  _builderResult.hasFeedingReports = NO;
  _builderResult.feedingReports = 0;
  return self;
}
- (BOOL) hasAutomaticReportPenalty {
  return _builderResult.hasAutomaticReportPenalty;
}
- (uint32_t) automaticReportPenalty {
  return _builderResult.automaticReportPenalty;
}
- (CSODOTAGameAccountClientInternal_Builder*) setAutomaticReportPenalty:(uint32_t) value {
  _builderResult.hasAutomaticReportPenalty = YES;
  _builderResult.automaticReportPenalty = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearAutomaticReportPenalty {
  _builderResult.hasAutomaticReportPenalty = NO;
  _builderResult.automaticReportPenalty = 0;
  return self;
}
- (BOOL) hasGamesSinceReportPenalty {
  return _builderResult.hasGamesSinceReportPenalty;
}
- (uint32_t) gamesSinceReportPenalty {
  return _builderResult.gamesSinceReportPenalty;
}
- (CSODOTAGameAccountClientInternal_Builder*) setGamesSinceReportPenalty:(uint32_t) value {
  _builderResult.hasGamesSinceReportPenalty = YES;
  _builderResult.gamesSinceReportPenalty = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearGamesSinceReportPenalty {
  _builderResult.hasGamesSinceReportPenalty = NO;
  _builderResult.gamesSinceReportPenalty = 0;
  return self;
}
- (BOOL) hasReportPenaltyCount {
  return _builderResult.hasReportPenaltyCount;
}
- (uint32_t) reportPenaltyCount {
  return _builderResult.reportPenaltyCount;
}
- (CSODOTAGameAccountClientInternal_Builder*) setReportPenaltyCount:(uint32_t) value {
  _builderResult.hasReportPenaltyCount = YES;
  _builderResult.reportPenaltyCount = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearReportPenaltyCount {
  _builderResult.hasReportPenaltyCount = NO;
  _builderResult.reportPenaltyCount = 0;
  return self;
}
- (BOOL) hasPendingDetectedReports {
  return _builderResult.hasPendingDetectedReports;
}
- (uint32_t) pendingDetectedReports {
  return _builderResult.pendingDetectedReports;
}
- (CSODOTAGameAccountClientInternal_Builder*) setPendingDetectedReports:(uint32_t) value {
  _builderResult.hasPendingDetectedReports = YES;
  _builderResult.pendingDetectedReports = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearPendingDetectedReports {
  _builderResult.hasPendingDetectedReports = NO;
  _builderResult.pendingDetectedReports = 0;
  return self;
}
- (BOOL) hasPendingInGameReports {
  return _builderResult.hasPendingInGameReports;
}
- (uint32_t) pendingInGameReports {
  return _builderResult.pendingInGameReports;
}
- (CSODOTAGameAccountClientInternal_Builder*) setPendingInGameReports:(uint32_t) value {
  _builderResult.hasPendingInGameReports = YES;
  _builderResult.pendingInGameReports = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearPendingInGameReports {
  _builderResult.hasPendingInGameReports = NO;
  _builderResult.pendingInGameReports = 0;
  return self;
}
- (BOOL) hasPendingOutOfGameReports {
  return _builderResult.hasPendingOutOfGameReports;
}
- (uint32_t) pendingOutOfGameReports {
  return _builderResult.pendingOutOfGameReports;
}
- (CSODOTAGameAccountClientInternal_Builder*) setPendingOutOfGameReports:(uint32_t) value {
  _builderResult.hasPendingOutOfGameReports = YES;
  _builderResult.pendingOutOfGameReports = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearPendingOutOfGameReports {
  _builderResult.hasPendingOutOfGameReports = NO;
  _builderResult.pendingOutOfGameReports = 0;
  return self;
}
- (BOOL) hasAutomatedPenaltyDate {
  return _builderResult.hasAutomatedPenaltyDate;
}
- (uint32_t) automatedPenaltyDate {
  return _builderResult.automatedPenaltyDate;
}
- (CSODOTAGameAccountClientInternal_Builder*) setAutomatedPenaltyDate:(uint32_t) value {
  _builderResult.hasAutomatedPenaltyDate = YES;
  _builderResult.automatedPenaltyDate = value;
  return self;
}
- (CSODOTAGameAccountClientInternal_Builder*) clearAutomatedPenaltyDate {
  _builderResult.hasAutomatedPenaltyDate = NO;
  _builderResult.automatedPenaltyDate = 0;
  return self;
}
@end

@interface CSODOTAGameHeroStandings ()
@property uint32_t accountId;
@property uint32_t heroId;
@property uint32_t wins;
@property uint32_t losses;
@property Float32 heroPerformance;
@property Float32 heroVariance;
@end

@implementation CSODOTAGameHeroStandings

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (BOOL) hasWins {
  return !!hasWins_;
}
- (void) setHasWins:(BOOL) value_ {
  hasWins_ = !!value_;
}
@synthesize wins;
- (BOOL) hasLosses {
  return !!hasLosses_;
}
- (void) setHasLosses:(BOOL) value_ {
  hasLosses_ = !!value_;
}
@synthesize losses;
- (BOOL) hasHeroPerformance {
  return !!hasHeroPerformance_;
}
- (void) setHasHeroPerformance:(BOOL) value_ {
  hasHeroPerformance_ = !!value_;
}
@synthesize heroPerformance;
- (BOOL) hasHeroVariance {
  return !!hasHeroVariance_;
}
- (void) setHasHeroVariance:(BOOL) value_ {
  hasHeroVariance_ = !!value_;
}
@synthesize heroVariance;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.heroId = 0;
    self.wins = 0;
    self.losses = 0;
    self.heroPerformance = 0;
    self.heroVariance = 0;
  }
  return self;
}
static CSODOTAGameHeroStandings* defaultCSODOTAGameHeroStandingsInstance = nil;
+ (void) initialize {
  if (self == [CSODOTAGameHeroStandings class]) {
    defaultCSODOTAGameHeroStandingsInstance = [[CSODOTAGameHeroStandings alloc] init];
  }
}
+ (CSODOTAGameHeroStandings*) defaultInstance {
  return defaultCSODOTAGameHeroStandingsInstance;
}
- (CSODOTAGameHeroStandings*) defaultInstance {
  return defaultCSODOTAGameHeroStandingsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasHeroId) {
    [output writeUInt32:2 value:self.heroId];
  }
  if (self.hasWins) {
    [output writeUInt32:3 value:self.wins];
  }
  if (self.hasLosses) {
    [output writeUInt32:4 value:self.losses];
  }
  if (self.hasHeroPerformance) {
    [output writeFloat:5 value:self.heroPerformance];
  }
  if (self.hasHeroVariance) {
    [output writeFloat:6 value:self.heroVariance];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(2, self.heroId);
  }
  if (self.hasWins) {
    size_ += computeUInt32Size(3, self.wins);
  }
  if (self.hasLosses) {
    size_ += computeUInt32Size(4, self.losses);
  }
  if (self.hasHeroPerformance) {
    size_ += computeFloatSize(5, self.heroPerformance);
  }
  if (self.hasHeroVariance) {
    size_ += computeFloatSize(6, self.heroVariance);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTAGameHeroStandings*) parseFromData:(NSData*) data {
  return (CSODOTAGameHeroStandings*)[[[CSODOTAGameHeroStandings builder] mergeFromData:data] build];
}
+ (CSODOTAGameHeroStandings*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameHeroStandings*)[[[CSODOTAGameHeroStandings builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameHeroStandings*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTAGameHeroStandings*)[[[CSODOTAGameHeroStandings builder] mergeFromInputStream:input] build];
}
+ (CSODOTAGameHeroStandings*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameHeroStandings*)[[[CSODOTAGameHeroStandings builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameHeroStandings*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTAGameHeroStandings*)[[[CSODOTAGameHeroStandings builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTAGameHeroStandings*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameHeroStandings*)[[[CSODOTAGameHeroStandings builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameHeroStandings_Builder*) builder {
  return [[[CSODOTAGameHeroStandings_Builder alloc] init] autorelease];
}
+ (CSODOTAGameHeroStandings_Builder*) builderWithPrototype:(CSODOTAGameHeroStandings*) prototype {
  return [[CSODOTAGameHeroStandings builder] mergeFrom:prototype];
}
- (CSODOTAGameHeroStandings_Builder*) builder {
  return [CSODOTAGameHeroStandings builder];
}
- (CSODOTAGameHeroStandings_Builder*) toBuilder {
  return [CSODOTAGameHeroStandings builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  if (self.hasWins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wins", [NSNumber numberWithInt:self.wins]];
  }
  if (self.hasLosses) {
    [output appendFormat:@"%@%@: %@\n", indent, @"losses", [NSNumber numberWithInt:self.losses]];
  }
  if (self.hasHeroPerformance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroPerformance", [NSNumber numberWithFloat:self.heroPerformance]];
  }
  if (self.hasHeroVariance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroVariance", [NSNumber numberWithFloat:self.heroVariance]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTAGameHeroStandings class]]) {
    return NO;
  }
  CSODOTAGameHeroStandings *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      self.hasWins == otherMessage.hasWins &&
      (!self.hasWins || self.wins == otherMessage.wins) &&
      self.hasLosses == otherMessage.hasLosses &&
      (!self.hasLosses || self.losses == otherMessage.losses) &&
      self.hasHeroPerformance == otherMessage.hasHeroPerformance &&
      (!self.hasHeroPerformance || self.heroPerformance == otherMessage.heroPerformance) &&
      self.hasHeroVariance == otherMessage.hasHeroVariance &&
      (!self.hasHeroVariance || self.heroVariance == otherMessage.heroVariance) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  if (self.hasWins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.wins] hash];
  }
  if (self.hasLosses) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.losses] hash];
  }
  if (self.hasHeroPerformance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.heroPerformance] hash];
  }
  if (self.hasHeroVariance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.heroVariance] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTAGameHeroStandings_Builder()
@property (retain) CSODOTAGameHeroStandings* _builderResult;
@end

@implementation CSODOTAGameHeroStandings_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTAGameHeroStandings alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTAGameHeroStandings_Builder*) clear {
  _builderResult = [[[CSODOTAGameHeroStandings alloc] init] autorelease];
  return self;
}
- (CSODOTAGameHeroStandings_Builder*) clone {
  return [CSODOTAGameHeroStandings builderWithPrototype:_builderResult];
}
- (CSODOTAGameHeroStandings*) defaultInstance {
  return [CSODOTAGameHeroStandings defaultInstance];
}
- (CSODOTAGameHeroStandings*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTAGameHeroStandings*) buildPartial {
  CSODOTAGameHeroStandings* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTAGameHeroStandings_Builder*) mergeFrom:(CSODOTAGameHeroStandings*) other {
  if (other == [CSODOTAGameHeroStandings defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.hasWins) {
    [self setWins:other.wins];
  }
  if (other.hasLosses) {
    [self setLosses:other.losses];
  }
  if (other.hasHeroPerformance) {
    [self setHeroPerformance:other.heroPerformance];
  }
  if (other.hasHeroVariance) {
    [self setHeroVariance:other.heroVariance];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTAGameHeroStandings_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTAGameHeroStandings_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setWins:[input readUInt32]];
        break;
      }
      case 32: {
        [self setLosses:[input readUInt32]];
        break;
      }
      case 45: {
        [self setHeroPerformance:[input readFloat]];
        break;
      }
      case 53: {
        [self setHeroVariance:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CSODOTAGameHeroStandings_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CSODOTAGameHeroStandings_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CSODOTAGameHeroStandings_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CSODOTAGameHeroStandings_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (BOOL) hasWins {
  return _builderResult.hasWins;
}
- (uint32_t) wins {
  return _builderResult.wins;
}
- (CSODOTAGameHeroStandings_Builder*) setWins:(uint32_t) value {
  _builderResult.hasWins = YES;
  _builderResult.wins = value;
  return self;
}
- (CSODOTAGameHeroStandings_Builder*) clearWins {
  _builderResult.hasWins = NO;
  _builderResult.wins = 0;
  return self;
}
- (BOOL) hasLosses {
  return _builderResult.hasLosses;
}
- (uint32_t) losses {
  return _builderResult.losses;
}
- (CSODOTAGameHeroStandings_Builder*) setLosses:(uint32_t) value {
  _builderResult.hasLosses = YES;
  _builderResult.losses = value;
  return self;
}
- (CSODOTAGameHeroStandings_Builder*) clearLosses {
  _builderResult.hasLosses = NO;
  _builderResult.losses = 0;
  return self;
}
- (BOOL) hasHeroPerformance {
  return _builderResult.hasHeroPerformance;
}
- (Float32) heroPerformance {
  return _builderResult.heroPerformance;
}
- (CSODOTAGameHeroStandings_Builder*) setHeroPerformance:(Float32) value {
  _builderResult.hasHeroPerformance = YES;
  _builderResult.heroPerformance = value;
  return self;
}
- (CSODOTAGameHeroStandings_Builder*) clearHeroPerformance {
  _builderResult.hasHeroPerformance = NO;
  _builderResult.heroPerformance = 0;
  return self;
}
- (BOOL) hasHeroVariance {
  return _builderResult.hasHeroVariance;
}
- (Float32) heroVariance {
  return _builderResult.heroVariance;
}
- (CSODOTAGameHeroStandings_Builder*) setHeroVariance:(Float32) value {
  _builderResult.hasHeroVariance = YES;
  _builderResult.heroVariance = value;
  return self;
}
- (CSODOTAGameHeroStandings_Builder*) clearHeroVariance {
  _builderResult.hasHeroVariance = NO;
  _builderResult.heroVariance = 0;
  return self;
}
@end

@interface CSODOTAParty ()
@property uint64_t partyId;
@property uint64_t leaderId;
@property (retain) PBAppendableArray * memberIdsArray;
@property uint32_t gameModes;
@property (retain) PBAppendableArray * pendingInvitesArray;
@property CSODOTAParty_State state;
@property uint32_t startedMatchmakingTime;
@property uint32_t matchgroups;
@property uint32_t preventMatchUntilDate;
@property uint32_t preventMatchAccountId;
@property MatchType match_type;
@property DOTABotDifficulty bot_difficulty;
@property uint32_t teamId;
@property uint32_t matchDisabledUntilDate;
@property uint32_t matchDisabledAccountId;
@property uint32_t matchmakingMaxRangeMinutes;
@end

@implementation CSODOTAParty

- (BOOL) hasPartyId {
  return !!hasPartyId_;
}
- (void) setHasPartyId:(BOOL) value_ {
  hasPartyId_ = !!value_;
}
@synthesize partyId;
- (BOOL) hasLeaderId {
  return !!hasLeaderId_;
}
- (void) setHasLeaderId:(BOOL) value_ {
  hasLeaderId_ = !!value_;
}
@synthesize leaderId;
@synthesize memberIdsArray;
@dynamic memberIds;
- (BOOL) hasGameModes {
  return !!hasGameModes_;
}
- (void) setHasGameModes:(BOOL) value_ {
  hasGameModes_ = !!value_;
}
@synthesize gameModes;
@synthesize pendingInvitesArray;
@dynamic pendingInvites;
- (BOOL) hasstate {
  return !!hasstate_;
}
- (void) setHasstate:(BOOL) value_ {
  hasstate_ = !!value_;
}
@synthesize state;
- (BOOL) hasStartedMatchmakingTime {
  return !!hasStartedMatchmakingTime_;
}
- (void) setHasStartedMatchmakingTime:(BOOL) value_ {
  hasStartedMatchmakingTime_ = !!value_;
}
@synthesize startedMatchmakingTime;
- (BOOL) hasMatchgroups {
  return !!hasMatchgroups_;
}
- (void) setHasMatchgroups:(BOOL) value_ {
  hasMatchgroups_ = !!value_;
}
@synthesize matchgroups;
- (BOOL) hasPreventMatchUntilDate {
  return !!hasPreventMatchUntilDate_;
}
- (void) setHasPreventMatchUntilDate:(BOOL) value_ {
  hasPreventMatchUntilDate_ = !!value_;
}
@synthesize preventMatchUntilDate;
- (BOOL) hasPreventMatchAccountId {
  return !!hasPreventMatchAccountId_;
}
- (void) setHasPreventMatchAccountId:(BOOL) value_ {
  hasPreventMatchAccountId_ = !!value_;
}
@synthesize preventMatchAccountId;
- (BOOL) hasmatch_type {
  return !!hasmatch_type_;
}
- (void) setHasmatch_type:(BOOL) value_ {
  hasmatch_type_ = !!value_;
}
@synthesize match_type;
- (BOOL) hasbot_difficulty {
  return !!hasbot_difficulty_;
}
- (void) setHasbot_difficulty:(BOOL) value_ {
  hasbot_difficulty_ = !!value_;
}
@synthesize bot_difficulty;
- (BOOL) hasTeamId {
  return !!hasTeamId_;
}
- (void) setHasTeamId:(BOOL) value_ {
  hasTeamId_ = !!value_;
}
@synthesize teamId;
- (BOOL) hasMatchDisabledUntilDate {
  return !!hasMatchDisabledUntilDate_;
}
- (void) setHasMatchDisabledUntilDate:(BOOL) value_ {
  hasMatchDisabledUntilDate_ = !!value_;
}
@synthesize matchDisabledUntilDate;
- (BOOL) hasMatchDisabledAccountId {
  return !!hasMatchDisabledAccountId_;
}
- (void) setHasMatchDisabledAccountId:(BOOL) value_ {
  hasMatchDisabledAccountId_ = !!value_;
}
@synthesize matchDisabledAccountId;
- (BOOL) hasMatchmakingMaxRangeMinutes {
  return !!hasMatchmakingMaxRangeMinutes_;
}
- (void) setHasMatchmakingMaxRangeMinutes:(BOOL) value_ {
  hasMatchmakingMaxRangeMinutes_ = !!value_;
}
@synthesize matchmakingMaxRangeMinutes;
- (void) dealloc {
  self.memberIdsArray = nil;
  self.pendingInvitesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.partyId = 0L;
    self.leaderId = 0L;
    self.gameModes = 0;
    self.state = CSODOTAParty_StateUI;
    self.startedMatchmakingTime = 0;
    self.matchgroups = 0;
    self.preventMatchUntilDate = 0;
    self.preventMatchAccountId = 0;
    self.match_type = MatchTypeMATCH_TYPE_RANKED;
    self.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_PASSIVE;
    self.teamId = 0;
    self.matchDisabledUntilDate = 0;
    self.matchDisabledAccountId = 0;
    self.matchmakingMaxRangeMinutes = 0;
  }
  return self;
}
static CSODOTAParty* defaultCSODOTAPartyInstance = nil;
+ (void) initialize {
  if (self == [CSODOTAParty class]) {
    defaultCSODOTAPartyInstance = [[CSODOTAParty alloc] init];
  }
}
+ (CSODOTAParty*) defaultInstance {
  return defaultCSODOTAPartyInstance;
}
- (CSODOTAParty*) defaultInstance {
  return defaultCSODOTAPartyInstance;
}
- (PBArray *)memberIds {
  return memberIdsArray;
}
- (uint64_t)memberIdsAtIndex:(NSUInteger)index {
  return [memberIdsArray uint64AtIndex:index];
}
- (PBArray *)pendingInvites {
  return pendingInvitesArray;
}
- (uint64_t)pendingInvitesAtIndex:(NSUInteger)index {
  return [pendingInvitesArray uint64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPartyId) {
    [output writeUInt64:1 value:self.partyId];
  }
  if (self.hasLeaderId) {
    [output writeFixed64:2 value:self.leaderId];
  }
  const NSUInteger memberIdsArrayCount = self.memberIdsArray.count;
  if (memberIdsArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.memberIdsArray.data;
    for (NSUInteger i = 0; i < memberIdsArrayCount; ++i) {
      [output writeFixed64:3 value:values[i]];
    }
  }
  if (self.hasGameModes) {
    [output writeUInt32:4 value:self.gameModes];
  }
  const NSUInteger pendingInvitesArrayCount = self.pendingInvitesArray.count;
  if (pendingInvitesArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.pendingInvitesArray.data;
    for (NSUInteger i = 0; i < pendingInvitesArrayCount; ++i) {
      [output writeFixed64:5 value:values[i]];
    }
  }
  if (self.hasstate) {
    [output writeEnum:6 value:self.state];
  }
  if (self.hasStartedMatchmakingTime) {
    [output writeUInt32:7 value:self.startedMatchmakingTime];
  }
  if (self.hasMatchgroups) {
    [output writeUInt32:11 value:self.matchgroups];
  }
  if (self.hasPreventMatchUntilDate) {
    [output writeUInt32:18 value:self.preventMatchUntilDate];
  }
  if (self.hasPreventMatchAccountId) {
    [output writeUInt32:19 value:self.preventMatchAccountId];
  }
  if (self.hasmatch_type) {
    [output writeEnum:21 value:self.match_type];
  }
  if (self.hasbot_difficulty) {
    [output writeEnum:22 value:self.bot_difficulty];
  }
  if (self.hasTeamId) {
    [output writeUInt32:23 value:self.teamId];
  }
  if (self.hasMatchDisabledUntilDate) {
    [output writeUInt32:24 value:self.matchDisabledUntilDate];
  }
  if (self.hasMatchDisabledAccountId) {
    [output writeUInt32:25 value:self.matchDisabledAccountId];
  }
  if (self.hasMatchmakingMaxRangeMinutes) {
    [output writeUInt32:26 value:self.matchmakingMaxRangeMinutes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPartyId) {
    size_ += computeUInt64Size(1, self.partyId);
  }
  if (self.hasLeaderId) {
    size_ += computeFixed64Size(2, self.leaderId);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.memberIdsArray.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasGameModes) {
    size_ += computeUInt32Size(4, self.gameModes);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.pendingInvitesArray.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasstate) {
    size_ += computeEnumSize(6, self.state);
  }
  if (self.hasStartedMatchmakingTime) {
    size_ += computeUInt32Size(7, self.startedMatchmakingTime);
  }
  if (self.hasMatchgroups) {
    size_ += computeUInt32Size(11, self.matchgroups);
  }
  if (self.hasPreventMatchUntilDate) {
    size_ += computeUInt32Size(18, self.preventMatchUntilDate);
  }
  if (self.hasPreventMatchAccountId) {
    size_ += computeUInt32Size(19, self.preventMatchAccountId);
  }
  if (self.hasmatch_type) {
    size_ += computeEnumSize(21, self.match_type);
  }
  if (self.hasbot_difficulty) {
    size_ += computeEnumSize(22, self.bot_difficulty);
  }
  if (self.hasTeamId) {
    size_ += computeUInt32Size(23, self.teamId);
  }
  if (self.hasMatchDisabledUntilDate) {
    size_ += computeUInt32Size(24, self.matchDisabledUntilDate);
  }
  if (self.hasMatchDisabledAccountId) {
    size_ += computeUInt32Size(25, self.matchDisabledAccountId);
  }
  if (self.hasMatchmakingMaxRangeMinutes) {
    size_ += computeUInt32Size(26, self.matchmakingMaxRangeMinutes);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTAParty*) parseFromData:(NSData*) data {
  return (CSODOTAParty*)[[[CSODOTAParty builder] mergeFromData:data] build];
}
+ (CSODOTAParty*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAParty*)[[[CSODOTAParty builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAParty*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTAParty*)[[[CSODOTAParty builder] mergeFromInputStream:input] build];
}
+ (CSODOTAParty*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAParty*)[[[CSODOTAParty builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAParty*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTAParty*)[[[CSODOTAParty builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTAParty*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAParty*)[[[CSODOTAParty builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAParty_Builder*) builder {
  return [[[CSODOTAParty_Builder alloc] init] autorelease];
}
+ (CSODOTAParty_Builder*) builderWithPrototype:(CSODOTAParty*) prototype {
  return [[CSODOTAParty builder] mergeFrom:prototype];
}
- (CSODOTAParty_Builder*) builder {
  return [CSODOTAParty builder];
}
- (CSODOTAParty_Builder*) toBuilder {
  return [CSODOTAParty builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPartyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"partyId", [NSNumber numberWithLongLong:self.partyId]];
  }
  if (self.hasLeaderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaderId", [NSNumber numberWithLongLong:self.leaderId]];
  }
  for (NSNumber* value in self.memberIdsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberIds", value];
  }
  if (self.hasGameModes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameModes", [NSNumber numberWithInt:self.gameModes]];
  }
  for (NSNumber* value in self.pendingInvitesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pendingInvites", value];
  }
  if (self.hasstate) {
    [output appendFormat:@"%@%@: %d\n", indent, @"state", self.state];
  }
  if (self.hasStartedMatchmakingTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startedMatchmakingTime", [NSNumber numberWithInt:self.startedMatchmakingTime]];
  }
  if (self.hasMatchgroups) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchgroups", [NSNumber numberWithInt:self.matchgroups]];
  }
  if (self.hasPreventMatchUntilDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preventMatchUntilDate", [NSNumber numberWithInt:self.preventMatchUntilDate]];
  }
  if (self.hasPreventMatchAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preventMatchAccountId", [NSNumber numberWithInt:self.preventMatchAccountId]];
  }
  if (self.hasmatch_type) {
    [output appendFormat:@"%@%@: %d\n", indent, @"match_type", self.match_type];
  }
  if (self.hasbot_difficulty) {
    [output appendFormat:@"%@%@: %d\n", indent, @"bot_difficulty", self.bot_difficulty];
  }
  if (self.hasTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamId", [NSNumber numberWithInt:self.teamId]];
  }
  if (self.hasMatchDisabledUntilDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchDisabledUntilDate", [NSNumber numberWithInt:self.matchDisabledUntilDate]];
  }
  if (self.hasMatchDisabledAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchDisabledAccountId", [NSNumber numberWithInt:self.matchDisabledAccountId]];
  }
  if (self.hasMatchmakingMaxRangeMinutes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchmakingMaxRangeMinutes", [NSNumber numberWithInt:self.matchmakingMaxRangeMinutes]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTAParty class]]) {
    return NO;
  }
  CSODOTAParty *otherMessage = other;
  return
      self.hasPartyId == otherMessage.hasPartyId &&
      (!self.hasPartyId || self.partyId == otherMessage.partyId) &&
      self.hasLeaderId == otherMessage.hasLeaderId &&
      (!self.hasLeaderId || self.leaderId == otherMessage.leaderId) &&
      [self.memberIdsArray isEqualToArray:otherMessage.memberIdsArray] &&
      self.hasGameModes == otherMessage.hasGameModes &&
      (!self.hasGameModes || self.gameModes == otherMessage.gameModes) &&
      [self.pendingInvitesArray isEqualToArray:otherMessage.pendingInvitesArray] &&
      self.hasstate == otherMessage.hasstate &&
      (!self.hasstate || self.state == otherMessage.state) &&
      self.hasStartedMatchmakingTime == otherMessage.hasStartedMatchmakingTime &&
      (!self.hasStartedMatchmakingTime || self.startedMatchmakingTime == otherMessage.startedMatchmakingTime) &&
      self.hasMatchgroups == otherMessage.hasMatchgroups &&
      (!self.hasMatchgroups || self.matchgroups == otherMessage.matchgroups) &&
      self.hasPreventMatchUntilDate == otherMessage.hasPreventMatchUntilDate &&
      (!self.hasPreventMatchUntilDate || self.preventMatchUntilDate == otherMessage.preventMatchUntilDate) &&
      self.hasPreventMatchAccountId == otherMessage.hasPreventMatchAccountId &&
      (!self.hasPreventMatchAccountId || self.preventMatchAccountId == otherMessage.preventMatchAccountId) &&
      self.hasmatch_type == otherMessage.hasmatch_type &&
      (!self.hasmatch_type || self.match_type == otherMessage.match_type) &&
      self.hasbot_difficulty == otherMessage.hasbot_difficulty &&
      (!self.hasbot_difficulty || self.bot_difficulty == otherMessage.bot_difficulty) &&
      self.hasTeamId == otherMessage.hasTeamId &&
      (!self.hasTeamId || self.teamId == otherMessage.teamId) &&
      self.hasMatchDisabledUntilDate == otherMessage.hasMatchDisabledUntilDate &&
      (!self.hasMatchDisabledUntilDate || self.matchDisabledUntilDate == otherMessage.matchDisabledUntilDate) &&
      self.hasMatchDisabledAccountId == otherMessage.hasMatchDisabledAccountId &&
      (!self.hasMatchDisabledAccountId || self.matchDisabledAccountId == otherMessage.matchDisabledAccountId) &&
      self.hasMatchmakingMaxRangeMinutes == otherMessage.hasMatchmakingMaxRangeMinutes &&
      (!self.hasMatchmakingMaxRangeMinutes || self.matchmakingMaxRangeMinutes == otherMessage.matchmakingMaxRangeMinutes) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPartyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.partyId] hash];
  }
  if (self.hasLeaderId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.leaderId] hash];
  }
  for (NSNumber* value in self.memberIdsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasGameModes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameModes] hash];
  }
  for (NSNumber* value in self.pendingInvitesArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasstate) {
    hashCode = hashCode * 31 + self.state;
  }
  if (self.hasStartedMatchmakingTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.startedMatchmakingTime] hash];
  }
  if (self.hasMatchgroups) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchgroups] hash];
  }
  if (self.hasPreventMatchUntilDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.preventMatchUntilDate] hash];
  }
  if (self.hasPreventMatchAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.preventMatchAccountId] hash];
  }
  if (self.hasmatch_type) {
    hashCode = hashCode * 31 + self.match_type;
  }
  if (self.hasbot_difficulty) {
    hashCode = hashCode * 31 + self.bot_difficulty;
  }
  if (self.hasTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamId] hash];
  }
  if (self.hasMatchDisabledUntilDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchDisabledUntilDate] hash];
  }
  if (self.hasMatchDisabledAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchDisabledAccountId] hash];
  }
  if (self.hasMatchmakingMaxRangeMinutes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchmakingMaxRangeMinutes] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CSODOTAParty_StateIsValidValue(CSODOTAParty_State value) {
  switch (value) {
    case CSODOTAParty_StateUI:
    case CSODOTAParty_StateFINDING_MATCH:
    case CSODOTAParty_StateIN_MATCH:
      return YES;
    default:
      return NO;
  }
}
@interface CSODOTAParty_Builder()
@property (retain) CSODOTAParty* _builderResult;
@end

@implementation CSODOTAParty_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTAParty alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTAParty_Builder*) clear {
  _builderResult = [[[CSODOTAParty alloc] init] autorelease];
  return self;
}
- (CSODOTAParty_Builder*) clone {
  return [CSODOTAParty builderWithPrototype:_builderResult];
}
- (CSODOTAParty*) defaultInstance {
  return [CSODOTAParty defaultInstance];
}
- (CSODOTAParty*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTAParty*) buildPartial {
  CSODOTAParty* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTAParty_Builder*) mergeFrom:(CSODOTAParty*) other {
  if (other == [CSODOTAParty defaultInstance]) {
    return self;
  }
  if (other.hasPartyId) {
    [self setPartyId:other.partyId];
  }
  if (other.hasLeaderId) {
    [self setLeaderId:other.leaderId];
  }
  if (other.memberIdsArray.count > 0) {
    if (_builderResult.memberIdsArray == nil) {
      _builderResult.memberIdsArray = [[other.memberIdsArray copyWithZone:[other.memberIdsArray zone]] autorelease];
    } else {
      [_builderResult.memberIdsArray appendArray:other.memberIdsArray];
    }
  }
  if (other.hasGameModes) {
    [self setGameModes:other.gameModes];
  }
  if (other.pendingInvitesArray.count > 0) {
    if (_builderResult.pendingInvitesArray == nil) {
      _builderResult.pendingInvitesArray = [[other.pendingInvitesArray copyWithZone:[other.pendingInvitesArray zone]] autorelease];
    } else {
      [_builderResult.pendingInvitesArray appendArray:other.pendingInvitesArray];
    }
  }
  if (other.hasstate) {
    [self setstate:other.state];
  }
  if (other.hasStartedMatchmakingTime) {
    [self setStartedMatchmakingTime:other.startedMatchmakingTime];
  }
  if (other.hasMatchgroups) {
    [self setMatchgroups:other.matchgroups];
  }
  if (other.hasPreventMatchUntilDate) {
    [self setPreventMatchUntilDate:other.preventMatchUntilDate];
  }
  if (other.hasPreventMatchAccountId) {
    [self setPreventMatchAccountId:other.preventMatchAccountId];
  }
  if (other.hasmatch_type) {
    [self setmatch_type:other.match_type];
  }
  if (other.hasbot_difficulty) {
    [self setbot_difficulty:other.bot_difficulty];
  }
  if (other.hasTeamId) {
    [self setTeamId:other.teamId];
  }
  if (other.hasMatchDisabledUntilDate) {
    [self setMatchDisabledUntilDate:other.matchDisabledUntilDate];
  }
  if (other.hasMatchDisabledAccountId) {
    [self setMatchDisabledAccountId:other.matchDisabledAccountId];
  }
  if (other.hasMatchmakingMaxRangeMinutes) {
    [self setMatchmakingMaxRangeMinutes:other.matchmakingMaxRangeMinutes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTAParty_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTAParty_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPartyId:[input readUInt64]];
        break;
      }
      case 17: {
        [self setLeaderId:[input readFixed64]];
        break;
      }
      case 25: {
        [self addMemberIds:[input readFixed64]];
        break;
      }
      case 32: {
        [self setGameModes:[input readUInt32]];
        break;
      }
      case 41: {
        [self addPendingInvites:[input readFixed64]];
        break;
      }
      case 48: {
        int32_t value = [input readEnum];
        if (CSODOTAParty_StateIsValidValue(value)) {
          [self setstate:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        [self setStartedMatchmakingTime:[input readUInt32]];
        break;
      }
      case 88: {
        [self setMatchgroups:[input readUInt32]];
        break;
      }
      case 144: {
        [self setPreventMatchUntilDate:[input readUInt32]];
        break;
      }
      case 152: {
        [self setPreventMatchAccountId:[input readUInt32]];
        break;
      }
      case 168: {
        int32_t value = [input readEnum];
        if (MatchTypeIsValidValue(value)) {
          [self setmatch_type:value];
        } else {
          [unknownFields mergeVarintField:21 value:value];
        }
        break;
      }
      case 176: {
        int32_t value = [input readEnum];
        if (DOTABotDifficultyIsValidValue(value)) {
          [self setbot_difficulty:value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
      case 184: {
        [self setTeamId:[input readUInt32]];
        break;
      }
      case 192: {
        [self setMatchDisabledUntilDate:[input readUInt32]];
        break;
      }
      case 200: {
        [self setMatchDisabledAccountId:[input readUInt32]];
        break;
      }
      case 208: {
        [self setMatchmakingMaxRangeMinutes:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPartyId {
  return _builderResult.hasPartyId;
}
- (uint64_t) partyId {
  return _builderResult.partyId;
}
- (CSODOTAParty_Builder*) setPartyId:(uint64_t) value {
  _builderResult.hasPartyId = YES;
  _builderResult.partyId = value;
  return self;
}
- (CSODOTAParty_Builder*) clearPartyId {
  _builderResult.hasPartyId = NO;
  _builderResult.partyId = 0L;
  return self;
}
- (BOOL) hasLeaderId {
  return _builderResult.hasLeaderId;
}
- (uint64_t) leaderId {
  return _builderResult.leaderId;
}
- (CSODOTAParty_Builder*) setLeaderId:(uint64_t) value {
  _builderResult.hasLeaderId = YES;
  _builderResult.leaderId = value;
  return self;
}
- (CSODOTAParty_Builder*) clearLeaderId {
  _builderResult.hasLeaderId = NO;
  _builderResult.leaderId = 0L;
  return self;
}
- (PBAppendableArray *)memberIds {
  return _builderResult.memberIdsArray;
}
- (uint64_t)memberIdsAtIndex:(NSUInteger)index {
  return [_builderResult memberIdsAtIndex:index];
}
- (CSODOTAParty_Builder *)addMemberIds:(uint64_t)value {
  if (_builderResult.memberIdsArray == nil) {
    _builderResult.memberIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_builderResult.memberIdsArray addUint64:value];
  return self;
}
- (CSODOTAParty_Builder *)setMemberIdsArray:(NSArray *)array {
  _builderResult.memberIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CSODOTAParty_Builder *)setMemberIdsValues:(const uint64_t *)values count:(NSUInteger)count {
  _builderResult.memberIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CSODOTAParty_Builder *)clearMemberIds {
  _builderResult.memberIdsArray = nil;
  return self;
}
- (BOOL) hasGameModes {
  return _builderResult.hasGameModes;
}
- (uint32_t) gameModes {
  return _builderResult.gameModes;
}
- (CSODOTAParty_Builder*) setGameModes:(uint32_t) value {
  _builderResult.hasGameModes = YES;
  _builderResult.gameModes = value;
  return self;
}
- (CSODOTAParty_Builder*) clearGameModes {
  _builderResult.hasGameModes = NO;
  _builderResult.gameModes = 0;
  return self;
}
- (PBAppendableArray *)pendingInvites {
  return _builderResult.pendingInvitesArray;
}
- (uint64_t)pendingInvitesAtIndex:(NSUInteger)index {
  return [_builderResult pendingInvitesAtIndex:index];
}
- (CSODOTAParty_Builder *)addPendingInvites:(uint64_t)value {
  if (_builderResult.pendingInvitesArray == nil) {
    _builderResult.pendingInvitesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_builderResult.pendingInvitesArray addUint64:value];
  return self;
}
- (CSODOTAParty_Builder *)setPendingInvitesArray:(NSArray *)array {
  _builderResult.pendingInvitesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CSODOTAParty_Builder *)setPendingInvitesValues:(const uint64_t *)values count:(NSUInteger)count {
  _builderResult.pendingInvitesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CSODOTAParty_Builder *)clearPendingInvites {
  _builderResult.pendingInvitesArray = nil;
  return self;
}
- (BOOL) hasstate {
  return _builderResult.hasstate;
}
- (CSODOTAParty_State) state {
  return _builderResult.state;
}
- (CSODOTAParty_Builder*) setstate:(CSODOTAParty_State) value {
  _builderResult.hasstate = YES;
  _builderResult.state = value;
  return self;
}
- (CSODOTAParty_Builder*) clearstate {
  _builderResult.hasstate = NO;
  _builderResult.state = CSODOTAParty_StateUI;
  return self;
}
- (BOOL) hasStartedMatchmakingTime {
  return _builderResult.hasStartedMatchmakingTime;
}
- (uint32_t) startedMatchmakingTime {
  return _builderResult.startedMatchmakingTime;
}
- (CSODOTAParty_Builder*) setStartedMatchmakingTime:(uint32_t) value {
  _builderResult.hasStartedMatchmakingTime = YES;
  _builderResult.startedMatchmakingTime = value;
  return self;
}
- (CSODOTAParty_Builder*) clearStartedMatchmakingTime {
  _builderResult.hasStartedMatchmakingTime = NO;
  _builderResult.startedMatchmakingTime = 0;
  return self;
}
- (BOOL) hasMatchgroups {
  return _builderResult.hasMatchgroups;
}
- (uint32_t) matchgroups {
  return _builderResult.matchgroups;
}
- (CSODOTAParty_Builder*) setMatchgroups:(uint32_t) value {
  _builderResult.hasMatchgroups = YES;
  _builderResult.matchgroups = value;
  return self;
}
- (CSODOTAParty_Builder*) clearMatchgroups {
  _builderResult.hasMatchgroups = NO;
  _builderResult.matchgroups = 0;
  return self;
}
- (BOOL) hasPreventMatchUntilDate {
  return _builderResult.hasPreventMatchUntilDate;
}
- (uint32_t) preventMatchUntilDate {
  return _builderResult.preventMatchUntilDate;
}
- (CSODOTAParty_Builder*) setPreventMatchUntilDate:(uint32_t) value {
  _builderResult.hasPreventMatchUntilDate = YES;
  _builderResult.preventMatchUntilDate = value;
  return self;
}
- (CSODOTAParty_Builder*) clearPreventMatchUntilDate {
  _builderResult.hasPreventMatchUntilDate = NO;
  _builderResult.preventMatchUntilDate = 0;
  return self;
}
- (BOOL) hasPreventMatchAccountId {
  return _builderResult.hasPreventMatchAccountId;
}
- (uint32_t) preventMatchAccountId {
  return _builderResult.preventMatchAccountId;
}
- (CSODOTAParty_Builder*) setPreventMatchAccountId:(uint32_t) value {
  _builderResult.hasPreventMatchAccountId = YES;
  _builderResult.preventMatchAccountId = value;
  return self;
}
- (CSODOTAParty_Builder*) clearPreventMatchAccountId {
  _builderResult.hasPreventMatchAccountId = NO;
  _builderResult.preventMatchAccountId = 0;
  return self;
}
- (BOOL) hasmatch_type {
  return _builderResult.hasmatch_type;
}
- (MatchType) match_type {
  return _builderResult.match_type;
}
- (CSODOTAParty_Builder*) setmatch_type:(MatchType) value {
  _builderResult.hasmatch_type = YES;
  _builderResult.match_type = value;
  return self;
}
- (CSODOTAParty_Builder*) clearmatch_type {
  _builderResult.hasmatch_type = NO;
  _builderResult.match_type = MatchTypeMATCH_TYPE_RANKED;
  return self;
}
- (BOOL) hasbot_difficulty {
  return _builderResult.hasbot_difficulty;
}
- (DOTABotDifficulty) bot_difficulty {
  return _builderResult.bot_difficulty;
}
- (CSODOTAParty_Builder*) setbot_difficulty:(DOTABotDifficulty) value {
  _builderResult.hasbot_difficulty = YES;
  _builderResult.bot_difficulty = value;
  return self;
}
- (CSODOTAParty_Builder*) clearbot_difficulty {
  _builderResult.hasbot_difficulty = NO;
  _builderResult.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_PASSIVE;
  return self;
}
- (BOOL) hasTeamId {
  return _builderResult.hasTeamId;
}
- (uint32_t) teamId {
  return _builderResult.teamId;
}
- (CSODOTAParty_Builder*) setTeamId:(uint32_t) value {
  _builderResult.hasTeamId = YES;
  _builderResult.teamId = value;
  return self;
}
- (CSODOTAParty_Builder*) clearTeamId {
  _builderResult.hasTeamId = NO;
  _builderResult.teamId = 0;
  return self;
}
- (BOOL) hasMatchDisabledUntilDate {
  return _builderResult.hasMatchDisabledUntilDate;
}
- (uint32_t) matchDisabledUntilDate {
  return _builderResult.matchDisabledUntilDate;
}
- (CSODOTAParty_Builder*) setMatchDisabledUntilDate:(uint32_t) value {
  _builderResult.hasMatchDisabledUntilDate = YES;
  _builderResult.matchDisabledUntilDate = value;
  return self;
}
- (CSODOTAParty_Builder*) clearMatchDisabledUntilDate {
  _builderResult.hasMatchDisabledUntilDate = NO;
  _builderResult.matchDisabledUntilDate = 0;
  return self;
}
- (BOOL) hasMatchDisabledAccountId {
  return _builderResult.hasMatchDisabledAccountId;
}
- (uint32_t) matchDisabledAccountId {
  return _builderResult.matchDisabledAccountId;
}
- (CSODOTAParty_Builder*) setMatchDisabledAccountId:(uint32_t) value {
  _builderResult.hasMatchDisabledAccountId = YES;
  _builderResult.matchDisabledAccountId = value;
  return self;
}
- (CSODOTAParty_Builder*) clearMatchDisabledAccountId {
  _builderResult.hasMatchDisabledAccountId = NO;
  _builderResult.matchDisabledAccountId = 0;
  return self;
}
- (BOOL) hasMatchmakingMaxRangeMinutes {
  return _builderResult.hasMatchmakingMaxRangeMinutes;
}
- (uint32_t) matchmakingMaxRangeMinutes {
  return _builderResult.matchmakingMaxRangeMinutes;
}
- (CSODOTAParty_Builder*) setMatchmakingMaxRangeMinutes:(uint32_t) value {
  _builderResult.hasMatchmakingMaxRangeMinutes = YES;
  _builderResult.matchmakingMaxRangeMinutes = value;
  return self;
}
- (CSODOTAParty_Builder*) clearMatchmakingMaxRangeMinutes {
  _builderResult.hasMatchmakingMaxRangeMinutes = NO;
  _builderResult.matchmakingMaxRangeMinutes = 0;
  return self;
}
@end

@interface CSODOTAPartyInternal ()
@property (retain) NSString* searchKey;
@end

@implementation CSODOTAPartyInternal

- (BOOL) hasSearchKey {
  return !!hasSearchKey_;
}
- (void) setHasSearchKey:(BOOL) value_ {
  hasSearchKey_ = !!value_;
}
@synthesize searchKey;
- (void) dealloc {
  self.searchKey = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.searchKey = @"";
  }
  return self;
}
static CSODOTAPartyInternal* defaultCSODOTAPartyInternalInstance = nil;
+ (void) initialize {
  if (self == [CSODOTAPartyInternal class]) {
    defaultCSODOTAPartyInternalInstance = [[CSODOTAPartyInternal alloc] init];
  }
}
+ (CSODOTAPartyInternal*) defaultInstance {
  return defaultCSODOTAPartyInternalInstance;
}
- (CSODOTAPartyInternal*) defaultInstance {
  return defaultCSODOTAPartyInternalInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSearchKey) {
    [output writeString:1 value:self.searchKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSearchKey) {
    size_ += computeStringSize(1, self.searchKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTAPartyInternal*) parseFromData:(NSData*) data {
  return (CSODOTAPartyInternal*)[[[CSODOTAPartyInternal builder] mergeFromData:data] build];
}
+ (CSODOTAPartyInternal*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyInternal*)[[[CSODOTAPartyInternal builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyInternal*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTAPartyInternal*)[[[CSODOTAPartyInternal builder] mergeFromInputStream:input] build];
}
+ (CSODOTAPartyInternal*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyInternal*)[[[CSODOTAPartyInternal builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyInternal*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTAPartyInternal*)[[[CSODOTAPartyInternal builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTAPartyInternal*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyInternal*)[[[CSODOTAPartyInternal builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyInternal_Builder*) builder {
  return [[[CSODOTAPartyInternal_Builder alloc] init] autorelease];
}
+ (CSODOTAPartyInternal_Builder*) builderWithPrototype:(CSODOTAPartyInternal*) prototype {
  return [[CSODOTAPartyInternal builder] mergeFrom:prototype];
}
- (CSODOTAPartyInternal_Builder*) builder {
  return [CSODOTAPartyInternal builder];
}
- (CSODOTAPartyInternal_Builder*) toBuilder {
  return [CSODOTAPartyInternal builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSearchKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchKey", self.searchKey];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTAPartyInternal class]]) {
    return NO;
  }
  CSODOTAPartyInternal *otherMessage = other;
  return
      self.hasSearchKey == otherMessage.hasSearchKey &&
      (!self.hasSearchKey || [self.searchKey isEqual:otherMessage.searchKey]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSearchKey) {
    hashCode = hashCode * 31 + [self.searchKey hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTAPartyInternal_Builder()
@property (retain) CSODOTAPartyInternal* _builderResult;
@end

@implementation CSODOTAPartyInternal_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTAPartyInternal alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTAPartyInternal_Builder*) clear {
  _builderResult = [[[CSODOTAPartyInternal alloc] init] autorelease];
  return self;
}
- (CSODOTAPartyInternal_Builder*) clone {
  return [CSODOTAPartyInternal builderWithPrototype:_builderResult];
}
- (CSODOTAPartyInternal*) defaultInstance {
  return [CSODOTAPartyInternal defaultInstance];
}
- (CSODOTAPartyInternal*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTAPartyInternal*) buildPartial {
  CSODOTAPartyInternal* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTAPartyInternal_Builder*) mergeFrom:(CSODOTAPartyInternal*) other {
  if (other == [CSODOTAPartyInternal defaultInstance]) {
    return self;
  }
  if (other.hasSearchKey) {
    [self setSearchKey:other.searchKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTAPartyInternal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTAPartyInternal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSearchKey:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSearchKey {
  return _builderResult.hasSearchKey;
}
- (NSString*) searchKey {
  return _builderResult.searchKey;
}
- (CSODOTAPartyInternal_Builder*) setSearchKey:(NSString*) value {
  _builderResult.hasSearchKey = YES;
  _builderResult.searchKey = value;
  return self;
}
- (CSODOTAPartyInternal_Builder*) clearSearchKey {
  _builderResult.hasSearchKey = NO;
  _builderResult.searchKey = @"";
  return self;
}
@end

@interface CSODOTAPartyMemcached ()
@property (retain) CSODOTAParty* party;
@property (retain) CSODOTAPartyInternal* internal;
@end

@implementation CSODOTAPartyMemcached

- (BOOL) hasParty {
  return !!hasParty_;
}
- (void) setHasParty:(BOOL) value_ {
  hasParty_ = !!value_;
}
@synthesize party;
- (BOOL) hasInternal {
  return !!hasInternal_;
}
- (void) setHasInternal:(BOOL) value_ {
  hasInternal_ = !!value_;
}
@synthesize internal;
- (void) dealloc {
  self.party = nil;
  self.internal = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.party = [CSODOTAParty defaultInstance];
    self.internal = [CSODOTAPartyInternal defaultInstance];
  }
  return self;
}
static CSODOTAPartyMemcached* defaultCSODOTAPartyMemcachedInstance = nil;
+ (void) initialize {
  if (self == [CSODOTAPartyMemcached class]) {
    defaultCSODOTAPartyMemcachedInstance = [[CSODOTAPartyMemcached alloc] init];
  }
}
+ (CSODOTAPartyMemcached*) defaultInstance {
  return defaultCSODOTAPartyMemcachedInstance;
}
- (CSODOTAPartyMemcached*) defaultInstance {
  return defaultCSODOTAPartyMemcachedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasParty) {
    [output writeMessage:1 value:self.party];
  }
  if (self.hasInternal) {
    [output writeMessage:2 value:self.internal];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasParty) {
    size_ += computeMessageSize(1, self.party);
  }
  if (self.hasInternal) {
    size_ += computeMessageSize(2, self.internal);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTAPartyMemcached*) parseFromData:(NSData*) data {
  return (CSODOTAPartyMemcached*)[[[CSODOTAPartyMemcached builder] mergeFromData:data] build];
}
+ (CSODOTAPartyMemcached*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyMemcached*)[[[CSODOTAPartyMemcached builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyMemcached*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTAPartyMemcached*)[[[CSODOTAPartyMemcached builder] mergeFromInputStream:input] build];
}
+ (CSODOTAPartyMemcached*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyMemcached*)[[[CSODOTAPartyMemcached builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyMemcached*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTAPartyMemcached*)[[[CSODOTAPartyMemcached builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTAPartyMemcached*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyMemcached*)[[[CSODOTAPartyMemcached builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyMemcached_Builder*) builder {
  return [[[CSODOTAPartyMemcached_Builder alloc] init] autorelease];
}
+ (CSODOTAPartyMemcached_Builder*) builderWithPrototype:(CSODOTAPartyMemcached*) prototype {
  return [[CSODOTAPartyMemcached builder] mergeFrom:prototype];
}
- (CSODOTAPartyMemcached_Builder*) builder {
  return [CSODOTAPartyMemcached builder];
}
- (CSODOTAPartyMemcached_Builder*) toBuilder {
  return [CSODOTAPartyMemcached builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasParty) {
    [output appendFormat:@"%@%@ {\n", indent, @"party"];
    [self.party writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasInternal) {
    [output appendFormat:@"%@%@ {\n", indent, @"internal"];
    [self.internal writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTAPartyMemcached class]]) {
    return NO;
  }
  CSODOTAPartyMemcached *otherMessage = other;
  return
      self.hasParty == otherMessage.hasParty &&
      (!self.hasParty || [self.party isEqual:otherMessage.party]) &&
      self.hasInternal == otherMessage.hasInternal &&
      (!self.hasInternal || [self.internal isEqual:otherMessage.internal]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasParty) {
    hashCode = hashCode * 31 + [self.party hash];
  }
  if (self.hasInternal) {
    hashCode = hashCode * 31 + [self.internal hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTAPartyMemcached_Builder()
@property (retain) CSODOTAPartyMemcached* _builderResult;
@end

@implementation CSODOTAPartyMemcached_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTAPartyMemcached alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTAPartyMemcached_Builder*) clear {
  _builderResult = [[[CSODOTAPartyMemcached alloc] init] autorelease];
  return self;
}
- (CSODOTAPartyMemcached_Builder*) clone {
  return [CSODOTAPartyMemcached builderWithPrototype:_builderResult];
}
- (CSODOTAPartyMemcached*) defaultInstance {
  return [CSODOTAPartyMemcached defaultInstance];
}
- (CSODOTAPartyMemcached*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTAPartyMemcached*) buildPartial {
  CSODOTAPartyMemcached* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTAPartyMemcached_Builder*) mergeFrom:(CSODOTAPartyMemcached*) other {
  if (other == [CSODOTAPartyMemcached defaultInstance]) {
    return self;
  }
  if (other.hasParty) {
    [self mergeParty:other.party];
  }
  if (other.hasInternal) {
    [self mergeInternal:other.internal];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTAPartyMemcached_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTAPartyMemcached_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CSODOTAParty_Builder* subBuilder = [CSODOTAParty builder];
        if (self.hasParty) {
          [subBuilder mergeFrom:self.party];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setParty:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CSODOTAPartyInternal_Builder* subBuilder = [CSODOTAPartyInternal builder];
        if (self.hasInternal) {
          [subBuilder mergeFrom:self.internal];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInternal:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasParty {
  return _builderResult.hasParty;
}
- (CSODOTAParty*) party {
  return _builderResult.party;
}
- (CSODOTAPartyMemcached_Builder*) setParty:(CSODOTAParty*) value {
  _builderResult.hasParty = YES;
  _builderResult.party = value;
  return self;
}
- (CSODOTAPartyMemcached_Builder*) setPartyBuilder:(CSODOTAParty_Builder*) builderForValue {
  return [self setParty:[builderForValue build]];
}
- (CSODOTAPartyMemcached_Builder*) mergeParty:(CSODOTAParty*) value {
  if (_builderResult.hasParty &&
      _builderResult.party != [CSODOTAParty defaultInstance]) {
    _builderResult.party =
      [[[CSODOTAParty builderWithPrototype:_builderResult.party] mergeFrom:value] buildPartial];
  } else {
    _builderResult.party = value;
  }
  _builderResult.hasParty = YES;
  return self;
}
- (CSODOTAPartyMemcached_Builder*) clearParty {
  _builderResult.hasParty = NO;
  _builderResult.party = [CSODOTAParty defaultInstance];
  return self;
}
- (BOOL) hasInternal {
  return _builderResult.hasInternal;
}
- (CSODOTAPartyInternal*) internal {
  return _builderResult.internal;
}
- (CSODOTAPartyMemcached_Builder*) setInternal:(CSODOTAPartyInternal*) value {
  _builderResult.hasInternal = YES;
  _builderResult.internal = value;
  return self;
}
- (CSODOTAPartyMemcached_Builder*) setInternalBuilder:(CSODOTAPartyInternal_Builder*) builderForValue {
  return [self setInternal:[builderForValue build]];
}
- (CSODOTAPartyMemcached_Builder*) mergeInternal:(CSODOTAPartyInternal*) value {
  if (_builderResult.hasInternal &&
      _builderResult.internal != [CSODOTAPartyInternal defaultInstance]) {
    _builderResult.internal =
      [[[CSODOTAPartyInternal builderWithPrototype:_builderResult.internal] mergeFrom:value] buildPartial];
  } else {
    _builderResult.internal = value;
  }
  _builderResult.hasInternal = YES;
  return self;
}
- (CSODOTAPartyMemcached_Builder*) clearInternal {
  _builderResult.hasInternal = NO;
  _builderResult.internal = [CSODOTAPartyInternal defaultInstance];
  return self;
}
@end

@interface CSODOTAPartyInvite ()
@property uint64_t groupId;
@property uint64_t senderId;
@property (retain) NSString* senderName;
@property (retain) PBAppendableArray * membersArray;
@end

@implementation CSODOTAPartyInvite

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value_ {
  hasGroupId_ = !!value_;
}
@synthesize groupId;
- (BOOL) hasSenderId {
  return !!hasSenderId_;
}
- (void) setHasSenderId:(BOOL) value_ {
  hasSenderId_ = !!value_;
}
@synthesize senderId;
- (BOOL) hasSenderName {
  return !!hasSenderName_;
}
- (void) setHasSenderName:(BOOL) value_ {
  hasSenderName_ = !!value_;
}
@synthesize senderName;
@synthesize membersArray;
@dynamic members;
- (void) dealloc {
  self.senderName = nil;
  self.membersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.groupId = 0L;
    self.senderId = 0L;
    self.senderName = @"";
  }
  return self;
}
static CSODOTAPartyInvite* defaultCSODOTAPartyInviteInstance = nil;
+ (void) initialize {
  if (self == [CSODOTAPartyInvite class]) {
    defaultCSODOTAPartyInviteInstance = [[CSODOTAPartyInvite alloc] init];
  }
}
+ (CSODOTAPartyInvite*) defaultInstance {
  return defaultCSODOTAPartyInviteInstance;
}
- (CSODOTAPartyInvite*) defaultInstance {
  return defaultCSODOTAPartyInviteInstance;
}
- (PBArray *)members {
  return membersArray;
}
- (CSODOTAPartyInvite_PartyMember*)membersAtIndex:(NSUInteger)index {
  return [membersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeUInt64:1 value:self.groupId];
  }
  if (self.hasSenderId) {
    [output writeFixed64:2 value:self.senderId];
  }
  if (self.hasSenderName) {
    [output writeString:3 value:self.senderName];
  }
  for (CSODOTAPartyInvite_PartyMember *element in self.membersArray) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeUInt64Size(1, self.groupId);
  }
  if (self.hasSenderId) {
    size_ += computeFixed64Size(2, self.senderId);
  }
  if (self.hasSenderName) {
    size_ += computeStringSize(3, self.senderName);
  }
  for (CSODOTAPartyInvite_PartyMember *element in self.membersArray) {
    size_ += computeMessageSize(4, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTAPartyInvite*) parseFromData:(NSData*) data {
  return (CSODOTAPartyInvite*)[[[CSODOTAPartyInvite builder] mergeFromData:data] build];
}
+ (CSODOTAPartyInvite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyInvite*)[[[CSODOTAPartyInvite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyInvite*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTAPartyInvite*)[[[CSODOTAPartyInvite builder] mergeFromInputStream:input] build];
}
+ (CSODOTAPartyInvite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyInvite*)[[[CSODOTAPartyInvite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyInvite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTAPartyInvite*)[[[CSODOTAPartyInvite builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTAPartyInvite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyInvite*)[[[CSODOTAPartyInvite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyInvite_Builder*) builder {
  return [[[CSODOTAPartyInvite_Builder alloc] init] autorelease];
}
+ (CSODOTAPartyInvite_Builder*) builderWithPrototype:(CSODOTAPartyInvite*) prototype {
  return [[CSODOTAPartyInvite builder] mergeFrom:prototype];
}
- (CSODOTAPartyInvite_Builder*) builder {
  return [CSODOTAPartyInvite builder];
}
- (CSODOTAPartyInvite_Builder*) toBuilder {
  return [CSODOTAPartyInvite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithLongLong:self.groupId]];
  }
  if (self.hasSenderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderId", [NSNumber numberWithLongLong:self.senderId]];
  }
  if (self.hasSenderName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderName", self.senderName];
  }
  for (CSODOTAPartyInvite_PartyMember* element in self.membersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"members"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTAPartyInvite class]]) {
    return NO;
  }
  CSODOTAPartyInvite *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      self.hasSenderId == otherMessage.hasSenderId &&
      (!self.hasSenderId || self.senderId == otherMessage.senderId) &&
      self.hasSenderName == otherMessage.hasSenderName &&
      (!self.hasSenderName || [self.senderName isEqual:otherMessage.senderName]) &&
      [self.membersArray isEqualToArray:otherMessage.membersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.groupId] hash];
  }
  if (self.hasSenderId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.senderId] hash];
  }
  if (self.hasSenderName) {
    hashCode = hashCode * 31 + [self.senderName hash];
  }
  for (CSODOTAPartyInvite_PartyMember* element in self.membersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTAPartyInvite_PartyMember ()
@property (retain) NSString* name;
@property uint64_t steamId;
@property uint32_t avatar;
@end

@implementation CSODOTAPartyInvite_PartyMember

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value_ {
  hasAvatar_ = !!value_;
}
@synthesize avatar;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.steamId = 0L;
    self.avatar = 0;
  }
  return self;
}
static CSODOTAPartyInvite_PartyMember* defaultCSODOTAPartyInvite_PartyMemberInstance = nil;
+ (void) initialize {
  if (self == [CSODOTAPartyInvite_PartyMember class]) {
    defaultCSODOTAPartyInvite_PartyMemberInstance = [[CSODOTAPartyInvite_PartyMember alloc] init];
  }
}
+ (CSODOTAPartyInvite_PartyMember*) defaultInstance {
  return defaultCSODOTAPartyInvite_PartyMemberInstance;
}
- (CSODOTAPartyInvite_PartyMember*) defaultInstance {
  return defaultCSODOTAPartyInvite_PartyMemberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasSteamId) {
    [output writeFixed64:2 value:self.steamId];
  }
  if (self.hasAvatar) {
    [output writeUInt32:3 value:self.avatar];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasSteamId) {
    size_ += computeFixed64Size(2, self.steamId);
  }
  if (self.hasAvatar) {
    size_ += computeUInt32Size(3, self.avatar);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTAPartyInvite_PartyMember*) parseFromData:(NSData*) data {
  return (CSODOTAPartyInvite_PartyMember*)[[[CSODOTAPartyInvite_PartyMember builder] mergeFromData:data] build];
}
+ (CSODOTAPartyInvite_PartyMember*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyInvite_PartyMember*)[[[CSODOTAPartyInvite_PartyMember builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyInvite_PartyMember*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTAPartyInvite_PartyMember*)[[[CSODOTAPartyInvite_PartyMember builder] mergeFromInputStream:input] build];
}
+ (CSODOTAPartyInvite_PartyMember*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyInvite_PartyMember*)[[[CSODOTAPartyInvite_PartyMember builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyInvite_PartyMember*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTAPartyInvite_PartyMember*)[[[CSODOTAPartyInvite_PartyMember builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTAPartyInvite_PartyMember*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAPartyInvite_PartyMember*)[[[CSODOTAPartyInvite_PartyMember builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAPartyInvite_PartyMember_Builder*) builder {
  return [[[CSODOTAPartyInvite_PartyMember_Builder alloc] init] autorelease];
}
+ (CSODOTAPartyInvite_PartyMember_Builder*) builderWithPrototype:(CSODOTAPartyInvite_PartyMember*) prototype {
  return [[CSODOTAPartyInvite_PartyMember builder] mergeFrom:prototype];
}
- (CSODOTAPartyInvite_PartyMember_Builder*) builder {
  return [CSODOTAPartyInvite_PartyMember builder];
}
- (CSODOTAPartyInvite_PartyMember_Builder*) toBuilder {
  return [CSODOTAPartyInvite_PartyMember builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", [NSNumber numberWithInt:self.avatar]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTAPartyInvite_PartyMember class]]) {
    return NO;
  }
  CSODOTAPartyInvite_PartyMember *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || self.avatar == otherMessage.avatar) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.avatar] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTAPartyInvite_PartyMember_Builder()
@property (retain) CSODOTAPartyInvite_PartyMember* _builderResult;
@end

@implementation CSODOTAPartyInvite_PartyMember_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTAPartyInvite_PartyMember alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) clear {
  _builderResult = [[[CSODOTAPartyInvite_PartyMember alloc] init] autorelease];
  return self;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) clone {
  return [CSODOTAPartyInvite_PartyMember builderWithPrototype:_builderResult];
}
- (CSODOTAPartyInvite_PartyMember*) defaultInstance {
  return [CSODOTAPartyInvite_PartyMember defaultInstance];
}
- (CSODOTAPartyInvite_PartyMember*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTAPartyInvite_PartyMember*) buildPartial {
  CSODOTAPartyInvite_PartyMember* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) mergeFrom:(CSODOTAPartyInvite_PartyMember*) other {
  if (other == [CSODOTAPartyInvite_PartyMember defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTAPartyInvite_PartyMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 17: {
        [self setSteamId:[input readFixed64]];
        break;
      }
      case 24: {
        [self setAvatar:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return _builderResult.hasName;
}
- (NSString*) name {
  return _builderResult.name;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) setName:(NSString*) value {
  _builderResult.hasName = YES;
  _builderResult.name = value;
  return self;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) clearName {
  _builderResult.hasName = NO;
  _builderResult.name = @"";
  return self;
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
- (BOOL) hasAvatar {
  return _builderResult.hasAvatar;
}
- (uint32_t) avatar {
  return _builderResult.avatar;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) setAvatar:(uint32_t) value {
  _builderResult.hasAvatar = YES;
  _builderResult.avatar = value;
  return self;
}
- (CSODOTAPartyInvite_PartyMember_Builder*) clearAvatar {
  _builderResult.hasAvatar = NO;
  _builderResult.avatar = 0;
  return self;
}
@end

@interface CSODOTAPartyInvite_Builder()
@property (retain) CSODOTAPartyInvite* _builderResult;
@end

@implementation CSODOTAPartyInvite_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTAPartyInvite alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTAPartyInvite_Builder*) clear {
  _builderResult = [[[CSODOTAPartyInvite alloc] init] autorelease];
  return self;
}
- (CSODOTAPartyInvite_Builder*) clone {
  return [CSODOTAPartyInvite builderWithPrototype:_builderResult];
}
- (CSODOTAPartyInvite*) defaultInstance {
  return [CSODOTAPartyInvite defaultInstance];
}
- (CSODOTAPartyInvite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTAPartyInvite*) buildPartial {
  CSODOTAPartyInvite* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTAPartyInvite_Builder*) mergeFrom:(CSODOTAPartyInvite*) other {
  if (other == [CSODOTAPartyInvite defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasSenderId) {
    [self setSenderId:other.senderId];
  }
  if (other.hasSenderName) {
    [self setSenderName:other.senderName];
  }
  if (other.membersArray.count > 0) {
    if (_builderResult.membersArray == nil) {
      _builderResult.membersArray = [[other.membersArray copyWithZone:[other.membersArray zone]] autorelease];
    } else {
      [_builderResult.membersArray appendArray:other.membersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTAPartyInvite_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTAPartyInvite_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGroupId:[input readUInt64]];
        break;
      }
      case 17: {
        [self setSenderId:[input readFixed64]];
        break;
      }
      case 26: {
        [self setSenderName:[input readString]];
        break;
      }
      case 34: {
        CSODOTAPartyInvite_PartyMember_Builder* subBuilder = [CSODOTAPartyInvite_PartyMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMembers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return _builderResult.hasGroupId;
}
- (uint64_t) groupId {
  return _builderResult.groupId;
}
- (CSODOTAPartyInvite_Builder*) setGroupId:(uint64_t) value {
  _builderResult.hasGroupId = YES;
  _builderResult.groupId = value;
  return self;
}
- (CSODOTAPartyInvite_Builder*) clearGroupId {
  _builderResult.hasGroupId = NO;
  _builderResult.groupId = 0L;
  return self;
}
- (BOOL) hasSenderId {
  return _builderResult.hasSenderId;
}
- (uint64_t) senderId {
  return _builderResult.senderId;
}
- (CSODOTAPartyInvite_Builder*) setSenderId:(uint64_t) value {
  _builderResult.hasSenderId = YES;
  _builderResult.senderId = value;
  return self;
}
- (CSODOTAPartyInvite_Builder*) clearSenderId {
  _builderResult.hasSenderId = NO;
  _builderResult.senderId = 0L;
  return self;
}
- (BOOL) hasSenderName {
  return _builderResult.hasSenderName;
}
- (NSString*) senderName {
  return _builderResult.senderName;
}
- (CSODOTAPartyInvite_Builder*) setSenderName:(NSString*) value {
  _builderResult.hasSenderName = YES;
  _builderResult.senderName = value;
  return self;
}
- (CSODOTAPartyInvite_Builder*) clearSenderName {
  _builderResult.hasSenderName = NO;
  _builderResult.senderName = @"";
  return self;
}
- (PBAppendableArray *)members {
  return _builderResult.membersArray;
}
- (CSODOTAPartyInvite_PartyMember*)membersAtIndex:(NSUInteger)index {
  return [_builderResult membersAtIndex:index];
}
- (CSODOTAPartyInvite_Builder *)addMembers:(CSODOTAPartyInvite_PartyMember*)value {
  if (_builderResult.membersArray == nil) {
    _builderResult.membersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.membersArray addObject:value];
  return self;
}
- (CSODOTAPartyInvite_Builder *)setMembersArray:(NSArray *)array {
  _builderResult.membersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTAPartyInvite_Builder *)setMembersValues:(const CSODOTAPartyInvite_PartyMember* *)values count:(NSUInteger)count {
  _builderResult.membersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTAPartyInvite_Builder *)clearMembers {
  _builderResult.membersArray = nil;
  return self;
}
@end

@interface CDOTALobbyMember ()
@property uint64_t id;
@property uint32_t heroId;
@property DOTA_GC_TEAM team;
@property BOOL connectedToGameServer;
@property (retain) NSString* name;
@property uint32_t slot;
@property Float32 latitude;
@property Float32 longitude;
@property DOTALobbyReadyState ready_state;
@property uint64_t partyId;
@property uint32_t metaLevel;
@property uint32_t metaXp;
@property uint32_t metaXpAwarded;
@property DOTALeaverStatus_t leaver_status;
@property uint32_t channel;
@property uint32_t prizeDefIndex;
@property uint32_t metaXpBonusRate;
@end

@implementation CDOTALobbyMember

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (BOOL) hasteam {
  return !!hasteam_;
}
- (void) setHasteam:(BOOL) value_ {
  hasteam_ = !!value_;
}
@synthesize team;
- (BOOL) hasConnectedToGameServer {
  return !!hasConnectedToGameServer_;
}
- (void) setHasConnectedToGameServer:(BOOL) value_ {
  hasConnectedToGameServer_ = !!value_;
}
- (BOOL) connectedToGameServer {
  return !!connectedToGameServer_;
}
- (void) setConnectedToGameServer:(BOOL) value_ {
  connectedToGameServer_ = !!value_;
}
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasSlot {
  return !!hasSlot_;
}
- (void) setHasSlot:(BOOL) value_ {
  hasSlot_ = !!value_;
}
@synthesize slot;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) value_ {
  hasLatitude_ = !!value_;
}
@synthesize latitude;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) value_ {
  hasLongitude_ = !!value_;
}
@synthesize longitude;
- (BOOL) hasready_state {
  return !!hasready_state_;
}
- (void) setHasready_state:(BOOL) value_ {
  hasready_state_ = !!value_;
}
@synthesize ready_state;
- (BOOL) hasPartyId {
  return !!hasPartyId_;
}
- (void) setHasPartyId:(BOOL) value_ {
  hasPartyId_ = !!value_;
}
@synthesize partyId;
- (BOOL) hasMetaLevel {
  return !!hasMetaLevel_;
}
- (void) setHasMetaLevel:(BOOL) value_ {
  hasMetaLevel_ = !!value_;
}
@synthesize metaLevel;
- (BOOL) hasMetaXp {
  return !!hasMetaXp_;
}
- (void) setHasMetaXp:(BOOL) value_ {
  hasMetaXp_ = !!value_;
}
@synthesize metaXp;
- (BOOL) hasMetaXpAwarded {
  return !!hasMetaXpAwarded_;
}
- (void) setHasMetaXpAwarded:(BOOL) value_ {
  hasMetaXpAwarded_ = !!value_;
}
@synthesize metaXpAwarded;
- (BOOL) hasleaver_status {
  return !!hasleaver_status_;
}
- (void) setHasleaver_status:(BOOL) value_ {
  hasleaver_status_ = !!value_;
}
@synthesize leaver_status;
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) value_ {
  hasChannel_ = !!value_;
}
@synthesize channel;
- (BOOL) hasPrizeDefIndex {
  return !!hasPrizeDefIndex_;
}
- (void) setHasPrizeDefIndex:(BOOL) value_ {
  hasPrizeDefIndex_ = !!value_;
}
@synthesize prizeDefIndex;
- (BOOL) hasMetaXpBonusRate {
  return !!hasMetaXpBonusRate_;
}
- (void) setHasMetaXpBonusRate:(BOOL) value_ {
  hasMetaXpBonusRate_ = !!value_;
}
@synthesize metaXpBonusRate;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.heroId = 0;
    self.team = DOTA_GC_TEAMDOTA_GC_TEAM_GOOD_GUYS;
    self.connectedToGameServer = NO;
    self.name = @"";
    self.slot = 0;
    self.latitude = 0;
    self.longitude = 0;
    self.ready_state = DOTALobbyReadyStateDOTALobbyReadyState_UNDECLARED;
    self.partyId = 0L;
    self.metaLevel = 0;
    self.metaXp = 0;
    self.metaXpAwarded = 0;
    self.leaver_status = DOTALeaverStatus_tDOTA_LEAVER_NONE;
    self.channel = 0;
    self.prizeDefIndex = 0;
    self.metaXpBonusRate = 0;
  }
  return self;
}
static CDOTALobbyMember* defaultCDOTALobbyMemberInstance = nil;
+ (void) initialize {
  if (self == [CDOTALobbyMember class]) {
    defaultCDOTALobbyMemberInstance = [[CDOTALobbyMember alloc] init];
  }
}
+ (CDOTALobbyMember*) defaultInstance {
  return defaultCDOTALobbyMemberInstance;
}
- (CDOTALobbyMember*) defaultInstance {
  return defaultCDOTALobbyMemberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeFixed64:1 value:self.id];
  }
  if (self.hasHeroId) {
    [output writeUInt32:2 value:self.heroId];
  }
  if (self.hasteam) {
    [output writeEnum:3 value:self.team];
  }
  if (self.hasConnectedToGameServer) {
    [output writeBool:4 value:self.connectedToGameServer];
  }
  if (self.hasName) {
    [output writeString:6 value:self.name];
  }
  if (self.hasSlot) {
    [output writeUInt32:7 value:self.slot];
  }
  if (self.hasLatitude) {
    [output writeFloat:8 value:self.latitude];
  }
  if (self.hasLongitude) {
    [output writeFloat:9 value:self.longitude];
  }
  if (self.hasready_state) {
    [output writeEnum:11 value:self.ready_state];
  }
  if (self.hasPartyId) {
    [output writeUInt64:12 value:self.partyId];
  }
  if (self.hasMetaLevel) {
    [output writeUInt32:13 value:self.metaLevel];
  }
  if (self.hasMetaXp) {
    [output writeUInt32:14 value:self.metaXp];
  }
  if (self.hasMetaXpAwarded) {
    [output writeUInt32:15 value:self.metaXpAwarded];
  }
  if (self.hasleaver_status) {
    [output writeEnum:16 value:self.leaver_status];
  }
  if (self.hasChannel) {
    [output writeUInt32:17 value:self.channel];
  }
  if (self.hasPrizeDefIndex) {
    [output writeUInt32:18 value:self.prizeDefIndex];
  }
  if (self.hasMetaXpBonusRate) {
    [output writeUInt32:19 value:self.metaXpBonusRate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeFixed64Size(1, self.id);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(2, self.heroId);
  }
  if (self.hasteam) {
    size_ += computeEnumSize(3, self.team);
  }
  if (self.hasConnectedToGameServer) {
    size_ += computeBoolSize(4, self.connectedToGameServer);
  }
  if (self.hasName) {
    size_ += computeStringSize(6, self.name);
  }
  if (self.hasSlot) {
    size_ += computeUInt32Size(7, self.slot);
  }
  if (self.hasLatitude) {
    size_ += computeFloatSize(8, self.latitude);
  }
  if (self.hasLongitude) {
    size_ += computeFloatSize(9, self.longitude);
  }
  if (self.hasready_state) {
    size_ += computeEnumSize(11, self.ready_state);
  }
  if (self.hasPartyId) {
    size_ += computeUInt64Size(12, self.partyId);
  }
  if (self.hasMetaLevel) {
    size_ += computeUInt32Size(13, self.metaLevel);
  }
  if (self.hasMetaXp) {
    size_ += computeUInt32Size(14, self.metaXp);
  }
  if (self.hasMetaXpAwarded) {
    size_ += computeUInt32Size(15, self.metaXpAwarded);
  }
  if (self.hasleaver_status) {
    size_ += computeEnumSize(16, self.leaver_status);
  }
  if (self.hasChannel) {
    size_ += computeUInt32Size(17, self.channel);
  }
  if (self.hasPrizeDefIndex) {
    size_ += computeUInt32Size(18, self.prizeDefIndex);
  }
  if (self.hasMetaXpBonusRate) {
    size_ += computeUInt32Size(19, self.metaXpBonusRate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CDOTALobbyMember*) parseFromData:(NSData*) data {
  return (CDOTALobbyMember*)[[[CDOTALobbyMember builder] mergeFromData:data] build];
}
+ (CDOTALobbyMember*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTALobbyMember*)[[[CDOTALobbyMember builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CDOTALobbyMember*) parseFromInputStream:(NSInputStream*) input {
  return (CDOTALobbyMember*)[[[CDOTALobbyMember builder] mergeFromInputStream:input] build];
}
+ (CDOTALobbyMember*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTALobbyMember*)[[[CDOTALobbyMember builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CDOTALobbyMember*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CDOTALobbyMember*)[[[CDOTALobbyMember builder] mergeFromCodedInputStream:input] build];
}
+ (CDOTALobbyMember*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTALobbyMember*)[[[CDOTALobbyMember builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CDOTALobbyMember_Builder*) builder {
  return [[[CDOTALobbyMember_Builder alloc] init] autorelease];
}
+ (CDOTALobbyMember_Builder*) builderWithPrototype:(CDOTALobbyMember*) prototype {
  return [[CDOTALobbyMember builder] mergeFrom:prototype];
}
- (CDOTALobbyMember_Builder*) builder {
  return [CDOTALobbyMember builder];
}
- (CDOTALobbyMember_Builder*) toBuilder {
  return [CDOTALobbyMember builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  if (self.hasteam) {
    [output appendFormat:@"%@%@: %d\n", indent, @"team", self.team];
  }
  if (self.hasConnectedToGameServer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"connectedToGameServer", [NSNumber numberWithBool:self.connectedToGameServer]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasSlot) {
    [output appendFormat:@"%@%@: %@\n", indent, @"slot", [NSNumber numberWithInt:self.slot]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithFloat:self.latitude]];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithFloat:self.longitude]];
  }
  if (self.hasready_state) {
    [output appendFormat:@"%@%@: %d\n", indent, @"ready_state", self.ready_state];
  }
  if (self.hasPartyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"partyId", [NSNumber numberWithLongLong:self.partyId]];
  }
  if (self.hasMetaLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"metaLevel", [NSNumber numberWithInt:self.metaLevel]];
  }
  if (self.hasMetaXp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"metaXp", [NSNumber numberWithInt:self.metaXp]];
  }
  if (self.hasMetaXpAwarded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"metaXpAwarded", [NSNumber numberWithInt:self.metaXpAwarded]];
  }
  if (self.hasleaver_status) {
    [output appendFormat:@"%@%@: %d\n", indent, @"leaver_status", self.leaver_status];
  }
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", [NSNumber numberWithInt:self.channel]];
  }
  if (self.hasPrizeDefIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prizeDefIndex", [NSNumber numberWithInt:self.prizeDefIndex]];
  }
  if (self.hasMetaXpBonusRate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"metaXpBonusRate", [NSNumber numberWithInt:self.metaXpBonusRate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CDOTALobbyMember class]]) {
    return NO;
  }
  CDOTALobbyMember *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      self.hasteam == otherMessage.hasteam &&
      (!self.hasteam || self.team == otherMessage.team) &&
      self.hasConnectedToGameServer == otherMessage.hasConnectedToGameServer &&
      (!self.hasConnectedToGameServer || self.connectedToGameServer == otherMessage.connectedToGameServer) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasSlot == otherMessage.hasSlot &&
      (!self.hasSlot || self.slot == otherMessage.slot) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasready_state == otherMessage.hasready_state &&
      (!self.hasready_state || self.ready_state == otherMessage.ready_state) &&
      self.hasPartyId == otherMessage.hasPartyId &&
      (!self.hasPartyId || self.partyId == otherMessage.partyId) &&
      self.hasMetaLevel == otherMessage.hasMetaLevel &&
      (!self.hasMetaLevel || self.metaLevel == otherMessage.metaLevel) &&
      self.hasMetaXp == otherMessage.hasMetaXp &&
      (!self.hasMetaXp || self.metaXp == otherMessage.metaXp) &&
      self.hasMetaXpAwarded == otherMessage.hasMetaXpAwarded &&
      (!self.hasMetaXpAwarded || self.metaXpAwarded == otherMessage.metaXpAwarded) &&
      self.hasleaver_status == otherMessage.hasleaver_status &&
      (!self.hasleaver_status || self.leaver_status == otherMessage.leaver_status) &&
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || self.channel == otherMessage.channel) &&
      self.hasPrizeDefIndex == otherMessage.hasPrizeDefIndex &&
      (!self.hasPrizeDefIndex || self.prizeDefIndex == otherMessage.prizeDefIndex) &&
      self.hasMetaXpBonusRate == otherMessage.hasMetaXpBonusRate &&
      (!self.hasMetaXpBonusRate || self.metaXpBonusRate == otherMessage.metaXpBonusRate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  if (self.hasteam) {
    hashCode = hashCode * 31 + self.team;
  }
  if (self.hasConnectedToGameServer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.connectedToGameServer] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasSlot) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.slot] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.latitude] hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.longitude] hash];
  }
  if (self.hasready_state) {
    hashCode = hashCode * 31 + self.ready_state;
  }
  if (self.hasPartyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.partyId] hash];
  }
  if (self.hasMetaLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.metaLevel] hash];
  }
  if (self.hasMetaXp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.metaXp] hash];
  }
  if (self.hasMetaXpAwarded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.metaXpAwarded] hash];
  }
  if (self.hasleaver_status) {
    hashCode = hashCode * 31 + self.leaver_status;
  }
  if (self.hasChannel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channel] hash];
  }
  if (self.hasPrizeDefIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.prizeDefIndex] hash];
  }
  if (self.hasMetaXpBonusRate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.metaXpBonusRate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CDOTALobbyMember_Builder()
@property (retain) CDOTALobbyMember* _builderResult;
@end

@implementation CDOTALobbyMember_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CDOTALobbyMember alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CDOTALobbyMember_Builder*) clear {
  _builderResult = [[[CDOTALobbyMember alloc] init] autorelease];
  return self;
}
- (CDOTALobbyMember_Builder*) clone {
  return [CDOTALobbyMember builderWithPrototype:_builderResult];
}
- (CDOTALobbyMember*) defaultInstance {
  return [CDOTALobbyMember defaultInstance];
}
- (CDOTALobbyMember*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CDOTALobbyMember*) buildPartial {
  CDOTALobbyMember* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CDOTALobbyMember_Builder*) mergeFrom:(CDOTALobbyMember*) other {
  if (other == [CDOTALobbyMember defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.hasteam) {
    [self setteam:other.team];
  }
  if (other.hasConnectedToGameServer) {
    [self setConnectedToGameServer:other.connectedToGameServer];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasSlot) {
    [self setSlot:other.slot];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasready_state) {
    [self setready_state:other.ready_state];
  }
  if (other.hasPartyId) {
    [self setPartyId:other.partyId];
  }
  if (other.hasMetaLevel) {
    [self setMetaLevel:other.metaLevel];
  }
  if (other.hasMetaXp) {
    [self setMetaXp:other.metaXp];
  }
  if (other.hasMetaXpAwarded) {
    [self setMetaXpAwarded:other.metaXpAwarded];
  }
  if (other.hasleaver_status) {
    [self setleaver_status:other.leaver_status];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  if (other.hasPrizeDefIndex) {
    [self setPrizeDefIndex:other.prizeDefIndex];
  }
  if (other.hasMetaXpBonusRate) {
    [self setMetaXpBonusRate:other.metaXpBonusRate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CDOTALobbyMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CDOTALobbyMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (DOTA_GC_TEAMIsValidValue(value)) {
          [self setteam:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setConnectedToGameServer:[input readBool]];
        break;
      }
      case 50: {
        [self setName:[input readString]];
        break;
      }
      case 56: {
        [self setSlot:[input readUInt32]];
        break;
      }
      case 69: {
        [self setLatitude:[input readFloat]];
        break;
      }
      case 77: {
        [self setLongitude:[input readFloat]];
        break;
      }
      case 88: {
        int32_t value = [input readEnum];
        if (DOTALobbyReadyStateIsValidValue(value)) {
          [self setready_state:value];
        } else {
          [unknownFields mergeVarintField:11 value:value];
        }
        break;
      }
      case 96: {
        [self setPartyId:[input readUInt64]];
        break;
      }
      case 104: {
        [self setMetaLevel:[input readUInt32]];
        break;
      }
      case 112: {
        [self setMetaXp:[input readUInt32]];
        break;
      }
      case 120: {
        [self setMetaXpAwarded:[input readUInt32]];
        break;
      }
      case 128: {
        int32_t value = [input readEnum];
        if (DOTALeaverStatus_tIsValidValue(value)) {
          [self setleaver_status:value];
        } else {
          [unknownFields mergeVarintField:16 value:value];
        }
        break;
      }
      case 136: {
        [self setChannel:[input readUInt32]];
        break;
      }
      case 144: {
        [self setPrizeDefIndex:[input readUInt32]];
        break;
      }
      case 152: {
        [self setMetaXpBonusRate:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return _builderResult.hasId;
}
- (uint64_t) id {
  return _builderResult.id;
}
- (CDOTALobbyMember_Builder*) setId:(uint64_t) value {
  _builderResult.hasId = YES;
  _builderResult.id = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearId {
  _builderResult.hasId = NO;
  _builderResult.id = 0L;
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CDOTALobbyMember_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (BOOL) hasteam {
  return _builderResult.hasteam;
}
- (DOTA_GC_TEAM) team {
  return _builderResult.team;
}
- (CDOTALobbyMember_Builder*) setteam:(DOTA_GC_TEAM) value {
  _builderResult.hasteam = YES;
  _builderResult.team = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearteam {
  _builderResult.hasteam = NO;
  _builderResult.team = DOTA_GC_TEAMDOTA_GC_TEAM_GOOD_GUYS;
  return self;
}
- (BOOL) hasConnectedToGameServer {
  return _builderResult.hasConnectedToGameServer;
}
- (BOOL) connectedToGameServer {
  return _builderResult.connectedToGameServer;
}
- (CDOTALobbyMember_Builder*) setConnectedToGameServer:(BOOL) value {
  _builderResult.hasConnectedToGameServer = YES;
  _builderResult.connectedToGameServer = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearConnectedToGameServer {
  _builderResult.hasConnectedToGameServer = NO;
  _builderResult.connectedToGameServer = NO;
  return self;
}
- (BOOL) hasName {
  return _builderResult.hasName;
}
- (NSString*) name {
  return _builderResult.name;
}
- (CDOTALobbyMember_Builder*) setName:(NSString*) value {
  _builderResult.hasName = YES;
  _builderResult.name = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearName {
  _builderResult.hasName = NO;
  _builderResult.name = @"";
  return self;
}
- (BOOL) hasSlot {
  return _builderResult.hasSlot;
}
- (uint32_t) slot {
  return _builderResult.slot;
}
- (CDOTALobbyMember_Builder*) setSlot:(uint32_t) value {
  _builderResult.hasSlot = YES;
  _builderResult.slot = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearSlot {
  _builderResult.hasSlot = NO;
  _builderResult.slot = 0;
  return self;
}
- (BOOL) hasLatitude {
  return _builderResult.hasLatitude;
}
- (Float32) latitude {
  return _builderResult.latitude;
}
- (CDOTALobbyMember_Builder*) setLatitude:(Float32) value {
  _builderResult.hasLatitude = YES;
  _builderResult.latitude = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearLatitude {
  _builderResult.hasLatitude = NO;
  _builderResult.latitude = 0;
  return self;
}
- (BOOL) hasLongitude {
  return _builderResult.hasLongitude;
}
- (Float32) longitude {
  return _builderResult.longitude;
}
- (CDOTALobbyMember_Builder*) setLongitude:(Float32) value {
  _builderResult.hasLongitude = YES;
  _builderResult.longitude = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearLongitude {
  _builderResult.hasLongitude = NO;
  _builderResult.longitude = 0;
  return self;
}
- (BOOL) hasready_state {
  return _builderResult.hasready_state;
}
- (DOTALobbyReadyState) ready_state {
  return _builderResult.ready_state;
}
- (CDOTALobbyMember_Builder*) setready_state:(DOTALobbyReadyState) value {
  _builderResult.hasready_state = YES;
  _builderResult.ready_state = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearready_state {
  _builderResult.hasready_state = NO;
  _builderResult.ready_state = DOTALobbyReadyStateDOTALobbyReadyState_UNDECLARED;
  return self;
}
- (BOOL) hasPartyId {
  return _builderResult.hasPartyId;
}
- (uint64_t) partyId {
  return _builderResult.partyId;
}
- (CDOTALobbyMember_Builder*) setPartyId:(uint64_t) value {
  _builderResult.hasPartyId = YES;
  _builderResult.partyId = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearPartyId {
  _builderResult.hasPartyId = NO;
  _builderResult.partyId = 0L;
  return self;
}
- (BOOL) hasMetaLevel {
  return _builderResult.hasMetaLevel;
}
- (uint32_t) metaLevel {
  return _builderResult.metaLevel;
}
- (CDOTALobbyMember_Builder*) setMetaLevel:(uint32_t) value {
  _builderResult.hasMetaLevel = YES;
  _builderResult.metaLevel = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearMetaLevel {
  _builderResult.hasMetaLevel = NO;
  _builderResult.metaLevel = 0;
  return self;
}
- (BOOL) hasMetaXp {
  return _builderResult.hasMetaXp;
}
- (uint32_t) metaXp {
  return _builderResult.metaXp;
}
- (CDOTALobbyMember_Builder*) setMetaXp:(uint32_t) value {
  _builderResult.hasMetaXp = YES;
  _builderResult.metaXp = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearMetaXp {
  _builderResult.hasMetaXp = NO;
  _builderResult.metaXp = 0;
  return self;
}
- (BOOL) hasMetaXpAwarded {
  return _builderResult.hasMetaXpAwarded;
}
- (uint32_t) metaXpAwarded {
  return _builderResult.metaXpAwarded;
}
- (CDOTALobbyMember_Builder*) setMetaXpAwarded:(uint32_t) value {
  _builderResult.hasMetaXpAwarded = YES;
  _builderResult.metaXpAwarded = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearMetaXpAwarded {
  _builderResult.hasMetaXpAwarded = NO;
  _builderResult.metaXpAwarded = 0;
  return self;
}
- (BOOL) hasleaver_status {
  return _builderResult.hasleaver_status;
}
- (DOTALeaverStatus_t) leaver_status {
  return _builderResult.leaver_status;
}
- (CDOTALobbyMember_Builder*) setleaver_status:(DOTALeaverStatus_t) value {
  _builderResult.hasleaver_status = YES;
  _builderResult.leaver_status = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearleaver_status {
  _builderResult.hasleaver_status = NO;
  _builderResult.leaver_status = DOTALeaverStatus_tDOTA_LEAVER_NONE;
  return self;
}
- (BOOL) hasChannel {
  return _builderResult.hasChannel;
}
- (uint32_t) channel {
  return _builderResult.channel;
}
- (CDOTALobbyMember_Builder*) setChannel:(uint32_t) value {
  _builderResult.hasChannel = YES;
  _builderResult.channel = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearChannel {
  _builderResult.hasChannel = NO;
  _builderResult.channel = 0;
  return self;
}
- (BOOL) hasPrizeDefIndex {
  return _builderResult.hasPrizeDefIndex;
}
- (uint32_t) prizeDefIndex {
  return _builderResult.prizeDefIndex;
}
- (CDOTALobbyMember_Builder*) setPrizeDefIndex:(uint32_t) value {
  _builderResult.hasPrizeDefIndex = YES;
  _builderResult.prizeDefIndex = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearPrizeDefIndex {
  _builderResult.hasPrizeDefIndex = NO;
  _builderResult.prizeDefIndex = 0;
  return self;
}
- (BOOL) hasMetaXpBonusRate {
  return _builderResult.hasMetaXpBonusRate;
}
- (uint32_t) metaXpBonusRate {
  return _builderResult.metaXpBonusRate;
}
- (CDOTALobbyMember_Builder*) setMetaXpBonusRate:(uint32_t) value {
  _builderResult.hasMetaXpBonusRate = YES;
  _builderResult.metaXpBonusRate = value;
  return self;
}
- (CDOTALobbyMember_Builder*) clearMetaXpBonusRate {
  _builderResult.hasMetaXpBonusRate = NO;
  _builderResult.metaXpBonusRate = 0;
  return self;
}
@end

@interface CLobbyTeamDetails ()
@property (retain) NSString* teamName;
@property (retain) NSString* teamTag;
@property uint32_t teamId;
@property uint64_t teamLogo;
@property uint64_t teamBaseLogo;
@property uint64_t teamBannerLogo;
@property BOOL completeTeam;
@end

@implementation CLobbyTeamDetails

- (BOOL) hasTeamName {
  return !!hasTeamName_;
}
- (void) setHasTeamName:(BOOL) value_ {
  hasTeamName_ = !!value_;
}
@synthesize teamName;
- (BOOL) hasTeamTag {
  return !!hasTeamTag_;
}
- (void) setHasTeamTag:(BOOL) value_ {
  hasTeamTag_ = !!value_;
}
@synthesize teamTag;
- (BOOL) hasTeamId {
  return !!hasTeamId_;
}
- (void) setHasTeamId:(BOOL) value_ {
  hasTeamId_ = !!value_;
}
@synthesize teamId;
- (BOOL) hasTeamLogo {
  return !!hasTeamLogo_;
}
- (void) setHasTeamLogo:(BOOL) value_ {
  hasTeamLogo_ = !!value_;
}
@synthesize teamLogo;
- (BOOL) hasTeamBaseLogo {
  return !!hasTeamBaseLogo_;
}
- (void) setHasTeamBaseLogo:(BOOL) value_ {
  hasTeamBaseLogo_ = !!value_;
}
@synthesize teamBaseLogo;
- (BOOL) hasTeamBannerLogo {
  return !!hasTeamBannerLogo_;
}
- (void) setHasTeamBannerLogo:(BOOL) value_ {
  hasTeamBannerLogo_ = !!value_;
}
@synthesize teamBannerLogo;
- (BOOL) hasCompleteTeam {
  return !!hasCompleteTeam_;
}
- (void) setHasCompleteTeam:(BOOL) value_ {
  hasCompleteTeam_ = !!value_;
}
- (BOOL) completeTeam {
  return !!completeTeam_;
}
- (void) setCompleteTeam:(BOOL) value_ {
  completeTeam_ = !!value_;
}
- (void) dealloc {
  self.teamName = nil;
  self.teamTag = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.teamName = @"";
    self.teamTag = @"";
    self.teamId = 0;
    self.teamLogo = 0L;
    self.teamBaseLogo = 0L;
    self.teamBannerLogo = 0L;
    self.completeTeam = NO;
  }
  return self;
}
static CLobbyTeamDetails* defaultCLobbyTeamDetailsInstance = nil;
+ (void) initialize {
  if (self == [CLobbyTeamDetails class]) {
    defaultCLobbyTeamDetailsInstance = [[CLobbyTeamDetails alloc] init];
  }
}
+ (CLobbyTeamDetails*) defaultInstance {
  return defaultCLobbyTeamDetailsInstance;
}
- (CLobbyTeamDetails*) defaultInstance {
  return defaultCLobbyTeamDetailsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTeamName) {
    [output writeString:1 value:self.teamName];
  }
  if (self.hasTeamTag) {
    [output writeString:3 value:self.teamTag];
  }
  if (self.hasTeamId) {
    [output writeUInt32:4 value:self.teamId];
  }
  if (self.hasTeamLogo) {
    [output writeUInt64:5 value:self.teamLogo];
  }
  if (self.hasTeamBaseLogo) {
    [output writeUInt64:6 value:self.teamBaseLogo];
  }
  if (self.hasTeamBannerLogo) {
    [output writeUInt64:7 value:self.teamBannerLogo];
  }
  if (self.hasCompleteTeam) {
    [output writeBool:8 value:self.completeTeam];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTeamName) {
    size_ += computeStringSize(1, self.teamName);
  }
  if (self.hasTeamTag) {
    size_ += computeStringSize(3, self.teamTag);
  }
  if (self.hasTeamId) {
    size_ += computeUInt32Size(4, self.teamId);
  }
  if (self.hasTeamLogo) {
    size_ += computeUInt64Size(5, self.teamLogo);
  }
  if (self.hasTeamBaseLogo) {
    size_ += computeUInt64Size(6, self.teamBaseLogo);
  }
  if (self.hasTeamBannerLogo) {
    size_ += computeUInt64Size(7, self.teamBannerLogo);
  }
  if (self.hasCompleteTeam) {
    size_ += computeBoolSize(8, self.completeTeam);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CLobbyTeamDetails*) parseFromData:(NSData*) data {
  return (CLobbyTeamDetails*)[[[CLobbyTeamDetails builder] mergeFromData:data] build];
}
+ (CLobbyTeamDetails*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLobbyTeamDetails*)[[[CLobbyTeamDetails builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CLobbyTeamDetails*) parseFromInputStream:(NSInputStream*) input {
  return (CLobbyTeamDetails*)[[[CLobbyTeamDetails builder] mergeFromInputStream:input] build];
}
+ (CLobbyTeamDetails*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLobbyTeamDetails*)[[[CLobbyTeamDetails builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLobbyTeamDetails*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CLobbyTeamDetails*)[[[CLobbyTeamDetails builder] mergeFromCodedInputStream:input] build];
}
+ (CLobbyTeamDetails*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLobbyTeamDetails*)[[[CLobbyTeamDetails builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLobbyTeamDetails_Builder*) builder {
  return [[[CLobbyTeamDetails_Builder alloc] init] autorelease];
}
+ (CLobbyTeamDetails_Builder*) builderWithPrototype:(CLobbyTeamDetails*) prototype {
  return [[CLobbyTeamDetails builder] mergeFrom:prototype];
}
- (CLobbyTeamDetails_Builder*) builder {
  return [CLobbyTeamDetails builder];
}
- (CLobbyTeamDetails_Builder*) toBuilder {
  return [CLobbyTeamDetails builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTeamName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamName", self.teamName];
  }
  if (self.hasTeamTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamTag", self.teamTag];
  }
  if (self.hasTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamId", [NSNumber numberWithInt:self.teamId]];
  }
  if (self.hasTeamLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamLogo", [NSNumber numberWithLongLong:self.teamLogo]];
  }
  if (self.hasTeamBaseLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamBaseLogo", [NSNumber numberWithLongLong:self.teamBaseLogo]];
  }
  if (self.hasTeamBannerLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamBannerLogo", [NSNumber numberWithLongLong:self.teamBannerLogo]];
  }
  if (self.hasCompleteTeam) {
    [output appendFormat:@"%@%@: %@\n", indent, @"completeTeam", [NSNumber numberWithBool:self.completeTeam]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CLobbyTeamDetails class]]) {
    return NO;
  }
  CLobbyTeamDetails *otherMessage = other;
  return
      self.hasTeamName == otherMessage.hasTeamName &&
      (!self.hasTeamName || [self.teamName isEqual:otherMessage.teamName]) &&
      self.hasTeamTag == otherMessage.hasTeamTag &&
      (!self.hasTeamTag || [self.teamTag isEqual:otherMessage.teamTag]) &&
      self.hasTeamId == otherMessage.hasTeamId &&
      (!self.hasTeamId || self.teamId == otherMessage.teamId) &&
      self.hasTeamLogo == otherMessage.hasTeamLogo &&
      (!self.hasTeamLogo || self.teamLogo == otherMessage.teamLogo) &&
      self.hasTeamBaseLogo == otherMessage.hasTeamBaseLogo &&
      (!self.hasTeamBaseLogo || self.teamBaseLogo == otherMessage.teamBaseLogo) &&
      self.hasTeamBannerLogo == otherMessage.hasTeamBannerLogo &&
      (!self.hasTeamBannerLogo || self.teamBannerLogo == otherMessage.teamBannerLogo) &&
      self.hasCompleteTeam == otherMessage.hasCompleteTeam &&
      (!self.hasCompleteTeam || self.completeTeam == otherMessage.completeTeam) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTeamName) {
    hashCode = hashCode * 31 + [self.teamName hash];
  }
  if (self.hasTeamTag) {
    hashCode = hashCode * 31 + [self.teamTag hash];
  }
  if (self.hasTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamId] hash];
  }
  if (self.hasTeamLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.teamLogo] hash];
  }
  if (self.hasTeamBaseLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.teamBaseLogo] hash];
  }
  if (self.hasTeamBannerLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.teamBannerLogo] hash];
  }
  if (self.hasCompleteTeam) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.completeTeam] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CLobbyTeamDetails_Builder()
@property (retain) CLobbyTeamDetails* _builderResult;
@end

@implementation CLobbyTeamDetails_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CLobbyTeamDetails alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CLobbyTeamDetails_Builder*) clear {
  _builderResult = [[[CLobbyTeamDetails alloc] init] autorelease];
  return self;
}
- (CLobbyTeamDetails_Builder*) clone {
  return [CLobbyTeamDetails builderWithPrototype:_builderResult];
}
- (CLobbyTeamDetails*) defaultInstance {
  return [CLobbyTeamDetails defaultInstance];
}
- (CLobbyTeamDetails*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CLobbyTeamDetails*) buildPartial {
  CLobbyTeamDetails* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CLobbyTeamDetails_Builder*) mergeFrom:(CLobbyTeamDetails*) other {
  if (other == [CLobbyTeamDetails defaultInstance]) {
    return self;
  }
  if (other.hasTeamName) {
    [self setTeamName:other.teamName];
  }
  if (other.hasTeamTag) {
    [self setTeamTag:other.teamTag];
  }
  if (other.hasTeamId) {
    [self setTeamId:other.teamId];
  }
  if (other.hasTeamLogo) {
    [self setTeamLogo:other.teamLogo];
  }
  if (other.hasTeamBaseLogo) {
    [self setTeamBaseLogo:other.teamBaseLogo];
  }
  if (other.hasTeamBannerLogo) {
    [self setTeamBannerLogo:other.teamBannerLogo];
  }
  if (other.hasCompleteTeam) {
    [self setCompleteTeam:other.completeTeam];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CLobbyTeamDetails_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CLobbyTeamDetails_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTeamName:[input readString]];
        break;
      }
      case 26: {
        [self setTeamTag:[input readString]];
        break;
      }
      case 32: {
        [self setTeamId:[input readUInt32]];
        break;
      }
      case 40: {
        [self setTeamLogo:[input readUInt64]];
        break;
      }
      case 48: {
        [self setTeamBaseLogo:[input readUInt64]];
        break;
      }
      case 56: {
        [self setTeamBannerLogo:[input readUInt64]];
        break;
      }
      case 64: {
        [self setCompleteTeam:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasTeamName {
  return _builderResult.hasTeamName;
}
- (NSString*) teamName {
  return _builderResult.teamName;
}
- (CLobbyTeamDetails_Builder*) setTeamName:(NSString*) value {
  _builderResult.hasTeamName = YES;
  _builderResult.teamName = value;
  return self;
}
- (CLobbyTeamDetails_Builder*) clearTeamName {
  _builderResult.hasTeamName = NO;
  _builderResult.teamName = @"";
  return self;
}
- (BOOL) hasTeamTag {
  return _builderResult.hasTeamTag;
}
- (NSString*) teamTag {
  return _builderResult.teamTag;
}
- (CLobbyTeamDetails_Builder*) setTeamTag:(NSString*) value {
  _builderResult.hasTeamTag = YES;
  _builderResult.teamTag = value;
  return self;
}
- (CLobbyTeamDetails_Builder*) clearTeamTag {
  _builderResult.hasTeamTag = NO;
  _builderResult.teamTag = @"";
  return self;
}
- (BOOL) hasTeamId {
  return _builderResult.hasTeamId;
}
- (uint32_t) teamId {
  return _builderResult.teamId;
}
- (CLobbyTeamDetails_Builder*) setTeamId:(uint32_t) value {
  _builderResult.hasTeamId = YES;
  _builderResult.teamId = value;
  return self;
}
- (CLobbyTeamDetails_Builder*) clearTeamId {
  _builderResult.hasTeamId = NO;
  _builderResult.teamId = 0;
  return self;
}
- (BOOL) hasTeamLogo {
  return _builderResult.hasTeamLogo;
}
- (uint64_t) teamLogo {
  return _builderResult.teamLogo;
}
- (CLobbyTeamDetails_Builder*) setTeamLogo:(uint64_t) value {
  _builderResult.hasTeamLogo = YES;
  _builderResult.teamLogo = value;
  return self;
}
- (CLobbyTeamDetails_Builder*) clearTeamLogo {
  _builderResult.hasTeamLogo = NO;
  _builderResult.teamLogo = 0L;
  return self;
}
- (BOOL) hasTeamBaseLogo {
  return _builderResult.hasTeamBaseLogo;
}
- (uint64_t) teamBaseLogo {
  return _builderResult.teamBaseLogo;
}
- (CLobbyTeamDetails_Builder*) setTeamBaseLogo:(uint64_t) value {
  _builderResult.hasTeamBaseLogo = YES;
  _builderResult.teamBaseLogo = value;
  return self;
}
- (CLobbyTeamDetails_Builder*) clearTeamBaseLogo {
  _builderResult.hasTeamBaseLogo = NO;
  _builderResult.teamBaseLogo = 0L;
  return self;
}
- (BOOL) hasTeamBannerLogo {
  return _builderResult.hasTeamBannerLogo;
}
- (uint64_t) teamBannerLogo {
  return _builderResult.teamBannerLogo;
}
- (CLobbyTeamDetails_Builder*) setTeamBannerLogo:(uint64_t) value {
  _builderResult.hasTeamBannerLogo = YES;
  _builderResult.teamBannerLogo = value;
  return self;
}
- (CLobbyTeamDetails_Builder*) clearTeamBannerLogo {
  _builderResult.hasTeamBannerLogo = NO;
  _builderResult.teamBannerLogo = 0L;
  return self;
}
- (BOOL) hasCompleteTeam {
  return _builderResult.hasCompleteTeam;
}
- (BOOL) completeTeam {
  return _builderResult.completeTeam;
}
- (CLobbyTeamDetails_Builder*) setCompleteTeam:(BOOL) value {
  _builderResult.hasCompleteTeam = YES;
  _builderResult.completeTeam = value;
  return self;
}
- (CLobbyTeamDetails_Builder*) clearCompleteTeam {
  _builderResult.hasCompleteTeam = NO;
  _builderResult.completeTeam = NO;
  return self;
}
@end

@interface CLobbyPendingPlayerReport ()
@property uint32_t accountId;
@property uint32_t date;
@end

@implementation CLobbyPendingPlayerReport

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value_ {
  hasDate_ = !!value_;
}
@synthesize date;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.date = 0;
  }
  return self;
}
static CLobbyPendingPlayerReport* defaultCLobbyPendingPlayerReportInstance = nil;
+ (void) initialize {
  if (self == [CLobbyPendingPlayerReport class]) {
    defaultCLobbyPendingPlayerReportInstance = [[CLobbyPendingPlayerReport alloc] init];
  }
}
+ (CLobbyPendingPlayerReport*) defaultInstance {
  return defaultCLobbyPendingPlayerReportInstance;
}
- (CLobbyPendingPlayerReport*) defaultInstance {
  return defaultCLobbyPendingPlayerReportInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasDate) {
    [output writeFixed32:2 value:self.date];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasDate) {
    size_ += computeFixed32Size(2, self.date);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CLobbyPendingPlayerReport*) parseFromData:(NSData*) data {
  return (CLobbyPendingPlayerReport*)[[[CLobbyPendingPlayerReport builder] mergeFromData:data] build];
}
+ (CLobbyPendingPlayerReport*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLobbyPendingPlayerReport*)[[[CLobbyPendingPlayerReport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CLobbyPendingPlayerReport*) parseFromInputStream:(NSInputStream*) input {
  return (CLobbyPendingPlayerReport*)[[[CLobbyPendingPlayerReport builder] mergeFromInputStream:input] build];
}
+ (CLobbyPendingPlayerReport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLobbyPendingPlayerReport*)[[[CLobbyPendingPlayerReport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLobbyPendingPlayerReport*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CLobbyPendingPlayerReport*)[[[CLobbyPendingPlayerReport builder] mergeFromCodedInputStream:input] build];
}
+ (CLobbyPendingPlayerReport*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLobbyPendingPlayerReport*)[[[CLobbyPendingPlayerReport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLobbyPendingPlayerReport_Builder*) builder {
  return [[[CLobbyPendingPlayerReport_Builder alloc] init] autorelease];
}
+ (CLobbyPendingPlayerReport_Builder*) builderWithPrototype:(CLobbyPendingPlayerReport*) prototype {
  return [[CLobbyPendingPlayerReport builder] mergeFrom:prototype];
}
- (CLobbyPendingPlayerReport_Builder*) builder {
  return [CLobbyPendingPlayerReport builder];
}
- (CLobbyPendingPlayerReport_Builder*) toBuilder {
  return [CLobbyPendingPlayerReport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CLobbyPendingPlayerReport class]]) {
    return NO;
  }
  CLobbyPendingPlayerReport *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CLobbyPendingPlayerReport_Builder()
@property (retain) CLobbyPendingPlayerReport* _builderResult;
@end

@implementation CLobbyPendingPlayerReport_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CLobbyPendingPlayerReport alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CLobbyPendingPlayerReport_Builder*) clear {
  _builderResult = [[[CLobbyPendingPlayerReport alloc] init] autorelease];
  return self;
}
- (CLobbyPendingPlayerReport_Builder*) clone {
  return [CLobbyPendingPlayerReport builderWithPrototype:_builderResult];
}
- (CLobbyPendingPlayerReport*) defaultInstance {
  return [CLobbyPendingPlayerReport defaultInstance];
}
- (CLobbyPendingPlayerReport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CLobbyPendingPlayerReport*) buildPartial {
  CLobbyPendingPlayerReport* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CLobbyPendingPlayerReport_Builder*) mergeFrom:(CLobbyPendingPlayerReport*) other {
  if (other == [CLobbyPendingPlayerReport defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CLobbyPendingPlayerReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CLobbyPendingPlayerReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 21: {
        [self setDate:[input readFixed32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CLobbyPendingPlayerReport_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CLobbyPendingPlayerReport_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasDate {
  return _builderResult.hasDate;
}
- (uint32_t) date {
  return _builderResult.date;
}
- (CLobbyPendingPlayerReport_Builder*) setDate:(uint32_t) value {
  _builderResult.hasDate = YES;
  _builderResult.date = value;
  return self;
}
- (CLobbyPendingPlayerReport_Builder*) clearDate {
  _builderResult.hasDate = NO;
  _builderResult.date = 0;
  return self;
}
@end

@interface CLobbyTimedRewardDetails ()
@property uint64_t itemId;
@property uint32_t itemDefIndex;
@property BOOL isSupplyCrate;
@property BOOL isTimedDrop;
@property uint32_t accountId;
@end

@implementation CLobbyTimedRewardDetails

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value_ {
  hasItemId_ = !!value_;
}
@synthesize itemId;
- (BOOL) hasItemDefIndex {
  return !!hasItemDefIndex_;
}
- (void) setHasItemDefIndex:(BOOL) value_ {
  hasItemDefIndex_ = !!value_;
}
@synthesize itemDefIndex;
- (BOOL) hasIsSupplyCrate {
  return !!hasIsSupplyCrate_;
}
- (void) setHasIsSupplyCrate:(BOOL) value_ {
  hasIsSupplyCrate_ = !!value_;
}
- (BOOL) isSupplyCrate {
  return !!isSupplyCrate_;
}
- (void) setIsSupplyCrate:(BOOL) value_ {
  isSupplyCrate_ = !!value_;
}
- (BOOL) hasIsTimedDrop {
  return !!hasIsTimedDrop_;
}
- (void) setHasIsTimedDrop:(BOOL) value_ {
  hasIsTimedDrop_ = !!value_;
}
- (BOOL) isTimedDrop {
  return !!isTimedDrop_;
}
- (void) setIsTimedDrop:(BOOL) value_ {
  isTimedDrop_ = !!value_;
}
- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.itemId = 0L;
    self.itemDefIndex = 0;
    self.isSupplyCrate = NO;
    self.isTimedDrop = NO;
    self.accountId = 0;
  }
  return self;
}
static CLobbyTimedRewardDetails* defaultCLobbyTimedRewardDetailsInstance = nil;
+ (void) initialize {
  if (self == [CLobbyTimedRewardDetails class]) {
    defaultCLobbyTimedRewardDetailsInstance = [[CLobbyTimedRewardDetails alloc] init];
  }
}
+ (CLobbyTimedRewardDetails*) defaultInstance {
  return defaultCLobbyTimedRewardDetailsInstance;
}
- (CLobbyTimedRewardDetails*) defaultInstance {
  return defaultCLobbyTimedRewardDetailsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeUInt64:1 value:self.itemId];
  }
  if (self.hasItemDefIndex) {
    [output writeUInt32:2 value:self.itemDefIndex];
  }
  if (self.hasIsSupplyCrate) {
    [output writeBool:3 value:self.isSupplyCrate];
  }
  if (self.hasIsTimedDrop) {
    [output writeBool:4 value:self.isTimedDrop];
  }
  if (self.hasAccountId) {
    [output writeUInt32:5 value:self.accountId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItemId) {
    size_ += computeUInt64Size(1, self.itemId);
  }
  if (self.hasItemDefIndex) {
    size_ += computeUInt32Size(2, self.itemDefIndex);
  }
  if (self.hasIsSupplyCrate) {
    size_ += computeBoolSize(3, self.isSupplyCrate);
  }
  if (self.hasIsTimedDrop) {
    size_ += computeBoolSize(4, self.isTimedDrop);
  }
  if (self.hasAccountId) {
    size_ += computeUInt32Size(5, self.accountId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CLobbyTimedRewardDetails*) parseFromData:(NSData*) data {
  return (CLobbyTimedRewardDetails*)[[[CLobbyTimedRewardDetails builder] mergeFromData:data] build];
}
+ (CLobbyTimedRewardDetails*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLobbyTimedRewardDetails*)[[[CLobbyTimedRewardDetails builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CLobbyTimedRewardDetails*) parseFromInputStream:(NSInputStream*) input {
  return (CLobbyTimedRewardDetails*)[[[CLobbyTimedRewardDetails builder] mergeFromInputStream:input] build];
}
+ (CLobbyTimedRewardDetails*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLobbyTimedRewardDetails*)[[[CLobbyTimedRewardDetails builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLobbyTimedRewardDetails*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CLobbyTimedRewardDetails*)[[[CLobbyTimedRewardDetails builder] mergeFromCodedInputStream:input] build];
}
+ (CLobbyTimedRewardDetails*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLobbyTimedRewardDetails*)[[[CLobbyTimedRewardDetails builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLobbyTimedRewardDetails_Builder*) builder {
  return [[[CLobbyTimedRewardDetails_Builder alloc] init] autorelease];
}
+ (CLobbyTimedRewardDetails_Builder*) builderWithPrototype:(CLobbyTimedRewardDetails*) prototype {
  return [[CLobbyTimedRewardDetails builder] mergeFrom:prototype];
}
- (CLobbyTimedRewardDetails_Builder*) builder {
  return [CLobbyTimedRewardDetails builder];
}
- (CLobbyTimedRewardDetails_Builder*) toBuilder {
  return [CLobbyTimedRewardDetails builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", [NSNumber numberWithLongLong:self.itemId]];
  }
  if (self.hasItemDefIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemDefIndex", [NSNumber numberWithInt:self.itemDefIndex]];
  }
  if (self.hasIsSupplyCrate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isSupplyCrate", [NSNumber numberWithBool:self.isSupplyCrate]];
  }
  if (self.hasIsTimedDrop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isTimedDrop", [NSNumber numberWithBool:self.isTimedDrop]];
  }
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CLobbyTimedRewardDetails class]]) {
    return NO;
  }
  CLobbyTimedRewardDetails *otherMessage = other;
  return
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || self.itemId == otherMessage.itemId) &&
      self.hasItemDefIndex == otherMessage.hasItemDefIndex &&
      (!self.hasItemDefIndex || self.itemDefIndex == otherMessage.itemDefIndex) &&
      self.hasIsSupplyCrate == otherMessage.hasIsSupplyCrate &&
      (!self.hasIsSupplyCrate || self.isSupplyCrate == otherMessage.isSupplyCrate) &&
      self.hasIsTimedDrop == otherMessage.hasIsTimedDrop &&
      (!self.hasIsTimedDrop || self.isTimedDrop == otherMessage.isTimedDrop) &&
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.itemId] hash];
  }
  if (self.hasItemDefIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemDefIndex] hash];
  }
  if (self.hasIsSupplyCrate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isSupplyCrate] hash];
  }
  if (self.hasIsTimedDrop) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isTimedDrop] hash];
  }
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CLobbyTimedRewardDetails_Builder()
@property (retain) CLobbyTimedRewardDetails* _builderResult;
@end

@implementation CLobbyTimedRewardDetails_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CLobbyTimedRewardDetails alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CLobbyTimedRewardDetails_Builder*) clear {
  _builderResult = [[[CLobbyTimedRewardDetails alloc] init] autorelease];
  return self;
}
- (CLobbyTimedRewardDetails_Builder*) clone {
  return [CLobbyTimedRewardDetails builderWithPrototype:_builderResult];
}
- (CLobbyTimedRewardDetails*) defaultInstance {
  return [CLobbyTimedRewardDetails defaultInstance];
}
- (CLobbyTimedRewardDetails*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CLobbyTimedRewardDetails*) buildPartial {
  CLobbyTimedRewardDetails* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CLobbyTimedRewardDetails_Builder*) mergeFrom:(CLobbyTimedRewardDetails*) other {
  if (other == [CLobbyTimedRewardDetails defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasItemDefIndex) {
    [self setItemDefIndex:other.itemDefIndex];
  }
  if (other.hasIsSupplyCrate) {
    [self setIsSupplyCrate:other.isSupplyCrate];
  }
  if (other.hasIsTimedDrop) {
    [self setIsTimedDrop:other.isTimedDrop];
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CLobbyTimedRewardDetails_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CLobbyTimedRewardDetails_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setItemDefIndex:[input readUInt32]];
        break;
      }
      case 24: {
        [self setIsSupplyCrate:[input readBool]];
        break;
      }
      case 32: {
        [self setIsTimedDrop:[input readBool]];
        break;
      }
      case 40: {
        [self setAccountId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return _builderResult.hasItemId;
}
- (uint64_t) itemId {
  return _builderResult.itemId;
}
- (CLobbyTimedRewardDetails_Builder*) setItemId:(uint64_t) value {
  _builderResult.hasItemId = YES;
  _builderResult.itemId = value;
  return self;
}
- (CLobbyTimedRewardDetails_Builder*) clearItemId {
  _builderResult.hasItemId = NO;
  _builderResult.itemId = 0L;
  return self;
}
- (BOOL) hasItemDefIndex {
  return _builderResult.hasItemDefIndex;
}
- (uint32_t) itemDefIndex {
  return _builderResult.itemDefIndex;
}
- (CLobbyTimedRewardDetails_Builder*) setItemDefIndex:(uint32_t) value {
  _builderResult.hasItemDefIndex = YES;
  _builderResult.itemDefIndex = value;
  return self;
}
- (CLobbyTimedRewardDetails_Builder*) clearItemDefIndex {
  _builderResult.hasItemDefIndex = NO;
  _builderResult.itemDefIndex = 0;
  return self;
}
- (BOOL) hasIsSupplyCrate {
  return _builderResult.hasIsSupplyCrate;
}
- (BOOL) isSupplyCrate {
  return _builderResult.isSupplyCrate;
}
- (CLobbyTimedRewardDetails_Builder*) setIsSupplyCrate:(BOOL) value {
  _builderResult.hasIsSupplyCrate = YES;
  _builderResult.isSupplyCrate = value;
  return self;
}
- (CLobbyTimedRewardDetails_Builder*) clearIsSupplyCrate {
  _builderResult.hasIsSupplyCrate = NO;
  _builderResult.isSupplyCrate = NO;
  return self;
}
- (BOOL) hasIsTimedDrop {
  return _builderResult.hasIsTimedDrop;
}
- (BOOL) isTimedDrop {
  return _builderResult.isTimedDrop;
}
- (CLobbyTimedRewardDetails_Builder*) setIsTimedDrop:(BOOL) value {
  _builderResult.hasIsTimedDrop = YES;
  _builderResult.isTimedDrop = value;
  return self;
}
- (CLobbyTimedRewardDetails_Builder*) clearIsTimedDrop {
  _builderResult.hasIsTimedDrop = NO;
  _builderResult.isTimedDrop = NO;
  return self;
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CLobbyTimedRewardDetails_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CLobbyTimedRewardDetails_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
@end

@interface CSODOTALobby ()
@property uint64_t lobbyId;
@property (retain) PBAppendableArray * membersArray;
@property (retain) PBAppendableArray * leftMembersArray;
@property uint64_t leaderId;
@property uint64_t serverId;
@property uint32_t gameMode;
@property (retain) PBAppendableArray * pendingInvitesArray;
@property CSODOTALobby_State state;
@property (retain) NSString* connect;
@property CSODOTALobby_LobbyType lobby_type;
@property BOOL allowCheats;
@property BOOL fillWithBots;
@property BOOL introMode;
@property (retain) NSString* gameName;
@property (retain) PBAppendableArray * teamDetailsArray;
@property uint32_t tutorialLesson;
@property uint32_t tournamentId;
@property uint32_t tournamentGameId;
@property uint32_t serverRegion;
@property DOTA_GameState game_state;
@property uint32_t numSpectators;
@property uint32_t towerState;
@property uint32_t matchgroup;
@property BOOL leaverDetected;
@property DOTA_CM_PICK cm_pick;
@property uint32_t matchId;
@property BOOL allowSpectating;
@property DOTABotDifficulty bot_difficulty;
@property DOTAGameVersion game_version;
@property (retain) PBAppendableArray * timedRewardDetailsArray;
@property (retain) NSString* passKey;
@property Float32 dropRateBonus;
@property (retain) PBAppendableArray * botSlotDifficultyArray;
@property uint32_t leagueid;
@property uint32_t penaltyLevelRadiant;
@property uint32_t penaltyLevelDire;
@property uint32_t loadGameId;
@property uint32_t seriesType;
@property uint32_t radiantSeriesWins;
@property uint32_t direSeriesWins;
@property uint32_t lootGenerated;
@property uint32_t lootAwarded;
@end

@implementation CSODOTALobby

- (BOOL) hasLobbyId {
  return !!hasLobbyId_;
}
- (void) setHasLobbyId:(BOOL) value_ {
  hasLobbyId_ = !!value_;
}
@synthesize lobbyId;
@synthesize membersArray;
@dynamic members;
@synthesize leftMembersArray;
@dynamic leftMembers;
- (BOOL) hasLeaderId {
  return !!hasLeaderId_;
}
- (void) setHasLeaderId:(BOOL) value_ {
  hasLeaderId_ = !!value_;
}
@synthesize leaderId;
- (BOOL) hasServerId {
  return !!hasServerId_;
}
- (void) setHasServerId:(BOOL) value_ {
  hasServerId_ = !!value_;
}
@synthesize serverId;
- (BOOL) hasGameMode {
  return !!hasGameMode_;
}
- (void) setHasGameMode:(BOOL) value_ {
  hasGameMode_ = !!value_;
}
@synthesize gameMode;
@synthesize pendingInvitesArray;
@dynamic pendingInvites;
- (BOOL) hasstate {
  return !!hasstate_;
}
- (void) setHasstate:(BOOL) value_ {
  hasstate_ = !!value_;
}
@synthesize state;
- (BOOL) hasConnect {
  return !!hasConnect_;
}
- (void) setHasConnect:(BOOL) value_ {
  hasConnect_ = !!value_;
}
@synthesize connect;
- (BOOL) haslobby_type {
  return !!haslobby_type_;
}
- (void) setHaslobby_type:(BOOL) value_ {
  haslobby_type_ = !!value_;
}
@synthesize lobby_type;
- (BOOL) hasAllowCheats {
  return !!hasAllowCheats_;
}
- (void) setHasAllowCheats:(BOOL) value_ {
  hasAllowCheats_ = !!value_;
}
- (BOOL) allowCheats {
  return !!allowCheats_;
}
- (void) setAllowCheats:(BOOL) value_ {
  allowCheats_ = !!value_;
}
- (BOOL) hasFillWithBots {
  return !!hasFillWithBots_;
}
- (void) setHasFillWithBots:(BOOL) value_ {
  hasFillWithBots_ = !!value_;
}
- (BOOL) fillWithBots {
  return !!fillWithBots_;
}
- (void) setFillWithBots:(BOOL) value_ {
  fillWithBots_ = !!value_;
}
- (BOOL) hasIntroMode {
  return !!hasIntroMode_;
}
- (void) setHasIntroMode:(BOOL) value_ {
  hasIntroMode_ = !!value_;
}
- (BOOL) introMode {
  return !!introMode_;
}
- (void) setIntroMode:(BOOL) value_ {
  introMode_ = !!value_;
}
- (BOOL) hasGameName {
  return !!hasGameName_;
}
- (void) setHasGameName:(BOOL) value_ {
  hasGameName_ = !!value_;
}
@synthesize gameName;
@synthesize teamDetailsArray;
@dynamic teamDetails;
- (BOOL) hasTutorialLesson {
  return !!hasTutorialLesson_;
}
- (void) setHasTutorialLesson:(BOOL) value_ {
  hasTutorialLesson_ = !!value_;
}
@synthesize tutorialLesson;
- (BOOL) hasTournamentId {
  return !!hasTournamentId_;
}
- (void) setHasTournamentId:(BOOL) value_ {
  hasTournamentId_ = !!value_;
}
@synthesize tournamentId;
- (BOOL) hasTournamentGameId {
  return !!hasTournamentGameId_;
}
- (void) setHasTournamentGameId:(BOOL) value_ {
  hasTournamentGameId_ = !!value_;
}
@synthesize tournamentGameId;
- (BOOL) hasServerRegion {
  return !!hasServerRegion_;
}
- (void) setHasServerRegion:(BOOL) value_ {
  hasServerRegion_ = !!value_;
}
@synthesize serverRegion;
- (BOOL) hasgame_state {
  return !!hasgame_state_;
}
- (void) setHasgame_state:(BOOL) value_ {
  hasgame_state_ = !!value_;
}
@synthesize game_state;
- (BOOL) hasNumSpectators {
  return !!hasNumSpectators_;
}
- (void) setHasNumSpectators:(BOOL) value_ {
  hasNumSpectators_ = !!value_;
}
@synthesize numSpectators;
- (BOOL) hasTowerState {
  return !!hasTowerState_;
}
- (void) setHasTowerState:(BOOL) value_ {
  hasTowerState_ = !!value_;
}
@synthesize towerState;
- (BOOL) hasMatchgroup {
  return !!hasMatchgroup_;
}
- (void) setHasMatchgroup:(BOOL) value_ {
  hasMatchgroup_ = !!value_;
}
@synthesize matchgroup;
- (BOOL) hasLeaverDetected {
  return !!hasLeaverDetected_;
}
- (void) setHasLeaverDetected:(BOOL) value_ {
  hasLeaverDetected_ = !!value_;
}
- (BOOL) leaverDetected {
  return !!leaverDetected_;
}
- (void) setLeaverDetected:(BOOL) value_ {
  leaverDetected_ = !!value_;
}
- (BOOL) hascm_pick {
  return !!hascm_pick_;
}
- (void) setHascm_pick:(BOOL) value_ {
  hascm_pick_ = !!value_;
}
@synthesize cm_pick;
- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (BOOL) hasAllowSpectating {
  return !!hasAllowSpectating_;
}
- (void) setHasAllowSpectating:(BOOL) value_ {
  hasAllowSpectating_ = !!value_;
}
- (BOOL) allowSpectating {
  return !!allowSpectating_;
}
- (void) setAllowSpectating:(BOOL) value_ {
  allowSpectating_ = !!value_;
}
- (BOOL) hasbot_difficulty {
  return !!hasbot_difficulty_;
}
- (void) setHasbot_difficulty:(BOOL) value_ {
  hasbot_difficulty_ = !!value_;
}
@synthesize bot_difficulty;
- (BOOL) hasgame_version {
  return !!hasgame_version_;
}
- (void) setHasgame_version:(BOOL) value_ {
  hasgame_version_ = !!value_;
}
@synthesize game_version;
@synthesize timedRewardDetailsArray;
@dynamic timedRewardDetails;
- (BOOL) hasPassKey {
  return !!hasPassKey_;
}
- (void) setHasPassKey:(BOOL) value_ {
  hasPassKey_ = !!value_;
}
@synthesize passKey;
- (BOOL) hasDropRateBonus {
  return !!hasDropRateBonus_;
}
- (void) setHasDropRateBonus:(BOOL) value_ {
  hasDropRateBonus_ = !!value_;
}
@synthesize dropRateBonus;
@synthesize botSlotDifficultyArray;
@dynamic bot_slot_difficulty;
- (BOOL) hasLeagueid {
  return !!hasLeagueid_;
}
- (void) setHasLeagueid:(BOOL) value_ {
  hasLeagueid_ = !!value_;
}
@synthesize leagueid;
- (BOOL) hasPenaltyLevelRadiant {
  return !!hasPenaltyLevelRadiant_;
}
- (void) setHasPenaltyLevelRadiant:(BOOL) value_ {
  hasPenaltyLevelRadiant_ = !!value_;
}
@synthesize penaltyLevelRadiant;
- (BOOL) hasPenaltyLevelDire {
  return !!hasPenaltyLevelDire_;
}
- (void) setHasPenaltyLevelDire:(BOOL) value_ {
  hasPenaltyLevelDire_ = !!value_;
}
@synthesize penaltyLevelDire;
- (BOOL) hasLoadGameId {
  return !!hasLoadGameId_;
}
- (void) setHasLoadGameId:(BOOL) value_ {
  hasLoadGameId_ = !!value_;
}
@synthesize loadGameId;
- (BOOL) hasSeriesType {
  return !!hasSeriesType_;
}
- (void) setHasSeriesType:(BOOL) value_ {
  hasSeriesType_ = !!value_;
}
@synthesize seriesType;
- (BOOL) hasRadiantSeriesWins {
  return !!hasRadiantSeriesWins_;
}
- (void) setHasRadiantSeriesWins:(BOOL) value_ {
  hasRadiantSeriesWins_ = !!value_;
}
@synthesize radiantSeriesWins;
- (BOOL) hasDireSeriesWins {
  return !!hasDireSeriesWins_;
}
- (void) setHasDireSeriesWins:(BOOL) value_ {
  hasDireSeriesWins_ = !!value_;
}
@synthesize direSeriesWins;
- (BOOL) hasLootGenerated {
  return !!hasLootGenerated_;
}
- (void) setHasLootGenerated:(BOOL) value_ {
  hasLootGenerated_ = !!value_;
}
@synthesize lootGenerated;
- (BOOL) hasLootAwarded {
  return !!hasLootAwarded_;
}
- (void) setHasLootAwarded:(BOOL) value_ {
  hasLootAwarded_ = !!value_;
}
@synthesize lootAwarded;
- (void) dealloc {
  self.membersArray = nil;
  self.leftMembersArray = nil;
  self.pendingInvitesArray = nil;
  self.connect = nil;
  self.gameName = nil;
  self.teamDetailsArray = nil;
  self.timedRewardDetailsArray = nil;
  self.passKey = nil;
  self.botSlotDifficultyArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lobbyId = 0L;
    self.leaderId = 0L;
    self.serverId = 0L;
    self.gameMode = 0;
    self.state = CSODOTALobby_StateUI;
    self.connect = @"";
    self.lobby_type = CSODOTALobby_LobbyTypeINVALID;
    self.allowCheats = NO;
    self.fillWithBots = NO;
    self.introMode = NO;
    self.gameName = @"";
    self.tutorialLesson = 0;
    self.tournamentId = 0;
    self.tournamentGameId = 0;
    self.serverRegion = 0;
    self.game_state = DOTA_GameStateDOTA_GAMERULES_STATE_INIT;
    self.numSpectators = 0;
    self.towerState = 0;
    self.matchgroup = 0;
    self.leaverDetected = NO;
    self.cm_pick = DOTA_CM_PICKDOTA_CM_RANDOM;
    self.matchId = 0;
    self.allowSpectating = YES;
    self.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_HARD;
    self.game_version = DOTAGameVersionGAME_VERSION_CURRENT;
    self.passKey = @"";
    self.dropRateBonus = 0;
    self.leagueid = 0;
    self.penaltyLevelRadiant = 0;
    self.penaltyLevelDire = 0;
    self.loadGameId = 0;
    self.seriesType = 0;
    self.radiantSeriesWins = 0;
    self.direSeriesWins = 0;
    self.lootGenerated = 0;
    self.lootAwarded = 0;
  }
  return self;
}
static CSODOTALobby* defaultCSODOTALobbyInstance = nil;
+ (void) initialize {
  if (self == [CSODOTALobby class]) {
    defaultCSODOTALobbyInstance = [[CSODOTALobby alloc] init];
  }
}
+ (CSODOTALobby*) defaultInstance {
  return defaultCSODOTALobbyInstance;
}
- (CSODOTALobby*) defaultInstance {
  return defaultCSODOTALobbyInstance;
}
- (PBArray *)members {
  return membersArray;
}
- (CDOTALobbyMember*)membersAtIndex:(NSUInteger)index {
  return [membersArray objectAtIndex:index];
}
- (PBArray *)leftMembers {
  return leftMembersArray;
}
- (CDOTALobbyMember*)leftMembersAtIndex:(NSUInteger)index {
  return [leftMembersArray objectAtIndex:index];
}
- (PBArray *)pendingInvites {
  return pendingInvitesArray;
}
- (uint64_t)pendingInvitesAtIndex:(NSUInteger)index {
  return [pendingInvitesArray uint64AtIndex:index];
}
- (PBArray *)teamDetails {
  return teamDetailsArray;
}
- (CLobbyTeamDetails*)teamDetailsAtIndex:(NSUInteger)index {
  return [teamDetailsArray objectAtIndex:index];
}
- (PBArray *)timedRewardDetails {
  return timedRewardDetailsArray;
}
- (CLobbyTimedRewardDetails*)timedRewardDetailsAtIndex:(NSUInteger)index {
  return [timedRewardDetailsArray objectAtIndex:index];
}
- (PBArray *)bot_slot_difficulty {
  return botSlotDifficultyArray;
}
- (DOTABotDifficulty)bot_slot_difficultyAtIndex:(NSUInteger)index {
  return [botSlotDifficultyArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLobbyId) {
    [output writeUInt64:1 value:self.lobbyId];
  }
  for (CDOTALobbyMember *element in self.membersArray) {
    [output writeMessage:2 value:element];
  }
  if (self.hasGameMode) {
    [output writeUInt32:3 value:self.gameMode];
  }
  if (self.hasstate) {
    [output writeEnum:4 value:self.state];
  }
  if (self.hasConnect) {
    [output writeString:5 value:self.connect];
  }
  if (self.hasServerId) {
    [output writeFixed64:6 value:self.serverId];
  }
  for (CDOTALobbyMember *element in self.leftMembersArray) {
    [output writeMessage:7 value:element];
  }
  const NSUInteger pendingInvitesArrayCount = self.pendingInvitesArray.count;
  if (pendingInvitesArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.pendingInvitesArray.data;
    for (NSUInteger i = 0; i < pendingInvitesArrayCount; ++i) {
      [output writeFixed64:10 value:values[i]];
    }
  }
  if (self.hasLeaderId) {
    [output writeFixed64:11 value:self.leaderId];
  }
  if (self.haslobby_type) {
    [output writeEnum:12 value:self.lobby_type];
  }
  if (self.hasAllowCheats) {
    [output writeBool:13 value:self.allowCheats];
  }
  if (self.hasFillWithBots) {
    [output writeBool:14 value:self.fillWithBots];
  }
  if (self.hasIntroMode) {
    [output writeBool:15 value:self.introMode];
  }
  if (self.hasGameName) {
    [output writeString:16 value:self.gameName];
  }
  for (CLobbyTeamDetails *element in self.teamDetailsArray) {
    [output writeMessage:17 value:element];
  }
  if (self.hasTutorialLesson) {
    [output writeUInt32:18 value:self.tutorialLesson];
  }
  if (self.hasTournamentId) {
    [output writeUInt32:19 value:self.tournamentId];
  }
  if (self.hasTournamentGameId) {
    [output writeUInt32:20 value:self.tournamentGameId];
  }
  if (self.hasServerRegion) {
    [output writeUInt32:21 value:self.serverRegion];
  }
  if (self.hasgame_state) {
    [output writeEnum:22 value:self.game_state];
  }
  if (self.hasNumSpectators) {
    [output writeUInt32:23 value:self.numSpectators];
  }
  if (self.hasTowerState) {
    [output writeUInt32:24 value:self.towerState];
  }
  if (self.hasMatchgroup) {
    [output writeUInt32:25 value:self.matchgroup];
  }
  if (self.hasLeaverDetected) {
    [output writeBool:27 value:self.leaverDetected];
  }
  if (self.hascm_pick) {
    [output writeEnum:28 value:self.cm_pick];
  }
  if (self.hasMatchId) {
    [output writeUInt32:30 value:self.matchId];
  }
  if (self.hasAllowSpectating) {
    [output writeBool:31 value:self.allowSpectating];
  }
  if (self.hasbot_difficulty) {
    [output writeEnum:36 value:self.bot_difficulty];
  }
  if (self.hasgame_version) {
    [output writeEnum:37 value:self.game_version];
  }
  for (CLobbyTimedRewardDetails *element in self.timedRewardDetailsArray) {
    [output writeMessage:38 value:element];
  }
  if (self.hasPassKey) {
    [output writeString:39 value:self.passKey];
  }
  if (self.hasDropRateBonus) {
    [output writeFloat:40 value:self.dropRateBonus];
  }
  const NSUInteger botSlotDifficultyArrayCount = self.botSlotDifficultyArray.count;
  const DOTABotDifficulty *botSlotDifficultyArrayValues = (const DOTABotDifficulty *)self.botSlotDifficultyArray.data;
  for (NSUInteger i = 0; i < botSlotDifficultyArrayCount; ++i) {
    [output writeEnum:41 value:botSlotDifficultyArrayValues[i]];
  }
  if (self.hasLeagueid) {
    [output writeUInt32:42 value:self.leagueid];
  }
  if (self.hasPenaltyLevelRadiant) {
    [output writeUInt32:43 value:self.penaltyLevelRadiant];
  }
  if (self.hasPenaltyLevelDire) {
    [output writeUInt32:44 value:self.penaltyLevelDire];
  }
  if (self.hasLoadGameId) {
    [output writeUInt32:45 value:self.loadGameId];
  }
  if (self.hasSeriesType) {
    [output writeUInt32:46 value:self.seriesType];
  }
  if (self.hasRadiantSeriesWins) {
    [output writeUInt32:47 value:self.radiantSeriesWins];
  }
  if (self.hasDireSeriesWins) {
    [output writeUInt32:48 value:self.direSeriesWins];
  }
  if (self.hasLootGenerated) {
    [output writeUInt32:49 value:self.lootGenerated];
  }
  if (self.hasLootAwarded) {
    [output writeUInt32:50 value:self.lootAwarded];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLobbyId) {
    size_ += computeUInt64Size(1, self.lobbyId);
  }
  for (CDOTALobbyMember *element in self.membersArray) {
    size_ += computeMessageSize(2, element);
  }
  if (self.hasGameMode) {
    size_ += computeUInt32Size(3, self.gameMode);
  }
  if (self.hasstate) {
    size_ += computeEnumSize(4, self.state);
  }
  if (self.hasConnect) {
    size_ += computeStringSize(5, self.connect);
  }
  if (self.hasServerId) {
    size_ += computeFixed64Size(6, self.serverId);
  }
  for (CDOTALobbyMember *element in self.leftMembersArray) {
    size_ += computeMessageSize(7, element);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.pendingInvitesArray.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasLeaderId) {
    size_ += computeFixed64Size(11, self.leaderId);
  }
  if (self.haslobby_type) {
    size_ += computeEnumSize(12, self.lobby_type);
  }
  if (self.hasAllowCheats) {
    size_ += computeBoolSize(13, self.allowCheats);
  }
  if (self.hasFillWithBots) {
    size_ += computeBoolSize(14, self.fillWithBots);
  }
  if (self.hasIntroMode) {
    size_ += computeBoolSize(15, self.introMode);
  }
  if (self.hasGameName) {
    size_ += computeStringSize(16, self.gameName);
  }
  for (CLobbyTeamDetails *element in self.teamDetailsArray) {
    size_ += computeMessageSize(17, element);
  }
  if (self.hasTutorialLesson) {
    size_ += computeUInt32Size(18, self.tutorialLesson);
  }
  if (self.hasTournamentId) {
    size_ += computeUInt32Size(19, self.tournamentId);
  }
  if (self.hasTournamentGameId) {
    size_ += computeUInt32Size(20, self.tournamentGameId);
  }
  if (self.hasServerRegion) {
    size_ += computeUInt32Size(21, self.serverRegion);
  }
  if (self.hasgame_state) {
    size_ += computeEnumSize(22, self.game_state);
  }
  if (self.hasNumSpectators) {
    size_ += computeUInt32Size(23, self.numSpectators);
  }
  if (self.hasTowerState) {
    size_ += computeUInt32Size(24, self.towerState);
  }
  if (self.hasMatchgroup) {
    size_ += computeUInt32Size(25, self.matchgroup);
  }
  if (self.hasLeaverDetected) {
    size_ += computeBoolSize(27, self.leaverDetected);
  }
  if (self.hascm_pick) {
    size_ += computeEnumSize(28, self.cm_pick);
  }
  if (self.hasMatchId) {
    size_ += computeUInt32Size(30, self.matchId);
  }
  if (self.hasAllowSpectating) {
    size_ += computeBoolSize(31, self.allowSpectating);
  }
  if (self.hasbot_difficulty) {
    size_ += computeEnumSize(36, self.bot_difficulty);
  }
  if (self.hasgame_version) {
    size_ += computeEnumSize(37, self.game_version);
  }
  for (CLobbyTimedRewardDetails *element in self.timedRewardDetailsArray) {
    size_ += computeMessageSize(38, element);
  }
  if (self.hasPassKey) {
    size_ += computeStringSize(39, self.passKey);
  }
  if (self.hasDropRateBonus) {
    size_ += computeFloatSize(40, self.dropRateBonus);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.botSlotDifficultyArray.count;
    const DOTABotDifficulty *values = (const DOTABotDifficulty *)self.botSlotDifficultyArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  if (self.hasLeagueid) {
    size_ += computeUInt32Size(42, self.leagueid);
  }
  if (self.hasPenaltyLevelRadiant) {
    size_ += computeUInt32Size(43, self.penaltyLevelRadiant);
  }
  if (self.hasPenaltyLevelDire) {
    size_ += computeUInt32Size(44, self.penaltyLevelDire);
  }
  if (self.hasLoadGameId) {
    size_ += computeUInt32Size(45, self.loadGameId);
  }
  if (self.hasSeriesType) {
    size_ += computeUInt32Size(46, self.seriesType);
  }
  if (self.hasRadiantSeriesWins) {
    size_ += computeUInt32Size(47, self.radiantSeriesWins);
  }
  if (self.hasDireSeriesWins) {
    size_ += computeUInt32Size(48, self.direSeriesWins);
  }
  if (self.hasLootGenerated) {
    size_ += computeUInt32Size(49, self.lootGenerated);
  }
  if (self.hasLootAwarded) {
    size_ += computeUInt32Size(50, self.lootAwarded);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTALobby*) parseFromData:(NSData*) data {
  return (CSODOTALobby*)[[[CSODOTALobby builder] mergeFromData:data] build];
}
+ (CSODOTALobby*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTALobby*)[[[CSODOTALobby builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTALobby*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTALobby*)[[[CSODOTALobby builder] mergeFromInputStream:input] build];
}
+ (CSODOTALobby*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTALobby*)[[[CSODOTALobby builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTALobby*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTALobby*)[[[CSODOTALobby builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTALobby*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTALobby*)[[[CSODOTALobby builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTALobby_Builder*) builder {
  return [[[CSODOTALobby_Builder alloc] init] autorelease];
}
+ (CSODOTALobby_Builder*) builderWithPrototype:(CSODOTALobby*) prototype {
  return [[CSODOTALobby builder] mergeFrom:prototype];
}
- (CSODOTALobby_Builder*) builder {
  return [CSODOTALobby builder];
}
- (CSODOTALobby_Builder*) toBuilder {
  return [CSODOTALobby builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLobbyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyId", [NSNumber numberWithLongLong:self.lobbyId]];
  }
  for (CDOTALobbyMember* element in self.membersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"members"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGameMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameMode", [NSNumber numberWithInt:self.gameMode]];
  }
  if (self.hasstate) {
    [output appendFormat:@"%@%@: %d\n", indent, @"state", self.state];
  }
  if (self.hasConnect) {
    [output appendFormat:@"%@%@: %@\n", indent, @"connect", self.connect];
  }
  if (self.hasServerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverId", [NSNumber numberWithLongLong:self.serverId]];
  }
  for (CDOTALobbyMember* element in self.leftMembersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"leftMembers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSNumber* value in self.pendingInvitesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pendingInvites", value];
  }
  if (self.hasLeaderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaderId", [NSNumber numberWithLongLong:self.leaderId]];
  }
  if (self.haslobby_type) {
    [output appendFormat:@"%@%@: %d\n", indent, @"lobby_type", self.lobby_type];
  }
  if (self.hasAllowCheats) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowCheats", [NSNumber numberWithBool:self.allowCheats]];
  }
  if (self.hasFillWithBots) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fillWithBots", [NSNumber numberWithBool:self.fillWithBots]];
  }
  if (self.hasIntroMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"introMode", [NSNumber numberWithBool:self.introMode]];
  }
  if (self.hasGameName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameName", self.gameName];
  }
  for (CLobbyTeamDetails* element in self.teamDetailsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"teamDetails"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTutorialLesson) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tutorialLesson", [NSNumber numberWithInt:self.tutorialLesson]];
  }
  if (self.hasTournamentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentId", [NSNumber numberWithInt:self.tournamentId]];
  }
  if (self.hasTournamentGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentGameId", [NSNumber numberWithInt:self.tournamentGameId]];
  }
  if (self.hasServerRegion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverRegion", [NSNumber numberWithInt:self.serverRegion]];
  }
  if (self.hasgame_state) {
    [output appendFormat:@"%@%@: %d\n", indent, @"game_state", self.game_state];
  }
  if (self.hasNumSpectators) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numSpectators", [NSNumber numberWithInt:self.numSpectators]];
  }
  if (self.hasTowerState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"towerState", [NSNumber numberWithInt:self.towerState]];
  }
  if (self.hasMatchgroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchgroup", [NSNumber numberWithInt:self.matchgroup]];
  }
  if (self.hasLeaverDetected) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaverDetected", [NSNumber numberWithBool:self.leaverDetected]];
  }
  if (self.hascm_pick) {
    [output appendFormat:@"%@%@: %d\n", indent, @"cm_pick", self.cm_pick];
  }
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  if (self.hasAllowSpectating) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowSpectating", [NSNumber numberWithBool:self.allowSpectating]];
  }
  if (self.hasbot_difficulty) {
    [output appendFormat:@"%@%@: %d\n", indent, @"bot_difficulty", self.bot_difficulty];
  }
  if (self.hasgame_version) {
    [output appendFormat:@"%@%@: %d\n", indent, @"game_version", self.game_version];
  }
  for (CLobbyTimedRewardDetails* element in self.timedRewardDetailsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"timedRewardDetails"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPassKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passKey", self.passKey];
  }
  if (self.hasDropRateBonus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dropRateBonus", [NSNumber numberWithFloat:self.dropRateBonus]];
  }
  for (NSNumber* element in self.botSlotDifficultyArray) {
    [output appendFormat:@"%@%@: %d\n", indent, @"bot_slot_difficulty", element.intValue];
  }
  if (self.hasLeagueid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueid", [NSNumber numberWithInt:self.leagueid]];
  }
  if (self.hasPenaltyLevelRadiant) {
    [output appendFormat:@"%@%@: %@\n", indent, @"penaltyLevelRadiant", [NSNumber numberWithInt:self.penaltyLevelRadiant]];
  }
  if (self.hasPenaltyLevelDire) {
    [output appendFormat:@"%@%@: %@\n", indent, @"penaltyLevelDire", [NSNumber numberWithInt:self.penaltyLevelDire]];
  }
  if (self.hasLoadGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loadGameId", [NSNumber numberWithInt:self.loadGameId]];
  }
  if (self.hasSeriesType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seriesType", [NSNumber numberWithInt:self.seriesType]];
  }
  if (self.hasRadiantSeriesWins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"radiantSeriesWins", [NSNumber numberWithInt:self.radiantSeriesWins]];
  }
  if (self.hasDireSeriesWins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direSeriesWins", [NSNumber numberWithInt:self.direSeriesWins]];
  }
  if (self.hasLootGenerated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lootGenerated", [NSNumber numberWithInt:self.lootGenerated]];
  }
  if (self.hasLootAwarded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lootAwarded", [NSNumber numberWithInt:self.lootAwarded]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTALobby class]]) {
    return NO;
  }
  CSODOTALobby *otherMessage = other;
  return
      self.hasLobbyId == otherMessage.hasLobbyId &&
      (!self.hasLobbyId || self.lobbyId == otherMessage.lobbyId) &&
      [self.membersArray isEqualToArray:otherMessage.membersArray] &&
      self.hasGameMode == otherMessage.hasGameMode &&
      (!self.hasGameMode || self.gameMode == otherMessage.gameMode) &&
      self.hasstate == otherMessage.hasstate &&
      (!self.hasstate || self.state == otherMessage.state) &&
      self.hasConnect == otherMessage.hasConnect &&
      (!self.hasConnect || [self.connect isEqual:otherMessage.connect]) &&
      self.hasServerId == otherMessage.hasServerId &&
      (!self.hasServerId || self.serverId == otherMessage.serverId) &&
      [self.leftMembersArray isEqualToArray:otherMessage.leftMembersArray] &&
      [self.pendingInvitesArray isEqualToArray:otherMessage.pendingInvitesArray] &&
      self.hasLeaderId == otherMessage.hasLeaderId &&
      (!self.hasLeaderId || self.leaderId == otherMessage.leaderId) &&
      self.haslobby_type == otherMessage.haslobby_type &&
      (!self.haslobby_type || self.lobby_type == otherMessage.lobby_type) &&
      self.hasAllowCheats == otherMessage.hasAllowCheats &&
      (!self.hasAllowCheats || self.allowCheats == otherMessage.allowCheats) &&
      self.hasFillWithBots == otherMessage.hasFillWithBots &&
      (!self.hasFillWithBots || self.fillWithBots == otherMessage.fillWithBots) &&
      self.hasIntroMode == otherMessage.hasIntroMode &&
      (!self.hasIntroMode || self.introMode == otherMessage.introMode) &&
      self.hasGameName == otherMessage.hasGameName &&
      (!self.hasGameName || [self.gameName isEqual:otherMessage.gameName]) &&
      [self.teamDetailsArray isEqualToArray:otherMessage.teamDetailsArray] &&
      self.hasTutorialLesson == otherMessage.hasTutorialLesson &&
      (!self.hasTutorialLesson || self.tutorialLesson == otherMessage.tutorialLesson) &&
      self.hasTournamentId == otherMessage.hasTournamentId &&
      (!self.hasTournamentId || self.tournamentId == otherMessage.tournamentId) &&
      self.hasTournamentGameId == otherMessage.hasTournamentGameId &&
      (!self.hasTournamentGameId || self.tournamentGameId == otherMessage.tournamentGameId) &&
      self.hasServerRegion == otherMessage.hasServerRegion &&
      (!self.hasServerRegion || self.serverRegion == otherMessage.serverRegion) &&
      self.hasgame_state == otherMessage.hasgame_state &&
      (!self.hasgame_state || self.game_state == otherMessage.game_state) &&
      self.hasNumSpectators == otherMessage.hasNumSpectators &&
      (!self.hasNumSpectators || self.numSpectators == otherMessage.numSpectators) &&
      self.hasTowerState == otherMessage.hasTowerState &&
      (!self.hasTowerState || self.towerState == otherMessage.towerState) &&
      self.hasMatchgroup == otherMessage.hasMatchgroup &&
      (!self.hasMatchgroup || self.matchgroup == otherMessage.matchgroup) &&
      self.hasLeaverDetected == otherMessage.hasLeaverDetected &&
      (!self.hasLeaverDetected || self.leaverDetected == otherMessage.leaverDetected) &&
      self.hascm_pick == otherMessage.hascm_pick &&
      (!self.hascm_pick || self.cm_pick == otherMessage.cm_pick) &&
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      self.hasAllowSpectating == otherMessage.hasAllowSpectating &&
      (!self.hasAllowSpectating || self.allowSpectating == otherMessage.allowSpectating) &&
      self.hasbot_difficulty == otherMessage.hasbot_difficulty &&
      (!self.hasbot_difficulty || self.bot_difficulty == otherMessage.bot_difficulty) &&
      self.hasgame_version == otherMessage.hasgame_version &&
      (!self.hasgame_version || self.game_version == otherMessage.game_version) &&
      [self.timedRewardDetailsArray isEqualToArray:otherMessage.timedRewardDetailsArray] &&
      self.hasPassKey == otherMessage.hasPassKey &&
      (!self.hasPassKey || [self.passKey isEqual:otherMessage.passKey]) &&
      self.hasDropRateBonus == otherMessage.hasDropRateBonus &&
      (!self.hasDropRateBonus || self.dropRateBonus == otherMessage.dropRateBonus) &&
      [self.botSlotDifficultyArray isEqualToArray:otherMessage.botSlotDifficultyArray] &&
      self.hasLeagueid == otherMessage.hasLeagueid &&
      (!self.hasLeagueid || self.leagueid == otherMessage.leagueid) &&
      self.hasPenaltyLevelRadiant == otherMessage.hasPenaltyLevelRadiant &&
      (!self.hasPenaltyLevelRadiant || self.penaltyLevelRadiant == otherMessage.penaltyLevelRadiant) &&
      self.hasPenaltyLevelDire == otherMessage.hasPenaltyLevelDire &&
      (!self.hasPenaltyLevelDire || self.penaltyLevelDire == otherMessage.penaltyLevelDire) &&
      self.hasLoadGameId == otherMessage.hasLoadGameId &&
      (!self.hasLoadGameId || self.loadGameId == otherMessage.loadGameId) &&
      self.hasSeriesType == otherMessage.hasSeriesType &&
      (!self.hasSeriesType || self.seriesType == otherMessage.seriesType) &&
      self.hasRadiantSeriesWins == otherMessage.hasRadiantSeriesWins &&
      (!self.hasRadiantSeriesWins || self.radiantSeriesWins == otherMessage.radiantSeriesWins) &&
      self.hasDireSeriesWins == otherMessage.hasDireSeriesWins &&
      (!self.hasDireSeriesWins || self.direSeriesWins == otherMessage.direSeriesWins) &&
      self.hasLootGenerated == otherMessage.hasLootGenerated &&
      (!self.hasLootGenerated || self.lootGenerated == otherMessage.lootGenerated) &&
      self.hasLootAwarded == otherMessage.hasLootAwarded &&
      (!self.hasLootAwarded || self.lootAwarded == otherMessage.lootAwarded) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLobbyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lobbyId] hash];
  }
  for (CDOTALobbyMember* element in self.membersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasGameMode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameMode] hash];
  }
  if (self.hasstate) {
    hashCode = hashCode * 31 + self.state;
  }
  if (self.hasConnect) {
    hashCode = hashCode * 31 + [self.connect hash];
  }
  if (self.hasServerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.serverId] hash];
  }
  for (CDOTALobbyMember* element in self.leftMembersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSNumber* value in self.pendingInvitesArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasLeaderId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.leaderId] hash];
  }
  if (self.haslobby_type) {
    hashCode = hashCode * 31 + self.lobby_type;
  }
  if (self.hasAllowCheats) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.allowCheats] hash];
  }
  if (self.hasFillWithBots) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.fillWithBots] hash];
  }
  if (self.hasIntroMode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.introMode] hash];
  }
  if (self.hasGameName) {
    hashCode = hashCode * 31 + [self.gameName hash];
  }
  for (CLobbyTeamDetails* element in self.teamDetailsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasTutorialLesson) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tutorialLesson] hash];
  }
  if (self.hasTournamentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentId] hash];
  }
  if (self.hasTournamentGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentGameId] hash];
  }
  if (self.hasServerRegion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverRegion] hash];
  }
  if (self.hasgame_state) {
    hashCode = hashCode * 31 + self.game_state;
  }
  if (self.hasNumSpectators) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numSpectators] hash];
  }
  if (self.hasTowerState) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.towerState] hash];
  }
  if (self.hasMatchgroup) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchgroup] hash];
  }
  if (self.hasLeaverDetected) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.leaverDetected] hash];
  }
  if (self.hascm_pick) {
    hashCode = hashCode * 31 + self.cm_pick;
  }
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  if (self.hasAllowSpectating) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.allowSpectating] hash];
  }
  if (self.hasbot_difficulty) {
    hashCode = hashCode * 31 + self.bot_difficulty;
  }
  if (self.hasgame_version) {
    hashCode = hashCode * 31 + self.game_version;
  }
  for (CLobbyTimedRewardDetails* element in self.timedRewardDetailsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasPassKey) {
    hashCode = hashCode * 31 + [self.passKey hash];
  }
  if (self.hasDropRateBonus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.dropRateBonus] hash];
  }
  for (NSNumber* element in self.botSlotDifficultyArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  if (self.hasLeagueid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leagueid] hash];
  }
  if (self.hasPenaltyLevelRadiant) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.penaltyLevelRadiant] hash];
  }
  if (self.hasPenaltyLevelDire) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.penaltyLevelDire] hash];
  }
  if (self.hasLoadGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.loadGameId] hash];
  }
  if (self.hasSeriesType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.seriesType] hash];
  }
  if (self.hasRadiantSeriesWins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.radiantSeriesWins] hash];
  }
  if (self.hasDireSeriesWins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.direSeriesWins] hash];
  }
  if (self.hasLootGenerated) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lootGenerated] hash];
  }
  if (self.hasLootAwarded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lootAwarded] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CSODOTALobby_StateIsValidValue(CSODOTALobby_State value) {
  switch (value) {
    case CSODOTALobby_StateUI:
    case CSODOTALobby_StateREADYUP:
    case CSODOTALobby_StateSERVERSETUP:
    case CSODOTALobby_StateRUN:
    case CSODOTALobby_StatePOSTGAME:
    case CSODOTALobby_StateNOTREADY:
    case CSODOTALobby_StateSERVERASSIGN:
      return YES;
    default:
      return NO;
  }
}
BOOL CSODOTALobby_LobbyTypeIsValidValue(CSODOTALobby_LobbyType value) {
  switch (value) {
    case CSODOTALobby_LobbyTypeINVALID:
    case CSODOTALobby_LobbyTypeMATCH:
    case CSODOTALobby_LobbyTypePRACTICE:
    case CSODOTALobby_LobbyTypeTOURNAMENT:
    case CSODOTALobby_LobbyTypeTUTORIAL:
    case CSODOTALobby_LobbyTypeCOOP_BOT_MATCH:
    case CSODOTALobby_LobbyTypeTEAM_MATCH:
      return YES;
    default:
      return NO;
  }
}
@interface CSODOTALobby_Builder()
@property (retain) CSODOTALobby* _builderResult;
@end

@implementation CSODOTALobby_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTALobby alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTALobby_Builder*) clear {
  _builderResult = [[[CSODOTALobby alloc] init] autorelease];
  return self;
}
- (CSODOTALobby_Builder*) clone {
  return [CSODOTALobby builderWithPrototype:_builderResult];
}
- (CSODOTALobby*) defaultInstance {
  return [CSODOTALobby defaultInstance];
}
- (CSODOTALobby*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTALobby*) buildPartial {
  CSODOTALobby* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTALobby_Builder*) mergeFrom:(CSODOTALobby*) other {
  if (other == [CSODOTALobby defaultInstance]) {
    return self;
  }
  if (other.hasLobbyId) {
    [self setLobbyId:other.lobbyId];
  }
  if (other.membersArray.count > 0) {
    if (_builderResult.membersArray == nil) {
      _builderResult.membersArray = [[other.membersArray copyWithZone:[other.membersArray zone]] autorelease];
    } else {
      [_builderResult.membersArray appendArray:other.membersArray];
    }
  }
  if (other.leftMembersArray.count > 0) {
    if (_builderResult.leftMembersArray == nil) {
      _builderResult.leftMembersArray = [[other.leftMembersArray copyWithZone:[other.leftMembersArray zone]] autorelease];
    } else {
      [_builderResult.leftMembersArray appendArray:other.leftMembersArray];
    }
  }
  if (other.hasLeaderId) {
    [self setLeaderId:other.leaderId];
  }
  if (other.hasServerId) {
    [self setServerId:other.serverId];
  }
  if (other.hasGameMode) {
    [self setGameMode:other.gameMode];
  }
  if (other.pendingInvitesArray.count > 0) {
    if (_builderResult.pendingInvitesArray == nil) {
      _builderResult.pendingInvitesArray = [[other.pendingInvitesArray copyWithZone:[other.pendingInvitesArray zone]] autorelease];
    } else {
      [_builderResult.pendingInvitesArray appendArray:other.pendingInvitesArray];
    }
  }
  if (other.hasstate) {
    [self setstate:other.state];
  }
  if (other.hasConnect) {
    [self setConnect:other.connect];
  }
  if (other.haslobby_type) {
    [self setlobby_type:other.lobby_type];
  }
  if (other.hasAllowCheats) {
    [self setAllowCheats:other.allowCheats];
  }
  if (other.hasFillWithBots) {
    [self setFillWithBots:other.fillWithBots];
  }
  if (other.hasIntroMode) {
    [self setIntroMode:other.introMode];
  }
  if (other.hasGameName) {
    [self setGameName:other.gameName];
  }
  if (other.teamDetailsArray.count > 0) {
    if (_builderResult.teamDetailsArray == nil) {
      _builderResult.teamDetailsArray = [[other.teamDetailsArray copyWithZone:[other.teamDetailsArray zone]] autorelease];
    } else {
      [_builderResult.teamDetailsArray appendArray:other.teamDetailsArray];
    }
  }
  if (other.hasTutorialLesson) {
    [self setTutorialLesson:other.tutorialLesson];
  }
  if (other.hasTournamentId) {
    [self setTournamentId:other.tournamentId];
  }
  if (other.hasTournamentGameId) {
    [self setTournamentGameId:other.tournamentGameId];
  }
  if (other.hasServerRegion) {
    [self setServerRegion:other.serverRegion];
  }
  if (other.hasgame_state) {
    [self setgame_state:other.game_state];
  }
  if (other.hasNumSpectators) {
    [self setNumSpectators:other.numSpectators];
  }
  if (other.hasTowerState) {
    [self setTowerState:other.towerState];
  }
  if (other.hasMatchgroup) {
    [self setMatchgroup:other.matchgroup];
  }
  if (other.hasLeaverDetected) {
    [self setLeaverDetected:other.leaverDetected];
  }
  if (other.hascm_pick) {
    [self setcm_pick:other.cm_pick];
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.hasAllowSpectating) {
    [self setAllowSpectating:other.allowSpectating];
  }
  if (other.hasbot_difficulty) {
    [self setbot_difficulty:other.bot_difficulty];
  }
  if (other.hasgame_version) {
    [self setgame_version:other.game_version];
  }
  if (other.timedRewardDetailsArray.count > 0) {
    if (_builderResult.timedRewardDetailsArray == nil) {
      _builderResult.timedRewardDetailsArray = [[other.timedRewardDetailsArray copyWithZone:[other.timedRewardDetailsArray zone]] autorelease];
    } else {
      [_builderResult.timedRewardDetailsArray appendArray:other.timedRewardDetailsArray];
    }
  }
  if (other.hasPassKey) {
    [self setPassKey:other.passKey];
  }
  if (other.hasDropRateBonus) {
    [self setDropRateBonus:other.dropRateBonus];
  }
  if (other.botSlotDifficultyArray.count > 0) {
    if (_builderResult.botSlotDifficultyArray == nil) {
      _builderResult.botSlotDifficultyArray = [[other.botSlotDifficultyArray copyWithZone:[other.botSlotDifficultyArray zone]] autorelease];
    } else {
      [_builderResult.botSlotDifficultyArray appendArray:other.botSlotDifficultyArray];
    }
  }
  if (other.hasLeagueid) {
    [self setLeagueid:other.leagueid];
  }
  if (other.hasPenaltyLevelRadiant) {
    [self setPenaltyLevelRadiant:other.penaltyLevelRadiant];
  }
  if (other.hasPenaltyLevelDire) {
    [self setPenaltyLevelDire:other.penaltyLevelDire];
  }
  if (other.hasLoadGameId) {
    [self setLoadGameId:other.loadGameId];
  }
  if (other.hasSeriesType) {
    [self setSeriesType:other.seriesType];
  }
  if (other.hasRadiantSeriesWins) {
    [self setRadiantSeriesWins:other.radiantSeriesWins];
  }
  if (other.hasDireSeriesWins) {
    [self setDireSeriesWins:other.direSeriesWins];
  }
  if (other.hasLootGenerated) {
    [self setLootGenerated:other.lootGenerated];
  }
  if (other.hasLootAwarded) {
    [self setLootAwarded:other.lootAwarded];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTALobby_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTALobby_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLobbyId:[input readUInt64]];
        break;
      }
      case 18: {
        CDOTALobbyMember_Builder* subBuilder = [CDOTALobbyMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMembers:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setGameMode:[input readUInt32]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (CSODOTALobby_StateIsValidValue(value)) {
          [self setstate:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setConnect:[input readString]];
        break;
      }
      case 49: {
        [self setServerId:[input readFixed64]];
        break;
      }
      case 58: {
        CDOTALobbyMember_Builder* subBuilder = [CDOTALobbyMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLeftMembers:[subBuilder buildPartial]];
        break;
      }
      case 81: {
        [self addPendingInvites:[input readFixed64]];
        break;
      }
      case 89: {
        [self setLeaderId:[input readFixed64]];
        break;
      }
      case 96: {
        int32_t value = [input readEnum];
        if (CSODOTALobby_LobbyTypeIsValidValue(value)) {
          [self setlobby_type:value];
        } else {
          [unknownFields mergeVarintField:12 value:value];
        }
        break;
      }
      case 104: {
        [self setAllowCheats:[input readBool]];
        break;
      }
      case 112: {
        [self setFillWithBots:[input readBool]];
        break;
      }
      case 120: {
        [self setIntroMode:[input readBool]];
        break;
      }
      case 130: {
        [self setGameName:[input readString]];
        break;
      }
      case 138: {
        CLobbyTeamDetails_Builder* subBuilder = [CLobbyTeamDetails builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeamDetails:[subBuilder buildPartial]];
        break;
      }
      case 144: {
        [self setTutorialLesson:[input readUInt32]];
        break;
      }
      case 152: {
        [self setTournamentId:[input readUInt32]];
        break;
      }
      case 160: {
        [self setTournamentGameId:[input readUInt32]];
        break;
      }
      case 168: {
        [self setServerRegion:[input readUInt32]];
        break;
      }
      case 176: {
        int32_t value = [input readEnum];
        if (DOTA_GameStateIsValidValue(value)) {
          [self setgame_state:value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
      case 184: {
        [self setNumSpectators:[input readUInt32]];
        break;
      }
      case 192: {
        [self setTowerState:[input readUInt32]];
        break;
      }
      case 200: {
        [self setMatchgroup:[input readUInt32]];
        break;
      }
      case 216: {
        [self setLeaverDetected:[input readBool]];
        break;
      }
      case 224: {
        int32_t value = [input readEnum];
        if (DOTA_CM_PICKIsValidValue(value)) {
          [self setcm_pick:value];
        } else {
          [unknownFields mergeVarintField:28 value:value];
        }
        break;
      }
      case 240: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 248: {
        [self setAllowSpectating:[input readBool]];
        break;
      }
      case 288: {
        int32_t value = [input readEnum];
        if (DOTABotDifficultyIsValidValue(value)) {
          [self setbot_difficulty:value];
        } else {
          [unknownFields mergeVarintField:36 value:value];
        }
        break;
      }
      case 296: {
        int32_t value = [input readEnum];
        if (DOTAGameVersionIsValidValue(value)) {
          [self setgame_version:value];
        } else {
          [unknownFields mergeVarintField:37 value:value];
        }
        break;
      }
      case 306: {
        CLobbyTimedRewardDetails_Builder* subBuilder = [CLobbyTimedRewardDetails builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTimedRewardDetails:[subBuilder buildPartial]];
        break;
      }
      case 314: {
        [self setPassKey:[input readString]];
        break;
      }
      case 325: {
        [self setDropRateBonus:[input readFloat]];
        break;
      }
      case 328: {
        int32_t value = [input readEnum];
        if (DOTABotDifficultyIsValidValue(value)) {
          [self addbot_slot_difficulty:value];
        } else {
          [unknownFields mergeVarintField:41 value:value];
        }
        break;
      }
      case 336: {
        [self setLeagueid:[input readUInt32]];
        break;
      }
      case 344: {
        [self setPenaltyLevelRadiant:[input readUInt32]];
        break;
      }
      case 352: {
        [self setPenaltyLevelDire:[input readUInt32]];
        break;
      }
      case 360: {
        [self setLoadGameId:[input readUInt32]];
        break;
      }
      case 368: {
        [self setSeriesType:[input readUInt32]];
        break;
      }
      case 376: {
        [self setRadiantSeriesWins:[input readUInt32]];
        break;
      }
      case 384: {
        [self setDireSeriesWins:[input readUInt32]];
        break;
      }
      case 392: {
        [self setLootGenerated:[input readUInt32]];
        break;
      }
      case 400: {
        [self setLootAwarded:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLobbyId {
  return _builderResult.hasLobbyId;
}
- (uint64_t) lobbyId {
  return _builderResult.lobbyId;
}
- (CSODOTALobby_Builder*) setLobbyId:(uint64_t) value {
  _builderResult.hasLobbyId = YES;
  _builderResult.lobbyId = value;
  return self;
}
- (CSODOTALobby_Builder*) clearLobbyId {
  _builderResult.hasLobbyId = NO;
  _builderResult.lobbyId = 0L;
  return self;
}
- (PBAppendableArray *)members {
  return _builderResult.membersArray;
}
- (CDOTALobbyMember*)membersAtIndex:(NSUInteger)index {
  return [_builderResult membersAtIndex:index];
}
- (CSODOTALobby_Builder *)addMembers:(CDOTALobbyMember*)value {
  if (_builderResult.membersArray == nil) {
    _builderResult.membersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.membersArray addObject:value];
  return self;
}
- (CSODOTALobby_Builder *)setMembersArray:(NSArray *)array {
  _builderResult.membersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobby_Builder *)setMembersValues:(const CDOTALobbyMember* *)values count:(NSUInteger)count {
  _builderResult.membersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobby_Builder *)clearMembers {
  _builderResult.membersArray = nil;
  return self;
}
- (PBAppendableArray *)leftMembers {
  return _builderResult.leftMembersArray;
}
- (CDOTALobbyMember*)leftMembersAtIndex:(NSUInteger)index {
  return [_builderResult leftMembersAtIndex:index];
}
- (CSODOTALobby_Builder *)addLeftMembers:(CDOTALobbyMember*)value {
  if (_builderResult.leftMembersArray == nil) {
    _builderResult.leftMembersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.leftMembersArray addObject:value];
  return self;
}
- (CSODOTALobby_Builder *)setLeftMembersArray:(NSArray *)array {
  _builderResult.leftMembersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobby_Builder *)setLeftMembersValues:(const CDOTALobbyMember* *)values count:(NSUInteger)count {
  _builderResult.leftMembersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobby_Builder *)clearLeftMembers {
  _builderResult.leftMembersArray = nil;
  return self;
}
- (BOOL) hasLeaderId {
  return _builderResult.hasLeaderId;
}
- (uint64_t) leaderId {
  return _builderResult.leaderId;
}
- (CSODOTALobby_Builder*) setLeaderId:(uint64_t) value {
  _builderResult.hasLeaderId = YES;
  _builderResult.leaderId = value;
  return self;
}
- (CSODOTALobby_Builder*) clearLeaderId {
  _builderResult.hasLeaderId = NO;
  _builderResult.leaderId = 0L;
  return self;
}
- (BOOL) hasServerId {
  return _builderResult.hasServerId;
}
- (uint64_t) serverId {
  return _builderResult.serverId;
}
- (CSODOTALobby_Builder*) setServerId:(uint64_t) value {
  _builderResult.hasServerId = YES;
  _builderResult.serverId = value;
  return self;
}
- (CSODOTALobby_Builder*) clearServerId {
  _builderResult.hasServerId = NO;
  _builderResult.serverId = 0L;
  return self;
}
- (BOOL) hasGameMode {
  return _builderResult.hasGameMode;
}
- (uint32_t) gameMode {
  return _builderResult.gameMode;
}
- (CSODOTALobby_Builder*) setGameMode:(uint32_t) value {
  _builderResult.hasGameMode = YES;
  _builderResult.gameMode = value;
  return self;
}
- (CSODOTALobby_Builder*) clearGameMode {
  _builderResult.hasGameMode = NO;
  _builderResult.gameMode = 0;
  return self;
}
- (PBAppendableArray *)pendingInvites {
  return _builderResult.pendingInvitesArray;
}
- (uint64_t)pendingInvitesAtIndex:(NSUInteger)index {
  return [_builderResult pendingInvitesAtIndex:index];
}
- (CSODOTALobby_Builder *)addPendingInvites:(uint64_t)value {
  if (_builderResult.pendingInvitesArray == nil) {
    _builderResult.pendingInvitesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_builderResult.pendingInvitesArray addUint64:value];
  return self;
}
- (CSODOTALobby_Builder *)setPendingInvitesArray:(NSArray *)array {
  _builderResult.pendingInvitesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CSODOTALobby_Builder *)setPendingInvitesValues:(const uint64_t *)values count:(NSUInteger)count {
  _builderResult.pendingInvitesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CSODOTALobby_Builder *)clearPendingInvites {
  _builderResult.pendingInvitesArray = nil;
  return self;
}
- (BOOL) hasstate {
  return _builderResult.hasstate;
}
- (CSODOTALobby_State) state {
  return _builderResult.state;
}
- (CSODOTALobby_Builder*) setstate:(CSODOTALobby_State) value {
  _builderResult.hasstate = YES;
  _builderResult.state = value;
  return self;
}
- (CSODOTALobby_Builder*) clearstate {
  _builderResult.hasstate = NO;
  _builderResult.state = CSODOTALobby_StateUI;
  return self;
}
- (BOOL) hasConnect {
  return _builderResult.hasConnect;
}
- (NSString*) connect {
  return _builderResult.connect;
}
- (CSODOTALobby_Builder*) setConnect:(NSString*) value {
  _builderResult.hasConnect = YES;
  _builderResult.connect = value;
  return self;
}
- (CSODOTALobby_Builder*) clearConnect {
  _builderResult.hasConnect = NO;
  _builderResult.connect = @"";
  return self;
}
- (BOOL) haslobby_type {
  return _builderResult.haslobby_type;
}
- (CSODOTALobby_LobbyType) lobby_type {
  return _builderResult.lobby_type;
}
- (CSODOTALobby_Builder*) setlobby_type:(CSODOTALobby_LobbyType) value {
  _builderResult.haslobby_type = YES;
  _builderResult.lobby_type = value;
  return self;
}
- (CSODOTALobby_Builder*) clearlobby_type {
  _builderResult.haslobby_type = NO;
  _builderResult.lobby_type = CSODOTALobby_LobbyTypeINVALID;
  return self;
}
- (BOOL) hasAllowCheats {
  return _builderResult.hasAllowCheats;
}
- (BOOL) allowCheats {
  return _builderResult.allowCheats;
}
- (CSODOTALobby_Builder*) setAllowCheats:(BOOL) value {
  _builderResult.hasAllowCheats = YES;
  _builderResult.allowCheats = value;
  return self;
}
- (CSODOTALobby_Builder*) clearAllowCheats {
  _builderResult.hasAllowCheats = NO;
  _builderResult.allowCheats = NO;
  return self;
}
- (BOOL) hasFillWithBots {
  return _builderResult.hasFillWithBots;
}
- (BOOL) fillWithBots {
  return _builderResult.fillWithBots;
}
- (CSODOTALobby_Builder*) setFillWithBots:(BOOL) value {
  _builderResult.hasFillWithBots = YES;
  _builderResult.fillWithBots = value;
  return self;
}
- (CSODOTALobby_Builder*) clearFillWithBots {
  _builderResult.hasFillWithBots = NO;
  _builderResult.fillWithBots = NO;
  return self;
}
- (BOOL) hasIntroMode {
  return _builderResult.hasIntroMode;
}
- (BOOL) introMode {
  return _builderResult.introMode;
}
- (CSODOTALobby_Builder*) setIntroMode:(BOOL) value {
  _builderResult.hasIntroMode = YES;
  _builderResult.introMode = value;
  return self;
}
- (CSODOTALobby_Builder*) clearIntroMode {
  _builderResult.hasIntroMode = NO;
  _builderResult.introMode = NO;
  return self;
}
- (BOOL) hasGameName {
  return _builderResult.hasGameName;
}
- (NSString*) gameName {
  return _builderResult.gameName;
}
- (CSODOTALobby_Builder*) setGameName:(NSString*) value {
  _builderResult.hasGameName = YES;
  _builderResult.gameName = value;
  return self;
}
- (CSODOTALobby_Builder*) clearGameName {
  _builderResult.hasGameName = NO;
  _builderResult.gameName = @"";
  return self;
}
- (PBAppendableArray *)teamDetails {
  return _builderResult.teamDetailsArray;
}
- (CLobbyTeamDetails*)teamDetailsAtIndex:(NSUInteger)index {
  return [_builderResult teamDetailsAtIndex:index];
}
- (CSODOTALobby_Builder *)addTeamDetails:(CLobbyTeamDetails*)value {
  if (_builderResult.teamDetailsArray == nil) {
    _builderResult.teamDetailsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.teamDetailsArray addObject:value];
  return self;
}
- (CSODOTALobby_Builder *)setTeamDetailsArray:(NSArray *)array {
  _builderResult.teamDetailsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobby_Builder *)setTeamDetailsValues:(const CLobbyTeamDetails* *)values count:(NSUInteger)count {
  _builderResult.teamDetailsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobby_Builder *)clearTeamDetails {
  _builderResult.teamDetailsArray = nil;
  return self;
}
- (BOOL) hasTutorialLesson {
  return _builderResult.hasTutorialLesson;
}
- (uint32_t) tutorialLesson {
  return _builderResult.tutorialLesson;
}
- (CSODOTALobby_Builder*) setTutorialLesson:(uint32_t) value {
  _builderResult.hasTutorialLesson = YES;
  _builderResult.tutorialLesson = value;
  return self;
}
- (CSODOTALobby_Builder*) clearTutorialLesson {
  _builderResult.hasTutorialLesson = NO;
  _builderResult.tutorialLesson = 0;
  return self;
}
- (BOOL) hasTournamentId {
  return _builderResult.hasTournamentId;
}
- (uint32_t) tournamentId {
  return _builderResult.tournamentId;
}
- (CSODOTALobby_Builder*) setTournamentId:(uint32_t) value {
  _builderResult.hasTournamentId = YES;
  _builderResult.tournamentId = value;
  return self;
}
- (CSODOTALobby_Builder*) clearTournamentId {
  _builderResult.hasTournamentId = NO;
  _builderResult.tournamentId = 0;
  return self;
}
- (BOOL) hasTournamentGameId {
  return _builderResult.hasTournamentGameId;
}
- (uint32_t) tournamentGameId {
  return _builderResult.tournamentGameId;
}
- (CSODOTALobby_Builder*) setTournamentGameId:(uint32_t) value {
  _builderResult.hasTournamentGameId = YES;
  _builderResult.tournamentGameId = value;
  return self;
}
- (CSODOTALobby_Builder*) clearTournamentGameId {
  _builderResult.hasTournamentGameId = NO;
  _builderResult.tournamentGameId = 0;
  return self;
}
- (BOOL) hasServerRegion {
  return _builderResult.hasServerRegion;
}
- (uint32_t) serverRegion {
  return _builderResult.serverRegion;
}
- (CSODOTALobby_Builder*) setServerRegion:(uint32_t) value {
  _builderResult.hasServerRegion = YES;
  _builderResult.serverRegion = value;
  return self;
}
- (CSODOTALobby_Builder*) clearServerRegion {
  _builderResult.hasServerRegion = NO;
  _builderResult.serverRegion = 0;
  return self;
}
- (BOOL) hasgame_state {
  return _builderResult.hasgame_state;
}
- (DOTA_GameState) game_state {
  return _builderResult.game_state;
}
- (CSODOTALobby_Builder*) setgame_state:(DOTA_GameState) value {
  _builderResult.hasgame_state = YES;
  _builderResult.game_state = value;
  return self;
}
- (CSODOTALobby_Builder*) cleargame_state {
  _builderResult.hasgame_state = NO;
  _builderResult.game_state = DOTA_GameStateDOTA_GAMERULES_STATE_INIT;
  return self;
}
- (BOOL) hasNumSpectators {
  return _builderResult.hasNumSpectators;
}
- (uint32_t) numSpectators {
  return _builderResult.numSpectators;
}
- (CSODOTALobby_Builder*) setNumSpectators:(uint32_t) value {
  _builderResult.hasNumSpectators = YES;
  _builderResult.numSpectators = value;
  return self;
}
- (CSODOTALobby_Builder*) clearNumSpectators {
  _builderResult.hasNumSpectators = NO;
  _builderResult.numSpectators = 0;
  return self;
}
- (BOOL) hasTowerState {
  return _builderResult.hasTowerState;
}
- (uint32_t) towerState {
  return _builderResult.towerState;
}
- (CSODOTALobby_Builder*) setTowerState:(uint32_t) value {
  _builderResult.hasTowerState = YES;
  _builderResult.towerState = value;
  return self;
}
- (CSODOTALobby_Builder*) clearTowerState {
  _builderResult.hasTowerState = NO;
  _builderResult.towerState = 0;
  return self;
}
- (BOOL) hasMatchgroup {
  return _builderResult.hasMatchgroup;
}
- (uint32_t) matchgroup {
  return _builderResult.matchgroup;
}
- (CSODOTALobby_Builder*) setMatchgroup:(uint32_t) value {
  _builderResult.hasMatchgroup = YES;
  _builderResult.matchgroup = value;
  return self;
}
- (CSODOTALobby_Builder*) clearMatchgroup {
  _builderResult.hasMatchgroup = NO;
  _builderResult.matchgroup = 0;
  return self;
}
- (BOOL) hasLeaverDetected {
  return _builderResult.hasLeaverDetected;
}
- (BOOL) leaverDetected {
  return _builderResult.leaverDetected;
}
- (CSODOTALobby_Builder*) setLeaverDetected:(BOOL) value {
  _builderResult.hasLeaverDetected = YES;
  _builderResult.leaverDetected = value;
  return self;
}
- (CSODOTALobby_Builder*) clearLeaverDetected {
  _builderResult.hasLeaverDetected = NO;
  _builderResult.leaverDetected = NO;
  return self;
}
- (BOOL) hascm_pick {
  return _builderResult.hascm_pick;
}
- (DOTA_CM_PICK) cm_pick {
  return _builderResult.cm_pick;
}
- (CSODOTALobby_Builder*) setcm_pick:(DOTA_CM_PICK) value {
  _builderResult.hascm_pick = YES;
  _builderResult.cm_pick = value;
  return self;
}
- (CSODOTALobby_Builder*) clearcm_pick {
  _builderResult.hascm_pick = NO;
  _builderResult.cm_pick = DOTA_CM_PICKDOTA_CM_RANDOM;
  return self;
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CSODOTALobby_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CSODOTALobby_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (BOOL) hasAllowSpectating {
  return _builderResult.hasAllowSpectating;
}
- (BOOL) allowSpectating {
  return _builderResult.allowSpectating;
}
- (CSODOTALobby_Builder*) setAllowSpectating:(BOOL) value {
  _builderResult.hasAllowSpectating = YES;
  _builderResult.allowSpectating = value;
  return self;
}
- (CSODOTALobby_Builder*) clearAllowSpectating {
  _builderResult.hasAllowSpectating = NO;
  _builderResult.allowSpectating = YES;
  return self;
}
- (BOOL) hasbot_difficulty {
  return _builderResult.hasbot_difficulty;
}
- (DOTABotDifficulty) bot_difficulty {
  return _builderResult.bot_difficulty;
}
- (CSODOTALobby_Builder*) setbot_difficulty:(DOTABotDifficulty) value {
  _builderResult.hasbot_difficulty = YES;
  _builderResult.bot_difficulty = value;
  return self;
}
- (CSODOTALobby_Builder*) clearbot_difficulty {
  _builderResult.hasbot_difficulty = NO;
  _builderResult.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_HARD;
  return self;
}
- (BOOL) hasgame_version {
  return _builderResult.hasgame_version;
}
- (DOTAGameVersion) game_version {
  return _builderResult.game_version;
}
- (CSODOTALobby_Builder*) setgame_version:(DOTAGameVersion) value {
  _builderResult.hasgame_version = YES;
  _builderResult.game_version = value;
  return self;
}
- (CSODOTALobby_Builder*) cleargame_version {
  _builderResult.hasgame_version = NO;
  _builderResult.game_version = DOTAGameVersionGAME_VERSION_CURRENT;
  return self;
}
- (PBAppendableArray *)timedRewardDetails {
  return _builderResult.timedRewardDetailsArray;
}
- (CLobbyTimedRewardDetails*)timedRewardDetailsAtIndex:(NSUInteger)index {
  return [_builderResult timedRewardDetailsAtIndex:index];
}
- (CSODOTALobby_Builder *)addTimedRewardDetails:(CLobbyTimedRewardDetails*)value {
  if (_builderResult.timedRewardDetailsArray == nil) {
    _builderResult.timedRewardDetailsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.timedRewardDetailsArray addObject:value];
  return self;
}
- (CSODOTALobby_Builder *)setTimedRewardDetailsArray:(NSArray *)array {
  _builderResult.timedRewardDetailsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobby_Builder *)setTimedRewardDetailsValues:(const CLobbyTimedRewardDetails* *)values count:(NSUInteger)count {
  _builderResult.timedRewardDetailsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobby_Builder *)clearTimedRewardDetails {
  _builderResult.timedRewardDetailsArray = nil;
  return self;
}
- (BOOL) hasPassKey {
  return _builderResult.hasPassKey;
}
- (NSString*) passKey {
  return _builderResult.passKey;
}
- (CSODOTALobby_Builder*) setPassKey:(NSString*) value {
  _builderResult.hasPassKey = YES;
  _builderResult.passKey = value;
  return self;
}
- (CSODOTALobby_Builder*) clearPassKey {
  _builderResult.hasPassKey = NO;
  _builderResult.passKey = @"";
  return self;
}
- (BOOL) hasDropRateBonus {
  return _builderResult.hasDropRateBonus;
}
- (Float32) dropRateBonus {
  return _builderResult.dropRateBonus;
}
- (CSODOTALobby_Builder*) setDropRateBonus:(Float32) value {
  _builderResult.hasDropRateBonus = YES;
  _builderResult.dropRateBonus = value;
  return self;
}
- (CSODOTALobby_Builder*) clearDropRateBonus {
  _builderResult.hasDropRateBonus = NO;
  _builderResult.dropRateBonus = 0;
  return self;
}
- (PBAppendableArray *)bot_slot_difficulty {
  return _builderResult.botSlotDifficultyArray;
}
- (DOTABotDifficulty)bot_slot_difficultyAtIndex:(NSUInteger)index {
  return [_builderResult bot_slot_difficultyAtIndex:index];
}
- (CSODOTALobby_Builder *)addbot_slot_difficulty:(DOTABotDifficulty)value {
  if (_builderResult.botSlotDifficultyArray == nil) {
    _builderResult.botSlotDifficultyArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_builderResult.botSlotDifficultyArray addInt32:value];
  return self;
}
- (CSODOTALobby_Builder *)setbot_slot_difficultyArray:(NSArray *)array {
  _builderResult.botSlotDifficultyArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (CSODOTALobby_Builder *)setbot_slot_difficultyValues:(const DOTABotDifficulty *)values count:(NSUInteger)count {
  _builderResult.botSlotDifficultyArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (CSODOTALobby_Builder *)clearbot_slot_difficulty {
  _builderResult.botSlotDifficultyArray = nil;
  return self;
}
- (BOOL) hasLeagueid {
  return _builderResult.hasLeagueid;
}
- (uint32_t) leagueid {
  return _builderResult.leagueid;
}
- (CSODOTALobby_Builder*) setLeagueid:(uint32_t) value {
  _builderResult.hasLeagueid = YES;
  _builderResult.leagueid = value;
  return self;
}
- (CSODOTALobby_Builder*) clearLeagueid {
  _builderResult.hasLeagueid = NO;
  _builderResult.leagueid = 0;
  return self;
}
- (BOOL) hasPenaltyLevelRadiant {
  return _builderResult.hasPenaltyLevelRadiant;
}
- (uint32_t) penaltyLevelRadiant {
  return _builderResult.penaltyLevelRadiant;
}
- (CSODOTALobby_Builder*) setPenaltyLevelRadiant:(uint32_t) value {
  _builderResult.hasPenaltyLevelRadiant = YES;
  _builderResult.penaltyLevelRadiant = value;
  return self;
}
- (CSODOTALobby_Builder*) clearPenaltyLevelRadiant {
  _builderResult.hasPenaltyLevelRadiant = NO;
  _builderResult.penaltyLevelRadiant = 0;
  return self;
}
- (BOOL) hasPenaltyLevelDire {
  return _builderResult.hasPenaltyLevelDire;
}
- (uint32_t) penaltyLevelDire {
  return _builderResult.penaltyLevelDire;
}
- (CSODOTALobby_Builder*) setPenaltyLevelDire:(uint32_t) value {
  _builderResult.hasPenaltyLevelDire = YES;
  _builderResult.penaltyLevelDire = value;
  return self;
}
- (CSODOTALobby_Builder*) clearPenaltyLevelDire {
  _builderResult.hasPenaltyLevelDire = NO;
  _builderResult.penaltyLevelDire = 0;
  return self;
}
- (BOOL) hasLoadGameId {
  return _builderResult.hasLoadGameId;
}
- (uint32_t) loadGameId {
  return _builderResult.loadGameId;
}
- (CSODOTALobby_Builder*) setLoadGameId:(uint32_t) value {
  _builderResult.hasLoadGameId = YES;
  _builderResult.loadGameId = value;
  return self;
}
- (CSODOTALobby_Builder*) clearLoadGameId {
  _builderResult.hasLoadGameId = NO;
  _builderResult.loadGameId = 0;
  return self;
}
- (BOOL) hasSeriesType {
  return _builderResult.hasSeriesType;
}
- (uint32_t) seriesType {
  return _builderResult.seriesType;
}
- (CSODOTALobby_Builder*) setSeriesType:(uint32_t) value {
  _builderResult.hasSeriesType = YES;
  _builderResult.seriesType = value;
  return self;
}
- (CSODOTALobby_Builder*) clearSeriesType {
  _builderResult.hasSeriesType = NO;
  _builderResult.seriesType = 0;
  return self;
}
- (BOOL) hasRadiantSeriesWins {
  return _builderResult.hasRadiantSeriesWins;
}
- (uint32_t) radiantSeriesWins {
  return _builderResult.radiantSeriesWins;
}
- (CSODOTALobby_Builder*) setRadiantSeriesWins:(uint32_t) value {
  _builderResult.hasRadiantSeriesWins = YES;
  _builderResult.radiantSeriesWins = value;
  return self;
}
- (CSODOTALobby_Builder*) clearRadiantSeriesWins {
  _builderResult.hasRadiantSeriesWins = NO;
  _builderResult.radiantSeriesWins = 0;
  return self;
}
- (BOOL) hasDireSeriesWins {
  return _builderResult.hasDireSeriesWins;
}
- (uint32_t) direSeriesWins {
  return _builderResult.direSeriesWins;
}
- (CSODOTALobby_Builder*) setDireSeriesWins:(uint32_t) value {
  _builderResult.hasDireSeriesWins = YES;
  _builderResult.direSeriesWins = value;
  return self;
}
- (CSODOTALobby_Builder*) clearDireSeriesWins {
  _builderResult.hasDireSeriesWins = NO;
  _builderResult.direSeriesWins = 0;
  return self;
}
- (BOOL) hasLootGenerated {
  return _builderResult.hasLootGenerated;
}
- (uint32_t) lootGenerated {
  return _builderResult.lootGenerated;
}
- (CSODOTALobby_Builder*) setLootGenerated:(uint32_t) value {
  _builderResult.hasLootGenerated = YES;
  _builderResult.lootGenerated = value;
  return self;
}
- (CSODOTALobby_Builder*) clearLootGenerated {
  _builderResult.hasLootGenerated = NO;
  _builderResult.lootGenerated = 0;
  return self;
}
- (BOOL) hasLootAwarded {
  return _builderResult.hasLootAwarded;
}
- (uint32_t) lootAwarded {
  return _builderResult.lootAwarded;
}
- (CSODOTALobby_Builder*) setLootAwarded:(uint32_t) value {
  _builderResult.hasLootAwarded = YES;
  _builderResult.lootAwarded = value;
  return self;
}
- (CSODOTALobby_Builder*) clearLootAwarded {
  _builderResult.hasLootAwarded = NO;
  _builderResult.lootAwarded = 0;
  return self;
}
@end

@interface CSODOTALobbyInternal ()
@property (retain) NSString* searchKey;
@property (retain) PBAppendableArray * pendingPlayerReportsArray;
@property uint32_t averageRank;
@property uint32_t replaySalt;
@property BOOL disableRadiantAutomaticTeamDetection;
@property BOOL disableDireAutomaticTeamDetection;
@property uint32_t finalMatchDuration;
@property BOOL submittedMatchHistory;
@end

@implementation CSODOTALobbyInternal

- (BOOL) hasSearchKey {
  return !!hasSearchKey_;
}
- (void) setHasSearchKey:(BOOL) value_ {
  hasSearchKey_ = !!value_;
}
@synthesize searchKey;
@synthesize pendingPlayerReportsArray;
@dynamic pendingPlayerReports;
- (BOOL) hasAverageRank {
  return !!hasAverageRank_;
}
- (void) setHasAverageRank:(BOOL) value_ {
  hasAverageRank_ = !!value_;
}
@synthesize averageRank;
- (BOOL) hasReplaySalt {
  return !!hasReplaySalt_;
}
- (void) setHasReplaySalt:(BOOL) value_ {
  hasReplaySalt_ = !!value_;
}
@synthesize replaySalt;
- (BOOL) hasDisableRadiantAutomaticTeamDetection {
  return !!hasDisableRadiantAutomaticTeamDetection_;
}
- (void) setHasDisableRadiantAutomaticTeamDetection:(BOOL) value_ {
  hasDisableRadiantAutomaticTeamDetection_ = !!value_;
}
- (BOOL) disableRadiantAutomaticTeamDetection {
  return !!disableRadiantAutomaticTeamDetection_;
}
- (void) setDisableRadiantAutomaticTeamDetection:(BOOL) value_ {
  disableRadiantAutomaticTeamDetection_ = !!value_;
}
- (BOOL) hasDisableDireAutomaticTeamDetection {
  return !!hasDisableDireAutomaticTeamDetection_;
}
- (void) setHasDisableDireAutomaticTeamDetection:(BOOL) value_ {
  hasDisableDireAutomaticTeamDetection_ = !!value_;
}
- (BOOL) disableDireAutomaticTeamDetection {
  return !!disableDireAutomaticTeamDetection_;
}
- (void) setDisableDireAutomaticTeamDetection:(BOOL) value_ {
  disableDireAutomaticTeamDetection_ = !!value_;
}
- (BOOL) hasFinalMatchDuration {
  return !!hasFinalMatchDuration_;
}
- (void) setHasFinalMatchDuration:(BOOL) value_ {
  hasFinalMatchDuration_ = !!value_;
}
@synthesize finalMatchDuration;
- (BOOL) hasSubmittedMatchHistory {
  return !!hasSubmittedMatchHistory_;
}
- (void) setHasSubmittedMatchHistory:(BOOL) value_ {
  hasSubmittedMatchHistory_ = !!value_;
}
- (BOOL) submittedMatchHistory {
  return !!submittedMatchHistory_;
}
- (void) setSubmittedMatchHistory:(BOOL) value_ {
  submittedMatchHistory_ = !!value_;
}
- (void) dealloc {
  self.searchKey = nil;
  self.pendingPlayerReportsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.searchKey = @"";
    self.averageRank = 0;
    self.replaySalt = 0;
    self.disableRadiantAutomaticTeamDetection = NO;
    self.disableDireAutomaticTeamDetection = NO;
    self.finalMatchDuration = 0;
    self.submittedMatchHistory = NO;
  }
  return self;
}
static CSODOTALobbyInternal* defaultCSODOTALobbyInternalInstance = nil;
+ (void) initialize {
  if (self == [CSODOTALobbyInternal class]) {
    defaultCSODOTALobbyInternalInstance = [[CSODOTALobbyInternal alloc] init];
  }
}
+ (CSODOTALobbyInternal*) defaultInstance {
  return defaultCSODOTALobbyInternalInstance;
}
- (CSODOTALobbyInternal*) defaultInstance {
  return defaultCSODOTALobbyInternalInstance;
}
- (PBArray *)pendingPlayerReports {
  return pendingPlayerReportsArray;
}
- (CLobbyPendingPlayerReport*)pendingPlayerReportsAtIndex:(NSUInteger)index {
  return [pendingPlayerReportsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSearchKey) {
    [output writeString:1 value:self.searchKey];
  }
  for (CLobbyPendingPlayerReport *element in self.pendingPlayerReportsArray) {
    [output writeMessage:2 value:element];
  }
  if (self.hasAverageRank) {
    [output writeUInt32:3 value:self.averageRank];
  }
  if (self.hasReplaySalt) {
    [output writeFixed32:4 value:self.replaySalt];
  }
  if (self.hasDisableRadiantAutomaticTeamDetection) {
    [output writeBool:5 value:self.disableRadiantAutomaticTeamDetection];
  }
  if (self.hasDisableDireAutomaticTeamDetection) {
    [output writeBool:6 value:self.disableDireAutomaticTeamDetection];
  }
  if (self.hasFinalMatchDuration) {
    [output writeUInt32:7 value:self.finalMatchDuration];
  }
  if (self.hasSubmittedMatchHistory) {
    [output writeBool:8 value:self.submittedMatchHistory];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSearchKey) {
    size_ += computeStringSize(1, self.searchKey);
  }
  for (CLobbyPendingPlayerReport *element in self.pendingPlayerReportsArray) {
    size_ += computeMessageSize(2, element);
  }
  if (self.hasAverageRank) {
    size_ += computeUInt32Size(3, self.averageRank);
  }
  if (self.hasReplaySalt) {
    size_ += computeFixed32Size(4, self.replaySalt);
  }
  if (self.hasDisableRadiantAutomaticTeamDetection) {
    size_ += computeBoolSize(5, self.disableRadiantAutomaticTeamDetection);
  }
  if (self.hasDisableDireAutomaticTeamDetection) {
    size_ += computeBoolSize(6, self.disableDireAutomaticTeamDetection);
  }
  if (self.hasFinalMatchDuration) {
    size_ += computeUInt32Size(7, self.finalMatchDuration);
  }
  if (self.hasSubmittedMatchHistory) {
    size_ += computeBoolSize(8, self.submittedMatchHistory);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTALobbyInternal*) parseFromData:(NSData*) data {
  return (CSODOTALobbyInternal*)[[[CSODOTALobbyInternal builder] mergeFromData:data] build];
}
+ (CSODOTALobbyInternal*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTALobbyInternal*)[[[CSODOTALobbyInternal builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTALobbyInternal*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTALobbyInternal*)[[[CSODOTALobbyInternal builder] mergeFromInputStream:input] build];
}
+ (CSODOTALobbyInternal*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTALobbyInternal*)[[[CSODOTALobbyInternal builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTALobbyInternal*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTALobbyInternal*)[[[CSODOTALobbyInternal builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTALobbyInternal*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTALobbyInternal*)[[[CSODOTALobbyInternal builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTALobbyInternal_Builder*) builder {
  return [[[CSODOTALobbyInternal_Builder alloc] init] autorelease];
}
+ (CSODOTALobbyInternal_Builder*) builderWithPrototype:(CSODOTALobbyInternal*) prototype {
  return [[CSODOTALobbyInternal builder] mergeFrom:prototype];
}
- (CSODOTALobbyInternal_Builder*) builder {
  return [CSODOTALobbyInternal builder];
}
- (CSODOTALobbyInternal_Builder*) toBuilder {
  return [CSODOTALobbyInternal builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSearchKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchKey", self.searchKey];
  }
  for (CLobbyPendingPlayerReport* element in self.pendingPlayerReportsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"pendingPlayerReports"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAverageRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"averageRank", [NSNumber numberWithInt:self.averageRank]];
  }
  if (self.hasReplaySalt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replaySalt", [NSNumber numberWithInt:self.replaySalt]];
  }
  if (self.hasDisableRadiantAutomaticTeamDetection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"disableRadiantAutomaticTeamDetection", [NSNumber numberWithBool:self.disableRadiantAutomaticTeamDetection]];
  }
  if (self.hasDisableDireAutomaticTeamDetection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"disableDireAutomaticTeamDetection", [NSNumber numberWithBool:self.disableDireAutomaticTeamDetection]];
  }
  if (self.hasFinalMatchDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finalMatchDuration", [NSNumber numberWithInt:self.finalMatchDuration]];
  }
  if (self.hasSubmittedMatchHistory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"submittedMatchHistory", [NSNumber numberWithBool:self.submittedMatchHistory]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTALobbyInternal class]]) {
    return NO;
  }
  CSODOTALobbyInternal *otherMessage = other;
  return
      self.hasSearchKey == otherMessage.hasSearchKey &&
      (!self.hasSearchKey || [self.searchKey isEqual:otherMessage.searchKey]) &&
      [self.pendingPlayerReportsArray isEqualToArray:otherMessage.pendingPlayerReportsArray] &&
      self.hasAverageRank == otherMessage.hasAverageRank &&
      (!self.hasAverageRank || self.averageRank == otherMessage.averageRank) &&
      self.hasReplaySalt == otherMessage.hasReplaySalt &&
      (!self.hasReplaySalt || self.replaySalt == otherMessage.replaySalt) &&
      self.hasDisableRadiantAutomaticTeamDetection == otherMessage.hasDisableRadiantAutomaticTeamDetection &&
      (!self.hasDisableRadiantAutomaticTeamDetection || self.disableRadiantAutomaticTeamDetection == otherMessage.disableRadiantAutomaticTeamDetection) &&
      self.hasDisableDireAutomaticTeamDetection == otherMessage.hasDisableDireAutomaticTeamDetection &&
      (!self.hasDisableDireAutomaticTeamDetection || self.disableDireAutomaticTeamDetection == otherMessage.disableDireAutomaticTeamDetection) &&
      self.hasFinalMatchDuration == otherMessage.hasFinalMatchDuration &&
      (!self.hasFinalMatchDuration || self.finalMatchDuration == otherMessage.finalMatchDuration) &&
      self.hasSubmittedMatchHistory == otherMessage.hasSubmittedMatchHistory &&
      (!self.hasSubmittedMatchHistory || self.submittedMatchHistory == otherMessage.submittedMatchHistory) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSearchKey) {
    hashCode = hashCode * 31 + [self.searchKey hash];
  }
  for (CLobbyPendingPlayerReport* element in self.pendingPlayerReportsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasAverageRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.averageRank] hash];
  }
  if (self.hasReplaySalt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replaySalt] hash];
  }
  if (self.hasDisableRadiantAutomaticTeamDetection) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.disableRadiantAutomaticTeamDetection] hash];
  }
  if (self.hasDisableDireAutomaticTeamDetection) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.disableDireAutomaticTeamDetection] hash];
  }
  if (self.hasFinalMatchDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.finalMatchDuration] hash];
  }
  if (self.hasSubmittedMatchHistory) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.submittedMatchHistory] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTALobbyInternal_Builder()
@property (retain) CSODOTALobbyInternal* _builderResult;
@end

@implementation CSODOTALobbyInternal_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTALobbyInternal alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTALobbyInternal_Builder*) clear {
  _builderResult = [[[CSODOTALobbyInternal alloc] init] autorelease];
  return self;
}
- (CSODOTALobbyInternal_Builder*) clone {
  return [CSODOTALobbyInternal builderWithPrototype:_builderResult];
}
- (CSODOTALobbyInternal*) defaultInstance {
  return [CSODOTALobbyInternal defaultInstance];
}
- (CSODOTALobbyInternal*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTALobbyInternal*) buildPartial {
  CSODOTALobbyInternal* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTALobbyInternal_Builder*) mergeFrom:(CSODOTALobbyInternal*) other {
  if (other == [CSODOTALobbyInternal defaultInstance]) {
    return self;
  }
  if (other.hasSearchKey) {
    [self setSearchKey:other.searchKey];
  }
  if (other.pendingPlayerReportsArray.count > 0) {
    if (_builderResult.pendingPlayerReportsArray == nil) {
      _builderResult.pendingPlayerReportsArray = [[other.pendingPlayerReportsArray copyWithZone:[other.pendingPlayerReportsArray zone]] autorelease];
    } else {
      [_builderResult.pendingPlayerReportsArray appendArray:other.pendingPlayerReportsArray];
    }
  }
  if (other.hasAverageRank) {
    [self setAverageRank:other.averageRank];
  }
  if (other.hasReplaySalt) {
    [self setReplaySalt:other.replaySalt];
  }
  if (other.hasDisableRadiantAutomaticTeamDetection) {
    [self setDisableRadiantAutomaticTeamDetection:other.disableRadiantAutomaticTeamDetection];
  }
  if (other.hasDisableDireAutomaticTeamDetection) {
    [self setDisableDireAutomaticTeamDetection:other.disableDireAutomaticTeamDetection];
  }
  if (other.hasFinalMatchDuration) {
    [self setFinalMatchDuration:other.finalMatchDuration];
  }
  if (other.hasSubmittedMatchHistory) {
    [self setSubmittedMatchHistory:other.submittedMatchHistory];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTALobbyInternal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTALobbyInternal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSearchKey:[input readString]];
        break;
      }
      case 18: {
        CLobbyPendingPlayerReport_Builder* subBuilder = [CLobbyPendingPlayerReport builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPendingPlayerReports:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setAverageRank:[input readUInt32]];
        break;
      }
      case 37: {
        [self setReplaySalt:[input readFixed32]];
        break;
      }
      case 40: {
        [self setDisableRadiantAutomaticTeamDetection:[input readBool]];
        break;
      }
      case 48: {
        [self setDisableDireAutomaticTeamDetection:[input readBool]];
        break;
      }
      case 56: {
        [self setFinalMatchDuration:[input readUInt32]];
        break;
      }
      case 64: {
        [self setSubmittedMatchHistory:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSearchKey {
  return _builderResult.hasSearchKey;
}
- (NSString*) searchKey {
  return _builderResult.searchKey;
}
- (CSODOTALobbyInternal_Builder*) setSearchKey:(NSString*) value {
  _builderResult.hasSearchKey = YES;
  _builderResult.searchKey = value;
  return self;
}
- (CSODOTALobbyInternal_Builder*) clearSearchKey {
  _builderResult.hasSearchKey = NO;
  _builderResult.searchKey = @"";
  return self;
}
- (PBAppendableArray *)pendingPlayerReports {
  return _builderResult.pendingPlayerReportsArray;
}
- (CLobbyPendingPlayerReport*)pendingPlayerReportsAtIndex:(NSUInteger)index {
  return [_builderResult pendingPlayerReportsAtIndex:index];
}
- (CSODOTALobbyInternal_Builder *)addPendingPlayerReports:(CLobbyPendingPlayerReport*)value {
  if (_builderResult.pendingPlayerReportsArray == nil) {
    _builderResult.pendingPlayerReportsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.pendingPlayerReportsArray addObject:value];
  return self;
}
- (CSODOTALobbyInternal_Builder *)setPendingPlayerReportsArray:(NSArray *)array {
  _builderResult.pendingPlayerReportsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobbyInternal_Builder *)setPendingPlayerReportsValues:(const CLobbyPendingPlayerReport* *)values count:(NSUInteger)count {
  _builderResult.pendingPlayerReportsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSODOTALobbyInternal_Builder *)clearPendingPlayerReports {
  _builderResult.pendingPlayerReportsArray = nil;
  return self;
}
- (BOOL) hasAverageRank {
  return _builderResult.hasAverageRank;
}
- (uint32_t) averageRank {
  return _builderResult.averageRank;
}
- (CSODOTALobbyInternal_Builder*) setAverageRank:(uint32_t) value {
  _builderResult.hasAverageRank = YES;
  _builderResult.averageRank = value;
  return self;
}
- (CSODOTALobbyInternal_Builder*) clearAverageRank {
  _builderResult.hasAverageRank = NO;
  _builderResult.averageRank = 0;
  return self;
}
- (BOOL) hasReplaySalt {
  return _builderResult.hasReplaySalt;
}
- (uint32_t) replaySalt {
  return _builderResult.replaySalt;
}
- (CSODOTALobbyInternal_Builder*) setReplaySalt:(uint32_t) value {
  _builderResult.hasReplaySalt = YES;
  _builderResult.replaySalt = value;
  return self;
}
- (CSODOTALobbyInternal_Builder*) clearReplaySalt {
  _builderResult.hasReplaySalt = NO;
  _builderResult.replaySalt = 0;
  return self;
}
- (BOOL) hasDisableRadiantAutomaticTeamDetection {
  return _builderResult.hasDisableRadiantAutomaticTeamDetection;
}
- (BOOL) disableRadiantAutomaticTeamDetection {
  return _builderResult.disableRadiantAutomaticTeamDetection;
}
- (CSODOTALobbyInternal_Builder*) setDisableRadiantAutomaticTeamDetection:(BOOL) value {
  _builderResult.hasDisableRadiantAutomaticTeamDetection = YES;
  _builderResult.disableRadiantAutomaticTeamDetection = value;
  return self;
}
- (CSODOTALobbyInternal_Builder*) clearDisableRadiantAutomaticTeamDetection {
  _builderResult.hasDisableRadiantAutomaticTeamDetection = NO;
  _builderResult.disableRadiantAutomaticTeamDetection = NO;
  return self;
}
- (BOOL) hasDisableDireAutomaticTeamDetection {
  return _builderResult.hasDisableDireAutomaticTeamDetection;
}
- (BOOL) disableDireAutomaticTeamDetection {
  return _builderResult.disableDireAutomaticTeamDetection;
}
- (CSODOTALobbyInternal_Builder*) setDisableDireAutomaticTeamDetection:(BOOL) value {
  _builderResult.hasDisableDireAutomaticTeamDetection = YES;
  _builderResult.disableDireAutomaticTeamDetection = value;
  return self;
}
- (CSODOTALobbyInternal_Builder*) clearDisableDireAutomaticTeamDetection {
  _builderResult.hasDisableDireAutomaticTeamDetection = NO;
  _builderResult.disableDireAutomaticTeamDetection = NO;
  return self;
}
- (BOOL) hasFinalMatchDuration {
  return _builderResult.hasFinalMatchDuration;
}
- (uint32_t) finalMatchDuration {
  return _builderResult.finalMatchDuration;
}
- (CSODOTALobbyInternal_Builder*) setFinalMatchDuration:(uint32_t) value {
  _builderResult.hasFinalMatchDuration = YES;
  _builderResult.finalMatchDuration = value;
  return self;
}
- (CSODOTALobbyInternal_Builder*) clearFinalMatchDuration {
  _builderResult.hasFinalMatchDuration = NO;
  _builderResult.finalMatchDuration = 0;
  return self;
}
- (BOOL) hasSubmittedMatchHistory {
  return _builderResult.hasSubmittedMatchHistory;
}
- (BOOL) submittedMatchHistory {
  return _builderResult.submittedMatchHistory;
}
- (CSODOTALobbyInternal_Builder*) setSubmittedMatchHistory:(BOOL) value {
  _builderResult.hasSubmittedMatchHistory = YES;
  _builderResult.submittedMatchHistory = value;
  return self;
}
- (CSODOTALobbyInternal_Builder*) clearSubmittedMatchHistory {
  _builderResult.hasSubmittedMatchHistory = NO;
  _builderResult.submittedMatchHistory = NO;
  return self;
}
@end

@interface CSODOTALobbyMemcached ()
@property (retain) CSODOTALobby* lobby;
@property (retain) CSODOTALobbyInternal* internal;
@end

@implementation CSODOTALobbyMemcached

- (BOOL) hasLobby {
  return !!hasLobby_;
}
- (void) setHasLobby:(BOOL) value_ {
  hasLobby_ = !!value_;
}
@synthesize lobby;
- (BOOL) hasInternal {
  return !!hasInternal_;
}
- (void) setHasInternal:(BOOL) value_ {
  hasInternal_ = !!value_;
}
@synthesize internal;
- (void) dealloc {
  self.lobby = nil;
  self.internal = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lobby = [CSODOTALobby defaultInstance];
    self.internal = [CSODOTALobbyInternal defaultInstance];
  }
  return self;
}
static CSODOTALobbyMemcached* defaultCSODOTALobbyMemcachedInstance = nil;
+ (void) initialize {
  if (self == [CSODOTALobbyMemcached class]) {
    defaultCSODOTALobbyMemcachedInstance = [[CSODOTALobbyMemcached alloc] init];
  }
}
+ (CSODOTALobbyMemcached*) defaultInstance {
  return defaultCSODOTALobbyMemcachedInstance;
}
- (CSODOTALobbyMemcached*) defaultInstance {
  return defaultCSODOTALobbyMemcachedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLobby) {
    [output writeMessage:1 value:self.lobby];
  }
  if (self.hasInternal) {
    [output writeMessage:2 value:self.internal];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLobby) {
    size_ += computeMessageSize(1, self.lobby);
  }
  if (self.hasInternal) {
    size_ += computeMessageSize(2, self.internal);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTALobbyMemcached*) parseFromData:(NSData*) data {
  return (CSODOTALobbyMemcached*)[[[CSODOTALobbyMemcached builder] mergeFromData:data] build];
}
+ (CSODOTALobbyMemcached*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTALobbyMemcached*)[[[CSODOTALobbyMemcached builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTALobbyMemcached*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTALobbyMemcached*)[[[CSODOTALobbyMemcached builder] mergeFromInputStream:input] build];
}
+ (CSODOTALobbyMemcached*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTALobbyMemcached*)[[[CSODOTALobbyMemcached builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTALobbyMemcached*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTALobbyMemcached*)[[[CSODOTALobbyMemcached builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTALobbyMemcached*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTALobbyMemcached*)[[[CSODOTALobbyMemcached builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTALobbyMemcached_Builder*) builder {
  return [[[CSODOTALobbyMemcached_Builder alloc] init] autorelease];
}
+ (CSODOTALobbyMemcached_Builder*) builderWithPrototype:(CSODOTALobbyMemcached*) prototype {
  return [[CSODOTALobbyMemcached builder] mergeFrom:prototype];
}
- (CSODOTALobbyMemcached_Builder*) builder {
  return [CSODOTALobbyMemcached builder];
}
- (CSODOTALobbyMemcached_Builder*) toBuilder {
  return [CSODOTALobbyMemcached builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLobby) {
    [output appendFormat:@"%@%@ {\n", indent, @"lobby"];
    [self.lobby writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasInternal) {
    [output appendFormat:@"%@%@ {\n", indent, @"internal"];
    [self.internal writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTALobbyMemcached class]]) {
    return NO;
  }
  CSODOTALobbyMemcached *otherMessage = other;
  return
      self.hasLobby == otherMessage.hasLobby &&
      (!self.hasLobby || [self.lobby isEqual:otherMessage.lobby]) &&
      self.hasInternal == otherMessage.hasInternal &&
      (!self.hasInternal || [self.internal isEqual:otherMessage.internal]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLobby) {
    hashCode = hashCode * 31 + [self.lobby hash];
  }
  if (self.hasInternal) {
    hashCode = hashCode * 31 + [self.internal hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTALobbyMemcached_Builder()
@property (retain) CSODOTALobbyMemcached* _builderResult;
@end

@implementation CSODOTALobbyMemcached_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTALobbyMemcached alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTALobbyMemcached_Builder*) clear {
  _builderResult = [[[CSODOTALobbyMemcached alloc] init] autorelease];
  return self;
}
- (CSODOTALobbyMemcached_Builder*) clone {
  return [CSODOTALobbyMemcached builderWithPrototype:_builderResult];
}
- (CSODOTALobbyMemcached*) defaultInstance {
  return [CSODOTALobbyMemcached defaultInstance];
}
- (CSODOTALobbyMemcached*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTALobbyMemcached*) buildPartial {
  CSODOTALobbyMemcached* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTALobbyMemcached_Builder*) mergeFrom:(CSODOTALobbyMemcached*) other {
  if (other == [CSODOTALobbyMemcached defaultInstance]) {
    return self;
  }
  if (other.hasLobby) {
    [self mergeLobby:other.lobby];
  }
  if (other.hasInternal) {
    [self mergeInternal:other.internal];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTALobbyMemcached_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTALobbyMemcached_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CSODOTALobby_Builder* subBuilder = [CSODOTALobby builder];
        if (self.hasLobby) {
          [subBuilder mergeFrom:self.lobby];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLobby:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CSODOTALobbyInternal_Builder* subBuilder = [CSODOTALobbyInternal builder];
        if (self.hasInternal) {
          [subBuilder mergeFrom:self.internal];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInternal:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLobby {
  return _builderResult.hasLobby;
}
- (CSODOTALobby*) lobby {
  return _builderResult.lobby;
}
- (CSODOTALobbyMemcached_Builder*) setLobby:(CSODOTALobby*) value {
  _builderResult.hasLobby = YES;
  _builderResult.lobby = value;
  return self;
}
- (CSODOTALobbyMemcached_Builder*) setLobbyBuilder:(CSODOTALobby_Builder*) builderForValue {
  return [self setLobby:[builderForValue build]];
}
- (CSODOTALobbyMemcached_Builder*) mergeLobby:(CSODOTALobby*) value {
  if (_builderResult.hasLobby &&
      _builderResult.lobby != [CSODOTALobby defaultInstance]) {
    _builderResult.lobby =
      [[[CSODOTALobby builderWithPrototype:_builderResult.lobby] mergeFrom:value] buildPartial];
  } else {
    _builderResult.lobby = value;
  }
  _builderResult.hasLobby = YES;
  return self;
}
- (CSODOTALobbyMemcached_Builder*) clearLobby {
  _builderResult.hasLobby = NO;
  _builderResult.lobby = [CSODOTALobby defaultInstance];
  return self;
}
- (BOOL) hasInternal {
  return _builderResult.hasInternal;
}
- (CSODOTALobbyInternal*) internal {
  return _builderResult.internal;
}
- (CSODOTALobbyMemcached_Builder*) setInternal:(CSODOTALobbyInternal*) value {
  _builderResult.hasInternal = YES;
  _builderResult.internal = value;
  return self;
}
- (CSODOTALobbyMemcached_Builder*) setInternalBuilder:(CSODOTALobbyInternal_Builder*) builderForValue {
  return [self setInternal:[builderForValue build]];
}
- (CSODOTALobbyMemcached_Builder*) mergeInternal:(CSODOTALobbyInternal*) value {
  if (_builderResult.hasInternal &&
      _builderResult.internal != [CSODOTALobbyInternal defaultInstance]) {
    _builderResult.internal =
      [[[CSODOTALobbyInternal builderWithPrototype:_builderResult.internal] mergeFrom:value] buildPartial];
  } else {
    _builderResult.internal = value;
  }
  _builderResult.hasInternal = YES;
  return self;
}
- (CSODOTALobbyMemcached_Builder*) clearInternal {
  _builderResult.hasInternal = NO;
  _builderResult.internal = [CSODOTALobbyInternal defaultInstance];
  return self;
}
@end

@interface CMsgConnectedPlayers ()
@property (retain) PBAppendableArray * playersArray;
@property DOTA_GameState game_state;
@property uint32_t numSpectators;
@property uint32_t towerState;
@end

@implementation CMsgConnectedPlayers

@synthesize playersArray;
@dynamic players;
- (BOOL) hasgame_state {
  return !!hasgame_state_;
}
- (void) setHasgame_state:(BOOL) value_ {
  hasgame_state_ = !!value_;
}
@synthesize game_state;
- (BOOL) hasNumSpectators {
  return !!hasNumSpectators_;
}
- (void) setHasNumSpectators:(BOOL) value_ {
  hasNumSpectators_ = !!value_;
}
@synthesize numSpectators;
- (BOOL) hasTowerState {
  return !!hasTowerState_;
}
- (void) setHasTowerState:(BOOL) value_ {
  hasTowerState_ = !!value_;
}
@synthesize towerState;
- (void) dealloc {
  self.playersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.game_state = DOTA_GameStateDOTA_GAMERULES_STATE_INIT;
    self.numSpectators = 0;
    self.towerState = 0;
  }
  return self;
}
static CMsgConnectedPlayers* defaultCMsgConnectedPlayersInstance = nil;
+ (void) initialize {
  if (self == [CMsgConnectedPlayers class]) {
    defaultCMsgConnectedPlayersInstance = [[CMsgConnectedPlayers alloc] init];
  }
}
+ (CMsgConnectedPlayers*) defaultInstance {
  return defaultCMsgConnectedPlayersInstance;
}
- (CMsgConnectedPlayers*) defaultInstance {
  return defaultCMsgConnectedPlayersInstance;
}
- (PBArray *)players {
  return playersArray;
}
- (CMsgConnectedPlayers_Player*)playersAtIndex:(NSUInteger)index {
  return [playersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgConnectedPlayers_Player *element in self.playersArray) {
    [output writeMessage:1 value:element];
  }
  if (self.hasgame_state) {
    [output writeEnum:2 value:self.game_state];
  }
  if (self.hasNumSpectators) {
    [output writeUInt32:3 value:self.numSpectators];
  }
  if (self.hasTowerState) {
    [output writeUInt32:4 value:self.towerState];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgConnectedPlayers_Player *element in self.playersArray) {
    size_ += computeMessageSize(1, element);
  }
  if (self.hasgame_state) {
    size_ += computeEnumSize(2, self.game_state);
  }
  if (self.hasNumSpectators) {
    size_ += computeUInt32Size(3, self.numSpectators);
  }
  if (self.hasTowerState) {
    size_ += computeUInt32Size(4, self.towerState);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgConnectedPlayers*) parseFromData:(NSData*) data {
  return (CMsgConnectedPlayers*)[[[CMsgConnectedPlayers builder] mergeFromData:data] build];
}
+ (CMsgConnectedPlayers*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgConnectedPlayers*)[[[CMsgConnectedPlayers builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgConnectedPlayers*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgConnectedPlayers*)[[[CMsgConnectedPlayers builder] mergeFromInputStream:input] build];
}
+ (CMsgConnectedPlayers*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgConnectedPlayers*)[[[CMsgConnectedPlayers builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgConnectedPlayers*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgConnectedPlayers*)[[[CMsgConnectedPlayers builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgConnectedPlayers*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgConnectedPlayers*)[[[CMsgConnectedPlayers builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgConnectedPlayers_Builder*) builder {
  return [[[CMsgConnectedPlayers_Builder alloc] init] autorelease];
}
+ (CMsgConnectedPlayers_Builder*) builderWithPrototype:(CMsgConnectedPlayers*) prototype {
  return [[CMsgConnectedPlayers builder] mergeFrom:prototype];
}
- (CMsgConnectedPlayers_Builder*) builder {
  return [CMsgConnectedPlayers builder];
}
- (CMsgConnectedPlayers_Builder*) toBuilder {
  return [CMsgConnectedPlayers builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgConnectedPlayers_Player* element in self.playersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"players"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasgame_state) {
    [output appendFormat:@"%@%@: %d\n", indent, @"game_state", self.game_state];
  }
  if (self.hasNumSpectators) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numSpectators", [NSNumber numberWithInt:self.numSpectators]];
  }
  if (self.hasTowerState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"towerState", [NSNumber numberWithInt:self.towerState]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgConnectedPlayers class]]) {
    return NO;
  }
  CMsgConnectedPlayers *otherMessage = other;
  return
      [self.playersArray isEqualToArray:otherMessage.playersArray] &&
      self.hasgame_state == otherMessage.hasgame_state &&
      (!self.hasgame_state || self.game_state == otherMessage.game_state) &&
      self.hasNumSpectators == otherMessage.hasNumSpectators &&
      (!self.hasNumSpectators || self.numSpectators == otherMessage.numSpectators) &&
      self.hasTowerState == otherMessage.hasTowerState &&
      (!self.hasTowerState || self.towerState == otherMessage.towerState) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgConnectedPlayers_Player* element in self.playersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasgame_state) {
    hashCode = hashCode * 31 + self.game_state;
  }
  if (self.hasNumSpectators) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numSpectators] hash];
  }
  if (self.hasTowerState) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.towerState] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgConnectedPlayers_Player ()
@property uint64_t steamId;
@property uint32_t heroId;
@end

@implementation CMsgConnectedPlayers_Player

- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.steamId = 0L;
    self.heroId = 0;
  }
  return self;
}
static CMsgConnectedPlayers_Player* defaultCMsgConnectedPlayers_PlayerInstance = nil;
+ (void) initialize {
  if (self == [CMsgConnectedPlayers_Player class]) {
    defaultCMsgConnectedPlayers_PlayerInstance = [[CMsgConnectedPlayers_Player alloc] init];
  }
}
+ (CMsgConnectedPlayers_Player*) defaultInstance {
  return defaultCMsgConnectedPlayers_PlayerInstance;
}
- (CMsgConnectedPlayers_Player*) defaultInstance {
  return defaultCMsgConnectedPlayers_PlayerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSteamId) {
    [output writeFixed64:1 value:self.steamId];
  }
  if (self.hasHeroId) {
    [output writeUInt32:2 value:self.heroId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSteamId) {
    size_ += computeFixed64Size(1, self.steamId);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(2, self.heroId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgConnectedPlayers_Player*) parseFromData:(NSData*) data {
  return (CMsgConnectedPlayers_Player*)[[[CMsgConnectedPlayers_Player builder] mergeFromData:data] build];
}
+ (CMsgConnectedPlayers_Player*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgConnectedPlayers_Player*)[[[CMsgConnectedPlayers_Player builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgConnectedPlayers_Player*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgConnectedPlayers_Player*)[[[CMsgConnectedPlayers_Player builder] mergeFromInputStream:input] build];
}
+ (CMsgConnectedPlayers_Player*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgConnectedPlayers_Player*)[[[CMsgConnectedPlayers_Player builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgConnectedPlayers_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgConnectedPlayers_Player*)[[[CMsgConnectedPlayers_Player builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgConnectedPlayers_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgConnectedPlayers_Player*)[[[CMsgConnectedPlayers_Player builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgConnectedPlayers_Player_Builder*) builder {
  return [[[CMsgConnectedPlayers_Player_Builder alloc] init] autorelease];
}
+ (CMsgConnectedPlayers_Player_Builder*) builderWithPrototype:(CMsgConnectedPlayers_Player*) prototype {
  return [[CMsgConnectedPlayers_Player builder] mergeFrom:prototype];
}
- (CMsgConnectedPlayers_Player_Builder*) builder {
  return [CMsgConnectedPlayers_Player builder];
}
- (CMsgConnectedPlayers_Player_Builder*) toBuilder {
  return [CMsgConnectedPlayers_Player builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgConnectedPlayers_Player class]]) {
    return NO;
  }
  CMsgConnectedPlayers_Player *otherMessage = other;
  return
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgConnectedPlayers_Player_Builder()
@property (retain) CMsgConnectedPlayers_Player* _builderResult;
@end

@implementation CMsgConnectedPlayers_Player_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgConnectedPlayers_Player alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgConnectedPlayers_Player_Builder*) clear {
  _builderResult = [[[CMsgConnectedPlayers_Player alloc] init] autorelease];
  return self;
}
- (CMsgConnectedPlayers_Player_Builder*) clone {
  return [CMsgConnectedPlayers_Player builderWithPrototype:_builderResult];
}
- (CMsgConnectedPlayers_Player*) defaultInstance {
  return [CMsgConnectedPlayers_Player defaultInstance];
}
- (CMsgConnectedPlayers_Player*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgConnectedPlayers_Player*) buildPartial {
  CMsgConnectedPlayers_Player* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgConnectedPlayers_Player_Builder*) mergeFrom:(CMsgConnectedPlayers_Player*) other {
  if (other == [CMsgConnectedPlayers_Player defaultInstance]) {
    return self;
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgConnectedPlayers_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgConnectedPlayers_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSteamId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setHeroId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgConnectedPlayers_Player_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgConnectedPlayers_Player_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgConnectedPlayers_Player_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgConnectedPlayers_Player_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
@end

@interface CMsgConnectedPlayers_Builder()
@property (retain) CMsgConnectedPlayers* _builderResult;
@end

@implementation CMsgConnectedPlayers_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgConnectedPlayers alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgConnectedPlayers_Builder*) clear {
  _builderResult = [[[CMsgConnectedPlayers alloc] init] autorelease];
  return self;
}
- (CMsgConnectedPlayers_Builder*) clone {
  return [CMsgConnectedPlayers builderWithPrototype:_builderResult];
}
- (CMsgConnectedPlayers*) defaultInstance {
  return [CMsgConnectedPlayers defaultInstance];
}
- (CMsgConnectedPlayers*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgConnectedPlayers*) buildPartial {
  CMsgConnectedPlayers* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgConnectedPlayers_Builder*) mergeFrom:(CMsgConnectedPlayers*) other {
  if (other == [CMsgConnectedPlayers defaultInstance]) {
    return self;
  }
  if (other.playersArray.count > 0) {
    if (_builderResult.playersArray == nil) {
      _builderResult.playersArray = [[other.playersArray copyWithZone:[other.playersArray zone]] autorelease];
    } else {
      [_builderResult.playersArray appendArray:other.playersArray];
    }
  }
  if (other.hasgame_state) {
    [self setgame_state:other.game_state];
  }
  if (other.hasNumSpectators) {
    [self setNumSpectators:other.numSpectators];
  }
  if (other.hasTowerState) {
    [self setTowerState:other.towerState];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgConnectedPlayers_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgConnectedPlayers_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgConnectedPlayers_Player_Builder* subBuilder = [CMsgConnectedPlayers_Player builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlayers:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (DOTA_GameStateIsValidValue(value)) {
          [self setgame_state:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setNumSpectators:[input readUInt32]];
        break;
      }
      case 32: {
        [self setTowerState:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)players {
  return _builderResult.playersArray;
}
- (CMsgConnectedPlayers_Player*)playersAtIndex:(NSUInteger)index {
  return [_builderResult playersAtIndex:index];
}
- (CMsgConnectedPlayers_Builder *)addPlayers:(CMsgConnectedPlayers_Player*)value {
  if (_builderResult.playersArray == nil) {
    _builderResult.playersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.playersArray addObject:value];
  return self;
}
- (CMsgConnectedPlayers_Builder *)setPlayersArray:(NSArray *)array {
  _builderResult.playersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgConnectedPlayers_Builder *)setPlayersValues:(const CMsgConnectedPlayers_Player* *)values count:(NSUInteger)count {
  _builderResult.playersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgConnectedPlayers_Builder *)clearPlayers {
  _builderResult.playersArray = nil;
  return self;
}
- (BOOL) hasgame_state {
  return _builderResult.hasgame_state;
}
- (DOTA_GameState) game_state {
  return _builderResult.game_state;
}
- (CMsgConnectedPlayers_Builder*) setgame_state:(DOTA_GameState) value {
  _builderResult.hasgame_state = YES;
  _builderResult.game_state = value;
  return self;
}
- (CMsgConnectedPlayers_Builder*) cleargame_state {
  _builderResult.hasgame_state = NO;
  _builderResult.game_state = DOTA_GameStateDOTA_GAMERULES_STATE_INIT;
  return self;
}
- (BOOL) hasNumSpectators {
  return _builderResult.hasNumSpectators;
}
- (uint32_t) numSpectators {
  return _builderResult.numSpectators;
}
- (CMsgConnectedPlayers_Builder*) setNumSpectators:(uint32_t) value {
  _builderResult.hasNumSpectators = YES;
  _builderResult.numSpectators = value;
  return self;
}
- (CMsgConnectedPlayers_Builder*) clearNumSpectators {
  _builderResult.hasNumSpectators = NO;
  _builderResult.numSpectators = 0;
  return self;
}
- (BOOL) hasTowerState {
  return _builderResult.hasTowerState;
}
- (uint32_t) towerState {
  return _builderResult.towerState;
}
- (CMsgConnectedPlayers_Builder*) setTowerState:(uint32_t) value {
  _builderResult.hasTowerState = YES;
  _builderResult.towerState = value;
  return self;
}
- (CMsgConnectedPlayers_Builder*) clearTowerState {
  _builderResult.hasTowerState = NO;
  _builderResult.towerState = 0;
  return self;
}
@end

@interface CMsgStartFindingMatch ()
@property (retain) NSString* key;
@property uint32_t matchgroups;
@property uint32_t clientVersion;
@property uint32_t gameModes;
@property DOTABotDifficulty bot_difficulty;
@property MatchType match_type;
@end

@implementation CMsgStartFindingMatch

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) value_ {
  hasKey_ = !!value_;
}
@synthesize key;
- (BOOL) hasMatchgroups {
  return !!hasMatchgroups_;
}
- (void) setHasMatchgroups:(BOOL) value_ {
  hasMatchgroups_ = !!value_;
}
@synthesize matchgroups;
- (BOOL) hasClientVersion {
  return !!hasClientVersion_;
}
- (void) setHasClientVersion:(BOOL) value_ {
  hasClientVersion_ = !!value_;
}
@synthesize clientVersion;
- (BOOL) hasGameModes {
  return !!hasGameModes_;
}
- (void) setHasGameModes:(BOOL) value_ {
  hasGameModes_ = !!value_;
}
@synthesize gameModes;
- (BOOL) hasbot_difficulty {
  return !!hasbot_difficulty_;
}
- (void) setHasbot_difficulty:(BOOL) value_ {
  hasbot_difficulty_ = !!value_;
}
@synthesize bot_difficulty;
- (BOOL) hasmatch_type {
  return !!hasmatch_type_;
}
- (void) setHasmatch_type:(BOOL) value_ {
  hasmatch_type_ = !!value_;
}
@synthesize match_type;
- (void) dealloc {
  self.key = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.key = @"";
    self.matchgroups = -1;
    self.clientVersion = 0;
    self.gameModes = -1;
    self.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_HARD;
    self.match_type = MatchTypeMATCH_TYPE_RANKED;
  }
  return self;
}
static CMsgStartFindingMatch* defaultCMsgStartFindingMatchInstance = nil;
+ (void) initialize {
  if (self == [CMsgStartFindingMatch class]) {
    defaultCMsgStartFindingMatchInstance = [[CMsgStartFindingMatch alloc] init];
  }
}
+ (CMsgStartFindingMatch*) defaultInstance {
  return defaultCMsgStartFindingMatchInstance;
}
- (CMsgStartFindingMatch*) defaultInstance {
  return defaultCMsgStartFindingMatchInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasMatchgroups) {
    [output writeUInt32:2 value:self.matchgroups];
  }
  if (self.hasClientVersion) {
    [output writeUInt32:3 value:self.clientVersion];
  }
  if (self.hasGameModes) {
    [output writeUInt32:4 value:self.gameModes];
  }
  if (self.hasbot_difficulty) {
    [output writeEnum:5 value:self.bot_difficulty];
  }
  if (self.hasmatch_type) {
    [output writeEnum:6 value:self.match_type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasMatchgroups) {
    size_ += computeUInt32Size(2, self.matchgroups);
  }
  if (self.hasClientVersion) {
    size_ += computeUInt32Size(3, self.clientVersion);
  }
  if (self.hasGameModes) {
    size_ += computeUInt32Size(4, self.gameModes);
  }
  if (self.hasbot_difficulty) {
    size_ += computeEnumSize(5, self.bot_difficulty);
  }
  if (self.hasmatch_type) {
    size_ += computeEnumSize(6, self.match_type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgStartFindingMatch*) parseFromData:(NSData*) data {
  return (CMsgStartFindingMatch*)[[[CMsgStartFindingMatch builder] mergeFromData:data] build];
}
+ (CMsgStartFindingMatch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgStartFindingMatch*)[[[CMsgStartFindingMatch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgStartFindingMatch*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgStartFindingMatch*)[[[CMsgStartFindingMatch builder] mergeFromInputStream:input] build];
}
+ (CMsgStartFindingMatch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgStartFindingMatch*)[[[CMsgStartFindingMatch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgStartFindingMatch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgStartFindingMatch*)[[[CMsgStartFindingMatch builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgStartFindingMatch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgStartFindingMatch*)[[[CMsgStartFindingMatch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgStartFindingMatch_Builder*) builder {
  return [[[CMsgStartFindingMatch_Builder alloc] init] autorelease];
}
+ (CMsgStartFindingMatch_Builder*) builderWithPrototype:(CMsgStartFindingMatch*) prototype {
  return [[CMsgStartFindingMatch builder] mergeFrom:prototype];
}
- (CMsgStartFindingMatch_Builder*) builder {
  return [CMsgStartFindingMatch builder];
}
- (CMsgStartFindingMatch_Builder*) toBuilder {
  return [CMsgStartFindingMatch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasMatchgroups) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchgroups", [NSNumber numberWithInt:self.matchgroups]];
  }
  if (self.hasClientVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientVersion", [NSNumber numberWithInt:self.clientVersion]];
  }
  if (self.hasGameModes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameModes", [NSNumber numberWithInt:self.gameModes]];
  }
  if (self.hasbot_difficulty) {
    [output appendFormat:@"%@%@: %d\n", indent, @"bot_difficulty", self.bot_difficulty];
  }
  if (self.hasmatch_type) {
    [output appendFormat:@"%@%@: %d\n", indent, @"match_type", self.match_type];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgStartFindingMatch class]]) {
    return NO;
  }
  CMsgStartFindingMatch *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasMatchgroups == otherMessage.hasMatchgroups &&
      (!self.hasMatchgroups || self.matchgroups == otherMessage.matchgroups) &&
      self.hasClientVersion == otherMessage.hasClientVersion &&
      (!self.hasClientVersion || self.clientVersion == otherMessage.clientVersion) &&
      self.hasGameModes == otherMessage.hasGameModes &&
      (!self.hasGameModes || self.gameModes == otherMessage.gameModes) &&
      self.hasbot_difficulty == otherMessage.hasbot_difficulty &&
      (!self.hasbot_difficulty || self.bot_difficulty == otherMessage.bot_difficulty) &&
      self.hasmatch_type == otherMessage.hasmatch_type &&
      (!self.hasmatch_type || self.match_type == otherMessage.match_type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasMatchgroups) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchgroups] hash];
  }
  if (self.hasClientVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.clientVersion] hash];
  }
  if (self.hasGameModes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameModes] hash];
  }
  if (self.hasbot_difficulty) {
    hashCode = hashCode * 31 + self.bot_difficulty;
  }
  if (self.hasmatch_type) {
    hashCode = hashCode * 31 + self.match_type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgStartFindingMatch_Builder()
@property (retain) CMsgStartFindingMatch* _builderResult;
@end

@implementation CMsgStartFindingMatch_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgStartFindingMatch alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgStartFindingMatch_Builder*) clear {
  _builderResult = [[[CMsgStartFindingMatch alloc] init] autorelease];
  return self;
}
- (CMsgStartFindingMatch_Builder*) clone {
  return [CMsgStartFindingMatch builderWithPrototype:_builderResult];
}
- (CMsgStartFindingMatch*) defaultInstance {
  return [CMsgStartFindingMatch defaultInstance];
}
- (CMsgStartFindingMatch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgStartFindingMatch*) buildPartial {
  CMsgStartFindingMatch* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgStartFindingMatch_Builder*) mergeFrom:(CMsgStartFindingMatch*) other {
  if (other == [CMsgStartFindingMatch defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasMatchgroups) {
    [self setMatchgroups:other.matchgroups];
  }
  if (other.hasClientVersion) {
    [self setClientVersion:other.clientVersion];
  }
  if (other.hasGameModes) {
    [self setGameModes:other.gameModes];
  }
  if (other.hasbot_difficulty) {
    [self setbot_difficulty:other.bot_difficulty];
  }
  if (other.hasmatch_type) {
    [self setmatch_type:other.match_type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgStartFindingMatch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgStartFindingMatch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 16: {
        [self setMatchgroups:[input readUInt32]];
        break;
      }
      case 24: {
        [self setClientVersion:[input readUInt32]];
        break;
      }
      case 32: {
        [self setGameModes:[input readUInt32]];
        break;
      }
      case 40: {
        int32_t value = [input readEnum];
        if (DOTABotDifficultyIsValidValue(value)) {
          [self setbot_difficulty:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        int32_t value = [input readEnum];
        if (MatchTypeIsValidValue(value)) {
          [self setmatch_type:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return _builderResult.hasKey;
}
- (NSString*) key {
  return _builderResult.key;
}
- (CMsgStartFindingMatch_Builder*) setKey:(NSString*) value {
  _builderResult.hasKey = YES;
  _builderResult.key = value;
  return self;
}
- (CMsgStartFindingMatch_Builder*) clearKey {
  _builderResult.hasKey = NO;
  _builderResult.key = @"";
  return self;
}
- (BOOL) hasMatchgroups {
  return _builderResult.hasMatchgroups;
}
- (uint32_t) matchgroups {
  return _builderResult.matchgroups;
}
- (CMsgStartFindingMatch_Builder*) setMatchgroups:(uint32_t) value {
  _builderResult.hasMatchgroups = YES;
  _builderResult.matchgroups = value;
  return self;
}
- (CMsgStartFindingMatch_Builder*) clearMatchgroups {
  _builderResult.hasMatchgroups = NO;
  _builderResult.matchgroups = -1;
  return self;
}
- (BOOL) hasClientVersion {
  return _builderResult.hasClientVersion;
}
- (uint32_t) clientVersion {
  return _builderResult.clientVersion;
}
- (CMsgStartFindingMatch_Builder*) setClientVersion:(uint32_t) value {
  _builderResult.hasClientVersion = YES;
  _builderResult.clientVersion = value;
  return self;
}
- (CMsgStartFindingMatch_Builder*) clearClientVersion {
  _builderResult.hasClientVersion = NO;
  _builderResult.clientVersion = 0;
  return self;
}
- (BOOL) hasGameModes {
  return _builderResult.hasGameModes;
}
- (uint32_t) gameModes {
  return _builderResult.gameModes;
}
- (CMsgStartFindingMatch_Builder*) setGameModes:(uint32_t) value {
  _builderResult.hasGameModes = YES;
  _builderResult.gameModes = value;
  return self;
}
- (CMsgStartFindingMatch_Builder*) clearGameModes {
  _builderResult.hasGameModes = NO;
  _builderResult.gameModes = -1;
  return self;
}
- (BOOL) hasbot_difficulty {
  return _builderResult.hasbot_difficulty;
}
- (DOTABotDifficulty) bot_difficulty {
  return _builderResult.bot_difficulty;
}
- (CMsgStartFindingMatch_Builder*) setbot_difficulty:(DOTABotDifficulty) value {
  _builderResult.hasbot_difficulty = YES;
  _builderResult.bot_difficulty = value;
  return self;
}
- (CMsgStartFindingMatch_Builder*) clearbot_difficulty {
  _builderResult.hasbot_difficulty = NO;
  _builderResult.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_HARD;
  return self;
}
- (BOOL) hasmatch_type {
  return _builderResult.hasmatch_type;
}
- (MatchType) match_type {
  return _builderResult.match_type;
}
- (CMsgStartFindingMatch_Builder*) setmatch_type:(MatchType) value {
  _builderResult.hasmatch_type = YES;
  _builderResult.match_type = value;
  return self;
}
- (CMsgStartFindingMatch_Builder*) clearmatch_type {
  _builderResult.hasmatch_type = NO;
  _builderResult.match_type = MatchTypeMATCH_TYPE_RANKED;
  return self;
}
@end

@interface CMsgStopFindingMatch ()
@end

@implementation CMsgStopFindingMatch

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgStopFindingMatch* defaultCMsgStopFindingMatchInstance = nil;
+ (void) initialize {
  if (self == [CMsgStopFindingMatch class]) {
    defaultCMsgStopFindingMatchInstance = [[CMsgStopFindingMatch alloc] init];
  }
}
+ (CMsgStopFindingMatch*) defaultInstance {
  return defaultCMsgStopFindingMatchInstance;
}
- (CMsgStopFindingMatch*) defaultInstance {
  return defaultCMsgStopFindingMatchInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgStopFindingMatch*) parseFromData:(NSData*) data {
  return (CMsgStopFindingMatch*)[[[CMsgStopFindingMatch builder] mergeFromData:data] build];
}
+ (CMsgStopFindingMatch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgStopFindingMatch*)[[[CMsgStopFindingMatch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgStopFindingMatch*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgStopFindingMatch*)[[[CMsgStopFindingMatch builder] mergeFromInputStream:input] build];
}
+ (CMsgStopFindingMatch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgStopFindingMatch*)[[[CMsgStopFindingMatch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgStopFindingMatch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgStopFindingMatch*)[[[CMsgStopFindingMatch builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgStopFindingMatch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgStopFindingMatch*)[[[CMsgStopFindingMatch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgStopFindingMatch_Builder*) builder {
  return [[[CMsgStopFindingMatch_Builder alloc] init] autorelease];
}
+ (CMsgStopFindingMatch_Builder*) builderWithPrototype:(CMsgStopFindingMatch*) prototype {
  return [[CMsgStopFindingMatch builder] mergeFrom:prototype];
}
- (CMsgStopFindingMatch_Builder*) builder {
  return [CMsgStopFindingMatch builder];
}
- (CMsgStopFindingMatch_Builder*) toBuilder {
  return [CMsgStopFindingMatch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgStopFindingMatch class]]) {
    return NO;
  }
  CMsgStopFindingMatch *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgStopFindingMatch_Builder()
@property (retain) CMsgStopFindingMatch* _builderResult;
@end

@implementation CMsgStopFindingMatch_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgStopFindingMatch alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgStopFindingMatch_Builder*) clear {
  _builderResult = [[[CMsgStopFindingMatch alloc] init] autorelease];
  return self;
}
- (CMsgStopFindingMatch_Builder*) clone {
  return [CMsgStopFindingMatch builderWithPrototype:_builderResult];
}
- (CMsgStopFindingMatch*) defaultInstance {
  return [CMsgStopFindingMatch defaultInstance];
}
- (CMsgStopFindingMatch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgStopFindingMatch*) buildPartial {
  CMsgStopFindingMatch* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgStopFindingMatch_Builder*) mergeFrom:(CMsgStopFindingMatch*) other {
  if (other == [CMsgStopFindingMatch defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgStopFindingMatch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgStopFindingMatch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgReadyUp ()
@property DOTALobbyReadyState state;
@end

@implementation CMsgReadyUp

- (BOOL) hasstate {
  return !!hasstate_;
}
- (void) setHasstate:(BOOL) value_ {
  hasstate_ = !!value_;
}
@synthesize state;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.state = DOTALobbyReadyStateDOTALobbyReadyState_UNDECLARED;
  }
  return self;
}
static CMsgReadyUp* defaultCMsgReadyUpInstance = nil;
+ (void) initialize {
  if (self == [CMsgReadyUp class]) {
    defaultCMsgReadyUpInstance = [[CMsgReadyUp alloc] init];
  }
}
+ (CMsgReadyUp*) defaultInstance {
  return defaultCMsgReadyUpInstance;
}
- (CMsgReadyUp*) defaultInstance {
  return defaultCMsgReadyUpInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasstate) {
    [output writeEnum:1 value:self.state];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasstate) {
    size_ += computeEnumSize(1, self.state);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgReadyUp*) parseFromData:(NSData*) data {
  return (CMsgReadyUp*)[[[CMsgReadyUp builder] mergeFromData:data] build];
}
+ (CMsgReadyUp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgReadyUp*)[[[CMsgReadyUp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgReadyUp*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgReadyUp*)[[[CMsgReadyUp builder] mergeFromInputStream:input] build];
}
+ (CMsgReadyUp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgReadyUp*)[[[CMsgReadyUp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgReadyUp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgReadyUp*)[[[CMsgReadyUp builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgReadyUp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgReadyUp*)[[[CMsgReadyUp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgReadyUp_Builder*) builder {
  return [[[CMsgReadyUp_Builder alloc] init] autorelease];
}
+ (CMsgReadyUp_Builder*) builderWithPrototype:(CMsgReadyUp*) prototype {
  return [[CMsgReadyUp builder] mergeFrom:prototype];
}
- (CMsgReadyUp_Builder*) builder {
  return [CMsgReadyUp builder];
}
- (CMsgReadyUp_Builder*) toBuilder {
  return [CMsgReadyUp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasstate) {
    [output appendFormat:@"%@%@: %d\n", indent, @"state", self.state];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgReadyUp class]]) {
    return NO;
  }
  CMsgReadyUp *otherMessage = other;
  return
      self.hasstate == otherMessage.hasstate &&
      (!self.hasstate || self.state == otherMessage.state) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasstate) {
    hashCode = hashCode * 31 + self.state;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgReadyUp_Builder()
@property (retain) CMsgReadyUp* _builderResult;
@end

@implementation CMsgReadyUp_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgReadyUp alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgReadyUp_Builder*) clear {
  _builderResult = [[[CMsgReadyUp alloc] init] autorelease];
  return self;
}
- (CMsgReadyUp_Builder*) clone {
  return [CMsgReadyUp builderWithPrototype:_builderResult];
}
- (CMsgReadyUp*) defaultInstance {
  return [CMsgReadyUp defaultInstance];
}
- (CMsgReadyUp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgReadyUp*) buildPartial {
  CMsgReadyUp* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgReadyUp_Builder*) mergeFrom:(CMsgReadyUp*) other {
  if (other == [CMsgReadyUp defaultInstance]) {
    return self;
  }
  if (other.hasstate) {
    [self setstate:other.state];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgReadyUp_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgReadyUp_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (DOTALobbyReadyStateIsValidValue(value)) {
          [self setstate:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasstate {
  return _builderResult.hasstate;
}
- (DOTALobbyReadyState) state {
  return _builderResult.state;
}
- (CMsgReadyUp_Builder*) setstate:(DOTALobbyReadyState) value {
  _builderResult.hasstate = YES;
  _builderResult.state = value;
  return self;
}
- (CMsgReadyUp_Builder*) clearstate {
  _builderResult.hasstate = NO;
  _builderResult.state = DOTALobbyReadyStateDOTALobbyReadyState_UNDECLARED;
  return self;
}
@end

@interface CMsgReadyUpStatus ()
@property uint64_t lobbyId;
@property (retain) PBAppendableArray * acceptedIdsArray;
@property (retain) PBAppendableArray * declinedIdsArray;
@end

@implementation CMsgReadyUpStatus

- (BOOL) hasLobbyId {
  return !!hasLobbyId_;
}
- (void) setHasLobbyId:(BOOL) value_ {
  hasLobbyId_ = !!value_;
}
@synthesize lobbyId;
@synthesize acceptedIdsArray;
@dynamic acceptedIds;
@synthesize declinedIdsArray;
@dynamic declinedIds;
- (void) dealloc {
  self.acceptedIdsArray = nil;
  self.declinedIdsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lobbyId = 0L;
  }
  return self;
}
static CMsgReadyUpStatus* defaultCMsgReadyUpStatusInstance = nil;
+ (void) initialize {
  if (self == [CMsgReadyUpStatus class]) {
    defaultCMsgReadyUpStatusInstance = [[CMsgReadyUpStatus alloc] init];
  }
}
+ (CMsgReadyUpStatus*) defaultInstance {
  return defaultCMsgReadyUpStatusInstance;
}
- (CMsgReadyUpStatus*) defaultInstance {
  return defaultCMsgReadyUpStatusInstance;
}
- (PBArray *)acceptedIds {
  return acceptedIdsArray;
}
- (uint32_t)acceptedIdsAtIndex:(NSUInteger)index {
  return [acceptedIdsArray uint32AtIndex:index];
}
- (PBArray *)declinedIds {
  return declinedIdsArray;
}
- (uint32_t)declinedIdsAtIndex:(NSUInteger)index {
  return [declinedIdsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLobbyId) {
    [output writeFixed64:1 value:self.lobbyId];
  }
  const NSUInteger acceptedIdsArrayCount = self.acceptedIdsArray.count;
  if (acceptedIdsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.acceptedIdsArray.data;
    for (NSUInteger i = 0; i < acceptedIdsArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  const NSUInteger declinedIdsArrayCount = self.declinedIdsArray.count;
  if (declinedIdsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.declinedIdsArray.data;
    for (NSUInteger i = 0; i < declinedIdsArrayCount; ++i) {
      [output writeUInt32:3 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLobbyId) {
    size_ += computeFixed64Size(1, self.lobbyId);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.acceptedIdsArray.count;
    const uint32_t *values = (const uint32_t *)self.acceptedIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.declinedIdsArray.count;
    const uint32_t *values = (const uint32_t *)self.declinedIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgReadyUpStatus*) parseFromData:(NSData*) data {
  return (CMsgReadyUpStatus*)[[[CMsgReadyUpStatus builder] mergeFromData:data] build];
}
+ (CMsgReadyUpStatus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgReadyUpStatus*)[[[CMsgReadyUpStatus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgReadyUpStatus*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgReadyUpStatus*)[[[CMsgReadyUpStatus builder] mergeFromInputStream:input] build];
}
+ (CMsgReadyUpStatus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgReadyUpStatus*)[[[CMsgReadyUpStatus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgReadyUpStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgReadyUpStatus*)[[[CMsgReadyUpStatus builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgReadyUpStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgReadyUpStatus*)[[[CMsgReadyUpStatus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgReadyUpStatus_Builder*) builder {
  return [[[CMsgReadyUpStatus_Builder alloc] init] autorelease];
}
+ (CMsgReadyUpStatus_Builder*) builderWithPrototype:(CMsgReadyUpStatus*) prototype {
  return [[CMsgReadyUpStatus builder] mergeFrom:prototype];
}
- (CMsgReadyUpStatus_Builder*) builder {
  return [CMsgReadyUpStatus builder];
}
- (CMsgReadyUpStatus_Builder*) toBuilder {
  return [CMsgReadyUpStatus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLobbyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyId", [NSNumber numberWithLongLong:self.lobbyId]];
  }
  for (NSNumber* value in self.acceptedIdsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"acceptedIds", value];
  }
  for (NSNumber* value in self.declinedIdsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"declinedIds", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgReadyUpStatus class]]) {
    return NO;
  }
  CMsgReadyUpStatus *otherMessage = other;
  return
      self.hasLobbyId == otherMessage.hasLobbyId &&
      (!self.hasLobbyId || self.lobbyId == otherMessage.lobbyId) &&
      [self.acceptedIdsArray isEqualToArray:otherMessage.acceptedIdsArray] &&
      [self.declinedIdsArray isEqualToArray:otherMessage.declinedIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLobbyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lobbyId] hash];
  }
  for (NSNumber* value in self.acceptedIdsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.declinedIdsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgReadyUpStatus_Builder()
@property (retain) CMsgReadyUpStatus* _builderResult;
@end

@implementation CMsgReadyUpStatus_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgReadyUpStatus alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgReadyUpStatus_Builder*) clear {
  _builderResult = [[[CMsgReadyUpStatus alloc] init] autorelease];
  return self;
}
- (CMsgReadyUpStatus_Builder*) clone {
  return [CMsgReadyUpStatus builderWithPrototype:_builderResult];
}
- (CMsgReadyUpStatus*) defaultInstance {
  return [CMsgReadyUpStatus defaultInstance];
}
- (CMsgReadyUpStatus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgReadyUpStatus*) buildPartial {
  CMsgReadyUpStatus* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgReadyUpStatus_Builder*) mergeFrom:(CMsgReadyUpStatus*) other {
  if (other == [CMsgReadyUpStatus defaultInstance]) {
    return self;
  }
  if (other.hasLobbyId) {
    [self setLobbyId:other.lobbyId];
  }
  if (other.acceptedIdsArray.count > 0) {
    if (_builderResult.acceptedIdsArray == nil) {
      _builderResult.acceptedIdsArray = [[other.acceptedIdsArray copyWithZone:[other.acceptedIdsArray zone]] autorelease];
    } else {
      [_builderResult.acceptedIdsArray appendArray:other.acceptedIdsArray];
    }
  }
  if (other.declinedIdsArray.count > 0) {
    if (_builderResult.declinedIdsArray == nil) {
      _builderResult.declinedIdsArray = [[other.declinedIdsArray copyWithZone:[other.declinedIdsArray zone]] autorelease];
    } else {
      [_builderResult.declinedIdsArray appendArray:other.declinedIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgReadyUpStatus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgReadyUpStatus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setLobbyId:[input readFixed64]];
        break;
      }
      case 16: {
        [self addAcceptedIds:[input readUInt32]];
        break;
      }
      case 24: {
        [self addDeclinedIds:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLobbyId {
  return _builderResult.hasLobbyId;
}
- (uint64_t) lobbyId {
  return _builderResult.lobbyId;
}
- (CMsgReadyUpStatus_Builder*) setLobbyId:(uint64_t) value {
  _builderResult.hasLobbyId = YES;
  _builderResult.lobbyId = value;
  return self;
}
- (CMsgReadyUpStatus_Builder*) clearLobbyId {
  _builderResult.hasLobbyId = NO;
  _builderResult.lobbyId = 0L;
  return self;
}
- (PBAppendableArray *)acceptedIds {
  return _builderResult.acceptedIdsArray;
}
- (uint32_t)acceptedIdsAtIndex:(NSUInteger)index {
  return [_builderResult acceptedIdsAtIndex:index];
}
- (CMsgReadyUpStatus_Builder *)addAcceptedIds:(uint32_t)value {
  if (_builderResult.acceptedIdsArray == nil) {
    _builderResult.acceptedIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.acceptedIdsArray addUint32:value];
  return self;
}
- (CMsgReadyUpStatus_Builder *)setAcceptedIdsArray:(NSArray *)array {
  _builderResult.acceptedIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgReadyUpStatus_Builder *)setAcceptedIdsValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.acceptedIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgReadyUpStatus_Builder *)clearAcceptedIds {
  _builderResult.acceptedIdsArray = nil;
  return self;
}
- (PBAppendableArray *)declinedIds {
  return _builderResult.declinedIdsArray;
}
- (uint32_t)declinedIdsAtIndex:(NSUInteger)index {
  return [_builderResult declinedIdsAtIndex:index];
}
- (CMsgReadyUpStatus_Builder *)addDeclinedIds:(uint32_t)value {
  if (_builderResult.declinedIdsArray == nil) {
    _builderResult.declinedIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.declinedIdsArray addUint32:value];
  return self;
}
- (CMsgReadyUpStatus_Builder *)setDeclinedIdsArray:(NSArray *)array {
  _builderResult.declinedIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgReadyUpStatus_Builder *)setDeclinedIdsValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.declinedIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgReadyUpStatus_Builder *)clearDeclinedIds {
  _builderResult.declinedIdsArray = nil;
  return self;
}
@end

@interface CMsgSpawnLootGreevil ()
@end

@implementation CMsgSpawnLootGreevil

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgSpawnLootGreevil* defaultCMsgSpawnLootGreevilInstance = nil;
+ (void) initialize {
  if (self == [CMsgSpawnLootGreevil class]) {
    defaultCMsgSpawnLootGreevilInstance = [[CMsgSpawnLootGreevil alloc] init];
  }
}
+ (CMsgSpawnLootGreevil*) defaultInstance {
  return defaultCMsgSpawnLootGreevilInstance;
}
- (CMsgSpawnLootGreevil*) defaultInstance {
  return defaultCMsgSpawnLootGreevilInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgSpawnLootGreevil*) parseFromData:(NSData*) data {
  return (CMsgSpawnLootGreevil*)[[[CMsgSpawnLootGreevil builder] mergeFromData:data] build];
}
+ (CMsgSpawnLootGreevil*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpawnLootGreevil*)[[[CMsgSpawnLootGreevil builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpawnLootGreevil*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgSpawnLootGreevil*)[[[CMsgSpawnLootGreevil builder] mergeFromInputStream:input] build];
}
+ (CMsgSpawnLootGreevil*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpawnLootGreevil*)[[[CMsgSpawnLootGreevil builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpawnLootGreevil*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgSpawnLootGreevil*)[[[CMsgSpawnLootGreevil builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgSpawnLootGreevil*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpawnLootGreevil*)[[[CMsgSpawnLootGreevil builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpawnLootGreevil_Builder*) builder {
  return [[[CMsgSpawnLootGreevil_Builder alloc] init] autorelease];
}
+ (CMsgSpawnLootGreevil_Builder*) builderWithPrototype:(CMsgSpawnLootGreevil*) prototype {
  return [[CMsgSpawnLootGreevil builder] mergeFrom:prototype];
}
- (CMsgSpawnLootGreevil_Builder*) builder {
  return [CMsgSpawnLootGreevil builder];
}
- (CMsgSpawnLootGreevil_Builder*) toBuilder {
  return [CMsgSpawnLootGreevil builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgSpawnLootGreevil class]]) {
    return NO;
  }
  CMsgSpawnLootGreevil *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgSpawnLootGreevil_Builder()
@property (retain) CMsgSpawnLootGreevil* _builderResult;
@end

@implementation CMsgSpawnLootGreevil_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgSpawnLootGreevil alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgSpawnLootGreevil_Builder*) clear {
  _builderResult = [[[CMsgSpawnLootGreevil alloc] init] autorelease];
  return self;
}
- (CMsgSpawnLootGreevil_Builder*) clone {
  return [CMsgSpawnLootGreevil builderWithPrototype:_builderResult];
}
- (CMsgSpawnLootGreevil*) defaultInstance {
  return [CMsgSpawnLootGreevil defaultInstance];
}
- (CMsgSpawnLootGreevil*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgSpawnLootGreevil*) buildPartial {
  CMsgSpawnLootGreevil* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgSpawnLootGreevil_Builder*) mergeFrom:(CMsgSpawnLootGreevil*) other {
  if (other == [CMsgSpawnLootGreevil defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgSpawnLootGreevil_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgSpawnLootGreevil_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDismissLootGreevil ()
@property uint64_t lobbyId;
@property BOOL killed;
@end

@implementation CMsgDismissLootGreevil

- (BOOL) hasLobbyId {
  return !!hasLobbyId_;
}
- (void) setHasLobbyId:(BOOL) value_ {
  hasLobbyId_ = !!value_;
}
@synthesize lobbyId;
- (BOOL) hasKilled {
  return !!hasKilled_;
}
- (void) setHasKilled:(BOOL) value_ {
  hasKilled_ = !!value_;
}
- (BOOL) killed {
  return !!killed_;
}
- (void) setKilled:(BOOL) value_ {
  killed_ = !!value_;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lobbyId = 0L;
    self.killed = NO;
  }
  return self;
}
static CMsgDismissLootGreevil* defaultCMsgDismissLootGreevilInstance = nil;
+ (void) initialize {
  if (self == [CMsgDismissLootGreevil class]) {
    defaultCMsgDismissLootGreevilInstance = [[CMsgDismissLootGreevil alloc] init];
  }
}
+ (CMsgDismissLootGreevil*) defaultInstance {
  return defaultCMsgDismissLootGreevilInstance;
}
- (CMsgDismissLootGreevil*) defaultInstance {
  return defaultCMsgDismissLootGreevilInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLobbyId) {
    [output writeFixed64:1 value:self.lobbyId];
  }
  if (self.hasKilled) {
    [output writeBool:2 value:self.killed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLobbyId) {
    size_ += computeFixed64Size(1, self.lobbyId);
  }
  if (self.hasKilled) {
    size_ += computeBoolSize(2, self.killed);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDismissLootGreevil*) parseFromData:(NSData*) data {
  return (CMsgDismissLootGreevil*)[[[CMsgDismissLootGreevil builder] mergeFromData:data] build];
}
+ (CMsgDismissLootGreevil*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDismissLootGreevil*)[[[CMsgDismissLootGreevil builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDismissLootGreevil*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDismissLootGreevil*)[[[CMsgDismissLootGreevil builder] mergeFromInputStream:input] build];
}
+ (CMsgDismissLootGreevil*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDismissLootGreevil*)[[[CMsgDismissLootGreevil builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDismissLootGreevil*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDismissLootGreevil*)[[[CMsgDismissLootGreevil builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDismissLootGreevil*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDismissLootGreevil*)[[[CMsgDismissLootGreevil builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDismissLootGreevil_Builder*) builder {
  return [[[CMsgDismissLootGreevil_Builder alloc] init] autorelease];
}
+ (CMsgDismissLootGreevil_Builder*) builderWithPrototype:(CMsgDismissLootGreevil*) prototype {
  return [[CMsgDismissLootGreevil builder] mergeFrom:prototype];
}
- (CMsgDismissLootGreevil_Builder*) builder {
  return [CMsgDismissLootGreevil builder];
}
- (CMsgDismissLootGreevil_Builder*) toBuilder {
  return [CMsgDismissLootGreevil builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLobbyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyId", [NSNumber numberWithLongLong:self.lobbyId]];
  }
  if (self.hasKilled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"killed", [NSNumber numberWithBool:self.killed]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDismissLootGreevil class]]) {
    return NO;
  }
  CMsgDismissLootGreevil *otherMessage = other;
  return
      self.hasLobbyId == otherMessage.hasLobbyId &&
      (!self.hasLobbyId || self.lobbyId == otherMessage.lobbyId) &&
      self.hasKilled == otherMessage.hasKilled &&
      (!self.hasKilled || self.killed == otherMessage.killed) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLobbyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lobbyId] hash];
  }
  if (self.hasKilled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.killed] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDismissLootGreevil_Builder()
@property (retain) CMsgDismissLootGreevil* _builderResult;
@end

@implementation CMsgDismissLootGreevil_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDismissLootGreevil alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDismissLootGreevil_Builder*) clear {
  _builderResult = [[[CMsgDismissLootGreevil alloc] init] autorelease];
  return self;
}
- (CMsgDismissLootGreevil_Builder*) clone {
  return [CMsgDismissLootGreevil builderWithPrototype:_builderResult];
}
- (CMsgDismissLootGreevil*) defaultInstance {
  return [CMsgDismissLootGreevil defaultInstance];
}
- (CMsgDismissLootGreevil*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDismissLootGreevil*) buildPartial {
  CMsgDismissLootGreevil* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDismissLootGreevil_Builder*) mergeFrom:(CMsgDismissLootGreevil*) other {
  if (other == [CMsgDismissLootGreevil defaultInstance]) {
    return self;
  }
  if (other.hasLobbyId) {
    [self setLobbyId:other.lobbyId];
  }
  if (other.hasKilled) {
    [self setKilled:other.killed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDismissLootGreevil_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDismissLootGreevil_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setLobbyId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setKilled:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasLobbyId {
  return _builderResult.hasLobbyId;
}
- (uint64_t) lobbyId {
  return _builderResult.lobbyId;
}
- (CMsgDismissLootGreevil_Builder*) setLobbyId:(uint64_t) value {
  _builderResult.hasLobbyId = YES;
  _builderResult.lobbyId = value;
  return self;
}
- (CMsgDismissLootGreevil_Builder*) clearLobbyId {
  _builderResult.hasLobbyId = NO;
  _builderResult.lobbyId = 0L;
  return self;
}
- (BOOL) hasKilled {
  return _builderResult.hasKilled;
}
- (BOOL) killed {
  return _builderResult.killed;
}
- (CMsgDismissLootGreevil_Builder*) setKilled:(BOOL) value {
  _builderResult.hasKilled = YES;
  _builderResult.killed = value;
  return self;
}
- (CMsgDismissLootGreevil_Builder*) clearKilled {
  _builderResult.hasKilled = NO;
  _builderResult.killed = NO;
  return self;
}
@end

@interface CMsgMatchmakingSearchCountRequest ()
@end

@implementation CMsgMatchmakingSearchCountRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgMatchmakingSearchCountRequest* defaultCMsgMatchmakingSearchCountRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgMatchmakingSearchCountRequest class]) {
    defaultCMsgMatchmakingSearchCountRequestInstance = [[CMsgMatchmakingSearchCountRequest alloc] init];
  }
}
+ (CMsgMatchmakingSearchCountRequest*) defaultInstance {
  return defaultCMsgMatchmakingSearchCountRequestInstance;
}
- (CMsgMatchmakingSearchCountRequest*) defaultInstance {
  return defaultCMsgMatchmakingSearchCountRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgMatchmakingSearchCountRequest*) parseFromData:(NSData*) data {
  return (CMsgMatchmakingSearchCountRequest*)[[[CMsgMatchmakingSearchCountRequest builder] mergeFromData:data] build];
}
+ (CMsgMatchmakingSearchCountRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgMatchmakingSearchCountRequest*)[[[CMsgMatchmakingSearchCountRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgMatchmakingSearchCountRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgMatchmakingSearchCountRequest*)[[[CMsgMatchmakingSearchCountRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgMatchmakingSearchCountRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgMatchmakingSearchCountRequest*)[[[CMsgMatchmakingSearchCountRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgMatchmakingSearchCountRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgMatchmakingSearchCountRequest*)[[[CMsgMatchmakingSearchCountRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgMatchmakingSearchCountRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgMatchmakingSearchCountRequest*)[[[CMsgMatchmakingSearchCountRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgMatchmakingSearchCountRequest_Builder*) builder {
  return [[[CMsgMatchmakingSearchCountRequest_Builder alloc] init] autorelease];
}
+ (CMsgMatchmakingSearchCountRequest_Builder*) builderWithPrototype:(CMsgMatchmakingSearchCountRequest*) prototype {
  return [[CMsgMatchmakingSearchCountRequest builder] mergeFrom:prototype];
}
- (CMsgMatchmakingSearchCountRequest_Builder*) builder {
  return [CMsgMatchmakingSearchCountRequest builder];
}
- (CMsgMatchmakingSearchCountRequest_Builder*) toBuilder {
  return [CMsgMatchmakingSearchCountRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgMatchmakingSearchCountRequest class]]) {
    return NO;
  }
  CMsgMatchmakingSearchCountRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgMatchmakingSearchCountRequest_Builder()
@property (retain) CMsgMatchmakingSearchCountRequest* _builderResult;
@end

@implementation CMsgMatchmakingSearchCountRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgMatchmakingSearchCountRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgMatchmakingSearchCountRequest_Builder*) clear {
  _builderResult = [[[CMsgMatchmakingSearchCountRequest alloc] init] autorelease];
  return self;
}
- (CMsgMatchmakingSearchCountRequest_Builder*) clone {
  return [CMsgMatchmakingSearchCountRequest builderWithPrototype:_builderResult];
}
- (CMsgMatchmakingSearchCountRequest*) defaultInstance {
  return [CMsgMatchmakingSearchCountRequest defaultInstance];
}
- (CMsgMatchmakingSearchCountRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgMatchmakingSearchCountRequest*) buildPartial {
  CMsgMatchmakingSearchCountRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgMatchmakingSearchCountRequest_Builder*) mergeFrom:(CMsgMatchmakingSearchCountRequest*) other {
  if (other == [CMsgMatchmakingSearchCountRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgMatchmakingSearchCountRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgMatchmakingSearchCountRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgMatchmakingSearchCountResponse ()
@property (retain) PBAppendableArray * searchingPlayersByGroupArray;
@end

@implementation CMsgMatchmakingSearchCountResponse

@synthesize searchingPlayersByGroupArray;
@dynamic searchingPlayersByGroup;
- (void) dealloc {
  self.searchingPlayersByGroupArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgMatchmakingSearchCountResponse* defaultCMsgMatchmakingSearchCountResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgMatchmakingSearchCountResponse class]) {
    defaultCMsgMatchmakingSearchCountResponseInstance = [[CMsgMatchmakingSearchCountResponse alloc] init];
  }
}
+ (CMsgMatchmakingSearchCountResponse*) defaultInstance {
  return defaultCMsgMatchmakingSearchCountResponseInstance;
}
- (CMsgMatchmakingSearchCountResponse*) defaultInstance {
  return defaultCMsgMatchmakingSearchCountResponseInstance;
}
- (PBArray *)searchingPlayersByGroup {
  return searchingPlayersByGroupArray;
}
- (uint32_t)searchingPlayersByGroupAtIndex:(NSUInteger)index {
  return [searchingPlayersByGroupArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger searchingPlayersByGroupArrayCount = self.searchingPlayersByGroupArray.count;
  if (searchingPlayersByGroupArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.searchingPlayersByGroupArray.data;
    for (NSUInteger i = 0; i < searchingPlayersByGroupArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.searchingPlayersByGroupArray.count;
    const uint32_t *values = (const uint32_t *)self.searchingPlayersByGroupArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgMatchmakingSearchCountResponse*) parseFromData:(NSData*) data {
  return (CMsgMatchmakingSearchCountResponse*)[[[CMsgMatchmakingSearchCountResponse builder] mergeFromData:data] build];
}
+ (CMsgMatchmakingSearchCountResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgMatchmakingSearchCountResponse*)[[[CMsgMatchmakingSearchCountResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgMatchmakingSearchCountResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgMatchmakingSearchCountResponse*)[[[CMsgMatchmakingSearchCountResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgMatchmakingSearchCountResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgMatchmakingSearchCountResponse*)[[[CMsgMatchmakingSearchCountResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgMatchmakingSearchCountResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgMatchmakingSearchCountResponse*)[[[CMsgMatchmakingSearchCountResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgMatchmakingSearchCountResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgMatchmakingSearchCountResponse*)[[[CMsgMatchmakingSearchCountResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgMatchmakingSearchCountResponse_Builder*) builder {
  return [[[CMsgMatchmakingSearchCountResponse_Builder alloc] init] autorelease];
}
+ (CMsgMatchmakingSearchCountResponse_Builder*) builderWithPrototype:(CMsgMatchmakingSearchCountResponse*) prototype {
  return [[CMsgMatchmakingSearchCountResponse builder] mergeFrom:prototype];
}
- (CMsgMatchmakingSearchCountResponse_Builder*) builder {
  return [CMsgMatchmakingSearchCountResponse builder];
}
- (CMsgMatchmakingSearchCountResponse_Builder*) toBuilder {
  return [CMsgMatchmakingSearchCountResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.searchingPlayersByGroupArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchingPlayersByGroup", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgMatchmakingSearchCountResponse class]]) {
    return NO;
  }
  CMsgMatchmakingSearchCountResponse *otherMessage = other;
  return
      [self.searchingPlayersByGroupArray isEqualToArray:otherMessage.searchingPlayersByGroupArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.searchingPlayersByGroupArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgMatchmakingSearchCountResponse_Builder()
@property (retain) CMsgMatchmakingSearchCountResponse* _builderResult;
@end

@implementation CMsgMatchmakingSearchCountResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgMatchmakingSearchCountResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgMatchmakingSearchCountResponse_Builder*) clear {
  _builderResult = [[[CMsgMatchmakingSearchCountResponse alloc] init] autorelease];
  return self;
}
- (CMsgMatchmakingSearchCountResponse_Builder*) clone {
  return [CMsgMatchmakingSearchCountResponse builderWithPrototype:_builderResult];
}
- (CMsgMatchmakingSearchCountResponse*) defaultInstance {
  return [CMsgMatchmakingSearchCountResponse defaultInstance];
}
- (CMsgMatchmakingSearchCountResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgMatchmakingSearchCountResponse*) buildPartial {
  CMsgMatchmakingSearchCountResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgMatchmakingSearchCountResponse_Builder*) mergeFrom:(CMsgMatchmakingSearchCountResponse*) other {
  if (other == [CMsgMatchmakingSearchCountResponse defaultInstance]) {
    return self;
  }
  if (other.searchingPlayersByGroupArray.count > 0) {
    if (_builderResult.searchingPlayersByGroupArray == nil) {
      _builderResult.searchingPlayersByGroupArray = [[other.searchingPlayersByGroupArray copyWithZone:[other.searchingPlayersByGroupArray zone]] autorelease];
    } else {
      [_builderResult.searchingPlayersByGroupArray appendArray:other.searchingPlayersByGroupArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgMatchmakingSearchCountResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgMatchmakingSearchCountResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addSearchingPlayersByGroup:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)searchingPlayersByGroup {
  return _builderResult.searchingPlayersByGroupArray;
}
- (uint32_t)searchingPlayersByGroupAtIndex:(NSUInteger)index {
  return [_builderResult searchingPlayersByGroupAtIndex:index];
}
- (CMsgMatchmakingSearchCountResponse_Builder *)addSearchingPlayersByGroup:(uint32_t)value {
  if (_builderResult.searchingPlayersByGroupArray == nil) {
    _builderResult.searchingPlayersByGroupArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.searchingPlayersByGroupArray addUint32:value];
  return self;
}
- (CMsgMatchmakingSearchCountResponse_Builder *)setSearchingPlayersByGroupArray:(NSArray *)array {
  _builderResult.searchingPlayersByGroupArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgMatchmakingSearchCountResponse_Builder *)setSearchingPlayersByGroupValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.searchingPlayersByGroupArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgMatchmakingSearchCountResponse_Builder *)clearSearchingPlayersByGroup {
  _builderResult.searchingPlayersByGroupArray = nil;
  return self;
}
@end

@interface CSourceTVGame ()
@property uint32_t sourceTvPublicAddr;
@property uint32_t sourceTvPrivateAddr;
@property uint32_t sourceTvPort;
@property (retain) PBAppendableArray * goodPlayersArray;
@property (retain) PBAppendableArray * badPlayersArray;
@property (retain) PBAppendableArray * otherPlayersArray;
@property (retain) NSString* gameName;
@property (retain) PBAppendableArray * teamDetailsArray;
@property uint32_t numSpectators;
@property uint32_t tournamentId;
@property uint32_t tournamentGameId;
@property uint32_t towerState;
@property Float32 tvBroadcastTime;
@property Float32 gameTime;
@property uint64_t serverSteamid;
@property uint32_t leagueid;
@end

@implementation CSourceTVGame

- (BOOL) hasSourceTvPublicAddr {
  return !!hasSourceTvPublicAddr_;
}
- (void) setHasSourceTvPublicAddr:(BOOL) value_ {
  hasSourceTvPublicAddr_ = !!value_;
}
@synthesize sourceTvPublicAddr;
- (BOOL) hasSourceTvPrivateAddr {
  return !!hasSourceTvPrivateAddr_;
}
- (void) setHasSourceTvPrivateAddr:(BOOL) value_ {
  hasSourceTvPrivateAddr_ = !!value_;
}
@synthesize sourceTvPrivateAddr;
- (BOOL) hasSourceTvPort {
  return !!hasSourceTvPort_;
}
- (void) setHasSourceTvPort:(BOOL) value_ {
  hasSourceTvPort_ = !!value_;
}
@synthesize sourceTvPort;
@synthesize goodPlayersArray;
@dynamic goodPlayers;
@synthesize badPlayersArray;
@dynamic badPlayers;
@synthesize otherPlayersArray;
@dynamic otherPlayers;
- (BOOL) hasGameName {
  return !!hasGameName_;
}
- (void) setHasGameName:(BOOL) value_ {
  hasGameName_ = !!value_;
}
@synthesize gameName;
@synthesize teamDetailsArray;
@dynamic teamDetails;
- (BOOL) hasNumSpectators {
  return !!hasNumSpectators_;
}
- (void) setHasNumSpectators:(BOOL) value_ {
  hasNumSpectators_ = !!value_;
}
@synthesize numSpectators;
- (BOOL) hasTournamentId {
  return !!hasTournamentId_;
}
- (void) setHasTournamentId:(BOOL) value_ {
  hasTournamentId_ = !!value_;
}
@synthesize tournamentId;
- (BOOL) hasTournamentGameId {
  return !!hasTournamentGameId_;
}
- (void) setHasTournamentGameId:(BOOL) value_ {
  hasTournamentGameId_ = !!value_;
}
@synthesize tournamentGameId;
- (BOOL) hasTowerState {
  return !!hasTowerState_;
}
- (void) setHasTowerState:(BOOL) value_ {
  hasTowerState_ = !!value_;
}
@synthesize towerState;
- (BOOL) hasTvBroadcastTime {
  return !!hasTvBroadcastTime_;
}
- (void) setHasTvBroadcastTime:(BOOL) value_ {
  hasTvBroadcastTime_ = !!value_;
}
@synthesize tvBroadcastTime;
- (BOOL) hasGameTime {
  return !!hasGameTime_;
}
- (void) setHasGameTime:(BOOL) value_ {
  hasGameTime_ = !!value_;
}
@synthesize gameTime;
- (BOOL) hasServerSteamid {
  return !!hasServerSteamid_;
}
- (void) setHasServerSteamid:(BOOL) value_ {
  hasServerSteamid_ = !!value_;
}
@synthesize serverSteamid;
- (BOOL) hasLeagueid {
  return !!hasLeagueid_;
}
- (void) setHasLeagueid:(BOOL) value_ {
  hasLeagueid_ = !!value_;
}
@synthesize leagueid;
- (void) dealloc {
  self.goodPlayersArray = nil;
  self.badPlayersArray = nil;
  self.otherPlayersArray = nil;
  self.gameName = nil;
  self.teamDetailsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sourceTvPublicAddr = 0;
    self.sourceTvPrivateAddr = 0;
    self.sourceTvPort = 0;
    self.gameName = @"";
    self.numSpectators = 0;
    self.tournamentId = 0;
    self.tournamentGameId = 0;
    self.towerState = 0;
    self.tvBroadcastTime = 0;
    self.gameTime = 0;
    self.serverSteamid = 0L;
    self.leagueid = 0;
  }
  return self;
}
static CSourceTVGame* defaultCSourceTVGameInstance = nil;
+ (void) initialize {
  if (self == [CSourceTVGame class]) {
    defaultCSourceTVGameInstance = [[CSourceTVGame alloc] init];
  }
}
+ (CSourceTVGame*) defaultInstance {
  return defaultCSourceTVGameInstance;
}
- (CSourceTVGame*) defaultInstance {
  return defaultCSourceTVGameInstance;
}
- (PBArray *)goodPlayers {
  return goodPlayersArray;
}
- (CSourceTVGame_Player*)goodPlayersAtIndex:(NSUInteger)index {
  return [goodPlayersArray objectAtIndex:index];
}
- (PBArray *)badPlayers {
  return badPlayersArray;
}
- (CSourceTVGame_Player*)badPlayersAtIndex:(NSUInteger)index {
  return [badPlayersArray objectAtIndex:index];
}
- (PBArray *)otherPlayers {
  return otherPlayersArray;
}
- (CSourceTVGame_Player*)otherPlayersAtIndex:(NSUInteger)index {
  return [otherPlayersArray objectAtIndex:index];
}
- (PBArray *)teamDetails {
  return teamDetailsArray;
}
- (CLobbyTeamDetails*)teamDetailsAtIndex:(NSUInteger)index {
  return [teamDetailsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSourceTvPublicAddr) {
    [output writeUInt32:1 value:self.sourceTvPublicAddr];
  }
  if (self.hasSourceTvPrivateAddr) {
    [output writeUInt32:2 value:self.sourceTvPrivateAddr];
  }
  if (self.hasSourceTvPort) {
    [output writeUInt32:3 value:self.sourceTvPort];
  }
  if (self.hasGameName) {
    [output writeString:7 value:self.gameName];
  }
  for (CLobbyTeamDetails *element in self.teamDetailsArray) {
    [output writeMessage:9 value:element];
  }
  if (self.hasNumSpectators) {
    [output writeUInt32:10 value:self.numSpectators];
  }
  if (self.hasTournamentId) {
    [output writeUInt32:11 value:self.tournamentId];
  }
  if (self.hasTournamentGameId) {
    [output writeUInt32:12 value:self.tournamentGameId];
  }
  if (self.hasTowerState) {
    [output writeUInt32:13 value:self.towerState];
  }
  for (CSourceTVGame_Player *element in self.goodPlayersArray) {
    [output writeMessage:14 value:element];
  }
  for (CSourceTVGame_Player *element in self.badPlayersArray) {
    [output writeMessage:15 value:element];
  }
  for (CSourceTVGame_Player *element in self.otherPlayersArray) {
    [output writeMessage:16 value:element];
  }
  if (self.hasTvBroadcastTime) {
    [output writeFloat:17 value:self.tvBroadcastTime];
  }
  if (self.hasGameTime) {
    [output writeFloat:18 value:self.gameTime];
  }
  if (self.hasServerSteamid) {
    [output writeFixed64:19 value:self.serverSteamid];
  }
  if (self.hasLeagueid) {
    [output writeUInt32:20 value:self.leagueid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSourceTvPublicAddr) {
    size_ += computeUInt32Size(1, self.sourceTvPublicAddr);
  }
  if (self.hasSourceTvPrivateAddr) {
    size_ += computeUInt32Size(2, self.sourceTvPrivateAddr);
  }
  if (self.hasSourceTvPort) {
    size_ += computeUInt32Size(3, self.sourceTvPort);
  }
  if (self.hasGameName) {
    size_ += computeStringSize(7, self.gameName);
  }
  for (CLobbyTeamDetails *element in self.teamDetailsArray) {
    size_ += computeMessageSize(9, element);
  }
  if (self.hasNumSpectators) {
    size_ += computeUInt32Size(10, self.numSpectators);
  }
  if (self.hasTournamentId) {
    size_ += computeUInt32Size(11, self.tournamentId);
  }
  if (self.hasTournamentGameId) {
    size_ += computeUInt32Size(12, self.tournamentGameId);
  }
  if (self.hasTowerState) {
    size_ += computeUInt32Size(13, self.towerState);
  }
  for (CSourceTVGame_Player *element in self.goodPlayersArray) {
    size_ += computeMessageSize(14, element);
  }
  for (CSourceTVGame_Player *element in self.badPlayersArray) {
    size_ += computeMessageSize(15, element);
  }
  for (CSourceTVGame_Player *element in self.otherPlayersArray) {
    size_ += computeMessageSize(16, element);
  }
  if (self.hasTvBroadcastTime) {
    size_ += computeFloatSize(17, self.tvBroadcastTime);
  }
  if (self.hasGameTime) {
    size_ += computeFloatSize(18, self.gameTime);
  }
  if (self.hasServerSteamid) {
    size_ += computeFixed64Size(19, self.serverSteamid);
  }
  if (self.hasLeagueid) {
    size_ += computeUInt32Size(20, self.leagueid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSourceTVGame*) parseFromData:(NSData*) data {
  return (CSourceTVGame*)[[[CSourceTVGame builder] mergeFromData:data] build];
}
+ (CSourceTVGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSourceTVGame*)[[[CSourceTVGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSourceTVGame*) parseFromInputStream:(NSInputStream*) input {
  return (CSourceTVGame*)[[[CSourceTVGame builder] mergeFromInputStream:input] build];
}
+ (CSourceTVGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSourceTVGame*)[[[CSourceTVGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSourceTVGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSourceTVGame*)[[[CSourceTVGame builder] mergeFromCodedInputStream:input] build];
}
+ (CSourceTVGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSourceTVGame*)[[[CSourceTVGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSourceTVGame_Builder*) builder {
  return [[[CSourceTVGame_Builder alloc] init] autorelease];
}
+ (CSourceTVGame_Builder*) builderWithPrototype:(CSourceTVGame*) prototype {
  return [[CSourceTVGame builder] mergeFrom:prototype];
}
- (CSourceTVGame_Builder*) builder {
  return [CSourceTVGame builder];
}
- (CSourceTVGame_Builder*) toBuilder {
  return [CSourceTVGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSourceTvPublicAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceTvPublicAddr", [NSNumber numberWithInt:self.sourceTvPublicAddr]];
  }
  if (self.hasSourceTvPrivateAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceTvPrivateAddr", [NSNumber numberWithInt:self.sourceTvPrivateAddr]];
  }
  if (self.hasSourceTvPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceTvPort", [NSNumber numberWithInt:self.sourceTvPort]];
  }
  if (self.hasGameName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameName", self.gameName];
  }
  for (CLobbyTeamDetails* element in self.teamDetailsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"teamDetails"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNumSpectators) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numSpectators", [NSNumber numberWithInt:self.numSpectators]];
  }
  if (self.hasTournamentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentId", [NSNumber numberWithInt:self.tournamentId]];
  }
  if (self.hasTournamentGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentGameId", [NSNumber numberWithInt:self.tournamentGameId]];
  }
  if (self.hasTowerState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"towerState", [NSNumber numberWithInt:self.towerState]];
  }
  for (CSourceTVGame_Player* element in self.goodPlayersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"goodPlayers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CSourceTVGame_Player* element in self.badPlayersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"badPlayers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CSourceTVGame_Player* element in self.otherPlayersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"otherPlayers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTvBroadcastTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tvBroadcastTime", [NSNumber numberWithFloat:self.tvBroadcastTime]];
  }
  if (self.hasGameTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameTime", [NSNumber numberWithFloat:self.gameTime]];
  }
  if (self.hasServerSteamid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverSteamid", [NSNumber numberWithLongLong:self.serverSteamid]];
  }
  if (self.hasLeagueid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueid", [NSNumber numberWithInt:self.leagueid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSourceTVGame class]]) {
    return NO;
  }
  CSourceTVGame *otherMessage = other;
  return
      self.hasSourceTvPublicAddr == otherMessage.hasSourceTvPublicAddr &&
      (!self.hasSourceTvPublicAddr || self.sourceTvPublicAddr == otherMessage.sourceTvPublicAddr) &&
      self.hasSourceTvPrivateAddr == otherMessage.hasSourceTvPrivateAddr &&
      (!self.hasSourceTvPrivateAddr || self.sourceTvPrivateAddr == otherMessage.sourceTvPrivateAddr) &&
      self.hasSourceTvPort == otherMessage.hasSourceTvPort &&
      (!self.hasSourceTvPort || self.sourceTvPort == otherMessage.sourceTvPort) &&
      self.hasGameName == otherMessage.hasGameName &&
      (!self.hasGameName || [self.gameName isEqual:otherMessage.gameName]) &&
      [self.teamDetailsArray isEqualToArray:otherMessage.teamDetailsArray] &&
      self.hasNumSpectators == otherMessage.hasNumSpectators &&
      (!self.hasNumSpectators || self.numSpectators == otherMessage.numSpectators) &&
      self.hasTournamentId == otherMessage.hasTournamentId &&
      (!self.hasTournamentId || self.tournamentId == otherMessage.tournamentId) &&
      self.hasTournamentGameId == otherMessage.hasTournamentGameId &&
      (!self.hasTournamentGameId || self.tournamentGameId == otherMessage.tournamentGameId) &&
      self.hasTowerState == otherMessage.hasTowerState &&
      (!self.hasTowerState || self.towerState == otherMessage.towerState) &&
      [self.goodPlayersArray isEqualToArray:otherMessage.goodPlayersArray] &&
      [self.badPlayersArray isEqualToArray:otherMessage.badPlayersArray] &&
      [self.otherPlayersArray isEqualToArray:otherMessage.otherPlayersArray] &&
      self.hasTvBroadcastTime == otherMessage.hasTvBroadcastTime &&
      (!self.hasTvBroadcastTime || self.tvBroadcastTime == otherMessage.tvBroadcastTime) &&
      self.hasGameTime == otherMessage.hasGameTime &&
      (!self.hasGameTime || self.gameTime == otherMessage.gameTime) &&
      self.hasServerSteamid == otherMessage.hasServerSteamid &&
      (!self.hasServerSteamid || self.serverSteamid == otherMessage.serverSteamid) &&
      self.hasLeagueid == otherMessage.hasLeagueid &&
      (!self.hasLeagueid || self.leagueid == otherMessage.leagueid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSourceTvPublicAddr) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceTvPublicAddr] hash];
  }
  if (self.hasSourceTvPrivateAddr) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceTvPrivateAddr] hash];
  }
  if (self.hasSourceTvPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceTvPort] hash];
  }
  if (self.hasGameName) {
    hashCode = hashCode * 31 + [self.gameName hash];
  }
  for (CLobbyTeamDetails* element in self.teamDetailsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasNumSpectators) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numSpectators] hash];
  }
  if (self.hasTournamentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentId] hash];
  }
  if (self.hasTournamentGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentGameId] hash];
  }
  if (self.hasTowerState) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.towerState] hash];
  }
  for (CSourceTVGame_Player* element in self.goodPlayersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CSourceTVGame_Player* element in self.badPlayersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CSourceTVGame_Player* element in self.otherPlayersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasTvBroadcastTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.tvBroadcastTime] hash];
  }
  if (self.hasGameTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.gameTime] hash];
  }
  if (self.hasServerSteamid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.serverSteamid] hash];
  }
  if (self.hasLeagueid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leagueid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSourceTVGame_Player ()
@property uint64_t steamId;
@property (retain) NSString* name;
@property uint32_t heroId;
@end

@implementation CSourceTVGame_Player

- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.steamId = 0L;
    self.name = @"";
    self.heroId = 0;
  }
  return self;
}
static CSourceTVGame_Player* defaultCSourceTVGame_PlayerInstance = nil;
+ (void) initialize {
  if (self == [CSourceTVGame_Player class]) {
    defaultCSourceTVGame_PlayerInstance = [[CSourceTVGame_Player alloc] init];
  }
}
+ (CSourceTVGame_Player*) defaultInstance {
  return defaultCSourceTVGame_PlayerInstance;
}
- (CSourceTVGame_Player*) defaultInstance {
  return defaultCSourceTVGame_PlayerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSteamId) {
    [output writeFixed64:1 value:self.steamId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasHeroId) {
    [output writeUInt32:3 value:self.heroId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSteamId) {
    size_ += computeFixed64Size(1, self.steamId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(3, self.heroId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSourceTVGame_Player*) parseFromData:(NSData*) data {
  return (CSourceTVGame_Player*)[[[CSourceTVGame_Player builder] mergeFromData:data] build];
}
+ (CSourceTVGame_Player*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSourceTVGame_Player*)[[[CSourceTVGame_Player builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSourceTVGame_Player*) parseFromInputStream:(NSInputStream*) input {
  return (CSourceTVGame_Player*)[[[CSourceTVGame_Player builder] mergeFromInputStream:input] build];
}
+ (CSourceTVGame_Player*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSourceTVGame_Player*)[[[CSourceTVGame_Player builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSourceTVGame_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSourceTVGame_Player*)[[[CSourceTVGame_Player builder] mergeFromCodedInputStream:input] build];
}
+ (CSourceTVGame_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSourceTVGame_Player*)[[[CSourceTVGame_Player builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSourceTVGame_Player_Builder*) builder {
  return [[[CSourceTVGame_Player_Builder alloc] init] autorelease];
}
+ (CSourceTVGame_Player_Builder*) builderWithPrototype:(CSourceTVGame_Player*) prototype {
  return [[CSourceTVGame_Player builder] mergeFrom:prototype];
}
- (CSourceTVGame_Player_Builder*) builder {
  return [CSourceTVGame_Player builder];
}
- (CSourceTVGame_Player_Builder*) toBuilder {
  return [CSourceTVGame_Player builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSourceTVGame_Player class]]) {
    return NO;
  }
  CSourceTVGame_Player *otherMessage = other;
  return
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSourceTVGame_Player_Builder()
@property (retain) CSourceTVGame_Player* _builderResult;
@end

@implementation CSourceTVGame_Player_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSourceTVGame_Player alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSourceTVGame_Player_Builder*) clear {
  _builderResult = [[[CSourceTVGame_Player alloc] init] autorelease];
  return self;
}
- (CSourceTVGame_Player_Builder*) clone {
  return [CSourceTVGame_Player builderWithPrototype:_builderResult];
}
- (CSourceTVGame_Player*) defaultInstance {
  return [CSourceTVGame_Player defaultInstance];
}
- (CSourceTVGame_Player*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSourceTVGame_Player*) buildPartial {
  CSourceTVGame_Player* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSourceTVGame_Player_Builder*) mergeFrom:(CSourceTVGame_Player*) other {
  if (other == [CSourceTVGame_Player defaultInstance]) {
    return self;
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSourceTVGame_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSourceTVGame_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSteamId:[input readFixed64]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setHeroId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CSourceTVGame_Player_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CSourceTVGame_Player_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
- (BOOL) hasName {
  return _builderResult.hasName;
}
- (NSString*) name {
  return _builderResult.name;
}
- (CSourceTVGame_Player_Builder*) setName:(NSString*) value {
  _builderResult.hasName = YES;
  _builderResult.name = value;
  return self;
}
- (CSourceTVGame_Player_Builder*) clearName {
  _builderResult.hasName = NO;
  _builderResult.name = @"";
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CSourceTVGame_Player_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CSourceTVGame_Player_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
@end

@interface CSourceTVGame_Builder()
@property (retain) CSourceTVGame* _builderResult;
@end

@implementation CSourceTVGame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSourceTVGame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSourceTVGame_Builder*) clear {
  _builderResult = [[[CSourceTVGame alloc] init] autorelease];
  return self;
}
- (CSourceTVGame_Builder*) clone {
  return [CSourceTVGame builderWithPrototype:_builderResult];
}
- (CSourceTVGame*) defaultInstance {
  return [CSourceTVGame defaultInstance];
}
- (CSourceTVGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSourceTVGame*) buildPartial {
  CSourceTVGame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSourceTVGame_Builder*) mergeFrom:(CSourceTVGame*) other {
  if (other == [CSourceTVGame defaultInstance]) {
    return self;
  }
  if (other.hasSourceTvPublicAddr) {
    [self setSourceTvPublicAddr:other.sourceTvPublicAddr];
  }
  if (other.hasSourceTvPrivateAddr) {
    [self setSourceTvPrivateAddr:other.sourceTvPrivateAddr];
  }
  if (other.hasSourceTvPort) {
    [self setSourceTvPort:other.sourceTvPort];
  }
  if (other.goodPlayersArray.count > 0) {
    if (_builderResult.goodPlayersArray == nil) {
      _builderResult.goodPlayersArray = [[other.goodPlayersArray copyWithZone:[other.goodPlayersArray zone]] autorelease];
    } else {
      [_builderResult.goodPlayersArray appendArray:other.goodPlayersArray];
    }
  }
  if (other.badPlayersArray.count > 0) {
    if (_builderResult.badPlayersArray == nil) {
      _builderResult.badPlayersArray = [[other.badPlayersArray copyWithZone:[other.badPlayersArray zone]] autorelease];
    } else {
      [_builderResult.badPlayersArray appendArray:other.badPlayersArray];
    }
  }
  if (other.otherPlayersArray.count > 0) {
    if (_builderResult.otherPlayersArray == nil) {
      _builderResult.otherPlayersArray = [[other.otherPlayersArray copyWithZone:[other.otherPlayersArray zone]] autorelease];
    } else {
      [_builderResult.otherPlayersArray appendArray:other.otherPlayersArray];
    }
  }
  if (other.hasGameName) {
    [self setGameName:other.gameName];
  }
  if (other.teamDetailsArray.count > 0) {
    if (_builderResult.teamDetailsArray == nil) {
      _builderResult.teamDetailsArray = [[other.teamDetailsArray copyWithZone:[other.teamDetailsArray zone]] autorelease];
    } else {
      [_builderResult.teamDetailsArray appendArray:other.teamDetailsArray];
    }
  }
  if (other.hasNumSpectators) {
    [self setNumSpectators:other.numSpectators];
  }
  if (other.hasTournamentId) {
    [self setTournamentId:other.tournamentId];
  }
  if (other.hasTournamentGameId) {
    [self setTournamentGameId:other.tournamentGameId];
  }
  if (other.hasTowerState) {
    [self setTowerState:other.towerState];
  }
  if (other.hasTvBroadcastTime) {
    [self setTvBroadcastTime:other.tvBroadcastTime];
  }
  if (other.hasGameTime) {
    [self setGameTime:other.gameTime];
  }
  if (other.hasServerSteamid) {
    [self setServerSteamid:other.serverSteamid];
  }
  if (other.hasLeagueid) {
    [self setLeagueid:other.leagueid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSourceTVGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSourceTVGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSourceTvPublicAddr:[input readUInt32]];
        break;
      }
      case 16: {
        [self setSourceTvPrivateAddr:[input readUInt32]];
        break;
      }
      case 24: {
        [self setSourceTvPort:[input readUInt32]];
        break;
      }
      case 58: {
        [self setGameName:[input readString]];
        break;
      }
      case 74: {
        CLobbyTeamDetails_Builder* subBuilder = [CLobbyTeamDetails builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeamDetails:[subBuilder buildPartial]];
        break;
      }
      case 80: {
        [self setNumSpectators:[input readUInt32]];
        break;
      }
      case 88: {
        [self setTournamentId:[input readUInt32]];
        break;
      }
      case 96: {
        [self setTournamentGameId:[input readUInt32]];
        break;
      }
      case 104: {
        [self setTowerState:[input readUInt32]];
        break;
      }
      case 114: {
        CSourceTVGame_Player_Builder* subBuilder = [CSourceTVGame_Player builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGoodPlayers:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        CSourceTVGame_Player_Builder* subBuilder = [CSourceTVGame_Player builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBadPlayers:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        CSourceTVGame_Player_Builder* subBuilder = [CSourceTVGame_Player builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOtherPlayers:[subBuilder buildPartial]];
        break;
      }
      case 141: {
        [self setTvBroadcastTime:[input readFloat]];
        break;
      }
      case 149: {
        [self setGameTime:[input readFloat]];
        break;
      }
      case 153: {
        [self setServerSteamid:[input readFixed64]];
        break;
      }
      case 160: {
        [self setLeagueid:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSourceTvPublicAddr {
  return _builderResult.hasSourceTvPublicAddr;
}
- (uint32_t) sourceTvPublicAddr {
  return _builderResult.sourceTvPublicAddr;
}
- (CSourceTVGame_Builder*) setSourceTvPublicAddr:(uint32_t) value {
  _builderResult.hasSourceTvPublicAddr = YES;
  _builderResult.sourceTvPublicAddr = value;
  return self;
}
- (CSourceTVGame_Builder*) clearSourceTvPublicAddr {
  _builderResult.hasSourceTvPublicAddr = NO;
  _builderResult.sourceTvPublicAddr = 0;
  return self;
}
- (BOOL) hasSourceTvPrivateAddr {
  return _builderResult.hasSourceTvPrivateAddr;
}
- (uint32_t) sourceTvPrivateAddr {
  return _builderResult.sourceTvPrivateAddr;
}
- (CSourceTVGame_Builder*) setSourceTvPrivateAddr:(uint32_t) value {
  _builderResult.hasSourceTvPrivateAddr = YES;
  _builderResult.sourceTvPrivateAddr = value;
  return self;
}
- (CSourceTVGame_Builder*) clearSourceTvPrivateAddr {
  _builderResult.hasSourceTvPrivateAddr = NO;
  _builderResult.sourceTvPrivateAddr = 0;
  return self;
}
- (BOOL) hasSourceTvPort {
  return _builderResult.hasSourceTvPort;
}
- (uint32_t) sourceTvPort {
  return _builderResult.sourceTvPort;
}
- (CSourceTVGame_Builder*) setSourceTvPort:(uint32_t) value {
  _builderResult.hasSourceTvPort = YES;
  _builderResult.sourceTvPort = value;
  return self;
}
- (CSourceTVGame_Builder*) clearSourceTvPort {
  _builderResult.hasSourceTvPort = NO;
  _builderResult.sourceTvPort = 0;
  return self;
}
- (PBAppendableArray *)goodPlayers {
  return _builderResult.goodPlayersArray;
}
- (CSourceTVGame_Player*)goodPlayersAtIndex:(NSUInteger)index {
  return [_builderResult goodPlayersAtIndex:index];
}
- (CSourceTVGame_Builder *)addGoodPlayers:(CSourceTVGame_Player*)value {
  if (_builderResult.goodPlayersArray == nil) {
    _builderResult.goodPlayersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.goodPlayersArray addObject:value];
  return self;
}
- (CSourceTVGame_Builder *)setGoodPlayersArray:(NSArray *)array {
  _builderResult.goodPlayersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSourceTVGame_Builder *)setGoodPlayersValues:(const CSourceTVGame_Player* *)values count:(NSUInteger)count {
  _builderResult.goodPlayersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSourceTVGame_Builder *)clearGoodPlayers {
  _builderResult.goodPlayersArray = nil;
  return self;
}
- (PBAppendableArray *)badPlayers {
  return _builderResult.badPlayersArray;
}
- (CSourceTVGame_Player*)badPlayersAtIndex:(NSUInteger)index {
  return [_builderResult badPlayersAtIndex:index];
}
- (CSourceTVGame_Builder *)addBadPlayers:(CSourceTVGame_Player*)value {
  if (_builderResult.badPlayersArray == nil) {
    _builderResult.badPlayersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.badPlayersArray addObject:value];
  return self;
}
- (CSourceTVGame_Builder *)setBadPlayersArray:(NSArray *)array {
  _builderResult.badPlayersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSourceTVGame_Builder *)setBadPlayersValues:(const CSourceTVGame_Player* *)values count:(NSUInteger)count {
  _builderResult.badPlayersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSourceTVGame_Builder *)clearBadPlayers {
  _builderResult.badPlayersArray = nil;
  return self;
}
- (PBAppendableArray *)otherPlayers {
  return _builderResult.otherPlayersArray;
}
- (CSourceTVGame_Player*)otherPlayersAtIndex:(NSUInteger)index {
  return [_builderResult otherPlayersAtIndex:index];
}
- (CSourceTVGame_Builder *)addOtherPlayers:(CSourceTVGame_Player*)value {
  if (_builderResult.otherPlayersArray == nil) {
    _builderResult.otherPlayersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.otherPlayersArray addObject:value];
  return self;
}
- (CSourceTVGame_Builder *)setOtherPlayersArray:(NSArray *)array {
  _builderResult.otherPlayersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSourceTVGame_Builder *)setOtherPlayersValues:(const CSourceTVGame_Player* *)values count:(NSUInteger)count {
  _builderResult.otherPlayersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSourceTVGame_Builder *)clearOtherPlayers {
  _builderResult.otherPlayersArray = nil;
  return self;
}
- (BOOL) hasGameName {
  return _builderResult.hasGameName;
}
- (NSString*) gameName {
  return _builderResult.gameName;
}
- (CSourceTVGame_Builder*) setGameName:(NSString*) value {
  _builderResult.hasGameName = YES;
  _builderResult.gameName = value;
  return self;
}
- (CSourceTVGame_Builder*) clearGameName {
  _builderResult.hasGameName = NO;
  _builderResult.gameName = @"";
  return self;
}
- (PBAppendableArray *)teamDetails {
  return _builderResult.teamDetailsArray;
}
- (CLobbyTeamDetails*)teamDetailsAtIndex:(NSUInteger)index {
  return [_builderResult teamDetailsAtIndex:index];
}
- (CSourceTVGame_Builder *)addTeamDetails:(CLobbyTeamDetails*)value {
  if (_builderResult.teamDetailsArray == nil) {
    _builderResult.teamDetailsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.teamDetailsArray addObject:value];
  return self;
}
- (CSourceTVGame_Builder *)setTeamDetailsArray:(NSArray *)array {
  _builderResult.teamDetailsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CSourceTVGame_Builder *)setTeamDetailsValues:(const CLobbyTeamDetails* *)values count:(NSUInteger)count {
  _builderResult.teamDetailsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CSourceTVGame_Builder *)clearTeamDetails {
  _builderResult.teamDetailsArray = nil;
  return self;
}
- (BOOL) hasNumSpectators {
  return _builderResult.hasNumSpectators;
}
- (uint32_t) numSpectators {
  return _builderResult.numSpectators;
}
- (CSourceTVGame_Builder*) setNumSpectators:(uint32_t) value {
  _builderResult.hasNumSpectators = YES;
  _builderResult.numSpectators = value;
  return self;
}
- (CSourceTVGame_Builder*) clearNumSpectators {
  _builderResult.hasNumSpectators = NO;
  _builderResult.numSpectators = 0;
  return self;
}
- (BOOL) hasTournamentId {
  return _builderResult.hasTournamentId;
}
- (uint32_t) tournamentId {
  return _builderResult.tournamentId;
}
- (CSourceTVGame_Builder*) setTournamentId:(uint32_t) value {
  _builderResult.hasTournamentId = YES;
  _builderResult.tournamentId = value;
  return self;
}
- (CSourceTVGame_Builder*) clearTournamentId {
  _builderResult.hasTournamentId = NO;
  _builderResult.tournamentId = 0;
  return self;
}
- (BOOL) hasTournamentGameId {
  return _builderResult.hasTournamentGameId;
}
- (uint32_t) tournamentGameId {
  return _builderResult.tournamentGameId;
}
- (CSourceTVGame_Builder*) setTournamentGameId:(uint32_t) value {
  _builderResult.hasTournamentGameId = YES;
  _builderResult.tournamentGameId = value;
  return self;
}
- (CSourceTVGame_Builder*) clearTournamentGameId {
  _builderResult.hasTournamentGameId = NO;
  _builderResult.tournamentGameId = 0;
  return self;
}
- (BOOL) hasTowerState {
  return _builderResult.hasTowerState;
}
- (uint32_t) towerState {
  return _builderResult.towerState;
}
- (CSourceTVGame_Builder*) setTowerState:(uint32_t) value {
  _builderResult.hasTowerState = YES;
  _builderResult.towerState = value;
  return self;
}
- (CSourceTVGame_Builder*) clearTowerState {
  _builderResult.hasTowerState = NO;
  _builderResult.towerState = 0;
  return self;
}
- (BOOL) hasTvBroadcastTime {
  return _builderResult.hasTvBroadcastTime;
}
- (Float32) tvBroadcastTime {
  return _builderResult.tvBroadcastTime;
}
- (CSourceTVGame_Builder*) setTvBroadcastTime:(Float32) value {
  _builderResult.hasTvBroadcastTime = YES;
  _builderResult.tvBroadcastTime = value;
  return self;
}
- (CSourceTVGame_Builder*) clearTvBroadcastTime {
  _builderResult.hasTvBroadcastTime = NO;
  _builderResult.tvBroadcastTime = 0;
  return self;
}
- (BOOL) hasGameTime {
  return _builderResult.hasGameTime;
}
- (Float32) gameTime {
  return _builderResult.gameTime;
}
- (CSourceTVGame_Builder*) setGameTime:(Float32) value {
  _builderResult.hasGameTime = YES;
  _builderResult.gameTime = value;
  return self;
}
- (CSourceTVGame_Builder*) clearGameTime {
  _builderResult.hasGameTime = NO;
  _builderResult.gameTime = 0;
  return self;
}
- (BOOL) hasServerSteamid {
  return _builderResult.hasServerSteamid;
}
- (uint64_t) serverSteamid {
  return _builderResult.serverSteamid;
}
- (CSourceTVGame_Builder*) setServerSteamid:(uint64_t) value {
  _builderResult.hasServerSteamid = YES;
  _builderResult.serverSteamid = value;
  return self;
}
- (CSourceTVGame_Builder*) clearServerSteamid {
  _builderResult.hasServerSteamid = NO;
  _builderResult.serverSteamid = 0L;
  return self;
}
- (BOOL) hasLeagueid {
  return _builderResult.hasLeagueid;
}
- (uint32_t) leagueid {
  return _builderResult.leagueid;
}
- (CSourceTVGame_Builder*) setLeagueid:(uint32_t) value {
  _builderResult.hasLeagueid = YES;
  _builderResult.leagueid = value;
  return self;
}
- (CSourceTVGame_Builder*) clearLeagueid {
  _builderResult.hasLeagueid = NO;
  _builderResult.leagueid = 0;
  return self;
}
@end

@interface CMsgSourceTVGamesResponse ()
@property (retain) PBAppendableArray * gamesArray;
@property uint32_t numTotalGames;
@end

@implementation CMsgSourceTVGamesResponse

@synthesize gamesArray;
@dynamic games;
- (BOOL) hasNumTotalGames {
  return !!hasNumTotalGames_;
}
- (void) setHasNumTotalGames:(BOOL) value_ {
  hasNumTotalGames_ = !!value_;
}
@synthesize numTotalGames;
- (void) dealloc {
  self.gamesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.numTotalGames = 0;
  }
  return self;
}
static CMsgSourceTVGamesResponse* defaultCMsgSourceTVGamesResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgSourceTVGamesResponse class]) {
    defaultCMsgSourceTVGamesResponseInstance = [[CMsgSourceTVGamesResponse alloc] init];
  }
}
+ (CMsgSourceTVGamesResponse*) defaultInstance {
  return defaultCMsgSourceTVGamesResponseInstance;
}
- (CMsgSourceTVGamesResponse*) defaultInstance {
  return defaultCMsgSourceTVGamesResponseInstance;
}
- (PBArray *)games {
  return gamesArray;
}
- (CSourceTVGame*)gamesAtIndex:(NSUInteger)index {
  return [gamesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CSourceTVGame *element in self.gamesArray) {
    [output writeMessage:1 value:element];
  }
  if (self.hasNumTotalGames) {
    [output writeUInt32:2 value:self.numTotalGames];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CSourceTVGame *element in self.gamesArray) {
    size_ += computeMessageSize(1, element);
  }
  if (self.hasNumTotalGames) {
    size_ += computeUInt32Size(2, self.numTotalGames);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgSourceTVGamesResponse*) parseFromData:(NSData*) data {
  return (CMsgSourceTVGamesResponse*)[[[CMsgSourceTVGamesResponse builder] mergeFromData:data] build];
}
+ (CMsgSourceTVGamesResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSourceTVGamesResponse*)[[[CMsgSourceTVGamesResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgSourceTVGamesResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgSourceTVGamesResponse*)[[[CMsgSourceTVGamesResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgSourceTVGamesResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSourceTVGamesResponse*)[[[CMsgSourceTVGamesResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSourceTVGamesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgSourceTVGamesResponse*)[[[CMsgSourceTVGamesResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgSourceTVGamesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSourceTVGamesResponse*)[[[CMsgSourceTVGamesResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSourceTVGamesResponse_Builder*) builder {
  return [[[CMsgSourceTVGamesResponse_Builder alloc] init] autorelease];
}
+ (CMsgSourceTVGamesResponse_Builder*) builderWithPrototype:(CMsgSourceTVGamesResponse*) prototype {
  return [[CMsgSourceTVGamesResponse builder] mergeFrom:prototype];
}
- (CMsgSourceTVGamesResponse_Builder*) builder {
  return [CMsgSourceTVGamesResponse builder];
}
- (CMsgSourceTVGamesResponse_Builder*) toBuilder {
  return [CMsgSourceTVGamesResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CSourceTVGame* element in self.gamesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"games"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNumTotalGames) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numTotalGames", [NSNumber numberWithInt:self.numTotalGames]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgSourceTVGamesResponse class]]) {
    return NO;
  }
  CMsgSourceTVGamesResponse *otherMessage = other;
  return
      [self.gamesArray isEqualToArray:otherMessage.gamesArray] &&
      self.hasNumTotalGames == otherMessage.hasNumTotalGames &&
      (!self.hasNumTotalGames || self.numTotalGames == otherMessage.numTotalGames) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CSourceTVGame* element in self.gamesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasNumTotalGames) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numTotalGames] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgSourceTVGamesResponse_Builder()
@property (retain) CMsgSourceTVGamesResponse* _builderResult;
@end

@implementation CMsgSourceTVGamesResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgSourceTVGamesResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgSourceTVGamesResponse_Builder*) clear {
  _builderResult = [[[CMsgSourceTVGamesResponse alloc] init] autorelease];
  return self;
}
- (CMsgSourceTVGamesResponse_Builder*) clone {
  return [CMsgSourceTVGamesResponse builderWithPrototype:_builderResult];
}
- (CMsgSourceTVGamesResponse*) defaultInstance {
  return [CMsgSourceTVGamesResponse defaultInstance];
}
- (CMsgSourceTVGamesResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgSourceTVGamesResponse*) buildPartial {
  CMsgSourceTVGamesResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgSourceTVGamesResponse_Builder*) mergeFrom:(CMsgSourceTVGamesResponse*) other {
  if (other == [CMsgSourceTVGamesResponse defaultInstance]) {
    return self;
  }
  if (other.gamesArray.count > 0) {
    if (_builderResult.gamesArray == nil) {
      _builderResult.gamesArray = [[other.gamesArray copyWithZone:[other.gamesArray zone]] autorelease];
    } else {
      [_builderResult.gamesArray appendArray:other.gamesArray];
    }
  }
  if (other.hasNumTotalGames) {
    [self setNumTotalGames:other.numTotalGames];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgSourceTVGamesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgSourceTVGamesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CSourceTVGame_Builder* subBuilder = [CSourceTVGame builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGames:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setNumTotalGames:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)games {
  return _builderResult.gamesArray;
}
- (CSourceTVGame*)gamesAtIndex:(NSUInteger)index {
  return [_builderResult gamesAtIndex:index];
}
- (CMsgSourceTVGamesResponse_Builder *)addGames:(CSourceTVGame*)value {
  if (_builderResult.gamesArray == nil) {
    _builderResult.gamesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.gamesArray addObject:value];
  return self;
}
- (CMsgSourceTVGamesResponse_Builder *)setGamesArray:(NSArray *)array {
  _builderResult.gamesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgSourceTVGamesResponse_Builder *)setGamesValues:(const CSourceTVGame* *)values count:(NSUInteger)count {
  _builderResult.gamesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgSourceTVGamesResponse_Builder *)clearGames {
  _builderResult.gamesArray = nil;
  return self;
}
- (BOOL) hasNumTotalGames {
  return _builderResult.hasNumTotalGames;
}
- (uint32_t) numTotalGames {
  return _builderResult.numTotalGames;
}
- (CMsgSourceTVGamesResponse_Builder*) setNumTotalGames:(uint32_t) value {
  _builderResult.hasNumTotalGames = YES;
  _builderResult.numTotalGames = value;
  return self;
}
- (CMsgSourceTVGamesResponse_Builder*) clearNumTotalGames {
  _builderResult.hasNumTotalGames = NO;
  _builderResult.numTotalGames = 0;
  return self;
}
@end

@interface CMsgFindSourceTVGames ()
@property (retain) NSString* searchKey;
@property uint32_t start;
@property uint32_t numGames;
@property uint32_t leagueid;
@property uint32_t heroid;
@property BOOL diretide;
@property BOOL xmas;
@end

@implementation CMsgFindSourceTVGames

- (BOOL) hasSearchKey {
  return !!hasSearchKey_;
}
- (void) setHasSearchKey:(BOOL) value_ {
  hasSearchKey_ = !!value_;
}
@synthesize searchKey;
- (BOOL) hasStart {
  return !!hasStart_;
}
- (void) setHasStart:(BOOL) value_ {
  hasStart_ = !!value_;
}
@synthesize start;
- (BOOL) hasNumGames {
  return !!hasNumGames_;
}
- (void) setHasNumGames:(BOOL) value_ {
  hasNumGames_ = !!value_;
}
@synthesize numGames;
- (BOOL) hasLeagueid {
  return !!hasLeagueid_;
}
- (void) setHasLeagueid:(BOOL) value_ {
  hasLeagueid_ = !!value_;
}
@synthesize leagueid;
- (BOOL) hasHeroid {
  return !!hasHeroid_;
}
- (void) setHasHeroid:(BOOL) value_ {
  hasHeroid_ = !!value_;
}
@synthesize heroid;
- (BOOL) hasDiretide {
  return !!hasDiretide_;
}
- (void) setHasDiretide:(BOOL) value_ {
  hasDiretide_ = !!value_;
}
- (BOOL) diretide {
  return !!diretide_;
}
- (void) setDiretide:(BOOL) value_ {
  diretide_ = !!value_;
}
- (BOOL) hasXmas {
  return !!hasXmas_;
}
- (void) setHasXmas:(BOOL) value_ {
  hasXmas_ = !!value_;
}
- (BOOL) xmas {
  return !!xmas_;
}
- (void) setXmas:(BOOL) value_ {
  xmas_ = !!value_;
}
- (void) dealloc {
  self.searchKey = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.searchKey = @"";
    self.start = 0;
    self.numGames = 0;
    self.leagueid = 0;
    self.heroid = 0;
    self.diretide = NO;
    self.xmas = NO;
  }
  return self;
}
static CMsgFindSourceTVGames* defaultCMsgFindSourceTVGamesInstance = nil;
+ (void) initialize {
  if (self == [CMsgFindSourceTVGames class]) {
    defaultCMsgFindSourceTVGamesInstance = [[CMsgFindSourceTVGames alloc] init];
  }
}
+ (CMsgFindSourceTVGames*) defaultInstance {
  return defaultCMsgFindSourceTVGamesInstance;
}
- (CMsgFindSourceTVGames*) defaultInstance {
  return defaultCMsgFindSourceTVGamesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSearchKey) {
    [output writeString:1 value:self.searchKey];
  }
  if (self.hasStart) {
    [output writeUInt32:2 value:self.start];
  }
  if (self.hasNumGames) {
    [output writeUInt32:3 value:self.numGames];
  }
  if (self.hasLeagueid) {
    [output writeUInt32:4 value:self.leagueid];
  }
  if (self.hasHeroid) {
    [output writeUInt32:5 value:self.heroid];
  }
  if (self.hasDiretide) {
    [output writeBool:6 value:self.diretide];
  }
  if (self.hasXmas) {
    [output writeBool:7 value:self.xmas];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSearchKey) {
    size_ += computeStringSize(1, self.searchKey);
  }
  if (self.hasStart) {
    size_ += computeUInt32Size(2, self.start);
  }
  if (self.hasNumGames) {
    size_ += computeUInt32Size(3, self.numGames);
  }
  if (self.hasLeagueid) {
    size_ += computeUInt32Size(4, self.leagueid);
  }
  if (self.hasHeroid) {
    size_ += computeUInt32Size(5, self.heroid);
  }
  if (self.hasDiretide) {
    size_ += computeBoolSize(6, self.diretide);
  }
  if (self.hasXmas) {
    size_ += computeBoolSize(7, self.xmas);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgFindSourceTVGames*) parseFromData:(NSData*) data {
  return (CMsgFindSourceTVGames*)[[[CMsgFindSourceTVGames builder] mergeFromData:data] build];
}
+ (CMsgFindSourceTVGames*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgFindSourceTVGames*)[[[CMsgFindSourceTVGames builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgFindSourceTVGames*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgFindSourceTVGames*)[[[CMsgFindSourceTVGames builder] mergeFromInputStream:input] build];
}
+ (CMsgFindSourceTVGames*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgFindSourceTVGames*)[[[CMsgFindSourceTVGames builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgFindSourceTVGames*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgFindSourceTVGames*)[[[CMsgFindSourceTVGames builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgFindSourceTVGames*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgFindSourceTVGames*)[[[CMsgFindSourceTVGames builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgFindSourceTVGames_Builder*) builder {
  return [[[CMsgFindSourceTVGames_Builder alloc] init] autorelease];
}
+ (CMsgFindSourceTVGames_Builder*) builderWithPrototype:(CMsgFindSourceTVGames*) prototype {
  return [[CMsgFindSourceTVGames builder] mergeFrom:prototype];
}
- (CMsgFindSourceTVGames_Builder*) builder {
  return [CMsgFindSourceTVGames builder];
}
- (CMsgFindSourceTVGames_Builder*) toBuilder {
  return [CMsgFindSourceTVGames builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSearchKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchKey", self.searchKey];
  }
  if (self.hasStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"start", [NSNumber numberWithInt:self.start]];
  }
  if (self.hasNumGames) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numGames", [NSNumber numberWithInt:self.numGames]];
  }
  if (self.hasLeagueid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueid", [NSNumber numberWithInt:self.leagueid]];
  }
  if (self.hasHeroid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroid", [NSNumber numberWithInt:self.heroid]];
  }
  if (self.hasDiretide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"diretide", [NSNumber numberWithBool:self.diretide]];
  }
  if (self.hasXmas) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xmas", [NSNumber numberWithBool:self.xmas]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgFindSourceTVGames class]]) {
    return NO;
  }
  CMsgFindSourceTVGames *otherMessage = other;
  return
      self.hasSearchKey == otherMessage.hasSearchKey &&
      (!self.hasSearchKey || [self.searchKey isEqual:otherMessage.searchKey]) &&
      self.hasStart == otherMessage.hasStart &&
      (!self.hasStart || self.start == otherMessage.start) &&
      self.hasNumGames == otherMessage.hasNumGames &&
      (!self.hasNumGames || self.numGames == otherMessage.numGames) &&
      self.hasLeagueid == otherMessage.hasLeagueid &&
      (!self.hasLeagueid || self.leagueid == otherMessage.leagueid) &&
      self.hasHeroid == otherMessage.hasHeroid &&
      (!self.hasHeroid || self.heroid == otherMessage.heroid) &&
      self.hasDiretide == otherMessage.hasDiretide &&
      (!self.hasDiretide || self.diretide == otherMessage.diretide) &&
      self.hasXmas == otherMessage.hasXmas &&
      (!self.hasXmas || self.xmas == otherMessage.xmas) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSearchKey) {
    hashCode = hashCode * 31 + [self.searchKey hash];
  }
  if (self.hasStart) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.start] hash];
  }
  if (self.hasNumGames) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numGames] hash];
  }
  if (self.hasLeagueid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leagueid] hash];
  }
  if (self.hasHeroid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroid] hash];
  }
  if (self.hasDiretide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.diretide] hash];
  }
  if (self.hasXmas) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.xmas] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgFindSourceTVGames_Builder()
@property (retain) CMsgFindSourceTVGames* _builderResult;
@end

@implementation CMsgFindSourceTVGames_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgFindSourceTVGames alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgFindSourceTVGames_Builder*) clear {
  _builderResult = [[[CMsgFindSourceTVGames alloc] init] autorelease];
  return self;
}
- (CMsgFindSourceTVGames_Builder*) clone {
  return [CMsgFindSourceTVGames builderWithPrototype:_builderResult];
}
- (CMsgFindSourceTVGames*) defaultInstance {
  return [CMsgFindSourceTVGames defaultInstance];
}
- (CMsgFindSourceTVGames*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgFindSourceTVGames*) buildPartial {
  CMsgFindSourceTVGames* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgFindSourceTVGames_Builder*) mergeFrom:(CMsgFindSourceTVGames*) other {
  if (other == [CMsgFindSourceTVGames defaultInstance]) {
    return self;
  }
  if (other.hasSearchKey) {
    [self setSearchKey:other.searchKey];
  }
  if (other.hasStart) {
    [self setStart:other.start];
  }
  if (other.hasNumGames) {
    [self setNumGames:other.numGames];
  }
  if (other.hasLeagueid) {
    [self setLeagueid:other.leagueid];
  }
  if (other.hasHeroid) {
    [self setHeroid:other.heroid];
  }
  if (other.hasDiretide) {
    [self setDiretide:other.diretide];
  }
  if (other.hasXmas) {
    [self setXmas:other.xmas];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgFindSourceTVGames_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgFindSourceTVGames_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSearchKey:[input readString]];
        break;
      }
      case 16: {
        [self setStart:[input readUInt32]];
        break;
      }
      case 24: {
        [self setNumGames:[input readUInt32]];
        break;
      }
      case 32: {
        [self setLeagueid:[input readUInt32]];
        break;
      }
      case 40: {
        [self setHeroid:[input readUInt32]];
        break;
      }
      case 48: {
        [self setDiretide:[input readBool]];
        break;
      }
      case 56: {
        [self setXmas:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSearchKey {
  return _builderResult.hasSearchKey;
}
- (NSString*) searchKey {
  return _builderResult.searchKey;
}
- (CMsgFindSourceTVGames_Builder*) setSearchKey:(NSString*) value {
  _builderResult.hasSearchKey = YES;
  _builderResult.searchKey = value;
  return self;
}
- (CMsgFindSourceTVGames_Builder*) clearSearchKey {
  _builderResult.hasSearchKey = NO;
  _builderResult.searchKey = @"";
  return self;
}
- (BOOL) hasStart {
  return _builderResult.hasStart;
}
- (uint32_t) start {
  return _builderResult.start;
}
- (CMsgFindSourceTVGames_Builder*) setStart:(uint32_t) value {
  _builderResult.hasStart = YES;
  _builderResult.start = value;
  return self;
}
- (CMsgFindSourceTVGames_Builder*) clearStart {
  _builderResult.hasStart = NO;
  _builderResult.start = 0;
  return self;
}
- (BOOL) hasNumGames {
  return _builderResult.hasNumGames;
}
- (uint32_t) numGames {
  return _builderResult.numGames;
}
- (CMsgFindSourceTVGames_Builder*) setNumGames:(uint32_t) value {
  _builderResult.hasNumGames = YES;
  _builderResult.numGames = value;
  return self;
}
- (CMsgFindSourceTVGames_Builder*) clearNumGames {
  _builderResult.hasNumGames = NO;
  _builderResult.numGames = 0;
  return self;
}
- (BOOL) hasLeagueid {
  return _builderResult.hasLeagueid;
}
- (uint32_t) leagueid {
  return _builderResult.leagueid;
}
- (CMsgFindSourceTVGames_Builder*) setLeagueid:(uint32_t) value {
  _builderResult.hasLeagueid = YES;
  _builderResult.leagueid = value;
  return self;
}
- (CMsgFindSourceTVGames_Builder*) clearLeagueid {
  _builderResult.hasLeagueid = NO;
  _builderResult.leagueid = 0;
  return self;
}
- (BOOL) hasHeroid {
  return _builderResult.hasHeroid;
}
- (uint32_t) heroid {
  return _builderResult.heroid;
}
- (CMsgFindSourceTVGames_Builder*) setHeroid:(uint32_t) value {
  _builderResult.hasHeroid = YES;
  _builderResult.heroid = value;
  return self;
}
- (CMsgFindSourceTVGames_Builder*) clearHeroid {
  _builderResult.hasHeroid = NO;
  _builderResult.heroid = 0;
  return self;
}
- (BOOL) hasDiretide {
  return _builderResult.hasDiretide;
}
- (BOOL) diretide {
  return _builderResult.diretide;
}
- (CMsgFindSourceTVGames_Builder*) setDiretide:(BOOL) value {
  _builderResult.hasDiretide = YES;
  _builderResult.diretide = value;
  return self;
}
- (CMsgFindSourceTVGames_Builder*) clearDiretide {
  _builderResult.hasDiretide = NO;
  _builderResult.diretide = NO;
  return self;
}
- (BOOL) hasXmas {
  return _builderResult.hasXmas;
}
- (BOOL) xmas {
  return _builderResult.xmas;
}
- (CMsgFindSourceTVGames_Builder*) setXmas:(BOOL) value {
  _builderResult.hasXmas = YES;
  _builderResult.xmas = value;
  return self;
}
- (CMsgFindSourceTVGames_Builder*) clearXmas {
  _builderResult.hasXmas = NO;
  _builderResult.xmas = NO;
  return self;
}
@end

@interface CMsgSpectateFriendGame ()
@property uint64_t steamId;
@end

@implementation CMsgSpectateFriendGame

- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.steamId = 0L;
  }
  return self;
}
static CMsgSpectateFriendGame* defaultCMsgSpectateFriendGameInstance = nil;
+ (void) initialize {
  if (self == [CMsgSpectateFriendGame class]) {
    defaultCMsgSpectateFriendGameInstance = [[CMsgSpectateFriendGame alloc] init];
  }
}
+ (CMsgSpectateFriendGame*) defaultInstance {
  return defaultCMsgSpectateFriendGameInstance;
}
- (CMsgSpectateFriendGame*) defaultInstance {
  return defaultCMsgSpectateFriendGameInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSteamId) {
    [output writeFixed64:1 value:self.steamId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSteamId) {
    size_ += computeFixed64Size(1, self.steamId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgSpectateFriendGame*) parseFromData:(NSData*) data {
  return (CMsgSpectateFriendGame*)[[[CMsgSpectateFriendGame builder] mergeFromData:data] build];
}
+ (CMsgSpectateFriendGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectateFriendGame*)[[[CMsgSpectateFriendGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectateFriendGame*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgSpectateFriendGame*)[[[CMsgSpectateFriendGame builder] mergeFromInputStream:input] build];
}
+ (CMsgSpectateFriendGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectateFriendGame*)[[[CMsgSpectateFriendGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectateFriendGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgSpectateFriendGame*)[[[CMsgSpectateFriendGame builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgSpectateFriendGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectateFriendGame*)[[[CMsgSpectateFriendGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectateFriendGame_Builder*) builder {
  return [[[CMsgSpectateFriendGame_Builder alloc] init] autorelease];
}
+ (CMsgSpectateFriendGame_Builder*) builderWithPrototype:(CMsgSpectateFriendGame*) prototype {
  return [[CMsgSpectateFriendGame builder] mergeFrom:prototype];
}
- (CMsgSpectateFriendGame_Builder*) builder {
  return [CMsgSpectateFriendGame builder];
}
- (CMsgSpectateFriendGame_Builder*) toBuilder {
  return [CMsgSpectateFriendGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgSpectateFriendGame class]]) {
    return NO;
  }
  CMsgSpectateFriendGame *otherMessage = other;
  return
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgSpectateFriendGame_Builder()
@property (retain) CMsgSpectateFriendGame* _builderResult;
@end

@implementation CMsgSpectateFriendGame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgSpectateFriendGame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgSpectateFriendGame_Builder*) clear {
  _builderResult = [[[CMsgSpectateFriendGame alloc] init] autorelease];
  return self;
}
- (CMsgSpectateFriendGame_Builder*) clone {
  return [CMsgSpectateFriendGame builderWithPrototype:_builderResult];
}
- (CMsgSpectateFriendGame*) defaultInstance {
  return [CMsgSpectateFriendGame defaultInstance];
}
- (CMsgSpectateFriendGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgSpectateFriendGame*) buildPartial {
  CMsgSpectateFriendGame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgSpectateFriendGame_Builder*) mergeFrom:(CMsgSpectateFriendGame*) other {
  if (other == [CMsgSpectateFriendGame defaultInstance]) {
    return self;
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgSpectateFriendGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgSpectateFriendGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSteamId:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgSpectateFriendGame_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgSpectateFriendGame_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
@end

@interface CMsgSpectateFriendGameResponse ()
@property uint64_t serverSteamid;
@end

@implementation CMsgSpectateFriendGameResponse

- (BOOL) hasServerSteamid {
  return !!hasServerSteamid_;
}
- (void) setHasServerSteamid:(BOOL) value_ {
  hasServerSteamid_ = !!value_;
}
@synthesize serverSteamid;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.serverSteamid = 0L;
  }
  return self;
}
static CMsgSpectateFriendGameResponse* defaultCMsgSpectateFriendGameResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgSpectateFriendGameResponse class]) {
    defaultCMsgSpectateFriendGameResponseInstance = [[CMsgSpectateFriendGameResponse alloc] init];
  }
}
+ (CMsgSpectateFriendGameResponse*) defaultInstance {
  return defaultCMsgSpectateFriendGameResponseInstance;
}
- (CMsgSpectateFriendGameResponse*) defaultInstance {
  return defaultCMsgSpectateFriendGameResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasServerSteamid) {
    [output writeFixed64:4 value:self.serverSteamid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasServerSteamid) {
    size_ += computeFixed64Size(4, self.serverSteamid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgSpectateFriendGameResponse*) parseFromData:(NSData*) data {
  return (CMsgSpectateFriendGameResponse*)[[[CMsgSpectateFriendGameResponse builder] mergeFromData:data] build];
}
+ (CMsgSpectateFriendGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectateFriendGameResponse*)[[[CMsgSpectateFriendGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectateFriendGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgSpectateFriendGameResponse*)[[[CMsgSpectateFriendGameResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgSpectateFriendGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectateFriendGameResponse*)[[[CMsgSpectateFriendGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectateFriendGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgSpectateFriendGameResponse*)[[[CMsgSpectateFriendGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgSpectateFriendGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectateFriendGameResponse*)[[[CMsgSpectateFriendGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectateFriendGameResponse_Builder*) builder {
  return [[[CMsgSpectateFriendGameResponse_Builder alloc] init] autorelease];
}
+ (CMsgSpectateFriendGameResponse_Builder*) builderWithPrototype:(CMsgSpectateFriendGameResponse*) prototype {
  return [[CMsgSpectateFriendGameResponse builder] mergeFrom:prototype];
}
- (CMsgSpectateFriendGameResponse_Builder*) builder {
  return [CMsgSpectateFriendGameResponse builder];
}
- (CMsgSpectateFriendGameResponse_Builder*) toBuilder {
  return [CMsgSpectateFriendGameResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasServerSteamid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverSteamid", [NSNumber numberWithLongLong:self.serverSteamid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgSpectateFriendGameResponse class]]) {
    return NO;
  }
  CMsgSpectateFriendGameResponse *otherMessage = other;
  return
      self.hasServerSteamid == otherMessage.hasServerSteamid &&
      (!self.hasServerSteamid || self.serverSteamid == otherMessage.serverSteamid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasServerSteamid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.serverSteamid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgSpectateFriendGameResponse_Builder()
@property (retain) CMsgSpectateFriendGameResponse* _builderResult;
@end

@implementation CMsgSpectateFriendGameResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgSpectateFriendGameResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgSpectateFriendGameResponse_Builder*) clear {
  _builderResult = [[[CMsgSpectateFriendGameResponse alloc] init] autorelease];
  return self;
}
- (CMsgSpectateFriendGameResponse_Builder*) clone {
  return [CMsgSpectateFriendGameResponse builderWithPrototype:_builderResult];
}
- (CMsgSpectateFriendGameResponse*) defaultInstance {
  return [CMsgSpectateFriendGameResponse defaultInstance];
}
- (CMsgSpectateFriendGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgSpectateFriendGameResponse*) buildPartial {
  CMsgSpectateFriendGameResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgSpectateFriendGameResponse_Builder*) mergeFrom:(CMsgSpectateFriendGameResponse*) other {
  if (other == [CMsgSpectateFriendGameResponse defaultInstance]) {
    return self;
  }
  if (other.hasServerSteamid) {
    [self setServerSteamid:other.serverSteamid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgSpectateFriendGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgSpectateFriendGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 33: {
        [self setServerSteamid:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasServerSteamid {
  return _builderResult.hasServerSteamid;
}
- (uint64_t) serverSteamid {
  return _builderResult.serverSteamid;
}
- (CMsgSpectateFriendGameResponse_Builder*) setServerSteamid:(uint64_t) value {
  _builderResult.hasServerSteamid = YES;
  _builderResult.serverSteamid = value;
  return self;
}
- (CMsgSpectateFriendGameResponse_Builder*) clearServerSteamid {
  _builderResult.hasServerSteamid = NO;
  _builderResult.serverSteamid = 0L;
  return self;
}
@end

@interface CMsgAbandonCurrentGame ()
@end

@implementation CMsgAbandonCurrentGame

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgAbandonCurrentGame* defaultCMsgAbandonCurrentGameInstance = nil;
+ (void) initialize {
  if (self == [CMsgAbandonCurrentGame class]) {
    defaultCMsgAbandonCurrentGameInstance = [[CMsgAbandonCurrentGame alloc] init];
  }
}
+ (CMsgAbandonCurrentGame*) defaultInstance {
  return defaultCMsgAbandonCurrentGameInstance;
}
- (CMsgAbandonCurrentGame*) defaultInstance {
  return defaultCMsgAbandonCurrentGameInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgAbandonCurrentGame*) parseFromData:(NSData*) data {
  return (CMsgAbandonCurrentGame*)[[[CMsgAbandonCurrentGame builder] mergeFromData:data] build];
}
+ (CMsgAbandonCurrentGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgAbandonCurrentGame*)[[[CMsgAbandonCurrentGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgAbandonCurrentGame*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgAbandonCurrentGame*)[[[CMsgAbandonCurrentGame builder] mergeFromInputStream:input] build];
}
+ (CMsgAbandonCurrentGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgAbandonCurrentGame*)[[[CMsgAbandonCurrentGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgAbandonCurrentGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgAbandonCurrentGame*)[[[CMsgAbandonCurrentGame builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgAbandonCurrentGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgAbandonCurrentGame*)[[[CMsgAbandonCurrentGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgAbandonCurrentGame_Builder*) builder {
  return [[[CMsgAbandonCurrentGame_Builder alloc] init] autorelease];
}
+ (CMsgAbandonCurrentGame_Builder*) builderWithPrototype:(CMsgAbandonCurrentGame*) prototype {
  return [[CMsgAbandonCurrentGame builder] mergeFrom:prototype];
}
- (CMsgAbandonCurrentGame_Builder*) builder {
  return [CMsgAbandonCurrentGame builder];
}
- (CMsgAbandonCurrentGame_Builder*) toBuilder {
  return [CMsgAbandonCurrentGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgAbandonCurrentGame class]]) {
    return NO;
  }
  CMsgAbandonCurrentGame *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgAbandonCurrentGame_Builder()
@property (retain) CMsgAbandonCurrentGame* _builderResult;
@end

@implementation CMsgAbandonCurrentGame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgAbandonCurrentGame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgAbandonCurrentGame_Builder*) clear {
  _builderResult = [[[CMsgAbandonCurrentGame alloc] init] autorelease];
  return self;
}
- (CMsgAbandonCurrentGame_Builder*) clone {
  return [CMsgAbandonCurrentGame builderWithPrototype:_builderResult];
}
- (CMsgAbandonCurrentGame*) defaultInstance {
  return [CMsgAbandonCurrentGame defaultInstance];
}
- (CMsgAbandonCurrentGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgAbandonCurrentGame*) buildPartial {
  CMsgAbandonCurrentGame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgAbandonCurrentGame_Builder*) mergeFrom:(CMsgAbandonCurrentGame*) other {
  if (other == [CMsgAbandonCurrentGame defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgAbandonCurrentGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgAbandonCurrentGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgGameServerInfo ()
@property uint32_t serverPublicIpAddr;
@property uint32_t serverPrivateIpAddr;
@property uint32_t serverPort;
@property uint32_t serverTvPort;
@property (retain) NSString* serverKey;
@property BOOL serverHibernation;
@property CMsgGameServerInfo_ServerType server_type;
@property uint32_t serverRegion;
@property Float32 serverLoadavg;
@property Float32 serverTvBroadcastTime;
@property Float32 serverGameTime;
@property uint64_t serverRelayConnectedSteamId;
@property uint32_t relaySlotsMax;
@property int32_t relaysConnected;
@property int32_t relayClientsConnected;
@property uint64_t relayedGameServerSteamId;
@property uint32_t parentRelayCount;
@property uint64_t tvSecretCode;
@end

@implementation CMsgGameServerInfo

- (BOOL) hasServerPublicIpAddr {
  return !!hasServerPublicIpAddr_;
}
- (void) setHasServerPublicIpAddr:(BOOL) value_ {
  hasServerPublicIpAddr_ = !!value_;
}
@synthesize serverPublicIpAddr;
- (BOOL) hasServerPrivateIpAddr {
  return !!hasServerPrivateIpAddr_;
}
- (void) setHasServerPrivateIpAddr:(BOOL) value_ {
  hasServerPrivateIpAddr_ = !!value_;
}
@synthesize serverPrivateIpAddr;
- (BOOL) hasServerPort {
  return !!hasServerPort_;
}
- (void) setHasServerPort:(BOOL) value_ {
  hasServerPort_ = !!value_;
}
@synthesize serverPort;
- (BOOL) hasServerTvPort {
  return !!hasServerTvPort_;
}
- (void) setHasServerTvPort:(BOOL) value_ {
  hasServerTvPort_ = !!value_;
}
@synthesize serverTvPort;
- (BOOL) hasServerKey {
  return !!hasServerKey_;
}
- (void) setHasServerKey:(BOOL) value_ {
  hasServerKey_ = !!value_;
}
@synthesize serverKey;
- (BOOL) hasServerHibernation {
  return !!hasServerHibernation_;
}
- (void) setHasServerHibernation:(BOOL) value_ {
  hasServerHibernation_ = !!value_;
}
- (BOOL) serverHibernation {
  return !!serverHibernation_;
}
- (void) setServerHibernation:(BOOL) value_ {
  serverHibernation_ = !!value_;
}
- (BOOL) hasserver_type {
  return !!hasserver_type_;
}
- (void) setHasserver_type:(BOOL) value_ {
  hasserver_type_ = !!value_;
}
@synthesize server_type;
- (BOOL) hasServerRegion {
  return !!hasServerRegion_;
}
- (void) setHasServerRegion:(BOOL) value_ {
  hasServerRegion_ = !!value_;
}
@synthesize serverRegion;
- (BOOL) hasServerLoadavg {
  return !!hasServerLoadavg_;
}
- (void) setHasServerLoadavg:(BOOL) value_ {
  hasServerLoadavg_ = !!value_;
}
@synthesize serverLoadavg;
- (BOOL) hasServerTvBroadcastTime {
  return !!hasServerTvBroadcastTime_;
}
- (void) setHasServerTvBroadcastTime:(BOOL) value_ {
  hasServerTvBroadcastTime_ = !!value_;
}
@synthesize serverTvBroadcastTime;
- (BOOL) hasServerGameTime {
  return !!hasServerGameTime_;
}
- (void) setHasServerGameTime:(BOOL) value_ {
  hasServerGameTime_ = !!value_;
}
@synthesize serverGameTime;
- (BOOL) hasServerRelayConnectedSteamId {
  return !!hasServerRelayConnectedSteamId_;
}
- (void) setHasServerRelayConnectedSteamId:(BOOL) value_ {
  hasServerRelayConnectedSteamId_ = !!value_;
}
@synthesize serverRelayConnectedSteamId;
- (BOOL) hasRelaySlotsMax {
  return !!hasRelaySlotsMax_;
}
- (void) setHasRelaySlotsMax:(BOOL) value_ {
  hasRelaySlotsMax_ = !!value_;
}
@synthesize relaySlotsMax;
- (BOOL) hasRelaysConnected {
  return !!hasRelaysConnected_;
}
- (void) setHasRelaysConnected:(BOOL) value_ {
  hasRelaysConnected_ = !!value_;
}
@synthesize relaysConnected;
- (BOOL) hasRelayClientsConnected {
  return !!hasRelayClientsConnected_;
}
- (void) setHasRelayClientsConnected:(BOOL) value_ {
  hasRelayClientsConnected_ = !!value_;
}
@synthesize relayClientsConnected;
- (BOOL) hasRelayedGameServerSteamId {
  return !!hasRelayedGameServerSteamId_;
}
- (void) setHasRelayedGameServerSteamId:(BOOL) value_ {
  hasRelayedGameServerSteamId_ = !!value_;
}
@synthesize relayedGameServerSteamId;
- (BOOL) hasParentRelayCount {
  return !!hasParentRelayCount_;
}
- (void) setHasParentRelayCount:(BOOL) value_ {
  hasParentRelayCount_ = !!value_;
}
@synthesize parentRelayCount;
- (BOOL) hasTvSecretCode {
  return !!hasTvSecretCode_;
}
- (void) setHasTvSecretCode:(BOOL) value_ {
  hasTvSecretCode_ = !!value_;
}
@synthesize tvSecretCode;
- (void) dealloc {
  self.serverKey = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.serverPublicIpAddr = 0;
    self.serverPrivateIpAddr = 0;
    self.serverPort = 0;
    self.serverTvPort = 0;
    self.serverKey = @"";
    self.serverHibernation = NO;
    self.server_type = CMsgGameServerInfo_ServerTypeUNSPECIFIED;
    self.serverRegion = 0;
    self.serverLoadavg = 0;
    self.serverTvBroadcastTime = 0;
    self.serverGameTime = 0;
    self.serverRelayConnectedSteamId = 0L;
    self.relaySlotsMax = 0;
    self.relaysConnected = 0;
    self.relayClientsConnected = 0;
    self.relayedGameServerSteamId = 0L;
    self.parentRelayCount = 0;
    self.tvSecretCode = 0L;
  }
  return self;
}
static CMsgGameServerInfo* defaultCMsgGameServerInfoInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameServerInfo class]) {
    defaultCMsgGameServerInfoInstance = [[CMsgGameServerInfo alloc] init];
  }
}
+ (CMsgGameServerInfo*) defaultInstance {
  return defaultCMsgGameServerInfoInstance;
}
- (CMsgGameServerInfo*) defaultInstance {
  return defaultCMsgGameServerInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasServerPublicIpAddr) {
    [output writeFixed32:1 value:self.serverPublicIpAddr];
  }
  if (self.hasServerPrivateIpAddr) {
    [output writeFixed32:2 value:self.serverPrivateIpAddr];
  }
  if (self.hasServerPort) {
    [output writeUInt32:3 value:self.serverPort];
  }
  if (self.hasServerTvPort) {
    [output writeUInt32:4 value:self.serverTvPort];
  }
  if (self.hasServerKey) {
    [output writeString:5 value:self.serverKey];
  }
  if (self.hasServerHibernation) {
    [output writeBool:6 value:self.serverHibernation];
  }
  if (self.hasserver_type) {
    [output writeEnum:7 value:self.server_type];
  }
  if (self.hasServerRegion) {
    [output writeUInt32:8 value:self.serverRegion];
  }
  if (self.hasServerLoadavg) {
    [output writeFloat:9 value:self.serverLoadavg];
  }
  if (self.hasServerTvBroadcastTime) {
    [output writeFloat:10 value:self.serverTvBroadcastTime];
  }
  if (self.hasServerGameTime) {
    [output writeFloat:11 value:self.serverGameTime];
  }
  if (self.hasServerRelayConnectedSteamId) {
    [output writeFixed64:12 value:self.serverRelayConnectedSteamId];
  }
  if (self.hasRelaySlotsMax) {
    [output writeUInt32:13 value:self.relaySlotsMax];
  }
  if (self.hasRelaysConnected) {
    [output writeInt32:14 value:self.relaysConnected];
  }
  if (self.hasRelayClientsConnected) {
    [output writeInt32:15 value:self.relayClientsConnected];
  }
  if (self.hasRelayedGameServerSteamId) {
    [output writeFixed64:16 value:self.relayedGameServerSteamId];
  }
  if (self.hasParentRelayCount) {
    [output writeUInt32:17 value:self.parentRelayCount];
  }
  if (self.hasTvSecretCode) {
    [output writeFixed64:18 value:self.tvSecretCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasServerPublicIpAddr) {
    size_ += computeFixed32Size(1, self.serverPublicIpAddr);
  }
  if (self.hasServerPrivateIpAddr) {
    size_ += computeFixed32Size(2, self.serverPrivateIpAddr);
  }
  if (self.hasServerPort) {
    size_ += computeUInt32Size(3, self.serverPort);
  }
  if (self.hasServerTvPort) {
    size_ += computeUInt32Size(4, self.serverTvPort);
  }
  if (self.hasServerKey) {
    size_ += computeStringSize(5, self.serverKey);
  }
  if (self.hasServerHibernation) {
    size_ += computeBoolSize(6, self.serverHibernation);
  }
  if (self.hasserver_type) {
    size_ += computeEnumSize(7, self.server_type);
  }
  if (self.hasServerRegion) {
    size_ += computeUInt32Size(8, self.serverRegion);
  }
  if (self.hasServerLoadavg) {
    size_ += computeFloatSize(9, self.serverLoadavg);
  }
  if (self.hasServerTvBroadcastTime) {
    size_ += computeFloatSize(10, self.serverTvBroadcastTime);
  }
  if (self.hasServerGameTime) {
    size_ += computeFloatSize(11, self.serverGameTime);
  }
  if (self.hasServerRelayConnectedSteamId) {
    size_ += computeFixed64Size(12, self.serverRelayConnectedSteamId);
  }
  if (self.hasRelaySlotsMax) {
    size_ += computeUInt32Size(13, self.relaySlotsMax);
  }
  if (self.hasRelaysConnected) {
    size_ += computeInt32Size(14, self.relaysConnected);
  }
  if (self.hasRelayClientsConnected) {
    size_ += computeInt32Size(15, self.relayClientsConnected);
  }
  if (self.hasRelayedGameServerSteamId) {
    size_ += computeFixed64Size(16, self.relayedGameServerSteamId);
  }
  if (self.hasParentRelayCount) {
    size_ += computeUInt32Size(17, self.parentRelayCount);
  }
  if (self.hasTvSecretCode) {
    size_ += computeFixed64Size(18, self.tvSecretCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameServerInfo*) parseFromData:(NSData*) data {
  return (CMsgGameServerInfo*)[[[CMsgGameServerInfo builder] mergeFromData:data] build];
}
+ (CMsgGameServerInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerInfo*)[[[CMsgGameServerInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerInfo*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameServerInfo*)[[[CMsgGameServerInfo builder] mergeFromInputStream:input] build];
}
+ (CMsgGameServerInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerInfo*)[[[CMsgGameServerInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameServerInfo*)[[[CMsgGameServerInfo builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameServerInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerInfo*)[[[CMsgGameServerInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerInfo_Builder*) builder {
  return [[[CMsgGameServerInfo_Builder alloc] init] autorelease];
}
+ (CMsgGameServerInfo_Builder*) builderWithPrototype:(CMsgGameServerInfo*) prototype {
  return [[CMsgGameServerInfo builder] mergeFrom:prototype];
}
- (CMsgGameServerInfo_Builder*) builder {
  return [CMsgGameServerInfo builder];
}
- (CMsgGameServerInfo_Builder*) toBuilder {
  return [CMsgGameServerInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasServerPublicIpAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverPublicIpAddr", [NSNumber numberWithInt:self.serverPublicIpAddr]];
  }
  if (self.hasServerPrivateIpAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverPrivateIpAddr", [NSNumber numberWithInt:self.serverPrivateIpAddr]];
  }
  if (self.hasServerPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverPort", [NSNumber numberWithInt:self.serverPort]];
  }
  if (self.hasServerTvPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTvPort", [NSNumber numberWithInt:self.serverTvPort]];
  }
  if (self.hasServerKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverKey", self.serverKey];
  }
  if (self.hasServerHibernation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverHibernation", [NSNumber numberWithBool:self.serverHibernation]];
  }
  if (self.hasserver_type) {
    [output appendFormat:@"%@%@: %d\n", indent, @"server_type", self.server_type];
  }
  if (self.hasServerRegion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverRegion", [NSNumber numberWithInt:self.serverRegion]];
  }
  if (self.hasServerLoadavg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverLoadavg", [NSNumber numberWithFloat:self.serverLoadavg]];
  }
  if (self.hasServerTvBroadcastTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTvBroadcastTime", [NSNumber numberWithFloat:self.serverTvBroadcastTime]];
  }
  if (self.hasServerGameTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverGameTime", [NSNumber numberWithFloat:self.serverGameTime]];
  }
  if (self.hasServerRelayConnectedSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverRelayConnectedSteamId", [NSNumber numberWithLongLong:self.serverRelayConnectedSteamId]];
  }
  if (self.hasRelaySlotsMax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"relaySlotsMax", [NSNumber numberWithInt:self.relaySlotsMax]];
  }
  if (self.hasRelaysConnected) {
    [output appendFormat:@"%@%@: %@\n", indent, @"relaysConnected", [NSNumber numberWithInt:self.relaysConnected]];
  }
  if (self.hasRelayClientsConnected) {
    [output appendFormat:@"%@%@: %@\n", indent, @"relayClientsConnected", [NSNumber numberWithInt:self.relayClientsConnected]];
  }
  if (self.hasRelayedGameServerSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"relayedGameServerSteamId", [NSNumber numberWithLongLong:self.relayedGameServerSteamId]];
  }
  if (self.hasParentRelayCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentRelayCount", [NSNumber numberWithInt:self.parentRelayCount]];
  }
  if (self.hasTvSecretCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tvSecretCode", [NSNumber numberWithLongLong:self.tvSecretCode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameServerInfo class]]) {
    return NO;
  }
  CMsgGameServerInfo *otherMessage = other;
  return
      self.hasServerPublicIpAddr == otherMessage.hasServerPublicIpAddr &&
      (!self.hasServerPublicIpAddr || self.serverPublicIpAddr == otherMessage.serverPublicIpAddr) &&
      self.hasServerPrivateIpAddr == otherMessage.hasServerPrivateIpAddr &&
      (!self.hasServerPrivateIpAddr || self.serverPrivateIpAddr == otherMessage.serverPrivateIpAddr) &&
      self.hasServerPort == otherMessage.hasServerPort &&
      (!self.hasServerPort || self.serverPort == otherMessage.serverPort) &&
      self.hasServerTvPort == otherMessage.hasServerTvPort &&
      (!self.hasServerTvPort || self.serverTvPort == otherMessage.serverTvPort) &&
      self.hasServerKey == otherMessage.hasServerKey &&
      (!self.hasServerKey || [self.serverKey isEqual:otherMessage.serverKey]) &&
      self.hasServerHibernation == otherMessage.hasServerHibernation &&
      (!self.hasServerHibernation || self.serverHibernation == otherMessage.serverHibernation) &&
      self.hasserver_type == otherMessage.hasserver_type &&
      (!self.hasserver_type || self.server_type == otherMessage.server_type) &&
      self.hasServerRegion == otherMessage.hasServerRegion &&
      (!self.hasServerRegion || self.serverRegion == otherMessage.serverRegion) &&
      self.hasServerLoadavg == otherMessage.hasServerLoadavg &&
      (!self.hasServerLoadavg || self.serverLoadavg == otherMessage.serverLoadavg) &&
      self.hasServerTvBroadcastTime == otherMessage.hasServerTvBroadcastTime &&
      (!self.hasServerTvBroadcastTime || self.serverTvBroadcastTime == otherMessage.serverTvBroadcastTime) &&
      self.hasServerGameTime == otherMessage.hasServerGameTime &&
      (!self.hasServerGameTime || self.serverGameTime == otherMessage.serverGameTime) &&
      self.hasServerRelayConnectedSteamId == otherMessage.hasServerRelayConnectedSteamId &&
      (!self.hasServerRelayConnectedSteamId || self.serverRelayConnectedSteamId == otherMessage.serverRelayConnectedSteamId) &&
      self.hasRelaySlotsMax == otherMessage.hasRelaySlotsMax &&
      (!self.hasRelaySlotsMax || self.relaySlotsMax == otherMessage.relaySlotsMax) &&
      self.hasRelaysConnected == otherMessage.hasRelaysConnected &&
      (!self.hasRelaysConnected || self.relaysConnected == otherMessage.relaysConnected) &&
      self.hasRelayClientsConnected == otherMessage.hasRelayClientsConnected &&
      (!self.hasRelayClientsConnected || self.relayClientsConnected == otherMessage.relayClientsConnected) &&
      self.hasRelayedGameServerSteamId == otherMessage.hasRelayedGameServerSteamId &&
      (!self.hasRelayedGameServerSteamId || self.relayedGameServerSteamId == otherMessage.relayedGameServerSteamId) &&
      self.hasParentRelayCount == otherMessage.hasParentRelayCount &&
      (!self.hasParentRelayCount || self.parentRelayCount == otherMessage.parentRelayCount) &&
      self.hasTvSecretCode == otherMessage.hasTvSecretCode &&
      (!self.hasTvSecretCode || self.tvSecretCode == otherMessage.tvSecretCode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasServerPublicIpAddr) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverPublicIpAddr] hash];
  }
  if (self.hasServerPrivateIpAddr) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverPrivateIpAddr] hash];
  }
  if (self.hasServerPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverPort] hash];
  }
  if (self.hasServerTvPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverTvPort] hash];
  }
  if (self.hasServerKey) {
    hashCode = hashCode * 31 + [self.serverKey hash];
  }
  if (self.hasServerHibernation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.serverHibernation] hash];
  }
  if (self.hasserver_type) {
    hashCode = hashCode * 31 + self.server_type;
  }
  if (self.hasServerRegion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverRegion] hash];
  }
  if (self.hasServerLoadavg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.serverLoadavg] hash];
  }
  if (self.hasServerTvBroadcastTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.serverTvBroadcastTime] hash];
  }
  if (self.hasServerGameTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.serverGameTime] hash];
  }
  if (self.hasServerRelayConnectedSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.serverRelayConnectedSteamId] hash];
  }
  if (self.hasRelaySlotsMax) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.relaySlotsMax] hash];
  }
  if (self.hasRelaysConnected) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.relaysConnected] hash];
  }
  if (self.hasRelayClientsConnected) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.relayClientsConnected] hash];
  }
  if (self.hasRelayedGameServerSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.relayedGameServerSteamId] hash];
  }
  if (self.hasParentRelayCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.parentRelayCount] hash];
  }
  if (self.hasTvSecretCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tvSecretCode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgGameServerInfo_ServerTypeIsValidValue(CMsgGameServerInfo_ServerType value) {
  switch (value) {
    case CMsgGameServerInfo_ServerTypeUNSPECIFIED:
    case CMsgGameServerInfo_ServerTypeGAME:
    case CMsgGameServerInfo_ServerTypePROXY:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgGameServerInfo_Builder()
@property (retain) CMsgGameServerInfo* _builderResult;
@end

@implementation CMsgGameServerInfo_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameServerInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameServerInfo_Builder*) clear {
  _builderResult = [[[CMsgGameServerInfo alloc] init] autorelease];
  return self;
}
- (CMsgGameServerInfo_Builder*) clone {
  return [CMsgGameServerInfo builderWithPrototype:_builderResult];
}
- (CMsgGameServerInfo*) defaultInstance {
  return [CMsgGameServerInfo defaultInstance];
}
- (CMsgGameServerInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameServerInfo*) buildPartial {
  CMsgGameServerInfo* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameServerInfo_Builder*) mergeFrom:(CMsgGameServerInfo*) other {
  if (other == [CMsgGameServerInfo defaultInstance]) {
    return self;
  }
  if (other.hasServerPublicIpAddr) {
    [self setServerPublicIpAddr:other.serverPublicIpAddr];
  }
  if (other.hasServerPrivateIpAddr) {
    [self setServerPrivateIpAddr:other.serverPrivateIpAddr];
  }
  if (other.hasServerPort) {
    [self setServerPort:other.serverPort];
  }
  if (other.hasServerTvPort) {
    [self setServerTvPort:other.serverTvPort];
  }
  if (other.hasServerKey) {
    [self setServerKey:other.serverKey];
  }
  if (other.hasServerHibernation) {
    [self setServerHibernation:other.serverHibernation];
  }
  if (other.hasserver_type) {
    [self setserver_type:other.server_type];
  }
  if (other.hasServerRegion) {
    [self setServerRegion:other.serverRegion];
  }
  if (other.hasServerLoadavg) {
    [self setServerLoadavg:other.serverLoadavg];
  }
  if (other.hasServerTvBroadcastTime) {
    [self setServerTvBroadcastTime:other.serverTvBroadcastTime];
  }
  if (other.hasServerGameTime) {
    [self setServerGameTime:other.serverGameTime];
  }
  if (other.hasServerRelayConnectedSteamId) {
    [self setServerRelayConnectedSteamId:other.serverRelayConnectedSteamId];
  }
  if (other.hasRelaySlotsMax) {
    [self setRelaySlotsMax:other.relaySlotsMax];
  }
  if (other.hasRelaysConnected) {
    [self setRelaysConnected:other.relaysConnected];
  }
  if (other.hasRelayClientsConnected) {
    [self setRelayClientsConnected:other.relayClientsConnected];
  }
  if (other.hasRelayedGameServerSteamId) {
    [self setRelayedGameServerSteamId:other.relayedGameServerSteamId];
  }
  if (other.hasParentRelayCount) {
    [self setParentRelayCount:other.parentRelayCount];
  }
  if (other.hasTvSecretCode) {
    [self setTvSecretCode:other.tvSecretCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameServerInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameServerInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setServerPublicIpAddr:[input readFixed32]];
        break;
      }
      case 21: {
        [self setServerPrivateIpAddr:[input readFixed32]];
        break;
      }
      case 24: {
        [self setServerPort:[input readUInt32]];
        break;
      }
      case 32: {
        [self setServerTvPort:[input readUInt32]];
        break;
      }
      case 42: {
        [self setServerKey:[input readString]];
        break;
      }
      case 48: {
        [self setServerHibernation:[input readBool]];
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (CMsgGameServerInfo_ServerTypeIsValidValue(value)) {
          [self setserver_type:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        [self setServerRegion:[input readUInt32]];
        break;
      }
      case 77: {
        [self setServerLoadavg:[input readFloat]];
        break;
      }
      case 85: {
        [self setServerTvBroadcastTime:[input readFloat]];
        break;
      }
      case 93: {
        [self setServerGameTime:[input readFloat]];
        break;
      }
      case 97: {
        [self setServerRelayConnectedSteamId:[input readFixed64]];
        break;
      }
      case 104: {
        [self setRelaySlotsMax:[input readUInt32]];
        break;
      }
      case 112: {
        [self setRelaysConnected:[input readInt32]];
        break;
      }
      case 120: {
        [self setRelayClientsConnected:[input readInt32]];
        break;
      }
      case 129: {
        [self setRelayedGameServerSteamId:[input readFixed64]];
        break;
      }
      case 136: {
        [self setParentRelayCount:[input readUInt32]];
        break;
      }
      case 145: {
        [self setTvSecretCode:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasServerPublicIpAddr {
  return _builderResult.hasServerPublicIpAddr;
}
- (uint32_t) serverPublicIpAddr {
  return _builderResult.serverPublicIpAddr;
}
- (CMsgGameServerInfo_Builder*) setServerPublicIpAddr:(uint32_t) value {
  _builderResult.hasServerPublicIpAddr = YES;
  _builderResult.serverPublicIpAddr = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerPublicIpAddr {
  _builderResult.hasServerPublicIpAddr = NO;
  _builderResult.serverPublicIpAddr = 0;
  return self;
}
- (BOOL) hasServerPrivateIpAddr {
  return _builderResult.hasServerPrivateIpAddr;
}
- (uint32_t) serverPrivateIpAddr {
  return _builderResult.serverPrivateIpAddr;
}
- (CMsgGameServerInfo_Builder*) setServerPrivateIpAddr:(uint32_t) value {
  _builderResult.hasServerPrivateIpAddr = YES;
  _builderResult.serverPrivateIpAddr = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerPrivateIpAddr {
  _builderResult.hasServerPrivateIpAddr = NO;
  _builderResult.serverPrivateIpAddr = 0;
  return self;
}
- (BOOL) hasServerPort {
  return _builderResult.hasServerPort;
}
- (uint32_t) serverPort {
  return _builderResult.serverPort;
}
- (CMsgGameServerInfo_Builder*) setServerPort:(uint32_t) value {
  _builderResult.hasServerPort = YES;
  _builderResult.serverPort = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerPort {
  _builderResult.hasServerPort = NO;
  _builderResult.serverPort = 0;
  return self;
}
- (BOOL) hasServerTvPort {
  return _builderResult.hasServerTvPort;
}
- (uint32_t) serverTvPort {
  return _builderResult.serverTvPort;
}
- (CMsgGameServerInfo_Builder*) setServerTvPort:(uint32_t) value {
  _builderResult.hasServerTvPort = YES;
  _builderResult.serverTvPort = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerTvPort {
  _builderResult.hasServerTvPort = NO;
  _builderResult.serverTvPort = 0;
  return self;
}
- (BOOL) hasServerKey {
  return _builderResult.hasServerKey;
}
- (NSString*) serverKey {
  return _builderResult.serverKey;
}
- (CMsgGameServerInfo_Builder*) setServerKey:(NSString*) value {
  _builderResult.hasServerKey = YES;
  _builderResult.serverKey = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerKey {
  _builderResult.hasServerKey = NO;
  _builderResult.serverKey = @"";
  return self;
}
- (BOOL) hasServerHibernation {
  return _builderResult.hasServerHibernation;
}
- (BOOL) serverHibernation {
  return _builderResult.serverHibernation;
}
- (CMsgGameServerInfo_Builder*) setServerHibernation:(BOOL) value {
  _builderResult.hasServerHibernation = YES;
  _builderResult.serverHibernation = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerHibernation {
  _builderResult.hasServerHibernation = NO;
  _builderResult.serverHibernation = NO;
  return self;
}
- (BOOL) hasserver_type {
  return _builderResult.hasserver_type;
}
- (CMsgGameServerInfo_ServerType) server_type {
  return _builderResult.server_type;
}
- (CMsgGameServerInfo_Builder*) setserver_type:(CMsgGameServerInfo_ServerType) value {
  _builderResult.hasserver_type = YES;
  _builderResult.server_type = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearserver_type {
  _builderResult.hasserver_type = NO;
  _builderResult.server_type = CMsgGameServerInfo_ServerTypeUNSPECIFIED;
  return self;
}
- (BOOL) hasServerRegion {
  return _builderResult.hasServerRegion;
}
- (uint32_t) serverRegion {
  return _builderResult.serverRegion;
}
- (CMsgGameServerInfo_Builder*) setServerRegion:(uint32_t) value {
  _builderResult.hasServerRegion = YES;
  _builderResult.serverRegion = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerRegion {
  _builderResult.hasServerRegion = NO;
  _builderResult.serverRegion = 0;
  return self;
}
- (BOOL) hasServerLoadavg {
  return _builderResult.hasServerLoadavg;
}
- (Float32) serverLoadavg {
  return _builderResult.serverLoadavg;
}
- (CMsgGameServerInfo_Builder*) setServerLoadavg:(Float32) value {
  _builderResult.hasServerLoadavg = YES;
  _builderResult.serverLoadavg = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerLoadavg {
  _builderResult.hasServerLoadavg = NO;
  _builderResult.serverLoadavg = 0;
  return self;
}
- (BOOL) hasServerTvBroadcastTime {
  return _builderResult.hasServerTvBroadcastTime;
}
- (Float32) serverTvBroadcastTime {
  return _builderResult.serverTvBroadcastTime;
}
- (CMsgGameServerInfo_Builder*) setServerTvBroadcastTime:(Float32) value {
  _builderResult.hasServerTvBroadcastTime = YES;
  _builderResult.serverTvBroadcastTime = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerTvBroadcastTime {
  _builderResult.hasServerTvBroadcastTime = NO;
  _builderResult.serverTvBroadcastTime = 0;
  return self;
}
- (BOOL) hasServerGameTime {
  return _builderResult.hasServerGameTime;
}
- (Float32) serverGameTime {
  return _builderResult.serverGameTime;
}
- (CMsgGameServerInfo_Builder*) setServerGameTime:(Float32) value {
  _builderResult.hasServerGameTime = YES;
  _builderResult.serverGameTime = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerGameTime {
  _builderResult.hasServerGameTime = NO;
  _builderResult.serverGameTime = 0;
  return self;
}
- (BOOL) hasServerRelayConnectedSteamId {
  return _builderResult.hasServerRelayConnectedSteamId;
}
- (uint64_t) serverRelayConnectedSteamId {
  return _builderResult.serverRelayConnectedSteamId;
}
- (CMsgGameServerInfo_Builder*) setServerRelayConnectedSteamId:(uint64_t) value {
  _builderResult.hasServerRelayConnectedSteamId = YES;
  _builderResult.serverRelayConnectedSteamId = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearServerRelayConnectedSteamId {
  _builderResult.hasServerRelayConnectedSteamId = NO;
  _builderResult.serverRelayConnectedSteamId = 0L;
  return self;
}
- (BOOL) hasRelaySlotsMax {
  return _builderResult.hasRelaySlotsMax;
}
- (uint32_t) relaySlotsMax {
  return _builderResult.relaySlotsMax;
}
- (CMsgGameServerInfo_Builder*) setRelaySlotsMax:(uint32_t) value {
  _builderResult.hasRelaySlotsMax = YES;
  _builderResult.relaySlotsMax = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearRelaySlotsMax {
  _builderResult.hasRelaySlotsMax = NO;
  _builderResult.relaySlotsMax = 0;
  return self;
}
- (BOOL) hasRelaysConnected {
  return _builderResult.hasRelaysConnected;
}
- (int32_t) relaysConnected {
  return _builderResult.relaysConnected;
}
- (CMsgGameServerInfo_Builder*) setRelaysConnected:(int32_t) value {
  _builderResult.hasRelaysConnected = YES;
  _builderResult.relaysConnected = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearRelaysConnected {
  _builderResult.hasRelaysConnected = NO;
  _builderResult.relaysConnected = 0;
  return self;
}
- (BOOL) hasRelayClientsConnected {
  return _builderResult.hasRelayClientsConnected;
}
- (int32_t) relayClientsConnected {
  return _builderResult.relayClientsConnected;
}
- (CMsgGameServerInfo_Builder*) setRelayClientsConnected:(int32_t) value {
  _builderResult.hasRelayClientsConnected = YES;
  _builderResult.relayClientsConnected = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearRelayClientsConnected {
  _builderResult.hasRelayClientsConnected = NO;
  _builderResult.relayClientsConnected = 0;
  return self;
}
- (BOOL) hasRelayedGameServerSteamId {
  return _builderResult.hasRelayedGameServerSteamId;
}
- (uint64_t) relayedGameServerSteamId {
  return _builderResult.relayedGameServerSteamId;
}
- (CMsgGameServerInfo_Builder*) setRelayedGameServerSteamId:(uint64_t) value {
  _builderResult.hasRelayedGameServerSteamId = YES;
  _builderResult.relayedGameServerSteamId = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearRelayedGameServerSteamId {
  _builderResult.hasRelayedGameServerSteamId = NO;
  _builderResult.relayedGameServerSteamId = 0L;
  return self;
}
- (BOOL) hasParentRelayCount {
  return _builderResult.hasParentRelayCount;
}
- (uint32_t) parentRelayCount {
  return _builderResult.parentRelayCount;
}
- (CMsgGameServerInfo_Builder*) setParentRelayCount:(uint32_t) value {
  _builderResult.hasParentRelayCount = YES;
  _builderResult.parentRelayCount = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearParentRelayCount {
  _builderResult.hasParentRelayCount = NO;
  _builderResult.parentRelayCount = 0;
  return self;
}
- (BOOL) hasTvSecretCode {
  return _builderResult.hasTvSecretCode;
}
- (uint64_t) tvSecretCode {
  return _builderResult.tvSecretCode;
}
- (CMsgGameServerInfo_Builder*) setTvSecretCode:(uint64_t) value {
  _builderResult.hasTvSecretCode = YES;
  _builderResult.tvSecretCode = value;
  return self;
}
- (CMsgGameServerInfo_Builder*) clearTvSecretCode {
  _builderResult.hasTvSecretCode = NO;
  _builderResult.tvSecretCode = 0L;
  return self;
}
@end

@interface CMsgLeaverDetected ()
@property uint64_t steamId;
@property uint32_t leaverStatus;
@end

@implementation CMsgLeaverDetected

- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (BOOL) hasLeaverStatus {
  return !!hasLeaverStatus_;
}
- (void) setHasLeaverStatus:(BOOL) value_ {
  hasLeaverStatus_ = !!value_;
}
@synthesize leaverStatus;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.steamId = 0L;
    self.leaverStatus = 0;
  }
  return self;
}
static CMsgLeaverDetected* defaultCMsgLeaverDetectedInstance = nil;
+ (void) initialize {
  if (self == [CMsgLeaverDetected class]) {
    defaultCMsgLeaverDetectedInstance = [[CMsgLeaverDetected alloc] init];
  }
}
+ (CMsgLeaverDetected*) defaultInstance {
  return defaultCMsgLeaverDetectedInstance;
}
- (CMsgLeaverDetected*) defaultInstance {
  return defaultCMsgLeaverDetectedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSteamId) {
    [output writeFixed64:1 value:self.steamId];
  }
  if (self.hasLeaverStatus) {
    [output writeUInt32:2 value:self.leaverStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSteamId) {
    size_ += computeFixed64Size(1, self.steamId);
  }
  if (self.hasLeaverStatus) {
    size_ += computeUInt32Size(2, self.leaverStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgLeaverDetected*) parseFromData:(NSData*) data {
  return (CMsgLeaverDetected*)[[[CMsgLeaverDetected builder] mergeFromData:data] build];
}
+ (CMsgLeaverDetected*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgLeaverDetected*)[[[CMsgLeaverDetected builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgLeaverDetected*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgLeaverDetected*)[[[CMsgLeaverDetected builder] mergeFromInputStream:input] build];
}
+ (CMsgLeaverDetected*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgLeaverDetected*)[[[CMsgLeaverDetected builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgLeaverDetected*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgLeaverDetected*)[[[CMsgLeaverDetected builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgLeaverDetected*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgLeaverDetected*)[[[CMsgLeaverDetected builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgLeaverDetected_Builder*) builder {
  return [[[CMsgLeaverDetected_Builder alloc] init] autorelease];
}
+ (CMsgLeaverDetected_Builder*) builderWithPrototype:(CMsgLeaverDetected*) prototype {
  return [[CMsgLeaverDetected builder] mergeFrom:prototype];
}
- (CMsgLeaverDetected_Builder*) builder {
  return [CMsgLeaverDetected builder];
}
- (CMsgLeaverDetected_Builder*) toBuilder {
  return [CMsgLeaverDetected builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  if (self.hasLeaverStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaverStatus", [NSNumber numberWithInt:self.leaverStatus]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgLeaverDetected class]]) {
    return NO;
  }
  CMsgLeaverDetected *otherMessage = other;
  return
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      self.hasLeaverStatus == otherMessage.hasLeaverStatus &&
      (!self.hasLeaverStatus || self.leaverStatus == otherMessage.leaverStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  if (self.hasLeaverStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leaverStatus] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgLeaverDetected_Builder()
@property (retain) CMsgLeaverDetected* _builderResult;
@end

@implementation CMsgLeaverDetected_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgLeaverDetected alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgLeaverDetected_Builder*) clear {
  _builderResult = [[[CMsgLeaverDetected alloc] init] autorelease];
  return self;
}
- (CMsgLeaverDetected_Builder*) clone {
  return [CMsgLeaverDetected builderWithPrototype:_builderResult];
}
- (CMsgLeaverDetected*) defaultInstance {
  return [CMsgLeaverDetected defaultInstance];
}
- (CMsgLeaverDetected*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgLeaverDetected*) buildPartial {
  CMsgLeaverDetected* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgLeaverDetected_Builder*) mergeFrom:(CMsgLeaverDetected*) other {
  if (other == [CMsgLeaverDetected defaultInstance]) {
    return self;
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  if (other.hasLeaverStatus) {
    [self setLeaverStatus:other.leaverStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgLeaverDetected_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgLeaverDetected_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSteamId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setLeaverStatus:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgLeaverDetected_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgLeaverDetected_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
- (BOOL) hasLeaverStatus {
  return _builderResult.hasLeaverStatus;
}
- (uint32_t) leaverStatus {
  return _builderResult.leaverStatus;
}
- (CMsgLeaverDetected_Builder*) setLeaverStatus:(uint32_t) value {
  _builderResult.hasLeaverStatus = YES;
  _builderResult.leaverStatus = value;
  return self;
}
- (CMsgLeaverDetected_Builder*) clearLeaverStatus {
  _builderResult.hasLeaverStatus = NO;
  _builderResult.leaverStatus = 0;
  return self;
}
@end

@interface CMsgLeaverDetectedResponse ()
@property uint32_t result;
@end

@implementation CMsgLeaverDetectedResponse

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) value_ {
  hasResult_ = !!value_;
}
@synthesize result;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = 0;
  }
  return self;
}
static CMsgLeaverDetectedResponse* defaultCMsgLeaverDetectedResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgLeaverDetectedResponse class]) {
    defaultCMsgLeaverDetectedResponseInstance = [[CMsgLeaverDetectedResponse alloc] init];
  }
}
+ (CMsgLeaverDetectedResponse*) defaultInstance {
  return defaultCMsgLeaverDetectedResponseInstance;
}
- (CMsgLeaverDetectedResponse*) defaultInstance {
  return defaultCMsgLeaverDetectedResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeUInt32:1 value:self.result];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeUInt32Size(1, self.result);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgLeaverDetectedResponse*) parseFromData:(NSData*) data {
  return (CMsgLeaverDetectedResponse*)[[[CMsgLeaverDetectedResponse builder] mergeFromData:data] build];
}
+ (CMsgLeaverDetectedResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgLeaverDetectedResponse*)[[[CMsgLeaverDetectedResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgLeaverDetectedResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgLeaverDetectedResponse*)[[[CMsgLeaverDetectedResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgLeaverDetectedResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgLeaverDetectedResponse*)[[[CMsgLeaverDetectedResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgLeaverDetectedResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgLeaverDetectedResponse*)[[[CMsgLeaverDetectedResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgLeaverDetectedResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgLeaverDetectedResponse*)[[[CMsgLeaverDetectedResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgLeaverDetectedResponse_Builder*) builder {
  return [[[CMsgLeaverDetectedResponse_Builder alloc] init] autorelease];
}
+ (CMsgLeaverDetectedResponse_Builder*) builderWithPrototype:(CMsgLeaverDetectedResponse*) prototype {
  return [[CMsgLeaverDetectedResponse builder] mergeFrom:prototype];
}
- (CMsgLeaverDetectedResponse_Builder*) builder {
  return [CMsgLeaverDetectedResponse builder];
}
- (CMsgLeaverDetectedResponse_Builder*) toBuilder {
  return [CMsgLeaverDetectedResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", [NSNumber numberWithInt:self.result]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgLeaverDetectedResponse class]]) {
    return NO;
  }
  CMsgLeaverDetectedResponse *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.result] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgLeaverDetectedResponse_Builder()
@property (retain) CMsgLeaverDetectedResponse* _builderResult;
@end

@implementation CMsgLeaverDetectedResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgLeaverDetectedResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgLeaverDetectedResponse_Builder*) clear {
  _builderResult = [[[CMsgLeaverDetectedResponse alloc] init] autorelease];
  return self;
}
- (CMsgLeaverDetectedResponse_Builder*) clone {
  return [CMsgLeaverDetectedResponse builderWithPrototype:_builderResult];
}
- (CMsgLeaverDetectedResponse*) defaultInstance {
  return [CMsgLeaverDetectedResponse defaultInstance];
}
- (CMsgLeaverDetectedResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgLeaverDetectedResponse*) buildPartial {
  CMsgLeaverDetectedResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgLeaverDetectedResponse_Builder*) mergeFrom:(CMsgLeaverDetectedResponse*) other {
  if (other == [CMsgLeaverDetectedResponse defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgLeaverDetectedResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgLeaverDetectedResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResult:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return _builderResult.hasResult;
}
- (uint32_t) result {
  return _builderResult.result;
}
- (CMsgLeaverDetectedResponse_Builder*) setResult:(uint32_t) value {
  _builderResult.hasResult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgLeaverDetectedResponse_Builder*) clearResult {
  _builderResult.hasResult = NO;
  _builderResult.result = 0;
  return self;
}
@end

@interface CMsgForceSOCacheResend ()
@end

@implementation CMsgForceSOCacheResend

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgForceSOCacheResend* defaultCMsgForceSOCacheResendInstance = nil;
+ (void) initialize {
  if (self == [CMsgForceSOCacheResend class]) {
    defaultCMsgForceSOCacheResendInstance = [[CMsgForceSOCacheResend alloc] init];
  }
}
+ (CMsgForceSOCacheResend*) defaultInstance {
  return defaultCMsgForceSOCacheResendInstance;
}
- (CMsgForceSOCacheResend*) defaultInstance {
  return defaultCMsgForceSOCacheResendInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgForceSOCacheResend*) parseFromData:(NSData*) data {
  return (CMsgForceSOCacheResend*)[[[CMsgForceSOCacheResend builder] mergeFromData:data] build];
}
+ (CMsgForceSOCacheResend*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgForceSOCacheResend*)[[[CMsgForceSOCacheResend builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgForceSOCacheResend*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgForceSOCacheResend*)[[[CMsgForceSOCacheResend builder] mergeFromInputStream:input] build];
}
+ (CMsgForceSOCacheResend*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgForceSOCacheResend*)[[[CMsgForceSOCacheResend builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgForceSOCacheResend*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgForceSOCacheResend*)[[[CMsgForceSOCacheResend builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgForceSOCacheResend*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgForceSOCacheResend*)[[[CMsgForceSOCacheResend builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgForceSOCacheResend_Builder*) builder {
  return [[[CMsgForceSOCacheResend_Builder alloc] init] autorelease];
}
+ (CMsgForceSOCacheResend_Builder*) builderWithPrototype:(CMsgForceSOCacheResend*) prototype {
  return [[CMsgForceSOCacheResend builder] mergeFrom:prototype];
}
- (CMsgForceSOCacheResend_Builder*) builder {
  return [CMsgForceSOCacheResend builder];
}
- (CMsgForceSOCacheResend_Builder*) toBuilder {
  return [CMsgForceSOCacheResend builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgForceSOCacheResend class]]) {
    return NO;
  }
  CMsgForceSOCacheResend *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgForceSOCacheResend_Builder()
@property (retain) CMsgForceSOCacheResend* _builderResult;
@end

@implementation CMsgForceSOCacheResend_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgForceSOCacheResend alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgForceSOCacheResend_Builder*) clear {
  _builderResult = [[[CMsgForceSOCacheResend alloc] init] autorelease];
  return self;
}
- (CMsgForceSOCacheResend_Builder*) clone {
  return [CMsgForceSOCacheResend builderWithPrototype:_builderResult];
}
- (CMsgForceSOCacheResend*) defaultInstance {
  return [CMsgForceSOCacheResend defaultInstance];
}
- (CMsgForceSOCacheResend*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgForceSOCacheResend*) buildPartial {
  CMsgForceSOCacheResend* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgForceSOCacheResend_Builder*) mergeFrom:(CMsgForceSOCacheResend*) other {
  if (other == [CMsgForceSOCacheResend defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgForceSOCacheResend_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgForceSOCacheResend_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgPracticeLobbySetDetails ()
@property uint64_t lobbyId;
@property (retain) NSString* gameName;
@property (retain) PBAppendableArray * teamDetailsArray;
@property uint32_t serverRegion;
@property uint32_t gameMode;
@property DOTA_CM_PICK cm_pick;
@property DOTABotDifficulty bot_difficulty;
@property BOOL allowCheats;
@property BOOL fillWithBots;
@property BOOL introMode;
@property BOOL allowSpectating;
@property DOTAGameVersion game_version;
@property (retain) NSString* passKey;
@property uint32_t leagueid;
@property uint32_t penaltyLevelRadiant;
@property uint32_t penaltyLevelDire;
@property uint32_t loadGameId;
@property uint32_t seriesType;
@property uint32_t radiantSeriesWins;
@property uint32_t direSeriesWins;
@end

@implementation CMsgPracticeLobbySetDetails

- (BOOL) hasLobbyId {
  return !!hasLobbyId_;
}
- (void) setHasLobbyId:(BOOL) value_ {
  hasLobbyId_ = !!value_;
}
@synthesize lobbyId;
- (BOOL) hasGameName {
  return !!hasGameName_;
}
- (void) setHasGameName:(BOOL) value_ {
  hasGameName_ = !!value_;
}
@synthesize gameName;
@synthesize teamDetailsArray;
@dynamic teamDetails;
- (BOOL) hasServerRegion {
  return !!hasServerRegion_;
}
- (void) setHasServerRegion:(BOOL) value_ {
  hasServerRegion_ = !!value_;
}
@synthesize serverRegion;
- (BOOL) hasGameMode {
  return !!hasGameMode_;
}
- (void) setHasGameMode:(BOOL) value_ {
  hasGameMode_ = !!value_;
}
@synthesize gameMode;
- (BOOL) hascm_pick {
  return !!hascm_pick_;
}
- (void) setHascm_pick:(BOOL) value_ {
  hascm_pick_ = !!value_;
}
@synthesize cm_pick;
- (BOOL) hasbot_difficulty {
  return !!hasbot_difficulty_;
}
- (void) setHasbot_difficulty:(BOOL) value_ {
  hasbot_difficulty_ = !!value_;
}
@synthesize bot_difficulty;
- (BOOL) hasAllowCheats {
  return !!hasAllowCheats_;
}
- (void) setHasAllowCheats:(BOOL) value_ {
  hasAllowCheats_ = !!value_;
}
- (BOOL) allowCheats {
  return !!allowCheats_;
}
- (void) setAllowCheats:(BOOL) value_ {
  allowCheats_ = !!value_;
}
- (BOOL) hasFillWithBots {
  return !!hasFillWithBots_;
}
- (void) setHasFillWithBots:(BOOL) value_ {
  hasFillWithBots_ = !!value_;
}
- (BOOL) fillWithBots {
  return !!fillWithBots_;
}
- (void) setFillWithBots:(BOOL) value_ {
  fillWithBots_ = !!value_;
}
- (BOOL) hasIntroMode {
  return !!hasIntroMode_;
}
- (void) setHasIntroMode:(BOOL) value_ {
  hasIntroMode_ = !!value_;
}
- (BOOL) introMode {
  return !!introMode_;
}
- (void) setIntroMode:(BOOL) value_ {
  introMode_ = !!value_;
}
- (BOOL) hasAllowSpectating {
  return !!hasAllowSpectating_;
}
- (void) setHasAllowSpectating:(BOOL) value_ {
  hasAllowSpectating_ = !!value_;
}
- (BOOL) allowSpectating {
  return !!allowSpectating_;
}
- (void) setAllowSpectating:(BOOL) value_ {
  allowSpectating_ = !!value_;
}
- (BOOL) hasgame_version {
  return !!hasgame_version_;
}
- (void) setHasgame_version:(BOOL) value_ {
  hasgame_version_ = !!value_;
}
@synthesize game_version;
- (BOOL) hasPassKey {
  return !!hasPassKey_;
}
- (void) setHasPassKey:(BOOL) value_ {
  hasPassKey_ = !!value_;
}
@synthesize passKey;
- (BOOL) hasLeagueid {
  return !!hasLeagueid_;
}
- (void) setHasLeagueid:(BOOL) value_ {
  hasLeagueid_ = !!value_;
}
@synthesize leagueid;
- (BOOL) hasPenaltyLevelRadiant {
  return !!hasPenaltyLevelRadiant_;
}
- (void) setHasPenaltyLevelRadiant:(BOOL) value_ {
  hasPenaltyLevelRadiant_ = !!value_;
}
@synthesize penaltyLevelRadiant;
- (BOOL) hasPenaltyLevelDire {
  return !!hasPenaltyLevelDire_;
}
- (void) setHasPenaltyLevelDire:(BOOL) value_ {
  hasPenaltyLevelDire_ = !!value_;
}
@synthesize penaltyLevelDire;
- (BOOL) hasLoadGameId {
  return !!hasLoadGameId_;
}
- (void) setHasLoadGameId:(BOOL) value_ {
  hasLoadGameId_ = !!value_;
}
@synthesize loadGameId;
- (BOOL) hasSeriesType {
  return !!hasSeriesType_;
}
- (void) setHasSeriesType:(BOOL) value_ {
  hasSeriesType_ = !!value_;
}
@synthesize seriesType;
- (BOOL) hasRadiantSeriesWins {
  return !!hasRadiantSeriesWins_;
}
- (void) setHasRadiantSeriesWins:(BOOL) value_ {
  hasRadiantSeriesWins_ = !!value_;
}
@synthesize radiantSeriesWins;
- (BOOL) hasDireSeriesWins {
  return !!hasDireSeriesWins_;
}
- (void) setHasDireSeriesWins:(BOOL) value_ {
  hasDireSeriesWins_ = !!value_;
}
@synthesize direSeriesWins;
- (void) dealloc {
  self.gameName = nil;
  self.teamDetailsArray = nil;
  self.passKey = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lobbyId = 0L;
    self.gameName = @"";
    self.serverRegion = 0;
    self.gameMode = 0;
    self.cm_pick = DOTA_CM_PICKDOTA_CM_RANDOM;
    self.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_MEDIUM;
    self.allowCheats = NO;
    self.fillWithBots = NO;
    self.introMode = NO;
    self.allowSpectating = NO;
    self.game_version = DOTAGameVersionGAME_VERSION_CURRENT;
    self.passKey = @"";
    self.leagueid = 0;
    self.penaltyLevelRadiant = 0;
    self.penaltyLevelDire = 0;
    self.loadGameId = 0;
    self.seriesType = 0;
    self.radiantSeriesWins = 0;
    self.direSeriesWins = 0;
  }
  return self;
}
static CMsgPracticeLobbySetDetails* defaultCMsgPracticeLobbySetDetailsInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbySetDetails class]) {
    defaultCMsgPracticeLobbySetDetailsInstance = [[CMsgPracticeLobbySetDetails alloc] init];
  }
}
+ (CMsgPracticeLobbySetDetails*) defaultInstance {
  return defaultCMsgPracticeLobbySetDetailsInstance;
}
- (CMsgPracticeLobbySetDetails*) defaultInstance {
  return defaultCMsgPracticeLobbySetDetailsInstance;
}
- (PBArray *)teamDetails {
  return teamDetailsArray;
}
- (CLobbyTeamDetails*)teamDetailsAtIndex:(NSUInteger)index {
  return [teamDetailsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLobbyId) {
    [output writeUInt64:1 value:self.lobbyId];
  }
  if (self.hasGameName) {
    [output writeString:2 value:self.gameName];
  }
  for (CLobbyTeamDetails *element in self.teamDetailsArray) {
    [output writeMessage:3 value:element];
  }
  if (self.hasServerRegion) {
    [output writeUInt32:4 value:self.serverRegion];
  }
  if (self.hasGameMode) {
    [output writeUInt32:5 value:self.gameMode];
  }
  if (self.hascm_pick) {
    [output writeEnum:6 value:self.cm_pick];
  }
  if (self.hasbot_difficulty) {
    [output writeEnum:9 value:self.bot_difficulty];
  }
  if (self.hasAllowCheats) {
    [output writeBool:10 value:self.allowCheats];
  }
  if (self.hasFillWithBots) {
    [output writeBool:11 value:self.fillWithBots];
  }
  if (self.hasIntroMode) {
    [output writeBool:12 value:self.introMode];
  }
  if (self.hasAllowSpectating) {
    [output writeBool:13 value:self.allowSpectating];
  }
  if (self.hasgame_version) {
    [output writeEnum:14 value:self.game_version];
  }
  if (self.hasPassKey) {
    [output writeString:15 value:self.passKey];
  }
  if (self.hasLeagueid) {
    [output writeUInt32:16 value:self.leagueid];
  }
  if (self.hasPenaltyLevelRadiant) {
    [output writeUInt32:17 value:self.penaltyLevelRadiant];
  }
  if (self.hasPenaltyLevelDire) {
    [output writeUInt32:18 value:self.penaltyLevelDire];
  }
  if (self.hasLoadGameId) {
    [output writeUInt32:19 value:self.loadGameId];
  }
  if (self.hasSeriesType) {
    [output writeUInt32:20 value:self.seriesType];
  }
  if (self.hasRadiantSeriesWins) {
    [output writeUInt32:21 value:self.radiantSeriesWins];
  }
  if (self.hasDireSeriesWins) {
    [output writeUInt32:22 value:self.direSeriesWins];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLobbyId) {
    size_ += computeUInt64Size(1, self.lobbyId);
  }
  if (self.hasGameName) {
    size_ += computeStringSize(2, self.gameName);
  }
  for (CLobbyTeamDetails *element in self.teamDetailsArray) {
    size_ += computeMessageSize(3, element);
  }
  if (self.hasServerRegion) {
    size_ += computeUInt32Size(4, self.serverRegion);
  }
  if (self.hasGameMode) {
    size_ += computeUInt32Size(5, self.gameMode);
  }
  if (self.hascm_pick) {
    size_ += computeEnumSize(6, self.cm_pick);
  }
  if (self.hasbot_difficulty) {
    size_ += computeEnumSize(9, self.bot_difficulty);
  }
  if (self.hasAllowCheats) {
    size_ += computeBoolSize(10, self.allowCheats);
  }
  if (self.hasFillWithBots) {
    size_ += computeBoolSize(11, self.fillWithBots);
  }
  if (self.hasIntroMode) {
    size_ += computeBoolSize(12, self.introMode);
  }
  if (self.hasAllowSpectating) {
    size_ += computeBoolSize(13, self.allowSpectating);
  }
  if (self.hasgame_version) {
    size_ += computeEnumSize(14, self.game_version);
  }
  if (self.hasPassKey) {
    size_ += computeStringSize(15, self.passKey);
  }
  if (self.hasLeagueid) {
    size_ += computeUInt32Size(16, self.leagueid);
  }
  if (self.hasPenaltyLevelRadiant) {
    size_ += computeUInt32Size(17, self.penaltyLevelRadiant);
  }
  if (self.hasPenaltyLevelDire) {
    size_ += computeUInt32Size(18, self.penaltyLevelDire);
  }
  if (self.hasLoadGameId) {
    size_ += computeUInt32Size(19, self.loadGameId);
  }
  if (self.hasSeriesType) {
    size_ += computeUInt32Size(20, self.seriesType);
  }
  if (self.hasRadiantSeriesWins) {
    size_ += computeUInt32Size(21, self.radiantSeriesWins);
  }
  if (self.hasDireSeriesWins) {
    size_ += computeUInt32Size(22, self.direSeriesWins);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbySetDetails*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbySetDetails*)[[[CMsgPracticeLobbySetDetails builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbySetDetails*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbySetDetails*)[[[CMsgPracticeLobbySetDetails builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbySetDetails*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbySetDetails*)[[[CMsgPracticeLobbySetDetails builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbySetDetails*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbySetDetails*)[[[CMsgPracticeLobbySetDetails builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbySetDetails*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbySetDetails*)[[[CMsgPracticeLobbySetDetails builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbySetDetails*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbySetDetails*)[[[CMsgPracticeLobbySetDetails builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbySetDetails_Builder*) builder {
  return [[[CMsgPracticeLobbySetDetails_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbySetDetails_Builder*) builderWithPrototype:(CMsgPracticeLobbySetDetails*) prototype {
  return [[CMsgPracticeLobbySetDetails builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbySetDetails_Builder*) builder {
  return [CMsgPracticeLobbySetDetails builder];
}
- (CMsgPracticeLobbySetDetails_Builder*) toBuilder {
  return [CMsgPracticeLobbySetDetails builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLobbyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyId", [NSNumber numberWithLongLong:self.lobbyId]];
  }
  if (self.hasGameName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameName", self.gameName];
  }
  for (CLobbyTeamDetails* element in self.teamDetailsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"teamDetails"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasServerRegion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverRegion", [NSNumber numberWithInt:self.serverRegion]];
  }
  if (self.hasGameMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameMode", [NSNumber numberWithInt:self.gameMode]];
  }
  if (self.hascm_pick) {
    [output appendFormat:@"%@%@: %d\n", indent, @"cm_pick", self.cm_pick];
  }
  if (self.hasbot_difficulty) {
    [output appendFormat:@"%@%@: %d\n", indent, @"bot_difficulty", self.bot_difficulty];
  }
  if (self.hasAllowCheats) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowCheats", [NSNumber numberWithBool:self.allowCheats]];
  }
  if (self.hasFillWithBots) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fillWithBots", [NSNumber numberWithBool:self.fillWithBots]];
  }
  if (self.hasIntroMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"introMode", [NSNumber numberWithBool:self.introMode]];
  }
  if (self.hasAllowSpectating) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowSpectating", [NSNumber numberWithBool:self.allowSpectating]];
  }
  if (self.hasgame_version) {
    [output appendFormat:@"%@%@: %d\n", indent, @"game_version", self.game_version];
  }
  if (self.hasPassKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passKey", self.passKey];
  }
  if (self.hasLeagueid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueid", [NSNumber numberWithInt:self.leagueid]];
  }
  if (self.hasPenaltyLevelRadiant) {
    [output appendFormat:@"%@%@: %@\n", indent, @"penaltyLevelRadiant", [NSNumber numberWithInt:self.penaltyLevelRadiant]];
  }
  if (self.hasPenaltyLevelDire) {
    [output appendFormat:@"%@%@: %@\n", indent, @"penaltyLevelDire", [NSNumber numberWithInt:self.penaltyLevelDire]];
  }
  if (self.hasLoadGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loadGameId", [NSNumber numberWithInt:self.loadGameId]];
  }
  if (self.hasSeriesType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seriesType", [NSNumber numberWithInt:self.seriesType]];
  }
  if (self.hasRadiantSeriesWins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"radiantSeriesWins", [NSNumber numberWithInt:self.radiantSeriesWins]];
  }
  if (self.hasDireSeriesWins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direSeriesWins", [NSNumber numberWithInt:self.direSeriesWins]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbySetDetails class]]) {
    return NO;
  }
  CMsgPracticeLobbySetDetails *otherMessage = other;
  return
      self.hasLobbyId == otherMessage.hasLobbyId &&
      (!self.hasLobbyId || self.lobbyId == otherMessage.lobbyId) &&
      self.hasGameName == otherMessage.hasGameName &&
      (!self.hasGameName || [self.gameName isEqual:otherMessage.gameName]) &&
      [self.teamDetailsArray isEqualToArray:otherMessage.teamDetailsArray] &&
      self.hasServerRegion == otherMessage.hasServerRegion &&
      (!self.hasServerRegion || self.serverRegion == otherMessage.serverRegion) &&
      self.hasGameMode == otherMessage.hasGameMode &&
      (!self.hasGameMode || self.gameMode == otherMessage.gameMode) &&
      self.hascm_pick == otherMessage.hascm_pick &&
      (!self.hascm_pick || self.cm_pick == otherMessage.cm_pick) &&
      self.hasbot_difficulty == otherMessage.hasbot_difficulty &&
      (!self.hasbot_difficulty || self.bot_difficulty == otherMessage.bot_difficulty) &&
      self.hasAllowCheats == otherMessage.hasAllowCheats &&
      (!self.hasAllowCheats || self.allowCheats == otherMessage.allowCheats) &&
      self.hasFillWithBots == otherMessage.hasFillWithBots &&
      (!self.hasFillWithBots || self.fillWithBots == otherMessage.fillWithBots) &&
      self.hasIntroMode == otherMessage.hasIntroMode &&
      (!self.hasIntroMode || self.introMode == otherMessage.introMode) &&
      self.hasAllowSpectating == otherMessage.hasAllowSpectating &&
      (!self.hasAllowSpectating || self.allowSpectating == otherMessage.allowSpectating) &&
      self.hasgame_version == otherMessage.hasgame_version &&
      (!self.hasgame_version || self.game_version == otherMessage.game_version) &&
      self.hasPassKey == otherMessage.hasPassKey &&
      (!self.hasPassKey || [self.passKey isEqual:otherMessage.passKey]) &&
      self.hasLeagueid == otherMessage.hasLeagueid &&
      (!self.hasLeagueid || self.leagueid == otherMessage.leagueid) &&
      self.hasPenaltyLevelRadiant == otherMessage.hasPenaltyLevelRadiant &&
      (!self.hasPenaltyLevelRadiant || self.penaltyLevelRadiant == otherMessage.penaltyLevelRadiant) &&
      self.hasPenaltyLevelDire == otherMessage.hasPenaltyLevelDire &&
      (!self.hasPenaltyLevelDire || self.penaltyLevelDire == otherMessage.penaltyLevelDire) &&
      self.hasLoadGameId == otherMessage.hasLoadGameId &&
      (!self.hasLoadGameId || self.loadGameId == otherMessage.loadGameId) &&
      self.hasSeriesType == otherMessage.hasSeriesType &&
      (!self.hasSeriesType || self.seriesType == otherMessage.seriesType) &&
      self.hasRadiantSeriesWins == otherMessage.hasRadiantSeriesWins &&
      (!self.hasRadiantSeriesWins || self.radiantSeriesWins == otherMessage.radiantSeriesWins) &&
      self.hasDireSeriesWins == otherMessage.hasDireSeriesWins &&
      (!self.hasDireSeriesWins || self.direSeriesWins == otherMessage.direSeriesWins) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLobbyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lobbyId] hash];
  }
  if (self.hasGameName) {
    hashCode = hashCode * 31 + [self.gameName hash];
  }
  for (CLobbyTeamDetails* element in self.teamDetailsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasServerRegion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverRegion] hash];
  }
  if (self.hasGameMode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameMode] hash];
  }
  if (self.hascm_pick) {
    hashCode = hashCode * 31 + self.cm_pick;
  }
  if (self.hasbot_difficulty) {
    hashCode = hashCode * 31 + self.bot_difficulty;
  }
  if (self.hasAllowCheats) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.allowCheats] hash];
  }
  if (self.hasFillWithBots) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.fillWithBots] hash];
  }
  if (self.hasIntroMode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.introMode] hash];
  }
  if (self.hasAllowSpectating) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.allowSpectating] hash];
  }
  if (self.hasgame_version) {
    hashCode = hashCode * 31 + self.game_version;
  }
  if (self.hasPassKey) {
    hashCode = hashCode * 31 + [self.passKey hash];
  }
  if (self.hasLeagueid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leagueid] hash];
  }
  if (self.hasPenaltyLevelRadiant) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.penaltyLevelRadiant] hash];
  }
  if (self.hasPenaltyLevelDire) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.penaltyLevelDire] hash];
  }
  if (self.hasLoadGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.loadGameId] hash];
  }
  if (self.hasSeriesType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.seriesType] hash];
  }
  if (self.hasRadiantSeriesWins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.radiantSeriesWins] hash];
  }
  if (self.hasDireSeriesWins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.direSeriesWins] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbySetDetails_Builder()
@property (retain) CMsgPracticeLobbySetDetails* _builderResult;
@end

@implementation CMsgPracticeLobbySetDetails_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbySetDetails alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbySetDetails_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbySetDetails alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clone {
  return [CMsgPracticeLobbySetDetails builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbySetDetails*) defaultInstance {
  return [CMsgPracticeLobbySetDetails defaultInstance];
}
- (CMsgPracticeLobbySetDetails*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbySetDetails*) buildPartial {
  CMsgPracticeLobbySetDetails* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbySetDetails_Builder*) mergeFrom:(CMsgPracticeLobbySetDetails*) other {
  if (other == [CMsgPracticeLobbySetDetails defaultInstance]) {
    return self;
  }
  if (other.hasLobbyId) {
    [self setLobbyId:other.lobbyId];
  }
  if (other.hasGameName) {
    [self setGameName:other.gameName];
  }
  if (other.teamDetailsArray.count > 0) {
    if (_builderResult.teamDetailsArray == nil) {
      _builderResult.teamDetailsArray = [[other.teamDetailsArray copyWithZone:[other.teamDetailsArray zone]] autorelease];
    } else {
      [_builderResult.teamDetailsArray appendArray:other.teamDetailsArray];
    }
  }
  if (other.hasServerRegion) {
    [self setServerRegion:other.serverRegion];
  }
  if (other.hasGameMode) {
    [self setGameMode:other.gameMode];
  }
  if (other.hascm_pick) {
    [self setcm_pick:other.cm_pick];
  }
  if (other.hasbot_difficulty) {
    [self setbot_difficulty:other.bot_difficulty];
  }
  if (other.hasAllowCheats) {
    [self setAllowCheats:other.allowCheats];
  }
  if (other.hasFillWithBots) {
    [self setFillWithBots:other.fillWithBots];
  }
  if (other.hasIntroMode) {
    [self setIntroMode:other.introMode];
  }
  if (other.hasAllowSpectating) {
    [self setAllowSpectating:other.allowSpectating];
  }
  if (other.hasgame_version) {
    [self setgame_version:other.game_version];
  }
  if (other.hasPassKey) {
    [self setPassKey:other.passKey];
  }
  if (other.hasLeagueid) {
    [self setLeagueid:other.leagueid];
  }
  if (other.hasPenaltyLevelRadiant) {
    [self setPenaltyLevelRadiant:other.penaltyLevelRadiant];
  }
  if (other.hasPenaltyLevelDire) {
    [self setPenaltyLevelDire:other.penaltyLevelDire];
  }
  if (other.hasLoadGameId) {
    [self setLoadGameId:other.loadGameId];
  }
  if (other.hasSeriesType) {
    [self setSeriesType:other.seriesType];
  }
  if (other.hasRadiantSeriesWins) {
    [self setRadiantSeriesWins:other.radiantSeriesWins];
  }
  if (other.hasDireSeriesWins) {
    [self setDireSeriesWins:other.direSeriesWins];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbySetDetails_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLobbyId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setGameName:[input readString]];
        break;
      }
      case 26: {
        CLobbyTeamDetails_Builder* subBuilder = [CLobbyTeamDetails builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeamDetails:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setServerRegion:[input readUInt32]];
        break;
      }
      case 40: {
        [self setGameMode:[input readUInt32]];
        break;
      }
      case 48: {
        int32_t value = [input readEnum];
        if (DOTA_CM_PICKIsValidValue(value)) {
          [self setcm_pick:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 72: {
        int32_t value = [input readEnum];
        if (DOTABotDifficultyIsValidValue(value)) {
          [self setbot_difficulty:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 80: {
        [self setAllowCheats:[input readBool]];
        break;
      }
      case 88: {
        [self setFillWithBots:[input readBool]];
        break;
      }
      case 96: {
        [self setIntroMode:[input readBool]];
        break;
      }
      case 104: {
        [self setAllowSpectating:[input readBool]];
        break;
      }
      case 112: {
        int32_t value = [input readEnum];
        if (DOTAGameVersionIsValidValue(value)) {
          [self setgame_version:value];
        } else {
          [unknownFields mergeVarintField:14 value:value];
        }
        break;
      }
      case 122: {
        [self setPassKey:[input readString]];
        break;
      }
      case 128: {
        [self setLeagueid:[input readUInt32]];
        break;
      }
      case 136: {
        [self setPenaltyLevelRadiant:[input readUInt32]];
        break;
      }
      case 144: {
        [self setPenaltyLevelDire:[input readUInt32]];
        break;
      }
      case 152: {
        [self setLoadGameId:[input readUInt32]];
        break;
      }
      case 160: {
        [self setSeriesType:[input readUInt32]];
        break;
      }
      case 168: {
        [self setRadiantSeriesWins:[input readUInt32]];
        break;
      }
      case 176: {
        [self setDireSeriesWins:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLobbyId {
  return _builderResult.hasLobbyId;
}
- (uint64_t) lobbyId {
  return _builderResult.lobbyId;
}
- (CMsgPracticeLobbySetDetails_Builder*) setLobbyId:(uint64_t) value {
  _builderResult.hasLobbyId = YES;
  _builderResult.lobbyId = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearLobbyId {
  _builderResult.hasLobbyId = NO;
  _builderResult.lobbyId = 0L;
  return self;
}
- (BOOL) hasGameName {
  return _builderResult.hasGameName;
}
- (NSString*) gameName {
  return _builderResult.gameName;
}
- (CMsgPracticeLobbySetDetails_Builder*) setGameName:(NSString*) value {
  _builderResult.hasGameName = YES;
  _builderResult.gameName = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearGameName {
  _builderResult.hasGameName = NO;
  _builderResult.gameName = @"";
  return self;
}
- (PBAppendableArray *)teamDetails {
  return _builderResult.teamDetailsArray;
}
- (CLobbyTeamDetails*)teamDetailsAtIndex:(NSUInteger)index {
  return [_builderResult teamDetailsAtIndex:index];
}
- (CMsgPracticeLobbySetDetails_Builder *)addTeamDetails:(CLobbyTeamDetails*)value {
  if (_builderResult.teamDetailsArray == nil) {
    _builderResult.teamDetailsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.teamDetailsArray addObject:value];
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder *)setTeamDetailsArray:(NSArray *)array {
  _builderResult.teamDetailsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder *)setTeamDetailsValues:(const CLobbyTeamDetails* *)values count:(NSUInteger)count {
  _builderResult.teamDetailsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder *)clearTeamDetails {
  _builderResult.teamDetailsArray = nil;
  return self;
}
- (BOOL) hasServerRegion {
  return _builderResult.hasServerRegion;
}
- (uint32_t) serverRegion {
  return _builderResult.serverRegion;
}
- (CMsgPracticeLobbySetDetails_Builder*) setServerRegion:(uint32_t) value {
  _builderResult.hasServerRegion = YES;
  _builderResult.serverRegion = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearServerRegion {
  _builderResult.hasServerRegion = NO;
  _builderResult.serverRegion = 0;
  return self;
}
- (BOOL) hasGameMode {
  return _builderResult.hasGameMode;
}
- (uint32_t) gameMode {
  return _builderResult.gameMode;
}
- (CMsgPracticeLobbySetDetails_Builder*) setGameMode:(uint32_t) value {
  _builderResult.hasGameMode = YES;
  _builderResult.gameMode = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearGameMode {
  _builderResult.hasGameMode = NO;
  _builderResult.gameMode = 0;
  return self;
}
- (BOOL) hascm_pick {
  return _builderResult.hascm_pick;
}
- (DOTA_CM_PICK) cm_pick {
  return _builderResult.cm_pick;
}
- (CMsgPracticeLobbySetDetails_Builder*) setcm_pick:(DOTA_CM_PICK) value {
  _builderResult.hascm_pick = YES;
  _builderResult.cm_pick = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearcm_pick {
  _builderResult.hascm_pick = NO;
  _builderResult.cm_pick = DOTA_CM_PICKDOTA_CM_RANDOM;
  return self;
}
- (BOOL) hasbot_difficulty {
  return _builderResult.hasbot_difficulty;
}
- (DOTABotDifficulty) bot_difficulty {
  return _builderResult.bot_difficulty;
}
- (CMsgPracticeLobbySetDetails_Builder*) setbot_difficulty:(DOTABotDifficulty) value {
  _builderResult.hasbot_difficulty = YES;
  _builderResult.bot_difficulty = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearbot_difficulty {
  _builderResult.hasbot_difficulty = NO;
  _builderResult.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_MEDIUM;
  return self;
}
- (BOOL) hasAllowCheats {
  return _builderResult.hasAllowCheats;
}
- (BOOL) allowCheats {
  return _builderResult.allowCheats;
}
- (CMsgPracticeLobbySetDetails_Builder*) setAllowCheats:(BOOL) value {
  _builderResult.hasAllowCheats = YES;
  _builderResult.allowCheats = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearAllowCheats {
  _builderResult.hasAllowCheats = NO;
  _builderResult.allowCheats = NO;
  return self;
}
- (BOOL) hasFillWithBots {
  return _builderResult.hasFillWithBots;
}
- (BOOL) fillWithBots {
  return _builderResult.fillWithBots;
}
- (CMsgPracticeLobbySetDetails_Builder*) setFillWithBots:(BOOL) value {
  _builderResult.hasFillWithBots = YES;
  _builderResult.fillWithBots = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearFillWithBots {
  _builderResult.hasFillWithBots = NO;
  _builderResult.fillWithBots = NO;
  return self;
}
- (BOOL) hasIntroMode {
  return _builderResult.hasIntroMode;
}
- (BOOL) introMode {
  return _builderResult.introMode;
}
- (CMsgPracticeLobbySetDetails_Builder*) setIntroMode:(BOOL) value {
  _builderResult.hasIntroMode = YES;
  _builderResult.introMode = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearIntroMode {
  _builderResult.hasIntroMode = NO;
  _builderResult.introMode = NO;
  return self;
}
- (BOOL) hasAllowSpectating {
  return _builderResult.hasAllowSpectating;
}
- (BOOL) allowSpectating {
  return _builderResult.allowSpectating;
}
- (CMsgPracticeLobbySetDetails_Builder*) setAllowSpectating:(BOOL) value {
  _builderResult.hasAllowSpectating = YES;
  _builderResult.allowSpectating = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearAllowSpectating {
  _builderResult.hasAllowSpectating = NO;
  _builderResult.allowSpectating = NO;
  return self;
}
- (BOOL) hasgame_version {
  return _builderResult.hasgame_version;
}
- (DOTAGameVersion) game_version {
  return _builderResult.game_version;
}
- (CMsgPracticeLobbySetDetails_Builder*) setgame_version:(DOTAGameVersion) value {
  _builderResult.hasgame_version = YES;
  _builderResult.game_version = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) cleargame_version {
  _builderResult.hasgame_version = NO;
  _builderResult.game_version = DOTAGameVersionGAME_VERSION_CURRENT;
  return self;
}
- (BOOL) hasPassKey {
  return _builderResult.hasPassKey;
}
- (NSString*) passKey {
  return _builderResult.passKey;
}
- (CMsgPracticeLobbySetDetails_Builder*) setPassKey:(NSString*) value {
  _builderResult.hasPassKey = YES;
  _builderResult.passKey = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearPassKey {
  _builderResult.hasPassKey = NO;
  _builderResult.passKey = @"";
  return self;
}
- (BOOL) hasLeagueid {
  return _builderResult.hasLeagueid;
}
- (uint32_t) leagueid {
  return _builderResult.leagueid;
}
- (CMsgPracticeLobbySetDetails_Builder*) setLeagueid:(uint32_t) value {
  _builderResult.hasLeagueid = YES;
  _builderResult.leagueid = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearLeagueid {
  _builderResult.hasLeagueid = NO;
  _builderResult.leagueid = 0;
  return self;
}
- (BOOL) hasPenaltyLevelRadiant {
  return _builderResult.hasPenaltyLevelRadiant;
}
- (uint32_t) penaltyLevelRadiant {
  return _builderResult.penaltyLevelRadiant;
}
- (CMsgPracticeLobbySetDetails_Builder*) setPenaltyLevelRadiant:(uint32_t) value {
  _builderResult.hasPenaltyLevelRadiant = YES;
  _builderResult.penaltyLevelRadiant = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearPenaltyLevelRadiant {
  _builderResult.hasPenaltyLevelRadiant = NO;
  _builderResult.penaltyLevelRadiant = 0;
  return self;
}
- (BOOL) hasPenaltyLevelDire {
  return _builderResult.hasPenaltyLevelDire;
}
- (uint32_t) penaltyLevelDire {
  return _builderResult.penaltyLevelDire;
}
- (CMsgPracticeLobbySetDetails_Builder*) setPenaltyLevelDire:(uint32_t) value {
  _builderResult.hasPenaltyLevelDire = YES;
  _builderResult.penaltyLevelDire = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearPenaltyLevelDire {
  _builderResult.hasPenaltyLevelDire = NO;
  _builderResult.penaltyLevelDire = 0;
  return self;
}
- (BOOL) hasLoadGameId {
  return _builderResult.hasLoadGameId;
}
- (uint32_t) loadGameId {
  return _builderResult.loadGameId;
}
- (CMsgPracticeLobbySetDetails_Builder*) setLoadGameId:(uint32_t) value {
  _builderResult.hasLoadGameId = YES;
  _builderResult.loadGameId = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearLoadGameId {
  _builderResult.hasLoadGameId = NO;
  _builderResult.loadGameId = 0;
  return self;
}
- (BOOL) hasSeriesType {
  return _builderResult.hasSeriesType;
}
- (uint32_t) seriesType {
  return _builderResult.seriesType;
}
- (CMsgPracticeLobbySetDetails_Builder*) setSeriesType:(uint32_t) value {
  _builderResult.hasSeriesType = YES;
  _builderResult.seriesType = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearSeriesType {
  _builderResult.hasSeriesType = NO;
  _builderResult.seriesType = 0;
  return self;
}
- (BOOL) hasRadiantSeriesWins {
  return _builderResult.hasRadiantSeriesWins;
}
- (uint32_t) radiantSeriesWins {
  return _builderResult.radiantSeriesWins;
}
- (CMsgPracticeLobbySetDetails_Builder*) setRadiantSeriesWins:(uint32_t) value {
  _builderResult.hasRadiantSeriesWins = YES;
  _builderResult.radiantSeriesWins = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearRadiantSeriesWins {
  _builderResult.hasRadiantSeriesWins = NO;
  _builderResult.radiantSeriesWins = 0;
  return self;
}
- (BOOL) hasDireSeriesWins {
  return _builderResult.hasDireSeriesWins;
}
- (uint32_t) direSeriesWins {
  return _builderResult.direSeriesWins;
}
- (CMsgPracticeLobbySetDetails_Builder*) setDireSeriesWins:(uint32_t) value {
  _builderResult.hasDireSeriesWins = YES;
  _builderResult.direSeriesWins = value;
  return self;
}
- (CMsgPracticeLobbySetDetails_Builder*) clearDireSeriesWins {
  _builderResult.hasDireSeriesWins = NO;
  _builderResult.direSeriesWins = 0;
  return self;
}
@end

@interface CMsgPracticeLobbyCreate ()
@property (retain) NSString* searchKey;
@property BOOL tournamentGame;
@property uint32_t tournamentGameId;
@property uint32_t tournamentId;
@property (retain) NSString* passKey;
@property uint32_t clientVersion;
@property (retain) CMsgPracticeLobbySetDetails* lobbyDetails;
@end

@implementation CMsgPracticeLobbyCreate

- (BOOL) hasSearchKey {
  return !!hasSearchKey_;
}
- (void) setHasSearchKey:(BOOL) value_ {
  hasSearchKey_ = !!value_;
}
@synthesize searchKey;
- (BOOL) hasTournamentGame {
  return !!hasTournamentGame_;
}
- (void) setHasTournamentGame:(BOOL) value_ {
  hasTournamentGame_ = !!value_;
}
- (BOOL) tournamentGame {
  return !!tournamentGame_;
}
- (void) setTournamentGame:(BOOL) value_ {
  tournamentGame_ = !!value_;
}
- (BOOL) hasTournamentGameId {
  return !!hasTournamentGameId_;
}
- (void) setHasTournamentGameId:(BOOL) value_ {
  hasTournamentGameId_ = !!value_;
}
@synthesize tournamentGameId;
- (BOOL) hasTournamentId {
  return !!hasTournamentId_;
}
- (void) setHasTournamentId:(BOOL) value_ {
  hasTournamentId_ = !!value_;
}
@synthesize tournamentId;
- (BOOL) hasPassKey {
  return !!hasPassKey_;
}
- (void) setHasPassKey:(BOOL) value_ {
  hasPassKey_ = !!value_;
}
@synthesize passKey;
- (BOOL) hasClientVersion {
  return !!hasClientVersion_;
}
- (void) setHasClientVersion:(BOOL) value_ {
  hasClientVersion_ = !!value_;
}
@synthesize clientVersion;
- (BOOL) hasLobbyDetails {
  return !!hasLobbyDetails_;
}
- (void) setHasLobbyDetails:(BOOL) value_ {
  hasLobbyDetails_ = !!value_;
}
@synthesize lobbyDetails;
- (void) dealloc {
  self.searchKey = nil;
  self.passKey = nil;
  self.lobbyDetails = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.searchKey = @"";
    self.tournamentGame = NO;
    self.tournamentGameId = 0;
    self.tournamentId = 0;
    self.passKey = @"";
    self.clientVersion = 0;
    self.lobbyDetails = [CMsgPracticeLobbySetDetails defaultInstance];
  }
  return self;
}
static CMsgPracticeLobbyCreate* defaultCMsgPracticeLobbyCreateInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyCreate class]) {
    defaultCMsgPracticeLobbyCreateInstance = [[CMsgPracticeLobbyCreate alloc] init];
  }
}
+ (CMsgPracticeLobbyCreate*) defaultInstance {
  return defaultCMsgPracticeLobbyCreateInstance;
}
- (CMsgPracticeLobbyCreate*) defaultInstance {
  return defaultCMsgPracticeLobbyCreateInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSearchKey) {
    [output writeString:1 value:self.searchKey];
  }
  if (self.hasTournamentGame) {
    [output writeBool:2 value:self.tournamentGame];
  }
  if (self.hasTournamentGameId) {
    [output writeUInt32:3 value:self.tournamentGameId];
  }
  if (self.hasTournamentId) {
    [output writeUInt32:4 value:self.tournamentId];
  }
  if (self.hasPassKey) {
    [output writeString:5 value:self.passKey];
  }
  if (self.hasClientVersion) {
    [output writeUInt32:6 value:self.clientVersion];
  }
  if (self.hasLobbyDetails) {
    [output writeMessage:7 value:self.lobbyDetails];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSearchKey) {
    size_ += computeStringSize(1, self.searchKey);
  }
  if (self.hasTournamentGame) {
    size_ += computeBoolSize(2, self.tournamentGame);
  }
  if (self.hasTournamentGameId) {
    size_ += computeUInt32Size(3, self.tournamentGameId);
  }
  if (self.hasTournamentId) {
    size_ += computeUInt32Size(4, self.tournamentId);
  }
  if (self.hasPassKey) {
    size_ += computeStringSize(5, self.passKey);
  }
  if (self.hasClientVersion) {
    size_ += computeUInt32Size(6, self.clientVersion);
  }
  if (self.hasLobbyDetails) {
    size_ += computeMessageSize(7, self.lobbyDetails);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyCreate*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyCreate*)[[[CMsgPracticeLobbyCreate builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyCreate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyCreate*)[[[CMsgPracticeLobbyCreate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyCreate*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyCreate*)[[[CMsgPracticeLobbyCreate builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyCreate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyCreate*)[[[CMsgPracticeLobbyCreate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyCreate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyCreate*)[[[CMsgPracticeLobbyCreate builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyCreate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyCreate*)[[[CMsgPracticeLobbyCreate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyCreate_Builder*) builder {
  return [[[CMsgPracticeLobbyCreate_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyCreate_Builder*) builderWithPrototype:(CMsgPracticeLobbyCreate*) prototype {
  return [[CMsgPracticeLobbyCreate builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyCreate_Builder*) builder {
  return [CMsgPracticeLobbyCreate builder];
}
- (CMsgPracticeLobbyCreate_Builder*) toBuilder {
  return [CMsgPracticeLobbyCreate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSearchKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchKey", self.searchKey];
  }
  if (self.hasTournamentGame) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentGame", [NSNumber numberWithBool:self.tournamentGame]];
  }
  if (self.hasTournamentGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentGameId", [NSNumber numberWithInt:self.tournamentGameId]];
  }
  if (self.hasTournamentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentId", [NSNumber numberWithInt:self.tournamentId]];
  }
  if (self.hasPassKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passKey", self.passKey];
  }
  if (self.hasClientVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientVersion", [NSNumber numberWithInt:self.clientVersion]];
  }
  if (self.hasLobbyDetails) {
    [output appendFormat:@"%@%@ {\n", indent, @"lobbyDetails"];
    [self.lobbyDetails writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyCreate class]]) {
    return NO;
  }
  CMsgPracticeLobbyCreate *otherMessage = other;
  return
      self.hasSearchKey == otherMessage.hasSearchKey &&
      (!self.hasSearchKey || [self.searchKey isEqual:otherMessage.searchKey]) &&
      self.hasTournamentGame == otherMessage.hasTournamentGame &&
      (!self.hasTournamentGame || self.tournamentGame == otherMessage.tournamentGame) &&
      self.hasTournamentGameId == otherMessage.hasTournamentGameId &&
      (!self.hasTournamentGameId || self.tournamentGameId == otherMessage.tournamentGameId) &&
      self.hasTournamentId == otherMessage.hasTournamentId &&
      (!self.hasTournamentId || self.tournamentId == otherMessage.tournamentId) &&
      self.hasPassKey == otherMessage.hasPassKey &&
      (!self.hasPassKey || [self.passKey isEqual:otherMessage.passKey]) &&
      self.hasClientVersion == otherMessage.hasClientVersion &&
      (!self.hasClientVersion || self.clientVersion == otherMessage.clientVersion) &&
      self.hasLobbyDetails == otherMessage.hasLobbyDetails &&
      (!self.hasLobbyDetails || [self.lobbyDetails isEqual:otherMessage.lobbyDetails]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSearchKey) {
    hashCode = hashCode * 31 + [self.searchKey hash];
  }
  if (self.hasTournamentGame) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tournamentGame] hash];
  }
  if (self.hasTournamentGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentGameId] hash];
  }
  if (self.hasTournamentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentId] hash];
  }
  if (self.hasPassKey) {
    hashCode = hashCode * 31 + [self.passKey hash];
  }
  if (self.hasClientVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.clientVersion] hash];
  }
  if (self.hasLobbyDetails) {
    hashCode = hashCode * 31 + [self.lobbyDetails hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyCreate_Builder()
@property (retain) CMsgPracticeLobbyCreate* _builderResult;
@end

@implementation CMsgPracticeLobbyCreate_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyCreate alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyCreate_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyCreate alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) clone {
  return [CMsgPracticeLobbyCreate builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyCreate*) defaultInstance {
  return [CMsgPracticeLobbyCreate defaultInstance];
}
- (CMsgPracticeLobbyCreate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyCreate*) buildPartial {
  CMsgPracticeLobbyCreate* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyCreate_Builder*) mergeFrom:(CMsgPracticeLobbyCreate*) other {
  if (other == [CMsgPracticeLobbyCreate defaultInstance]) {
    return self;
  }
  if (other.hasSearchKey) {
    [self setSearchKey:other.searchKey];
  }
  if (other.hasTournamentGame) {
    [self setTournamentGame:other.tournamentGame];
  }
  if (other.hasTournamentGameId) {
    [self setTournamentGameId:other.tournamentGameId];
  }
  if (other.hasTournamentId) {
    [self setTournamentId:other.tournamentId];
  }
  if (other.hasPassKey) {
    [self setPassKey:other.passKey];
  }
  if (other.hasClientVersion) {
    [self setClientVersion:other.clientVersion];
  }
  if (other.hasLobbyDetails) {
    [self mergeLobbyDetails:other.lobbyDetails];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyCreate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSearchKey:[input readString]];
        break;
      }
      case 16: {
        [self setTournamentGame:[input readBool]];
        break;
      }
      case 24: {
        [self setTournamentGameId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setTournamentId:[input readUInt32]];
        break;
      }
      case 42: {
        [self setPassKey:[input readString]];
        break;
      }
      case 48: {
        [self setClientVersion:[input readUInt32]];
        break;
      }
      case 58: {
        CMsgPracticeLobbySetDetails_Builder* subBuilder = [CMsgPracticeLobbySetDetails builder];
        if (self.hasLobbyDetails) {
          [subBuilder mergeFrom:self.lobbyDetails];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLobbyDetails:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSearchKey {
  return _builderResult.hasSearchKey;
}
- (NSString*) searchKey {
  return _builderResult.searchKey;
}
- (CMsgPracticeLobbyCreate_Builder*) setSearchKey:(NSString*) value {
  _builderResult.hasSearchKey = YES;
  _builderResult.searchKey = value;
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) clearSearchKey {
  _builderResult.hasSearchKey = NO;
  _builderResult.searchKey = @"";
  return self;
}
- (BOOL) hasTournamentGame {
  return _builderResult.hasTournamentGame;
}
- (BOOL) tournamentGame {
  return _builderResult.tournamentGame;
}
- (CMsgPracticeLobbyCreate_Builder*) setTournamentGame:(BOOL) value {
  _builderResult.hasTournamentGame = YES;
  _builderResult.tournamentGame = value;
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) clearTournamentGame {
  _builderResult.hasTournamentGame = NO;
  _builderResult.tournamentGame = NO;
  return self;
}
- (BOOL) hasTournamentGameId {
  return _builderResult.hasTournamentGameId;
}
- (uint32_t) tournamentGameId {
  return _builderResult.tournamentGameId;
}
- (CMsgPracticeLobbyCreate_Builder*) setTournamentGameId:(uint32_t) value {
  _builderResult.hasTournamentGameId = YES;
  _builderResult.tournamentGameId = value;
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) clearTournamentGameId {
  _builderResult.hasTournamentGameId = NO;
  _builderResult.tournamentGameId = 0;
  return self;
}
- (BOOL) hasTournamentId {
  return _builderResult.hasTournamentId;
}
- (uint32_t) tournamentId {
  return _builderResult.tournamentId;
}
- (CMsgPracticeLobbyCreate_Builder*) setTournamentId:(uint32_t) value {
  _builderResult.hasTournamentId = YES;
  _builderResult.tournamentId = value;
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) clearTournamentId {
  _builderResult.hasTournamentId = NO;
  _builderResult.tournamentId = 0;
  return self;
}
- (BOOL) hasPassKey {
  return _builderResult.hasPassKey;
}
- (NSString*) passKey {
  return _builderResult.passKey;
}
- (CMsgPracticeLobbyCreate_Builder*) setPassKey:(NSString*) value {
  _builderResult.hasPassKey = YES;
  _builderResult.passKey = value;
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) clearPassKey {
  _builderResult.hasPassKey = NO;
  _builderResult.passKey = @"";
  return self;
}
- (BOOL) hasClientVersion {
  return _builderResult.hasClientVersion;
}
- (uint32_t) clientVersion {
  return _builderResult.clientVersion;
}
- (CMsgPracticeLobbyCreate_Builder*) setClientVersion:(uint32_t) value {
  _builderResult.hasClientVersion = YES;
  _builderResult.clientVersion = value;
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) clearClientVersion {
  _builderResult.hasClientVersion = NO;
  _builderResult.clientVersion = 0;
  return self;
}
- (BOOL) hasLobbyDetails {
  return _builderResult.hasLobbyDetails;
}
- (CMsgPracticeLobbySetDetails*) lobbyDetails {
  return _builderResult.lobbyDetails;
}
- (CMsgPracticeLobbyCreate_Builder*) setLobbyDetails:(CMsgPracticeLobbySetDetails*) value {
  _builderResult.hasLobbyDetails = YES;
  _builderResult.lobbyDetails = value;
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) setLobbyDetailsBuilder:(CMsgPracticeLobbySetDetails_Builder*) builderForValue {
  return [self setLobbyDetails:[builderForValue build]];
}
- (CMsgPracticeLobbyCreate_Builder*) mergeLobbyDetails:(CMsgPracticeLobbySetDetails*) value {
  if (_builderResult.hasLobbyDetails &&
      _builderResult.lobbyDetails != [CMsgPracticeLobbySetDetails defaultInstance]) {
    _builderResult.lobbyDetails =
      [[[CMsgPracticeLobbySetDetails builderWithPrototype:_builderResult.lobbyDetails] mergeFrom:value] buildPartial];
  } else {
    _builderResult.lobbyDetails = value;
  }
  _builderResult.hasLobbyDetails = YES;
  return self;
}
- (CMsgPracticeLobbyCreate_Builder*) clearLobbyDetails {
  _builderResult.hasLobbyDetails = NO;
  _builderResult.lobbyDetails = [CMsgPracticeLobbySetDetails defaultInstance];
  return self;
}
@end

@interface CMsgPracticeLobbySetTeamSlot ()
@property DOTA_GC_TEAM team;
@property uint32_t slot;
@property DOTABotDifficulty bot_difficulty;
@end

@implementation CMsgPracticeLobbySetTeamSlot

- (BOOL) hasteam {
  return !!hasteam_;
}
- (void) setHasteam:(BOOL) value_ {
  hasteam_ = !!value_;
}
@synthesize team;
- (BOOL) hasSlot {
  return !!hasSlot_;
}
- (void) setHasSlot:(BOOL) value_ {
  hasSlot_ = !!value_;
}
@synthesize slot;
- (BOOL) hasbot_difficulty {
  return !!hasbot_difficulty_;
}
- (void) setHasbot_difficulty:(BOOL) value_ {
  hasbot_difficulty_ = !!value_;
}
@synthesize bot_difficulty;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.team = DOTA_GC_TEAMDOTA_GC_TEAM_GOOD_GUYS;
    self.slot = 0;
    self.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_INVALID;
  }
  return self;
}
static CMsgPracticeLobbySetTeamSlot* defaultCMsgPracticeLobbySetTeamSlotInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbySetTeamSlot class]) {
    defaultCMsgPracticeLobbySetTeamSlotInstance = [[CMsgPracticeLobbySetTeamSlot alloc] init];
  }
}
+ (CMsgPracticeLobbySetTeamSlot*) defaultInstance {
  return defaultCMsgPracticeLobbySetTeamSlotInstance;
}
- (CMsgPracticeLobbySetTeamSlot*) defaultInstance {
  return defaultCMsgPracticeLobbySetTeamSlotInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasteam) {
    [output writeEnum:1 value:self.team];
  }
  if (self.hasSlot) {
    [output writeUInt32:2 value:self.slot];
  }
  if (self.hasbot_difficulty) {
    [output writeEnum:3 value:self.bot_difficulty];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasteam) {
    size_ += computeEnumSize(1, self.team);
  }
  if (self.hasSlot) {
    size_ += computeUInt32Size(2, self.slot);
  }
  if (self.hasbot_difficulty) {
    size_ += computeEnumSize(3, self.bot_difficulty);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbySetTeamSlot*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbySetTeamSlot*)[[[CMsgPracticeLobbySetTeamSlot builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbySetTeamSlot*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbySetTeamSlot*)[[[CMsgPracticeLobbySetTeamSlot builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbySetTeamSlot*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbySetTeamSlot*)[[[CMsgPracticeLobbySetTeamSlot builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbySetTeamSlot*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbySetTeamSlot*)[[[CMsgPracticeLobbySetTeamSlot builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbySetTeamSlot*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbySetTeamSlot*)[[[CMsgPracticeLobbySetTeamSlot builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbySetTeamSlot*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbySetTeamSlot*)[[[CMsgPracticeLobbySetTeamSlot builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbySetTeamSlot_Builder*) builder {
  return [[[CMsgPracticeLobbySetTeamSlot_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbySetTeamSlot_Builder*) builderWithPrototype:(CMsgPracticeLobbySetTeamSlot*) prototype {
  return [[CMsgPracticeLobbySetTeamSlot builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) builder {
  return [CMsgPracticeLobbySetTeamSlot builder];
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) toBuilder {
  return [CMsgPracticeLobbySetTeamSlot builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasteam) {
    [output appendFormat:@"%@%@: %d\n", indent, @"team", self.team];
  }
  if (self.hasSlot) {
    [output appendFormat:@"%@%@: %@\n", indent, @"slot", [NSNumber numberWithInt:self.slot]];
  }
  if (self.hasbot_difficulty) {
    [output appendFormat:@"%@%@: %d\n", indent, @"bot_difficulty", self.bot_difficulty];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbySetTeamSlot class]]) {
    return NO;
  }
  CMsgPracticeLobbySetTeamSlot *otherMessage = other;
  return
      self.hasteam == otherMessage.hasteam &&
      (!self.hasteam || self.team == otherMessage.team) &&
      self.hasSlot == otherMessage.hasSlot &&
      (!self.hasSlot || self.slot == otherMessage.slot) &&
      self.hasbot_difficulty == otherMessage.hasbot_difficulty &&
      (!self.hasbot_difficulty || self.bot_difficulty == otherMessage.bot_difficulty) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasteam) {
    hashCode = hashCode * 31 + self.team;
  }
  if (self.hasSlot) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.slot] hash];
  }
  if (self.hasbot_difficulty) {
    hashCode = hashCode * 31 + self.bot_difficulty;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbySetTeamSlot_Builder()
@property (retain) CMsgPracticeLobbySetTeamSlot* _builderResult;
@end

@implementation CMsgPracticeLobbySetTeamSlot_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbySetTeamSlot alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbySetTeamSlot alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) clone {
  return [CMsgPracticeLobbySetTeamSlot builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbySetTeamSlot*) defaultInstance {
  return [CMsgPracticeLobbySetTeamSlot defaultInstance];
}
- (CMsgPracticeLobbySetTeamSlot*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbySetTeamSlot*) buildPartial {
  CMsgPracticeLobbySetTeamSlot* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) mergeFrom:(CMsgPracticeLobbySetTeamSlot*) other {
  if (other == [CMsgPracticeLobbySetTeamSlot defaultInstance]) {
    return self;
  }
  if (other.hasteam) {
    [self setteam:other.team];
  }
  if (other.hasSlot) {
    [self setSlot:other.slot];
  }
  if (other.hasbot_difficulty) {
    [self setbot_difficulty:other.bot_difficulty];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (DOTA_GC_TEAMIsValidValue(value)) {
          [self setteam:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setSlot:[input readUInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (DOTABotDifficultyIsValidValue(value)) {
          [self setbot_difficulty:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasteam {
  return _builderResult.hasteam;
}
- (DOTA_GC_TEAM) team {
  return _builderResult.team;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) setteam:(DOTA_GC_TEAM) value {
  _builderResult.hasteam = YES;
  _builderResult.team = value;
  return self;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) clearteam {
  _builderResult.hasteam = NO;
  _builderResult.team = DOTA_GC_TEAMDOTA_GC_TEAM_GOOD_GUYS;
  return self;
}
- (BOOL) hasSlot {
  return _builderResult.hasSlot;
}
- (uint32_t) slot {
  return _builderResult.slot;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) setSlot:(uint32_t) value {
  _builderResult.hasSlot = YES;
  _builderResult.slot = value;
  return self;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) clearSlot {
  _builderResult.hasSlot = NO;
  _builderResult.slot = 0;
  return self;
}
- (BOOL) hasbot_difficulty {
  return _builderResult.hasbot_difficulty;
}
- (DOTABotDifficulty) bot_difficulty {
  return _builderResult.bot_difficulty;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) setbot_difficulty:(DOTABotDifficulty) value {
  _builderResult.hasbot_difficulty = YES;
  _builderResult.bot_difficulty = value;
  return self;
}
- (CMsgPracticeLobbySetTeamSlot_Builder*) clearbot_difficulty {
  _builderResult.hasbot_difficulty = NO;
  _builderResult.bot_difficulty = DOTABotDifficultyBOT_DIFFICULTY_INVALID;
  return self;
}
@end

@interface CMsgPracticeLobbyJoinBroadcastChannel ()
@property uint32_t channel;
@end

@implementation CMsgPracticeLobbyJoinBroadcastChannel

- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) value_ {
  hasChannel_ = !!value_;
}
@synthesize channel;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channel = 0;
  }
  return self;
}
static CMsgPracticeLobbyJoinBroadcastChannel* defaultCMsgPracticeLobbyJoinBroadcastChannelInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyJoinBroadcastChannel class]) {
    defaultCMsgPracticeLobbyJoinBroadcastChannelInstance = [[CMsgPracticeLobbyJoinBroadcastChannel alloc] init];
  }
}
+ (CMsgPracticeLobbyJoinBroadcastChannel*) defaultInstance {
  return defaultCMsgPracticeLobbyJoinBroadcastChannelInstance;
}
- (CMsgPracticeLobbyJoinBroadcastChannel*) defaultInstance {
  return defaultCMsgPracticeLobbyJoinBroadcastChannelInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannel) {
    [output writeUInt32:1 value:self.channel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannel) {
    size_ += computeUInt32Size(1, self.channel);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyJoinBroadcastChannel*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyJoinBroadcastChannel*)[[[CMsgPracticeLobbyJoinBroadcastChannel builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyJoinBroadcastChannel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyJoinBroadcastChannel*)[[[CMsgPracticeLobbyJoinBroadcastChannel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyJoinBroadcastChannel*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyJoinBroadcastChannel*)[[[CMsgPracticeLobbyJoinBroadcastChannel builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyJoinBroadcastChannel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyJoinBroadcastChannel*)[[[CMsgPracticeLobbyJoinBroadcastChannel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyJoinBroadcastChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyJoinBroadcastChannel*)[[[CMsgPracticeLobbyJoinBroadcastChannel builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyJoinBroadcastChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyJoinBroadcastChannel*)[[[CMsgPracticeLobbyJoinBroadcastChannel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) builder {
  return [[[CMsgPracticeLobbyJoinBroadcastChannel_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) builderWithPrototype:(CMsgPracticeLobbyJoinBroadcastChannel*) prototype {
  return [[CMsgPracticeLobbyJoinBroadcastChannel builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) builder {
  return [CMsgPracticeLobbyJoinBroadcastChannel builder];
}
- (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) toBuilder {
  return [CMsgPracticeLobbyJoinBroadcastChannel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channel", [NSNumber numberWithInt:self.channel]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyJoinBroadcastChannel class]]) {
    return NO;
  }
  CMsgPracticeLobbyJoinBroadcastChannel *otherMessage = other;
  return
      self.hasChannel == otherMessage.hasChannel &&
      (!self.hasChannel || self.channel == otherMessage.channel) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.channel] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyJoinBroadcastChannel_Builder()
@property (retain) CMsgPracticeLobbyJoinBroadcastChannel* _builderResult;
@end

@implementation CMsgPracticeLobbyJoinBroadcastChannel_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyJoinBroadcastChannel alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyJoinBroadcastChannel alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) clone {
  return [CMsgPracticeLobbyJoinBroadcastChannel builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyJoinBroadcastChannel*) defaultInstance {
  return [CMsgPracticeLobbyJoinBroadcastChannel defaultInstance];
}
- (CMsgPracticeLobbyJoinBroadcastChannel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyJoinBroadcastChannel*) buildPartial {
  CMsgPracticeLobbyJoinBroadcastChannel* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) mergeFrom:(CMsgPracticeLobbyJoinBroadcastChannel*) other {
  if (other == [CMsgPracticeLobbyJoinBroadcastChannel defaultInstance]) {
    return self;
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setChannel:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasChannel {
  return _builderResult.hasChannel;
}
- (uint32_t) channel {
  return _builderResult.channel;
}
- (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) setChannel:(uint32_t) value {
  _builderResult.hasChannel = YES;
  _builderResult.channel = value;
  return self;
}
- (CMsgPracticeLobbyJoinBroadcastChannel_Builder*) clearChannel {
  _builderResult.hasChannel = NO;
  _builderResult.channel = 0;
  return self;
}
@end

@interface CMsgPracticeLobbyKick ()
@property uint32_t accountId;
@end

@implementation CMsgPracticeLobbyKick

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
  }
  return self;
}
static CMsgPracticeLobbyKick* defaultCMsgPracticeLobbyKickInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyKick class]) {
    defaultCMsgPracticeLobbyKickInstance = [[CMsgPracticeLobbyKick alloc] init];
  }
}
+ (CMsgPracticeLobbyKick*) defaultInstance {
  return defaultCMsgPracticeLobbyKickInstance;
}
- (CMsgPracticeLobbyKick*) defaultInstance {
  return defaultCMsgPracticeLobbyKickInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:3 value:self.accountId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(3, self.accountId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyKick*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyKick*)[[[CMsgPracticeLobbyKick builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyKick*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyKick*)[[[CMsgPracticeLobbyKick builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyKick*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyKick*)[[[CMsgPracticeLobbyKick builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyKick*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyKick*)[[[CMsgPracticeLobbyKick builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyKick*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyKick*)[[[CMsgPracticeLobbyKick builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyKick*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyKick*)[[[CMsgPracticeLobbyKick builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyKick_Builder*) builder {
  return [[[CMsgPracticeLobbyKick_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyKick_Builder*) builderWithPrototype:(CMsgPracticeLobbyKick*) prototype {
  return [[CMsgPracticeLobbyKick builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyKick_Builder*) builder {
  return [CMsgPracticeLobbyKick builder];
}
- (CMsgPracticeLobbyKick_Builder*) toBuilder {
  return [CMsgPracticeLobbyKick builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyKick class]]) {
    return NO;
  }
  CMsgPracticeLobbyKick *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyKick_Builder()
@property (retain) CMsgPracticeLobbyKick* _builderResult;
@end

@implementation CMsgPracticeLobbyKick_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyKick alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyKick_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyKick alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyKick_Builder*) clone {
  return [CMsgPracticeLobbyKick builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyKick*) defaultInstance {
  return [CMsgPracticeLobbyKick defaultInstance];
}
- (CMsgPracticeLobbyKick*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyKick*) buildPartial {
  CMsgPracticeLobbyKick* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyKick_Builder*) mergeFrom:(CMsgPracticeLobbyKick*) other {
  if (other == [CMsgPracticeLobbyKick defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyKick_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyKick_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 24: {
        [self setAccountId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgPracticeLobbyKick_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgPracticeLobbyKick_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
@end

@interface CMsgPracticeLobbyLeave ()
@end

@implementation CMsgPracticeLobbyLeave

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgPracticeLobbyLeave* defaultCMsgPracticeLobbyLeaveInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyLeave class]) {
    defaultCMsgPracticeLobbyLeaveInstance = [[CMsgPracticeLobbyLeave alloc] init];
  }
}
+ (CMsgPracticeLobbyLeave*) defaultInstance {
  return defaultCMsgPracticeLobbyLeaveInstance;
}
- (CMsgPracticeLobbyLeave*) defaultInstance {
  return defaultCMsgPracticeLobbyLeaveInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyLeave*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyLeave*)[[[CMsgPracticeLobbyLeave builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyLeave*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyLeave*)[[[CMsgPracticeLobbyLeave builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyLeave*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyLeave*)[[[CMsgPracticeLobbyLeave builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyLeave*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyLeave*)[[[CMsgPracticeLobbyLeave builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyLeave*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyLeave*)[[[CMsgPracticeLobbyLeave builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyLeave*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyLeave*)[[[CMsgPracticeLobbyLeave builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyLeave_Builder*) builder {
  return [[[CMsgPracticeLobbyLeave_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyLeave_Builder*) builderWithPrototype:(CMsgPracticeLobbyLeave*) prototype {
  return [[CMsgPracticeLobbyLeave builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyLeave_Builder*) builder {
  return [CMsgPracticeLobbyLeave builder];
}
- (CMsgPracticeLobbyLeave_Builder*) toBuilder {
  return [CMsgPracticeLobbyLeave builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyLeave class]]) {
    return NO;
  }
  CMsgPracticeLobbyLeave *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyLeave_Builder()
@property (retain) CMsgPracticeLobbyLeave* _builderResult;
@end

@implementation CMsgPracticeLobbyLeave_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyLeave alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyLeave_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyLeave alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyLeave_Builder*) clone {
  return [CMsgPracticeLobbyLeave builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyLeave*) defaultInstance {
  return [CMsgPracticeLobbyLeave defaultInstance];
}
- (CMsgPracticeLobbyLeave*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyLeave*) buildPartial {
  CMsgPracticeLobbyLeave* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyLeave_Builder*) mergeFrom:(CMsgPracticeLobbyLeave*) other {
  if (other == [CMsgPracticeLobbyLeave defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyLeave_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyLeave_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgPracticeLobbyLaunch ()
@property uint32_t clientVersion;
@end

@implementation CMsgPracticeLobbyLaunch

- (BOOL) hasClientVersion {
  return !!hasClientVersion_;
}
- (void) setHasClientVersion:(BOOL) value_ {
  hasClientVersion_ = !!value_;
}
@synthesize clientVersion;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.clientVersion = 0;
  }
  return self;
}
static CMsgPracticeLobbyLaunch* defaultCMsgPracticeLobbyLaunchInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyLaunch class]) {
    defaultCMsgPracticeLobbyLaunchInstance = [[CMsgPracticeLobbyLaunch alloc] init];
  }
}
+ (CMsgPracticeLobbyLaunch*) defaultInstance {
  return defaultCMsgPracticeLobbyLaunchInstance;
}
- (CMsgPracticeLobbyLaunch*) defaultInstance {
  return defaultCMsgPracticeLobbyLaunchInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClientVersion) {
    [output writeUInt32:5 value:self.clientVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasClientVersion) {
    size_ += computeUInt32Size(5, self.clientVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyLaunch*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyLaunch*)[[[CMsgPracticeLobbyLaunch builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyLaunch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyLaunch*)[[[CMsgPracticeLobbyLaunch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyLaunch*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyLaunch*)[[[CMsgPracticeLobbyLaunch builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyLaunch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyLaunch*)[[[CMsgPracticeLobbyLaunch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyLaunch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyLaunch*)[[[CMsgPracticeLobbyLaunch builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyLaunch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyLaunch*)[[[CMsgPracticeLobbyLaunch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyLaunch_Builder*) builder {
  return [[[CMsgPracticeLobbyLaunch_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyLaunch_Builder*) builderWithPrototype:(CMsgPracticeLobbyLaunch*) prototype {
  return [[CMsgPracticeLobbyLaunch builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyLaunch_Builder*) builder {
  return [CMsgPracticeLobbyLaunch builder];
}
- (CMsgPracticeLobbyLaunch_Builder*) toBuilder {
  return [CMsgPracticeLobbyLaunch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasClientVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientVersion", [NSNumber numberWithInt:self.clientVersion]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyLaunch class]]) {
    return NO;
  }
  CMsgPracticeLobbyLaunch *otherMessage = other;
  return
      self.hasClientVersion == otherMessage.hasClientVersion &&
      (!self.hasClientVersion || self.clientVersion == otherMessage.clientVersion) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasClientVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.clientVersion] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyLaunch_Builder()
@property (retain) CMsgPracticeLobbyLaunch* _builderResult;
@end

@implementation CMsgPracticeLobbyLaunch_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyLaunch alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyLaunch_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyLaunch alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyLaunch_Builder*) clone {
  return [CMsgPracticeLobbyLaunch builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyLaunch*) defaultInstance {
  return [CMsgPracticeLobbyLaunch defaultInstance];
}
- (CMsgPracticeLobbyLaunch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyLaunch*) buildPartial {
  CMsgPracticeLobbyLaunch* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyLaunch_Builder*) mergeFrom:(CMsgPracticeLobbyLaunch*) other {
  if (other == [CMsgPracticeLobbyLaunch defaultInstance]) {
    return self;
  }
  if (other.hasClientVersion) {
    [self setClientVersion:other.clientVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyLaunch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyLaunch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 40: {
        [self setClientVersion:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasClientVersion {
  return _builderResult.hasClientVersion;
}
- (uint32_t) clientVersion {
  return _builderResult.clientVersion;
}
- (CMsgPracticeLobbyLaunch_Builder*) setClientVersion:(uint32_t) value {
  _builderResult.hasClientVersion = YES;
  _builderResult.clientVersion = value;
  return self;
}
- (CMsgPracticeLobbyLaunch_Builder*) clearClientVersion {
  _builderResult.hasClientVersion = NO;
  _builderResult.clientVersion = 0;
  return self;
}
@end

@interface CMsgApplyTeamToPracticeLobby ()
@end

@implementation CMsgApplyTeamToPracticeLobby

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgApplyTeamToPracticeLobby* defaultCMsgApplyTeamToPracticeLobbyInstance = nil;
+ (void) initialize {
  if (self == [CMsgApplyTeamToPracticeLobby class]) {
    defaultCMsgApplyTeamToPracticeLobbyInstance = [[CMsgApplyTeamToPracticeLobby alloc] init];
  }
}
+ (CMsgApplyTeamToPracticeLobby*) defaultInstance {
  return defaultCMsgApplyTeamToPracticeLobbyInstance;
}
- (CMsgApplyTeamToPracticeLobby*) defaultInstance {
  return defaultCMsgApplyTeamToPracticeLobbyInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgApplyTeamToPracticeLobby*) parseFromData:(NSData*) data {
  return (CMsgApplyTeamToPracticeLobby*)[[[CMsgApplyTeamToPracticeLobby builder] mergeFromData:data] build];
}
+ (CMsgApplyTeamToPracticeLobby*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgApplyTeamToPracticeLobby*)[[[CMsgApplyTeamToPracticeLobby builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgApplyTeamToPracticeLobby*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgApplyTeamToPracticeLobby*)[[[CMsgApplyTeamToPracticeLobby builder] mergeFromInputStream:input] build];
}
+ (CMsgApplyTeamToPracticeLobby*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgApplyTeamToPracticeLobby*)[[[CMsgApplyTeamToPracticeLobby builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgApplyTeamToPracticeLobby*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgApplyTeamToPracticeLobby*)[[[CMsgApplyTeamToPracticeLobby builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgApplyTeamToPracticeLobby*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgApplyTeamToPracticeLobby*)[[[CMsgApplyTeamToPracticeLobby builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgApplyTeamToPracticeLobby_Builder*) builder {
  return [[[CMsgApplyTeamToPracticeLobby_Builder alloc] init] autorelease];
}
+ (CMsgApplyTeamToPracticeLobby_Builder*) builderWithPrototype:(CMsgApplyTeamToPracticeLobby*) prototype {
  return [[CMsgApplyTeamToPracticeLobby builder] mergeFrom:prototype];
}
- (CMsgApplyTeamToPracticeLobby_Builder*) builder {
  return [CMsgApplyTeamToPracticeLobby builder];
}
- (CMsgApplyTeamToPracticeLobby_Builder*) toBuilder {
  return [CMsgApplyTeamToPracticeLobby builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgApplyTeamToPracticeLobby class]]) {
    return NO;
  }
  CMsgApplyTeamToPracticeLobby *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgApplyTeamToPracticeLobby_Builder()
@property (retain) CMsgApplyTeamToPracticeLobby* _builderResult;
@end

@implementation CMsgApplyTeamToPracticeLobby_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgApplyTeamToPracticeLobby alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgApplyTeamToPracticeLobby_Builder*) clear {
  _builderResult = [[[CMsgApplyTeamToPracticeLobby alloc] init] autorelease];
  return self;
}
- (CMsgApplyTeamToPracticeLobby_Builder*) clone {
  return [CMsgApplyTeamToPracticeLobby builderWithPrototype:_builderResult];
}
- (CMsgApplyTeamToPracticeLobby*) defaultInstance {
  return [CMsgApplyTeamToPracticeLobby defaultInstance];
}
- (CMsgApplyTeamToPracticeLobby*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgApplyTeamToPracticeLobby*) buildPartial {
  CMsgApplyTeamToPracticeLobby* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgApplyTeamToPracticeLobby_Builder*) mergeFrom:(CMsgApplyTeamToPracticeLobby*) other {
  if (other == [CMsgApplyTeamToPracticeLobby defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgApplyTeamToPracticeLobby_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgApplyTeamToPracticeLobby_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgPracticeLobbyList ()
@property BOOL tournamentGames;
@property (retain) NSString* passKey;
@end

@implementation CMsgPracticeLobbyList

- (BOOL) hasTournamentGames {
  return !!hasTournamentGames_;
}
- (void) setHasTournamentGames:(BOOL) value_ {
  hasTournamentGames_ = !!value_;
}
- (BOOL) tournamentGames {
  return !!tournamentGames_;
}
- (void) setTournamentGames:(BOOL) value_ {
  tournamentGames_ = !!value_;
}
- (BOOL) hasPassKey {
  return !!hasPassKey_;
}
- (void) setHasPassKey:(BOOL) value_ {
  hasPassKey_ = !!value_;
}
@synthesize passKey;
- (void) dealloc {
  self.passKey = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tournamentGames = NO;
    self.passKey = @"";
  }
  return self;
}
static CMsgPracticeLobbyList* defaultCMsgPracticeLobbyListInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyList class]) {
    defaultCMsgPracticeLobbyListInstance = [[CMsgPracticeLobbyList alloc] init];
  }
}
+ (CMsgPracticeLobbyList*) defaultInstance {
  return defaultCMsgPracticeLobbyListInstance;
}
- (CMsgPracticeLobbyList*) defaultInstance {
  return defaultCMsgPracticeLobbyListInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTournamentGames) {
    [output writeBool:1 value:self.tournamentGames];
  }
  if (self.hasPassKey) {
    [output writeString:2 value:self.passKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTournamentGames) {
    size_ += computeBoolSize(1, self.tournamentGames);
  }
  if (self.hasPassKey) {
    size_ += computeStringSize(2, self.passKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyList*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyList*)[[[CMsgPracticeLobbyList builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyList*)[[[CMsgPracticeLobbyList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyList*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyList*)[[[CMsgPracticeLobbyList builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyList*)[[[CMsgPracticeLobbyList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyList*)[[[CMsgPracticeLobbyList builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyList*)[[[CMsgPracticeLobbyList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyList_Builder*) builder {
  return [[[CMsgPracticeLobbyList_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyList_Builder*) builderWithPrototype:(CMsgPracticeLobbyList*) prototype {
  return [[CMsgPracticeLobbyList builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyList_Builder*) builder {
  return [CMsgPracticeLobbyList builder];
}
- (CMsgPracticeLobbyList_Builder*) toBuilder {
  return [CMsgPracticeLobbyList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTournamentGames) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentGames", [NSNumber numberWithBool:self.tournamentGames]];
  }
  if (self.hasPassKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passKey", self.passKey];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyList class]]) {
    return NO;
  }
  CMsgPracticeLobbyList *otherMessage = other;
  return
      self.hasTournamentGames == otherMessage.hasTournamentGames &&
      (!self.hasTournamentGames || self.tournamentGames == otherMessage.tournamentGames) &&
      self.hasPassKey == otherMessage.hasPassKey &&
      (!self.hasPassKey || [self.passKey isEqual:otherMessage.passKey]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTournamentGames) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tournamentGames] hash];
  }
  if (self.hasPassKey) {
    hashCode = hashCode * 31 + [self.passKey hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyList_Builder()
@property (retain) CMsgPracticeLobbyList* _builderResult;
@end

@implementation CMsgPracticeLobbyList_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyList_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyList alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyList_Builder*) clone {
  return [CMsgPracticeLobbyList builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyList*) defaultInstance {
  return [CMsgPracticeLobbyList defaultInstance];
}
- (CMsgPracticeLobbyList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyList*) buildPartial {
  CMsgPracticeLobbyList* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyList_Builder*) mergeFrom:(CMsgPracticeLobbyList*) other {
  if (other == [CMsgPracticeLobbyList defaultInstance]) {
    return self;
  }
  if (other.hasTournamentGames) {
    [self setTournamentGames:other.tournamentGames];
  }
  if (other.hasPassKey) {
    [self setPassKey:other.passKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTournamentGames:[input readBool]];
        break;
      }
      case 18: {
        [self setPassKey:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTournamentGames {
  return _builderResult.hasTournamentGames;
}
- (BOOL) tournamentGames {
  return _builderResult.tournamentGames;
}
- (CMsgPracticeLobbyList_Builder*) setTournamentGames:(BOOL) value {
  _builderResult.hasTournamentGames = YES;
  _builderResult.tournamentGames = value;
  return self;
}
- (CMsgPracticeLobbyList_Builder*) clearTournamentGames {
  _builderResult.hasTournamentGames = NO;
  _builderResult.tournamentGames = NO;
  return self;
}
- (BOOL) hasPassKey {
  return _builderResult.hasPassKey;
}
- (NSString*) passKey {
  return _builderResult.passKey;
}
- (CMsgPracticeLobbyList_Builder*) setPassKey:(NSString*) value {
  _builderResult.hasPassKey = YES;
  _builderResult.passKey = value;
  return self;
}
- (CMsgPracticeLobbyList_Builder*) clearPassKey {
  _builderResult.hasPassKey = NO;
  _builderResult.passKey = @"";
  return self;
}
@end

@interface CMsgPracticeLobbyListResponseEntry ()
@property uint64_t id;
@property uint32_t tournamentId;
@property uint32_t tournamentGameId;
@property (retain) PBAppendableArray * membersArray;
@property BOOL requiresPassKey;
@property uint32_t leaderAccountId;
@end

@implementation CMsgPracticeLobbyListResponseEntry

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasTournamentId {
  return !!hasTournamentId_;
}
- (void) setHasTournamentId:(BOOL) value_ {
  hasTournamentId_ = !!value_;
}
@synthesize tournamentId;
- (BOOL) hasTournamentGameId {
  return !!hasTournamentGameId_;
}
- (void) setHasTournamentGameId:(BOOL) value_ {
  hasTournamentGameId_ = !!value_;
}
@synthesize tournamentGameId;
@synthesize membersArray;
@dynamic members;
- (BOOL) hasRequiresPassKey {
  return !!hasRequiresPassKey_;
}
- (void) setHasRequiresPassKey:(BOOL) value_ {
  hasRequiresPassKey_ = !!value_;
}
- (BOOL) requiresPassKey {
  return !!requiresPassKey_;
}
- (void) setRequiresPassKey:(BOOL) value_ {
  requiresPassKey_ = !!value_;
}
- (BOOL) hasLeaderAccountId {
  return !!hasLeaderAccountId_;
}
- (void) setHasLeaderAccountId:(BOOL) value_ {
  hasLeaderAccountId_ = !!value_;
}
@synthesize leaderAccountId;
- (void) dealloc {
  self.membersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.tournamentId = 0;
    self.tournamentGameId = 0;
    self.requiresPassKey = NO;
    self.leaderAccountId = 0;
  }
  return self;
}
static CMsgPracticeLobbyListResponseEntry* defaultCMsgPracticeLobbyListResponseEntryInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyListResponseEntry class]) {
    defaultCMsgPracticeLobbyListResponseEntryInstance = [[CMsgPracticeLobbyListResponseEntry alloc] init];
  }
}
+ (CMsgPracticeLobbyListResponseEntry*) defaultInstance {
  return defaultCMsgPracticeLobbyListResponseEntryInstance;
}
- (CMsgPracticeLobbyListResponseEntry*) defaultInstance {
  return defaultCMsgPracticeLobbyListResponseEntryInstance;
}
- (PBArray *)members {
  return membersArray;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember*)membersAtIndex:(NSUInteger)index {
  return [membersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt64:1 value:self.id];
  }
  if (self.hasTournamentId) {
    [output writeUInt32:3 value:self.tournamentId];
  }
  if (self.hasTournamentGameId) {
    [output writeUInt32:4 value:self.tournamentGameId];
  }
  for (CMsgPracticeLobbyListResponseEntry_CLobbyMember *element in self.membersArray) {
    [output writeMessage:5 value:element];
  }
  if (self.hasRequiresPassKey) {
    [output writeBool:6 value:self.requiresPassKey];
  }
  if (self.hasLeaderAccountId) {
    [output writeUInt32:7 value:self.leaderAccountId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt64Size(1, self.id);
  }
  if (self.hasTournamentId) {
    size_ += computeUInt32Size(3, self.tournamentId);
  }
  if (self.hasTournamentGameId) {
    size_ += computeUInt32Size(4, self.tournamentGameId);
  }
  for (CMsgPracticeLobbyListResponseEntry_CLobbyMember *element in self.membersArray) {
    size_ += computeMessageSize(5, element);
  }
  if (self.hasRequiresPassKey) {
    size_ += computeBoolSize(6, self.requiresPassKey);
  }
  if (self.hasLeaderAccountId) {
    size_ += computeUInt32Size(7, self.leaderAccountId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyListResponseEntry*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyListResponseEntry*)[[[CMsgPracticeLobbyListResponseEntry builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyListResponseEntry*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyListResponseEntry*)[[[CMsgPracticeLobbyListResponseEntry builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyListResponseEntry*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyListResponseEntry*)[[[CMsgPracticeLobbyListResponseEntry builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyListResponseEntry*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyListResponseEntry*)[[[CMsgPracticeLobbyListResponseEntry builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyListResponseEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyListResponseEntry*)[[[CMsgPracticeLobbyListResponseEntry builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyListResponseEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyListResponseEntry*)[[[CMsgPracticeLobbyListResponseEntry builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyListResponseEntry_Builder*) builder {
  return [[[CMsgPracticeLobbyListResponseEntry_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyListResponseEntry_Builder*) builderWithPrototype:(CMsgPracticeLobbyListResponseEntry*) prototype {
  return [[CMsgPracticeLobbyListResponseEntry builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) builder {
  return [CMsgPracticeLobbyListResponseEntry builder];
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) toBuilder {
  return [CMsgPracticeLobbyListResponseEntry builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasTournamentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentId", [NSNumber numberWithInt:self.tournamentId]];
  }
  if (self.hasTournamentGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentGameId", [NSNumber numberWithInt:self.tournamentGameId]];
  }
  for (CMsgPracticeLobbyListResponseEntry_CLobbyMember* element in self.membersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"members"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequiresPassKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requiresPassKey", [NSNumber numberWithBool:self.requiresPassKey]];
  }
  if (self.hasLeaderAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaderAccountId", [NSNumber numberWithInt:self.leaderAccountId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyListResponseEntry class]]) {
    return NO;
  }
  CMsgPracticeLobbyListResponseEntry *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasTournamentId == otherMessage.hasTournamentId &&
      (!self.hasTournamentId || self.tournamentId == otherMessage.tournamentId) &&
      self.hasTournamentGameId == otherMessage.hasTournamentGameId &&
      (!self.hasTournamentGameId || self.tournamentGameId == otherMessage.tournamentGameId) &&
      [self.membersArray isEqualToArray:otherMessage.membersArray] &&
      self.hasRequiresPassKey == otherMessage.hasRequiresPassKey &&
      (!self.hasRequiresPassKey || self.requiresPassKey == otherMessage.requiresPassKey) &&
      self.hasLeaderAccountId == otherMessage.hasLeaderAccountId &&
      (!self.hasLeaderAccountId || self.leaderAccountId == otherMessage.leaderAccountId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasTournamentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentId] hash];
  }
  if (self.hasTournamentGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentGameId] hash];
  }
  for (CMsgPracticeLobbyListResponseEntry_CLobbyMember* element in self.membersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRequiresPassKey) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.requiresPassKey] hash];
  }
  if (self.hasLeaderAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leaderAccountId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyListResponseEntry_CLobbyMember ()
@property uint32_t accountId;
@property (retain) NSString* playerName;
@end

@implementation CMsgPracticeLobbyListResponseEntry_CLobbyMember

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasPlayerName {
  return !!hasPlayerName_;
}
- (void) setHasPlayerName:(BOOL) value_ {
  hasPlayerName_ = !!value_;
}
@synthesize playerName;
- (void) dealloc {
  self.playerName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.playerName = @"";
  }
  return self;
}
static CMsgPracticeLobbyListResponseEntry_CLobbyMember* defaultCMsgPracticeLobbyListResponseEntry_CLobbyMemberInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyListResponseEntry_CLobbyMember class]) {
    defaultCMsgPracticeLobbyListResponseEntry_CLobbyMemberInstance = [[CMsgPracticeLobbyListResponseEntry_CLobbyMember alloc] init];
  }
}
+ (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) defaultInstance {
  return defaultCMsgPracticeLobbyListResponseEntry_CLobbyMemberInstance;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) defaultInstance {
  return defaultCMsgPracticeLobbyListResponseEntry_CLobbyMemberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasPlayerName) {
    [output writeString:2 value:self.playerName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasPlayerName) {
    size_ += computeStringSize(2, self.playerName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyListResponseEntry_CLobbyMember*)[[[CMsgPracticeLobbyListResponseEntry_CLobbyMember builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyListResponseEntry_CLobbyMember*)[[[CMsgPracticeLobbyListResponseEntry_CLobbyMember builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyListResponseEntry_CLobbyMember*)[[[CMsgPracticeLobbyListResponseEntry_CLobbyMember builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyListResponseEntry_CLobbyMember*)[[[CMsgPracticeLobbyListResponseEntry_CLobbyMember builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyListResponseEntry_CLobbyMember*)[[[CMsgPracticeLobbyListResponseEntry_CLobbyMember builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyListResponseEntry_CLobbyMember*)[[[CMsgPracticeLobbyListResponseEntry_CLobbyMember builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) builder {
  return [[[CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) builderWithPrototype:(CMsgPracticeLobbyListResponseEntry_CLobbyMember*) prototype {
  return [[CMsgPracticeLobbyListResponseEntry_CLobbyMember builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) builder {
  return [CMsgPracticeLobbyListResponseEntry_CLobbyMember builder];
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) toBuilder {
  return [CMsgPracticeLobbyListResponseEntry_CLobbyMember builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasPlayerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerName", self.playerName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyListResponseEntry_CLobbyMember class]]) {
    return NO;
  }
  CMsgPracticeLobbyListResponseEntry_CLobbyMember *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasPlayerName == otherMessage.hasPlayerName &&
      (!self.hasPlayerName || [self.playerName isEqual:otherMessage.playerName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasPlayerName) {
    hashCode = hashCode * 31 + [self.playerName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder()
@property (retain) CMsgPracticeLobbyListResponseEntry_CLobbyMember* _builderResult;
@end

@implementation CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyListResponseEntry_CLobbyMember alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyListResponseEntry_CLobbyMember alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) clone {
  return [CMsgPracticeLobbyListResponseEntry_CLobbyMember builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) defaultInstance {
  return [CMsgPracticeLobbyListResponseEntry_CLobbyMember defaultInstance];
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember*) buildPartial {
  CMsgPracticeLobbyListResponseEntry_CLobbyMember* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) mergeFrom:(CMsgPracticeLobbyListResponseEntry_CLobbyMember*) other {
  if (other == [CMsgPracticeLobbyListResponseEntry_CLobbyMember defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasPlayerName) {
    [self setPlayerName:other.playerName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setPlayerName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasPlayerName {
  return _builderResult.hasPlayerName;
}
- (NSString*) playerName {
  return _builderResult.playerName;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) setPlayerName:(NSString*) value {
  _builderResult.hasPlayerName = YES;
  _builderResult.playerName = value;
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder*) clearPlayerName {
  _builderResult.hasPlayerName = NO;
  _builderResult.playerName = @"";
  return self;
}
@end

@interface CMsgPracticeLobbyListResponseEntry_Builder()
@property (retain) CMsgPracticeLobbyListResponseEntry* _builderResult;
@end

@implementation CMsgPracticeLobbyListResponseEntry_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyListResponseEntry alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyListResponseEntry alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) clone {
  return [CMsgPracticeLobbyListResponseEntry builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyListResponseEntry*) defaultInstance {
  return [CMsgPracticeLobbyListResponseEntry defaultInstance];
}
- (CMsgPracticeLobbyListResponseEntry*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyListResponseEntry*) buildPartial {
  CMsgPracticeLobbyListResponseEntry* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) mergeFrom:(CMsgPracticeLobbyListResponseEntry*) other {
  if (other == [CMsgPracticeLobbyListResponseEntry defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTournamentId) {
    [self setTournamentId:other.tournamentId];
  }
  if (other.hasTournamentGameId) {
    [self setTournamentGameId:other.tournamentGameId];
  }
  if (other.membersArray.count > 0) {
    if (_builderResult.membersArray == nil) {
      _builderResult.membersArray = [[other.membersArray copyWithZone:[other.membersArray zone]] autorelease];
    } else {
      [_builderResult.membersArray appendArray:other.membersArray];
    }
  }
  if (other.hasRequiresPassKey) {
    [self setRequiresPassKey:other.requiresPassKey];
  }
  if (other.hasLeaderAccountId) {
    [self setLeaderAccountId:other.leaderAccountId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt64]];
        break;
      }
      case 24: {
        [self setTournamentId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setTournamentGameId:[input readUInt32]];
        break;
      }
      case 42: {
        CMsgPracticeLobbyListResponseEntry_CLobbyMember_Builder* subBuilder = [CMsgPracticeLobbyListResponseEntry_CLobbyMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMembers:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setRequiresPassKey:[input readBool]];
        break;
      }
      case 56: {
        [self setLeaderAccountId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return _builderResult.hasId;
}
- (uint64_t) id {
  return _builderResult.id;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) setId:(uint64_t) value {
  _builderResult.hasId = YES;
  _builderResult.id = value;
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) clearId {
  _builderResult.hasId = NO;
  _builderResult.id = 0L;
  return self;
}
- (BOOL) hasTournamentId {
  return _builderResult.hasTournamentId;
}
- (uint32_t) tournamentId {
  return _builderResult.tournamentId;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) setTournamentId:(uint32_t) value {
  _builderResult.hasTournamentId = YES;
  _builderResult.tournamentId = value;
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) clearTournamentId {
  _builderResult.hasTournamentId = NO;
  _builderResult.tournamentId = 0;
  return self;
}
- (BOOL) hasTournamentGameId {
  return _builderResult.hasTournamentGameId;
}
- (uint32_t) tournamentGameId {
  return _builderResult.tournamentGameId;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) setTournamentGameId:(uint32_t) value {
  _builderResult.hasTournamentGameId = YES;
  _builderResult.tournamentGameId = value;
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) clearTournamentGameId {
  _builderResult.hasTournamentGameId = NO;
  _builderResult.tournamentGameId = 0;
  return self;
}
- (PBAppendableArray *)members {
  return _builderResult.membersArray;
}
- (CMsgPracticeLobbyListResponseEntry_CLobbyMember*)membersAtIndex:(NSUInteger)index {
  return [_builderResult membersAtIndex:index];
}
- (CMsgPracticeLobbyListResponseEntry_Builder *)addMembers:(CMsgPracticeLobbyListResponseEntry_CLobbyMember*)value {
  if (_builderResult.membersArray == nil) {
    _builderResult.membersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.membersArray addObject:value];
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder *)setMembersArray:(NSArray *)array {
  _builderResult.membersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder *)setMembersValues:(const CMsgPracticeLobbyListResponseEntry_CLobbyMember* *)values count:(NSUInteger)count {
  _builderResult.membersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder *)clearMembers {
  _builderResult.membersArray = nil;
  return self;
}
- (BOOL) hasRequiresPassKey {
  return _builderResult.hasRequiresPassKey;
}
- (BOOL) requiresPassKey {
  return _builderResult.requiresPassKey;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) setRequiresPassKey:(BOOL) value {
  _builderResult.hasRequiresPassKey = YES;
  _builderResult.requiresPassKey = value;
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) clearRequiresPassKey {
  _builderResult.hasRequiresPassKey = NO;
  _builderResult.requiresPassKey = NO;
  return self;
}
- (BOOL) hasLeaderAccountId {
  return _builderResult.hasLeaderAccountId;
}
- (uint32_t) leaderAccountId {
  return _builderResult.leaderAccountId;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) setLeaderAccountId:(uint32_t) value {
  _builderResult.hasLeaderAccountId = YES;
  _builderResult.leaderAccountId = value;
  return self;
}
- (CMsgPracticeLobbyListResponseEntry_Builder*) clearLeaderAccountId {
  _builderResult.hasLeaderAccountId = NO;
  _builderResult.leaderAccountId = 0;
  return self;
}
@end

@interface CMsgPracticeLobbyListResponse ()
@property BOOL tournamentGames;
@property (retain) PBAppendableArray * lobbiesArray;
@end

@implementation CMsgPracticeLobbyListResponse

- (BOOL) hasTournamentGames {
  return !!hasTournamentGames_;
}
- (void) setHasTournamentGames:(BOOL) value_ {
  hasTournamentGames_ = !!value_;
}
- (BOOL) tournamentGames {
  return !!tournamentGames_;
}
- (void) setTournamentGames:(BOOL) value_ {
  tournamentGames_ = !!value_;
}
@synthesize lobbiesArray;
@dynamic lobbies;
- (void) dealloc {
  self.lobbiesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tournamentGames = NO;
  }
  return self;
}
static CMsgPracticeLobbyListResponse* defaultCMsgPracticeLobbyListResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyListResponse class]) {
    defaultCMsgPracticeLobbyListResponseInstance = [[CMsgPracticeLobbyListResponse alloc] init];
  }
}
+ (CMsgPracticeLobbyListResponse*) defaultInstance {
  return defaultCMsgPracticeLobbyListResponseInstance;
}
- (CMsgPracticeLobbyListResponse*) defaultInstance {
  return defaultCMsgPracticeLobbyListResponseInstance;
}
- (PBArray *)lobbies {
  return lobbiesArray;
}
- (CMsgPracticeLobbyListResponseEntry*)lobbiesAtIndex:(NSUInteger)index {
  return [lobbiesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTournamentGames) {
    [output writeBool:1 value:self.tournamentGames];
  }
  for (CMsgPracticeLobbyListResponseEntry *element in self.lobbiesArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTournamentGames) {
    size_ += computeBoolSize(1, self.tournamentGames);
  }
  for (CMsgPracticeLobbyListResponseEntry *element in self.lobbiesArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyListResponse*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyListResponse*)[[[CMsgPracticeLobbyListResponse builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyListResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyListResponse*)[[[CMsgPracticeLobbyListResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyListResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyListResponse*)[[[CMsgPracticeLobbyListResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyListResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyListResponse*)[[[CMsgPracticeLobbyListResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyListResponse*)[[[CMsgPracticeLobbyListResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyListResponse*)[[[CMsgPracticeLobbyListResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyListResponse_Builder*) builder {
  return [[[CMsgPracticeLobbyListResponse_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyListResponse_Builder*) builderWithPrototype:(CMsgPracticeLobbyListResponse*) prototype {
  return [[CMsgPracticeLobbyListResponse builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyListResponse_Builder*) builder {
  return [CMsgPracticeLobbyListResponse builder];
}
- (CMsgPracticeLobbyListResponse_Builder*) toBuilder {
  return [CMsgPracticeLobbyListResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTournamentGames) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentGames", [NSNumber numberWithBool:self.tournamentGames]];
  }
  for (CMsgPracticeLobbyListResponseEntry* element in self.lobbiesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"lobbies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyListResponse class]]) {
    return NO;
  }
  CMsgPracticeLobbyListResponse *otherMessage = other;
  return
      self.hasTournamentGames == otherMessage.hasTournamentGames &&
      (!self.hasTournamentGames || self.tournamentGames == otherMessage.tournamentGames) &&
      [self.lobbiesArray isEqualToArray:otherMessage.lobbiesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTournamentGames) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tournamentGames] hash];
  }
  for (CMsgPracticeLobbyListResponseEntry* element in self.lobbiesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyListResponse_Builder()
@property (retain) CMsgPracticeLobbyListResponse* _builderResult;
@end

@implementation CMsgPracticeLobbyListResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyListResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyListResponse_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyListResponse alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyListResponse_Builder*) clone {
  return [CMsgPracticeLobbyListResponse builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyListResponse*) defaultInstance {
  return [CMsgPracticeLobbyListResponse defaultInstance];
}
- (CMsgPracticeLobbyListResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyListResponse*) buildPartial {
  CMsgPracticeLobbyListResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyListResponse_Builder*) mergeFrom:(CMsgPracticeLobbyListResponse*) other {
  if (other == [CMsgPracticeLobbyListResponse defaultInstance]) {
    return self;
  }
  if (other.hasTournamentGames) {
    [self setTournamentGames:other.tournamentGames];
  }
  if (other.lobbiesArray.count > 0) {
    if (_builderResult.lobbiesArray == nil) {
      _builderResult.lobbiesArray = [[other.lobbiesArray copyWithZone:[other.lobbiesArray zone]] autorelease];
    } else {
      [_builderResult.lobbiesArray appendArray:other.lobbiesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTournamentGames:[input readBool]];
        break;
      }
      case 18: {
        CMsgPracticeLobbyListResponseEntry_Builder* subBuilder = [CMsgPracticeLobbyListResponseEntry builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLobbies:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasTournamentGames {
  return _builderResult.hasTournamentGames;
}
- (BOOL) tournamentGames {
  return _builderResult.tournamentGames;
}
- (CMsgPracticeLobbyListResponse_Builder*) setTournamentGames:(BOOL) value {
  _builderResult.hasTournamentGames = YES;
  _builderResult.tournamentGames = value;
  return self;
}
- (CMsgPracticeLobbyListResponse_Builder*) clearTournamentGames {
  _builderResult.hasTournamentGames = NO;
  _builderResult.tournamentGames = NO;
  return self;
}
- (PBAppendableArray *)lobbies {
  return _builderResult.lobbiesArray;
}
- (CMsgPracticeLobbyListResponseEntry*)lobbiesAtIndex:(NSUInteger)index {
  return [_builderResult lobbiesAtIndex:index];
}
- (CMsgPracticeLobbyListResponse_Builder *)addLobbies:(CMsgPracticeLobbyListResponseEntry*)value {
  if (_builderResult.lobbiesArray == nil) {
    _builderResult.lobbiesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.lobbiesArray addObject:value];
  return self;
}
- (CMsgPracticeLobbyListResponse_Builder *)setLobbiesArray:(NSArray *)array {
  _builderResult.lobbiesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgPracticeLobbyListResponse_Builder *)setLobbiesValues:(const CMsgPracticeLobbyListResponseEntry* *)values count:(NSUInteger)count {
  _builderResult.lobbiesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgPracticeLobbyListResponse_Builder *)clearLobbies {
  _builderResult.lobbiesArray = nil;
  return self;
}
@end

@interface CMsgPracticeLobbyJoin ()
@property uint64_t lobbyId;
@property uint32_t clientVersion;
@property (retain) NSString* passKey;
@end

@implementation CMsgPracticeLobbyJoin

- (BOOL) hasLobbyId {
  return !!hasLobbyId_;
}
- (void) setHasLobbyId:(BOOL) value_ {
  hasLobbyId_ = !!value_;
}
@synthesize lobbyId;
- (BOOL) hasClientVersion {
  return !!hasClientVersion_;
}
- (void) setHasClientVersion:(BOOL) value_ {
  hasClientVersion_ = !!value_;
}
@synthesize clientVersion;
- (BOOL) hasPassKey {
  return !!hasPassKey_;
}
- (void) setHasPassKey:(BOOL) value_ {
  hasPassKey_ = !!value_;
}
@synthesize passKey;
- (void) dealloc {
  self.passKey = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lobbyId = 0L;
    self.clientVersion = 0;
    self.passKey = @"";
  }
  return self;
}
static CMsgPracticeLobbyJoin* defaultCMsgPracticeLobbyJoinInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyJoin class]) {
    defaultCMsgPracticeLobbyJoinInstance = [[CMsgPracticeLobbyJoin alloc] init];
  }
}
+ (CMsgPracticeLobbyJoin*) defaultInstance {
  return defaultCMsgPracticeLobbyJoinInstance;
}
- (CMsgPracticeLobbyJoin*) defaultInstance {
  return defaultCMsgPracticeLobbyJoinInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLobbyId) {
    [output writeUInt64:1 value:self.lobbyId];
  }
  if (self.hasClientVersion) {
    [output writeUInt32:2 value:self.clientVersion];
  }
  if (self.hasPassKey) {
    [output writeString:3 value:self.passKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLobbyId) {
    size_ += computeUInt64Size(1, self.lobbyId);
  }
  if (self.hasClientVersion) {
    size_ += computeUInt32Size(2, self.clientVersion);
  }
  if (self.hasPassKey) {
    size_ += computeStringSize(3, self.passKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyJoin*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyJoin*)[[[CMsgPracticeLobbyJoin builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyJoin*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyJoin*)[[[CMsgPracticeLobbyJoin builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyJoin*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyJoin*)[[[CMsgPracticeLobbyJoin builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyJoin*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyJoin*)[[[CMsgPracticeLobbyJoin builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyJoin*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyJoin*)[[[CMsgPracticeLobbyJoin builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyJoin*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyJoin*)[[[CMsgPracticeLobbyJoin builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyJoin_Builder*) builder {
  return [[[CMsgPracticeLobbyJoin_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyJoin_Builder*) builderWithPrototype:(CMsgPracticeLobbyJoin*) prototype {
  return [[CMsgPracticeLobbyJoin builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyJoin_Builder*) builder {
  return [CMsgPracticeLobbyJoin builder];
}
- (CMsgPracticeLobbyJoin_Builder*) toBuilder {
  return [CMsgPracticeLobbyJoin builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLobbyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyId", [NSNumber numberWithLongLong:self.lobbyId]];
  }
  if (self.hasClientVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientVersion", [NSNumber numberWithInt:self.clientVersion]];
  }
  if (self.hasPassKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passKey", self.passKey];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyJoin class]]) {
    return NO;
  }
  CMsgPracticeLobbyJoin *otherMessage = other;
  return
      self.hasLobbyId == otherMessage.hasLobbyId &&
      (!self.hasLobbyId || self.lobbyId == otherMessage.lobbyId) &&
      self.hasClientVersion == otherMessage.hasClientVersion &&
      (!self.hasClientVersion || self.clientVersion == otherMessage.clientVersion) &&
      self.hasPassKey == otherMessage.hasPassKey &&
      (!self.hasPassKey || [self.passKey isEqual:otherMessage.passKey]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLobbyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lobbyId] hash];
  }
  if (self.hasClientVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.clientVersion] hash];
  }
  if (self.hasPassKey) {
    hashCode = hashCode * 31 + [self.passKey hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyJoin_Builder()
@property (retain) CMsgPracticeLobbyJoin* _builderResult;
@end

@implementation CMsgPracticeLobbyJoin_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyJoin alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyJoin_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyJoin alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyJoin_Builder*) clone {
  return [CMsgPracticeLobbyJoin builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyJoin*) defaultInstance {
  return [CMsgPracticeLobbyJoin defaultInstance];
}
- (CMsgPracticeLobbyJoin*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyJoin*) buildPartial {
  CMsgPracticeLobbyJoin* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyJoin_Builder*) mergeFrom:(CMsgPracticeLobbyJoin*) other {
  if (other == [CMsgPracticeLobbyJoin defaultInstance]) {
    return self;
  }
  if (other.hasLobbyId) {
    [self setLobbyId:other.lobbyId];
  }
  if (other.hasClientVersion) {
    [self setClientVersion:other.clientVersion];
  }
  if (other.hasPassKey) {
    [self setPassKey:other.passKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyJoin_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyJoin_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLobbyId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setClientVersion:[input readUInt32]];
        break;
      }
      case 26: {
        [self setPassKey:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLobbyId {
  return _builderResult.hasLobbyId;
}
- (uint64_t) lobbyId {
  return _builderResult.lobbyId;
}
- (CMsgPracticeLobbyJoin_Builder*) setLobbyId:(uint64_t) value {
  _builderResult.hasLobbyId = YES;
  _builderResult.lobbyId = value;
  return self;
}
- (CMsgPracticeLobbyJoin_Builder*) clearLobbyId {
  _builderResult.hasLobbyId = NO;
  _builderResult.lobbyId = 0L;
  return self;
}
- (BOOL) hasClientVersion {
  return _builderResult.hasClientVersion;
}
- (uint32_t) clientVersion {
  return _builderResult.clientVersion;
}
- (CMsgPracticeLobbyJoin_Builder*) setClientVersion:(uint32_t) value {
  _builderResult.hasClientVersion = YES;
  _builderResult.clientVersion = value;
  return self;
}
- (CMsgPracticeLobbyJoin_Builder*) clearClientVersion {
  _builderResult.hasClientVersion = NO;
  _builderResult.clientVersion = 0;
  return self;
}
- (BOOL) hasPassKey {
  return _builderResult.hasPassKey;
}
- (NSString*) passKey {
  return _builderResult.passKey;
}
- (CMsgPracticeLobbyJoin_Builder*) setPassKey:(NSString*) value {
  _builderResult.hasPassKey = YES;
  _builderResult.passKey = value;
  return self;
}
- (CMsgPracticeLobbyJoin_Builder*) clearPassKey {
  _builderResult.hasPassKey = NO;
  _builderResult.passKey = @"";
  return self;
}
@end

@interface CMsgPracticeLobbyJoinResponse ()
@property DOTAJoinLobbyResult result;
@end

@implementation CMsgPracticeLobbyJoinResponse

- (BOOL) hasresult {
  return !!hasresult_;
}
- (void) setHasresult:(BOOL) value_ {
  hasresult_ = !!value_;
}
@synthesize result;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = DOTAJoinLobbyResultDOTA_JOIN_RESULT_SUCCESS;
  }
  return self;
}
static CMsgPracticeLobbyJoinResponse* defaultCMsgPracticeLobbyJoinResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgPracticeLobbyJoinResponse class]) {
    defaultCMsgPracticeLobbyJoinResponseInstance = [[CMsgPracticeLobbyJoinResponse alloc] init];
  }
}
+ (CMsgPracticeLobbyJoinResponse*) defaultInstance {
  return defaultCMsgPracticeLobbyJoinResponseInstance;
}
- (CMsgPracticeLobbyJoinResponse*) defaultInstance {
  return defaultCMsgPracticeLobbyJoinResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasresult) {
    [output writeEnum:1 value:self.result];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasresult) {
    size_ += computeEnumSize(1, self.result);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgPracticeLobbyJoinResponse*) parseFromData:(NSData*) data {
  return (CMsgPracticeLobbyJoinResponse*)[[[CMsgPracticeLobbyJoinResponse builder] mergeFromData:data] build];
}
+ (CMsgPracticeLobbyJoinResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyJoinResponse*)[[[CMsgPracticeLobbyJoinResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyJoinResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgPracticeLobbyJoinResponse*)[[[CMsgPracticeLobbyJoinResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgPracticeLobbyJoinResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyJoinResponse*)[[[CMsgPracticeLobbyJoinResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyJoinResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgPracticeLobbyJoinResponse*)[[[CMsgPracticeLobbyJoinResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgPracticeLobbyJoinResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgPracticeLobbyJoinResponse*)[[[CMsgPracticeLobbyJoinResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgPracticeLobbyJoinResponse_Builder*) builder {
  return [[[CMsgPracticeLobbyJoinResponse_Builder alloc] init] autorelease];
}
+ (CMsgPracticeLobbyJoinResponse_Builder*) builderWithPrototype:(CMsgPracticeLobbyJoinResponse*) prototype {
  return [[CMsgPracticeLobbyJoinResponse builder] mergeFrom:prototype];
}
- (CMsgPracticeLobbyJoinResponse_Builder*) builder {
  return [CMsgPracticeLobbyJoinResponse builder];
}
- (CMsgPracticeLobbyJoinResponse_Builder*) toBuilder {
  return [CMsgPracticeLobbyJoinResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasresult) {
    [output appendFormat:@"%@%@: %d\n", indent, @"result", self.result];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgPracticeLobbyJoinResponse class]]) {
    return NO;
  }
  CMsgPracticeLobbyJoinResponse *otherMessage = other;
  return
      self.hasresult == otherMessage.hasresult &&
      (!self.hasresult || self.result == otherMessage.result) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasresult) {
    hashCode = hashCode * 31 + self.result;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgPracticeLobbyJoinResponse_Builder()
@property (retain) CMsgPracticeLobbyJoinResponse* _builderResult;
@end

@implementation CMsgPracticeLobbyJoinResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgPracticeLobbyJoinResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgPracticeLobbyJoinResponse_Builder*) clear {
  _builderResult = [[[CMsgPracticeLobbyJoinResponse alloc] init] autorelease];
  return self;
}
- (CMsgPracticeLobbyJoinResponse_Builder*) clone {
  return [CMsgPracticeLobbyJoinResponse builderWithPrototype:_builderResult];
}
- (CMsgPracticeLobbyJoinResponse*) defaultInstance {
  return [CMsgPracticeLobbyJoinResponse defaultInstance];
}
- (CMsgPracticeLobbyJoinResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgPracticeLobbyJoinResponse*) buildPartial {
  CMsgPracticeLobbyJoinResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgPracticeLobbyJoinResponse_Builder*) mergeFrom:(CMsgPracticeLobbyJoinResponse*) other {
  if (other == [CMsgPracticeLobbyJoinResponse defaultInstance]) {
    return self;
  }
  if (other.hasresult) {
    [self setresult:other.result];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgPracticeLobbyJoinResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgPracticeLobbyJoinResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (DOTAJoinLobbyResultIsValidValue(value)) {
          [self setresult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasresult {
  return _builderResult.hasresult;
}
- (DOTAJoinLobbyResult) result {
  return _builderResult.result;
}
- (CMsgPracticeLobbyJoinResponse_Builder*) setresult:(DOTAJoinLobbyResult) value {
  _builderResult.hasresult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgPracticeLobbyJoinResponse_Builder*) clearresult {
  _builderResult.hasresult = NO;
  _builderResult.result = DOTAJoinLobbyResultDOTA_JOIN_RESULT_SUCCESS;
  return self;
}
@end

@interface CMsgFriendPracticeLobbyListRequest ()
@property (retain) PBAppendableArray * friendsArray;
@end

@implementation CMsgFriendPracticeLobbyListRequest

@synthesize friendsArray;
@dynamic friends;
- (void) dealloc {
  self.friendsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgFriendPracticeLobbyListRequest* defaultCMsgFriendPracticeLobbyListRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgFriendPracticeLobbyListRequest class]) {
    defaultCMsgFriendPracticeLobbyListRequestInstance = [[CMsgFriendPracticeLobbyListRequest alloc] init];
  }
}
+ (CMsgFriendPracticeLobbyListRequest*) defaultInstance {
  return defaultCMsgFriendPracticeLobbyListRequestInstance;
}
- (CMsgFriendPracticeLobbyListRequest*) defaultInstance {
  return defaultCMsgFriendPracticeLobbyListRequestInstance;
}
- (PBArray *)friends {
  return friendsArray;
}
- (uint32_t)friendsAtIndex:(NSUInteger)index {
  return [friendsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger friendsArrayCount = self.friendsArray.count;
  if (friendsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.friendsArray.data;
    for (NSUInteger i = 0; i < friendsArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.friendsArray.count;
    const uint32_t *values = (const uint32_t *)self.friendsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgFriendPracticeLobbyListRequest*) parseFromData:(NSData*) data {
  return (CMsgFriendPracticeLobbyListRequest*)[[[CMsgFriendPracticeLobbyListRequest builder] mergeFromData:data] build];
}
+ (CMsgFriendPracticeLobbyListRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgFriendPracticeLobbyListRequest*)[[[CMsgFriendPracticeLobbyListRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgFriendPracticeLobbyListRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgFriendPracticeLobbyListRequest*)[[[CMsgFriendPracticeLobbyListRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgFriendPracticeLobbyListRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgFriendPracticeLobbyListRequest*)[[[CMsgFriendPracticeLobbyListRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgFriendPracticeLobbyListRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgFriendPracticeLobbyListRequest*)[[[CMsgFriendPracticeLobbyListRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgFriendPracticeLobbyListRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgFriendPracticeLobbyListRequest*)[[[CMsgFriendPracticeLobbyListRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgFriendPracticeLobbyListRequest_Builder*) builder {
  return [[[CMsgFriendPracticeLobbyListRequest_Builder alloc] init] autorelease];
}
+ (CMsgFriendPracticeLobbyListRequest_Builder*) builderWithPrototype:(CMsgFriendPracticeLobbyListRequest*) prototype {
  return [[CMsgFriendPracticeLobbyListRequest builder] mergeFrom:prototype];
}
- (CMsgFriendPracticeLobbyListRequest_Builder*) builder {
  return [CMsgFriendPracticeLobbyListRequest builder];
}
- (CMsgFriendPracticeLobbyListRequest_Builder*) toBuilder {
  return [CMsgFriendPracticeLobbyListRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.friendsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friends", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgFriendPracticeLobbyListRequest class]]) {
    return NO;
  }
  CMsgFriendPracticeLobbyListRequest *otherMessage = other;
  return
      [self.friendsArray isEqualToArray:otherMessage.friendsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.friendsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgFriendPracticeLobbyListRequest_Builder()
@property (retain) CMsgFriendPracticeLobbyListRequest* _builderResult;
@end

@implementation CMsgFriendPracticeLobbyListRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgFriendPracticeLobbyListRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgFriendPracticeLobbyListRequest_Builder*) clear {
  _builderResult = [[[CMsgFriendPracticeLobbyListRequest alloc] init] autorelease];
  return self;
}
- (CMsgFriendPracticeLobbyListRequest_Builder*) clone {
  return [CMsgFriendPracticeLobbyListRequest builderWithPrototype:_builderResult];
}
- (CMsgFriendPracticeLobbyListRequest*) defaultInstance {
  return [CMsgFriendPracticeLobbyListRequest defaultInstance];
}
- (CMsgFriendPracticeLobbyListRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgFriendPracticeLobbyListRequest*) buildPartial {
  CMsgFriendPracticeLobbyListRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgFriendPracticeLobbyListRequest_Builder*) mergeFrom:(CMsgFriendPracticeLobbyListRequest*) other {
  if (other == [CMsgFriendPracticeLobbyListRequest defaultInstance]) {
    return self;
  }
  if (other.friendsArray.count > 0) {
    if (_builderResult.friendsArray == nil) {
      _builderResult.friendsArray = [[other.friendsArray copyWithZone:[other.friendsArray zone]] autorelease];
    } else {
      [_builderResult.friendsArray appendArray:other.friendsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgFriendPracticeLobbyListRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgFriendPracticeLobbyListRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addFriends:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)friends {
  return _builderResult.friendsArray;
}
- (uint32_t)friendsAtIndex:(NSUInteger)index {
  return [_builderResult friendsAtIndex:index];
}
- (CMsgFriendPracticeLobbyListRequest_Builder *)addFriends:(uint32_t)value {
  if (_builderResult.friendsArray == nil) {
    _builderResult.friendsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.friendsArray addUint32:value];
  return self;
}
- (CMsgFriendPracticeLobbyListRequest_Builder *)setFriendsArray:(NSArray *)array {
  _builderResult.friendsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgFriendPracticeLobbyListRequest_Builder *)setFriendsValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.friendsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgFriendPracticeLobbyListRequest_Builder *)clearFriends {
  _builderResult.friendsArray = nil;
  return self;
}
@end

@interface CMsgFriendPracticeLobbyListResponse ()
@property (retain) PBAppendableArray * lobbiesArray;
@end

@implementation CMsgFriendPracticeLobbyListResponse

@synthesize lobbiesArray;
@dynamic lobbies;
- (void) dealloc {
  self.lobbiesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgFriendPracticeLobbyListResponse* defaultCMsgFriendPracticeLobbyListResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgFriendPracticeLobbyListResponse class]) {
    defaultCMsgFriendPracticeLobbyListResponseInstance = [[CMsgFriendPracticeLobbyListResponse alloc] init];
  }
}
+ (CMsgFriendPracticeLobbyListResponse*) defaultInstance {
  return defaultCMsgFriendPracticeLobbyListResponseInstance;
}
- (CMsgFriendPracticeLobbyListResponse*) defaultInstance {
  return defaultCMsgFriendPracticeLobbyListResponseInstance;
}
- (PBArray *)lobbies {
  return lobbiesArray;
}
- (CMsgPracticeLobbyListResponseEntry*)lobbiesAtIndex:(NSUInteger)index {
  return [lobbiesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgPracticeLobbyListResponseEntry *element in self.lobbiesArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgPracticeLobbyListResponseEntry *element in self.lobbiesArray) {
    size_ += computeMessageSize(1, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgFriendPracticeLobbyListResponse*) parseFromData:(NSData*) data {
  return (CMsgFriendPracticeLobbyListResponse*)[[[CMsgFriendPracticeLobbyListResponse builder] mergeFromData:data] build];
}
+ (CMsgFriendPracticeLobbyListResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgFriendPracticeLobbyListResponse*)[[[CMsgFriendPracticeLobbyListResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgFriendPracticeLobbyListResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgFriendPracticeLobbyListResponse*)[[[CMsgFriendPracticeLobbyListResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgFriendPracticeLobbyListResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgFriendPracticeLobbyListResponse*)[[[CMsgFriendPracticeLobbyListResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgFriendPracticeLobbyListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgFriendPracticeLobbyListResponse*)[[[CMsgFriendPracticeLobbyListResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgFriendPracticeLobbyListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgFriendPracticeLobbyListResponse*)[[[CMsgFriendPracticeLobbyListResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgFriendPracticeLobbyListResponse_Builder*) builder {
  return [[[CMsgFriendPracticeLobbyListResponse_Builder alloc] init] autorelease];
}
+ (CMsgFriendPracticeLobbyListResponse_Builder*) builderWithPrototype:(CMsgFriendPracticeLobbyListResponse*) prototype {
  return [[CMsgFriendPracticeLobbyListResponse builder] mergeFrom:prototype];
}
- (CMsgFriendPracticeLobbyListResponse_Builder*) builder {
  return [CMsgFriendPracticeLobbyListResponse builder];
}
- (CMsgFriendPracticeLobbyListResponse_Builder*) toBuilder {
  return [CMsgFriendPracticeLobbyListResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgPracticeLobbyListResponseEntry* element in self.lobbiesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"lobbies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgFriendPracticeLobbyListResponse class]]) {
    return NO;
  }
  CMsgFriendPracticeLobbyListResponse *otherMessage = other;
  return
      [self.lobbiesArray isEqualToArray:otherMessage.lobbiesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgPracticeLobbyListResponseEntry* element in self.lobbiesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgFriendPracticeLobbyListResponse_Builder()
@property (retain) CMsgFriendPracticeLobbyListResponse* _builderResult;
@end

@implementation CMsgFriendPracticeLobbyListResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgFriendPracticeLobbyListResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgFriendPracticeLobbyListResponse_Builder*) clear {
  _builderResult = [[[CMsgFriendPracticeLobbyListResponse alloc] init] autorelease];
  return self;
}
- (CMsgFriendPracticeLobbyListResponse_Builder*) clone {
  return [CMsgFriendPracticeLobbyListResponse builderWithPrototype:_builderResult];
}
- (CMsgFriendPracticeLobbyListResponse*) defaultInstance {
  return [CMsgFriendPracticeLobbyListResponse defaultInstance];
}
- (CMsgFriendPracticeLobbyListResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgFriendPracticeLobbyListResponse*) buildPartial {
  CMsgFriendPracticeLobbyListResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgFriendPracticeLobbyListResponse_Builder*) mergeFrom:(CMsgFriendPracticeLobbyListResponse*) other {
  if (other == [CMsgFriendPracticeLobbyListResponse defaultInstance]) {
    return self;
  }
  if (other.lobbiesArray.count > 0) {
    if (_builderResult.lobbiesArray == nil) {
      _builderResult.lobbiesArray = [[other.lobbiesArray copyWithZone:[other.lobbiesArray zone]] autorelease];
    } else {
      [_builderResult.lobbiesArray appendArray:other.lobbiesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgFriendPracticeLobbyListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgFriendPracticeLobbyListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgPracticeLobbyListResponseEntry_Builder* subBuilder = [CMsgPracticeLobbyListResponseEntry builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLobbies:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)lobbies {
  return _builderResult.lobbiesArray;
}
- (CMsgPracticeLobbyListResponseEntry*)lobbiesAtIndex:(NSUInteger)index {
  return [_builderResult lobbiesAtIndex:index];
}
- (CMsgFriendPracticeLobbyListResponse_Builder *)addLobbies:(CMsgPracticeLobbyListResponseEntry*)value {
  if (_builderResult.lobbiesArray == nil) {
    _builderResult.lobbiesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.lobbiesArray addObject:value];
  return self;
}
- (CMsgFriendPracticeLobbyListResponse_Builder *)setLobbiesArray:(NSArray *)array {
  _builderResult.lobbiesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgFriendPracticeLobbyListResponse_Builder *)setLobbiesValues:(const CMsgPracticeLobbyListResponseEntry* *)values count:(NSUInteger)count {
  _builderResult.lobbiesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgFriendPracticeLobbyListResponse_Builder *)clearLobbies {
  _builderResult.lobbiesArray = nil;
  return self;
}
@end

@interface CMsgSetAvatar ()
@property uint32_t avatar;
@end

@implementation CMsgSetAvatar

- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value_ {
  hasAvatar_ = !!value_;
}
@synthesize avatar;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.avatar = 0;
  }
  return self;
}
static CMsgSetAvatar* defaultCMsgSetAvatarInstance = nil;
+ (void) initialize {
  if (self == [CMsgSetAvatar class]) {
    defaultCMsgSetAvatarInstance = [[CMsgSetAvatar alloc] init];
  }
}
+ (CMsgSetAvatar*) defaultInstance {
  return defaultCMsgSetAvatarInstance;
}
- (CMsgSetAvatar*) defaultInstance {
  return defaultCMsgSetAvatarInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAvatar) {
    [output writeUInt32:1 value:self.avatar];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAvatar) {
    size_ += computeUInt32Size(1, self.avatar);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgSetAvatar*) parseFromData:(NSData*) data {
  return (CMsgSetAvatar*)[[[CMsgSetAvatar builder] mergeFromData:data] build];
}
+ (CMsgSetAvatar*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSetAvatar*)[[[CMsgSetAvatar builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgSetAvatar*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgSetAvatar*)[[[CMsgSetAvatar builder] mergeFromInputStream:input] build];
}
+ (CMsgSetAvatar*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSetAvatar*)[[[CMsgSetAvatar builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSetAvatar*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgSetAvatar*)[[[CMsgSetAvatar builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgSetAvatar*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSetAvatar*)[[[CMsgSetAvatar builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSetAvatar_Builder*) builder {
  return [[[CMsgSetAvatar_Builder alloc] init] autorelease];
}
+ (CMsgSetAvatar_Builder*) builderWithPrototype:(CMsgSetAvatar*) prototype {
  return [[CMsgSetAvatar builder] mergeFrom:prototype];
}
- (CMsgSetAvatar_Builder*) builder {
  return [CMsgSetAvatar builder];
}
- (CMsgSetAvatar_Builder*) toBuilder {
  return [CMsgSetAvatar builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", [NSNumber numberWithInt:self.avatar]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgSetAvatar class]]) {
    return NO;
  }
  CMsgSetAvatar *otherMessage = other;
  return
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || self.avatar == otherMessage.avatar) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.avatar] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgSetAvatar_Builder()
@property (retain) CMsgSetAvatar* _builderResult;
@end

@implementation CMsgSetAvatar_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgSetAvatar alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgSetAvatar_Builder*) clear {
  _builderResult = [[[CMsgSetAvatar alloc] init] autorelease];
  return self;
}
- (CMsgSetAvatar_Builder*) clone {
  return [CMsgSetAvatar builderWithPrototype:_builderResult];
}
- (CMsgSetAvatar*) defaultInstance {
  return [CMsgSetAvatar defaultInstance];
}
- (CMsgSetAvatar*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgSetAvatar*) buildPartial {
  CMsgSetAvatar* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgSetAvatar_Builder*) mergeFrom:(CMsgSetAvatar*) other {
  if (other == [CMsgSetAvatar defaultInstance]) {
    return self;
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgSetAvatar_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgSetAvatar_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAvatar:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAvatar {
  return _builderResult.hasAvatar;
}
- (uint32_t) avatar {
  return _builderResult.avatar;
}
- (CMsgSetAvatar_Builder*) setAvatar:(uint32_t) value {
  _builderResult.hasAvatar = YES;
  _builderResult.avatar = value;
  return self;
}
- (CMsgSetAvatar_Builder*) clearAvatar {
  _builderResult.hasAvatar = NO;
  _builderResult.avatar = 0;
  return self;
}
@end

@interface CMsgRequestInternationalTicket ()
@end

@implementation CMsgRequestInternationalTicket

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgRequestInternationalTicket* defaultCMsgRequestInternationalTicketInstance = nil;
+ (void) initialize {
  if (self == [CMsgRequestInternationalTicket class]) {
    defaultCMsgRequestInternationalTicketInstance = [[CMsgRequestInternationalTicket alloc] init];
  }
}
+ (CMsgRequestInternationalTicket*) defaultInstance {
  return defaultCMsgRequestInternationalTicketInstance;
}
- (CMsgRequestInternationalTicket*) defaultInstance {
  return defaultCMsgRequestInternationalTicketInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgRequestInternationalTicket*) parseFromData:(NSData*) data {
  return (CMsgRequestInternationalTicket*)[[[CMsgRequestInternationalTicket builder] mergeFromData:data] build];
}
+ (CMsgRequestInternationalTicket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRequestInternationalTicket*)[[[CMsgRequestInternationalTicket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgRequestInternationalTicket*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgRequestInternationalTicket*)[[[CMsgRequestInternationalTicket builder] mergeFromInputStream:input] build];
}
+ (CMsgRequestInternationalTicket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRequestInternationalTicket*)[[[CMsgRequestInternationalTicket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgRequestInternationalTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgRequestInternationalTicket*)[[[CMsgRequestInternationalTicket builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgRequestInternationalTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRequestInternationalTicket*)[[[CMsgRequestInternationalTicket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgRequestInternationalTicket_Builder*) builder {
  return [[[CMsgRequestInternationalTicket_Builder alloc] init] autorelease];
}
+ (CMsgRequestInternationalTicket_Builder*) builderWithPrototype:(CMsgRequestInternationalTicket*) prototype {
  return [[CMsgRequestInternationalTicket builder] mergeFrom:prototype];
}
- (CMsgRequestInternationalTicket_Builder*) builder {
  return [CMsgRequestInternationalTicket builder];
}
- (CMsgRequestInternationalTicket_Builder*) toBuilder {
  return [CMsgRequestInternationalTicket builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgRequestInternationalTicket class]]) {
    return NO;
  }
  CMsgRequestInternationalTicket *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgRequestInternationalTicket_Builder()
@property (retain) CMsgRequestInternationalTicket* _builderResult;
@end

@implementation CMsgRequestInternationalTicket_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgRequestInternationalTicket alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgRequestInternationalTicket_Builder*) clear {
  _builderResult = [[[CMsgRequestInternationalTicket alloc] init] autorelease];
  return self;
}
- (CMsgRequestInternationalTicket_Builder*) clone {
  return [CMsgRequestInternationalTicket builderWithPrototype:_builderResult];
}
- (CMsgRequestInternationalTicket*) defaultInstance {
  return [CMsgRequestInternationalTicket defaultInstance];
}
- (CMsgRequestInternationalTicket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgRequestInternationalTicket*) buildPartial {
  CMsgRequestInternationalTicket* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgRequestInternationalTicket_Builder*) mergeFrom:(CMsgRequestInternationalTicket*) other {
  if (other == [CMsgRequestInternationalTicket defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgRequestInternationalTicket_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgRequestInternationalTicket_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgTrackedEvent ()
@property uint64_t submitterId;
@property uint32_t eventId;
@property uint64_t timeSubmitted;
@property uint32_t eventType;
@property (retain) PBAppendableArray * varsUint32Array;
@property (retain) PBAppendableArray * varsUint64Array;
@property (retain) PBAppendableArray * varsInt32Array;
@property (retain) PBAppendableArray * varsInt64Array;
@property (retain) PBAppendableArray * varsFloatArray;
@property (retain) PBAppendableArray * varsDoubleArray;
@end

@implementation CMsgTrackedEvent

- (BOOL) hasSubmitterId {
  return !!hasSubmitterId_;
}
- (void) setHasSubmitterId:(BOOL) value_ {
  hasSubmitterId_ = !!value_;
}
@synthesize submitterId;
- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) value_ {
  hasEventId_ = !!value_;
}
@synthesize eventId;
- (BOOL) hasTimeSubmitted {
  return !!hasTimeSubmitted_;
}
- (void) setHasTimeSubmitted:(BOOL) value_ {
  hasTimeSubmitted_ = !!value_;
}
@synthesize timeSubmitted;
- (BOOL) hasEventType {
  return !!hasEventType_;
}
- (void) setHasEventType:(BOOL) value_ {
  hasEventType_ = !!value_;
}
@synthesize eventType;
@synthesize varsUint32Array;
@dynamic varsUint32;
@synthesize varsUint64Array;
@dynamic varsUint64;
@synthesize varsInt32Array;
@dynamic varsInt32;
@synthesize varsInt64Array;
@dynamic varsInt64;
@synthesize varsFloatArray;
@dynamic varsFloat;
@synthesize varsDoubleArray;
@dynamic varsDouble;
- (void) dealloc {
  self.varsUint32Array = nil;
  self.varsUint64Array = nil;
  self.varsInt32Array = nil;
  self.varsInt64Array = nil;
  self.varsFloatArray = nil;
  self.varsDoubleArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.submitterId = 0L;
    self.eventId = 0;
    self.timeSubmitted = 0L;
    self.eventType = 0;
  }
  return self;
}
static CMsgTrackedEvent* defaultCMsgTrackedEventInstance = nil;
+ (void) initialize {
  if (self == [CMsgTrackedEvent class]) {
    defaultCMsgTrackedEventInstance = [[CMsgTrackedEvent alloc] init];
  }
}
+ (CMsgTrackedEvent*) defaultInstance {
  return defaultCMsgTrackedEventInstance;
}
- (CMsgTrackedEvent*) defaultInstance {
  return defaultCMsgTrackedEventInstance;
}
- (PBArray *)varsUint32 {
  return varsUint32Array;
}
- (uint32_t)varsUint32AtIndex:(NSUInteger)index {
  return [varsUint32Array uint32AtIndex:index];
}
- (PBArray *)varsUint64 {
  return varsUint64Array;
}
- (uint64_t)varsUint64AtIndex:(NSUInteger)index {
  return [varsUint64Array uint64AtIndex:index];
}
- (PBArray *)varsInt32 {
  return varsInt32Array;
}
- (int32_t)varsInt32AtIndex:(NSUInteger)index {
  return [varsInt32Array int32AtIndex:index];
}
- (PBArray *)varsInt64 {
  return varsInt64Array;
}
- (int64_t)varsInt64AtIndex:(NSUInteger)index {
  return [varsInt64Array int64AtIndex:index];
}
- (PBArray *)varsFloat {
  return varsFloatArray;
}
- (Float32)varsFloatAtIndex:(NSUInteger)index {
  return [varsFloatArray floatAtIndex:index];
}
- (PBArray *)varsDouble {
  return varsDoubleArray;
}
- (Float64)varsDoubleAtIndex:(NSUInteger)index {
  return [varsDoubleArray doubleAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSubmitterId) {
    [output writeUInt64:1 value:self.submitterId];
  }
  if (self.hasEventId) {
    [output writeUInt32:2 value:self.eventId];
  }
  if (self.hasTimeSubmitted) {
    [output writeFixed64:3 value:self.timeSubmitted];
  }
  if (self.hasEventType) {
    [output writeUInt32:4 value:self.eventType];
  }
  const NSUInteger varsUint32ArrayCount = self.varsUint32Array.count;
  if (varsUint32ArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.varsUint32Array.data;
    for (NSUInteger i = 0; i < varsUint32ArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  const NSUInteger varsUint64ArrayCount = self.varsUint64Array.count;
  if (varsUint64ArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.varsUint64Array.data;
    for (NSUInteger i = 0; i < varsUint64ArrayCount; ++i) {
      [output writeUInt64:6 value:values[i]];
    }
  }
  const NSUInteger varsInt32ArrayCount = self.varsInt32Array.count;
  if (varsInt32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.varsInt32Array.data;
    for (NSUInteger i = 0; i < varsInt32ArrayCount; ++i) {
      [output writeInt32:7 value:values[i]];
    }
  }
  const NSUInteger varsInt64ArrayCount = self.varsInt64Array.count;
  if (varsInt64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.varsInt64Array.data;
    for (NSUInteger i = 0; i < varsInt64ArrayCount; ++i) {
      [output writeInt64:8 value:values[i]];
    }
  }
  const NSUInteger varsFloatArrayCount = self.varsFloatArray.count;
  if (varsFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.varsFloatArray.data;
    for (NSUInteger i = 0; i < varsFloatArrayCount; ++i) {
      [output writeFloat:9 value:values[i]];
    }
  }
  const NSUInteger varsDoubleArrayCount = self.varsDoubleArray.count;
  if (varsDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.varsDoubleArray.data;
    for (NSUInteger i = 0; i < varsDoubleArrayCount; ++i) {
      [output writeDouble:10 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSubmitterId) {
    size_ += computeUInt64Size(1, self.submitterId);
  }
  if (self.hasEventId) {
    size_ += computeUInt32Size(2, self.eventId);
  }
  if (self.hasTimeSubmitted) {
    size_ += computeFixed64Size(3, self.timeSubmitted);
  }
  if (self.hasEventType) {
    size_ += computeUInt32Size(4, self.eventType);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.varsUint32Array.count;
    const uint32_t *values = (const uint32_t *)self.varsUint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.varsUint64Array.count;
    const uint64_t *values = (const uint64_t *)self.varsUint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.varsInt32Array.count;
    const int32_t *values = (const int32_t *)self.varsInt32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.varsInt64Array.count;
    const int64_t *values = (const int64_t *)self.varsInt64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.varsFloatArray.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.varsDoubleArray.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgTrackedEvent*) parseFromData:(NSData*) data {
  return (CMsgTrackedEvent*)[[[CMsgTrackedEvent builder] mergeFromData:data] build];
}
+ (CMsgTrackedEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTrackedEvent*)[[[CMsgTrackedEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgTrackedEvent*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgTrackedEvent*)[[[CMsgTrackedEvent builder] mergeFromInputStream:input] build];
}
+ (CMsgTrackedEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTrackedEvent*)[[[CMsgTrackedEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTrackedEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgTrackedEvent*)[[[CMsgTrackedEvent builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgTrackedEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTrackedEvent*)[[[CMsgTrackedEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTrackedEvent_Builder*) builder {
  return [[[CMsgTrackedEvent_Builder alloc] init] autorelease];
}
+ (CMsgTrackedEvent_Builder*) builderWithPrototype:(CMsgTrackedEvent*) prototype {
  return [[CMsgTrackedEvent builder] mergeFrom:prototype];
}
- (CMsgTrackedEvent_Builder*) builder {
  return [CMsgTrackedEvent builder];
}
- (CMsgTrackedEvent_Builder*) toBuilder {
  return [CMsgTrackedEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSubmitterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"submitterId", [NSNumber numberWithLongLong:self.submitterId]];
  }
  if (self.hasEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventId", [NSNumber numberWithInt:self.eventId]];
  }
  if (self.hasTimeSubmitted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeSubmitted", [NSNumber numberWithLongLong:self.timeSubmitted]];
  }
  if (self.hasEventType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventType", [NSNumber numberWithInt:self.eventType]];
  }
  for (NSNumber* value in self.varsUint32Array) {
    [output appendFormat:@"%@%@: %@\n", indent, @"varsUint32", value];
  }
  for (NSNumber* value in self.varsUint64Array) {
    [output appendFormat:@"%@%@: %@\n", indent, @"varsUint64", value];
  }
  for (NSNumber* value in self.varsInt32Array) {
    [output appendFormat:@"%@%@: %@\n", indent, @"varsInt32", value];
  }
  for (NSNumber* value in self.varsInt64Array) {
    [output appendFormat:@"%@%@: %@\n", indent, @"varsInt64", value];
  }
  for (NSNumber* value in self.varsFloatArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"varsFloat", value];
  }
  for (NSNumber* value in self.varsDoubleArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"varsDouble", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgTrackedEvent class]]) {
    return NO;
  }
  CMsgTrackedEvent *otherMessage = other;
  return
      self.hasSubmitterId == otherMessage.hasSubmitterId &&
      (!self.hasSubmitterId || self.submitterId == otherMessage.submitterId) &&
      self.hasEventId == otherMessage.hasEventId &&
      (!self.hasEventId || self.eventId == otherMessage.eventId) &&
      self.hasTimeSubmitted == otherMessage.hasTimeSubmitted &&
      (!self.hasTimeSubmitted || self.timeSubmitted == otherMessage.timeSubmitted) &&
      self.hasEventType == otherMessage.hasEventType &&
      (!self.hasEventType || self.eventType == otherMessage.eventType) &&
      [self.varsUint32Array isEqualToArray:otherMessage.varsUint32Array] &&
      [self.varsUint64Array isEqualToArray:otherMessage.varsUint64Array] &&
      [self.varsInt32Array isEqualToArray:otherMessage.varsInt32Array] &&
      [self.varsInt64Array isEqualToArray:otherMessage.varsInt64Array] &&
      [self.varsFloatArray isEqualToArray:otherMessage.varsFloatArray] &&
      [self.varsDoubleArray isEqualToArray:otherMessage.varsDoubleArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSubmitterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.submitterId] hash];
  }
  if (self.hasEventId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eventId] hash];
  }
  if (self.hasTimeSubmitted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timeSubmitted] hash];
  }
  if (self.hasEventType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eventType] hash];
  }
  for (NSNumber* value in self.varsUint32Array) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.varsUint64Array) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.varsInt32Array) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.varsInt64Array) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.varsFloatArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.varsDoubleArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgTrackedEvent_Builder()
@property (retain) CMsgTrackedEvent* _builderResult;
@end

@implementation CMsgTrackedEvent_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgTrackedEvent alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgTrackedEvent_Builder*) clear {
  _builderResult = [[[CMsgTrackedEvent alloc] init] autorelease];
  return self;
}
- (CMsgTrackedEvent_Builder*) clone {
  return [CMsgTrackedEvent builderWithPrototype:_builderResult];
}
- (CMsgTrackedEvent*) defaultInstance {
  return [CMsgTrackedEvent defaultInstance];
}
- (CMsgTrackedEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgTrackedEvent*) buildPartial {
  CMsgTrackedEvent* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgTrackedEvent_Builder*) mergeFrom:(CMsgTrackedEvent*) other {
  if (other == [CMsgTrackedEvent defaultInstance]) {
    return self;
  }
  if (other.hasSubmitterId) {
    [self setSubmitterId:other.submitterId];
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  if (other.hasTimeSubmitted) {
    [self setTimeSubmitted:other.timeSubmitted];
  }
  if (other.hasEventType) {
    [self setEventType:other.eventType];
  }
  if (other.varsUint32Array.count > 0) {
    if (_builderResult.varsUint32Array == nil) {
      _builderResult.varsUint32Array = [[other.varsUint32Array copyWithZone:[other.varsUint32Array zone]] autorelease];
    } else {
      [_builderResult.varsUint32Array appendArray:other.varsUint32Array];
    }
  }
  if (other.varsUint64Array.count > 0) {
    if (_builderResult.varsUint64Array == nil) {
      _builderResult.varsUint64Array = [[other.varsUint64Array copyWithZone:[other.varsUint64Array zone]] autorelease];
    } else {
      [_builderResult.varsUint64Array appendArray:other.varsUint64Array];
    }
  }
  if (other.varsInt32Array.count > 0) {
    if (_builderResult.varsInt32Array == nil) {
      _builderResult.varsInt32Array = [[other.varsInt32Array copyWithZone:[other.varsInt32Array zone]] autorelease];
    } else {
      [_builderResult.varsInt32Array appendArray:other.varsInt32Array];
    }
  }
  if (other.varsInt64Array.count > 0) {
    if (_builderResult.varsInt64Array == nil) {
      _builderResult.varsInt64Array = [[other.varsInt64Array copyWithZone:[other.varsInt64Array zone]] autorelease];
    } else {
      [_builderResult.varsInt64Array appendArray:other.varsInt64Array];
    }
  }
  if (other.varsFloatArray.count > 0) {
    if (_builderResult.varsFloatArray == nil) {
      _builderResult.varsFloatArray = [[other.varsFloatArray copyWithZone:[other.varsFloatArray zone]] autorelease];
    } else {
      [_builderResult.varsFloatArray appendArray:other.varsFloatArray];
    }
  }
  if (other.varsDoubleArray.count > 0) {
    if (_builderResult.varsDoubleArray == nil) {
      _builderResult.varsDoubleArray = [[other.varsDoubleArray copyWithZone:[other.varsDoubleArray zone]] autorelease];
    } else {
      [_builderResult.varsDoubleArray appendArray:other.varsDoubleArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgTrackedEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgTrackedEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSubmitterId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setEventId:[input readUInt32]];
        break;
      }
      case 25: {
        [self setTimeSubmitted:[input readFixed64]];
        break;
      }
      case 32: {
        [self setEventType:[input readUInt32]];
        break;
      }
      case 40: {
        [self addVarsUint32:[input readUInt32]];
        break;
      }
      case 48: {
        [self addVarsUint64:[input readUInt64]];
        break;
      }
      case 56: {
        [self addVarsInt32:[input readInt32]];
        break;
      }
      case 64: {
        [self addVarsInt64:[input readInt64]];
        break;
      }
      case 77: {
        [self addVarsFloat:[input readFloat]];
        break;
      }
      case 81: {
        [self addVarsDouble:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasSubmitterId {
  return _builderResult.hasSubmitterId;
}
- (uint64_t) submitterId {
  return _builderResult.submitterId;
}
- (CMsgTrackedEvent_Builder*) setSubmitterId:(uint64_t) value {
  _builderResult.hasSubmitterId = YES;
  _builderResult.submitterId = value;
  return self;
}
- (CMsgTrackedEvent_Builder*) clearSubmitterId {
  _builderResult.hasSubmitterId = NO;
  _builderResult.submitterId = 0L;
  return self;
}
- (BOOL) hasEventId {
  return _builderResult.hasEventId;
}
- (uint32_t) eventId {
  return _builderResult.eventId;
}
- (CMsgTrackedEvent_Builder*) setEventId:(uint32_t) value {
  _builderResult.hasEventId = YES;
  _builderResult.eventId = value;
  return self;
}
- (CMsgTrackedEvent_Builder*) clearEventId {
  _builderResult.hasEventId = NO;
  _builderResult.eventId = 0;
  return self;
}
- (BOOL) hasTimeSubmitted {
  return _builderResult.hasTimeSubmitted;
}
- (uint64_t) timeSubmitted {
  return _builderResult.timeSubmitted;
}
- (CMsgTrackedEvent_Builder*) setTimeSubmitted:(uint64_t) value {
  _builderResult.hasTimeSubmitted = YES;
  _builderResult.timeSubmitted = value;
  return self;
}
- (CMsgTrackedEvent_Builder*) clearTimeSubmitted {
  _builderResult.hasTimeSubmitted = NO;
  _builderResult.timeSubmitted = 0L;
  return self;
}
- (BOOL) hasEventType {
  return _builderResult.hasEventType;
}
- (uint32_t) eventType {
  return _builderResult.eventType;
}
- (CMsgTrackedEvent_Builder*) setEventType:(uint32_t) value {
  _builderResult.hasEventType = YES;
  _builderResult.eventType = value;
  return self;
}
- (CMsgTrackedEvent_Builder*) clearEventType {
  _builderResult.hasEventType = NO;
  _builderResult.eventType = 0;
  return self;
}
- (PBAppendableArray *)varsUint32 {
  return _builderResult.varsUint32Array;
}
- (uint32_t)varsUint32AtIndex:(NSUInteger)index {
  return [_builderResult varsUint32AtIndex:index];
}
- (CMsgTrackedEvent_Builder *)addVarsUint32:(uint32_t)value {
  if (_builderResult.varsUint32Array == nil) {
    _builderResult.varsUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.varsUint32Array addUint32:value];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsUint32Array:(NSArray *)array {
  _builderResult.varsUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsUint32Values:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.varsUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgTrackedEvent_Builder *)clearVarsUint32 {
  _builderResult.varsUint32Array = nil;
  return self;
}
- (PBAppendableArray *)varsUint64 {
  return _builderResult.varsUint64Array;
}
- (uint64_t)varsUint64AtIndex:(NSUInteger)index {
  return [_builderResult varsUint64AtIndex:index];
}
- (CMsgTrackedEvent_Builder *)addVarsUint64:(uint64_t)value {
  if (_builderResult.varsUint64Array == nil) {
    _builderResult.varsUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_builderResult.varsUint64Array addUint64:value];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsUint64Array:(NSArray *)array {
  _builderResult.varsUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsUint64Values:(const uint64_t *)values count:(NSUInteger)count {
  _builderResult.varsUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgTrackedEvent_Builder *)clearVarsUint64 {
  _builderResult.varsUint64Array = nil;
  return self;
}
- (PBAppendableArray *)varsInt32 {
  return _builderResult.varsInt32Array;
}
- (int32_t)varsInt32AtIndex:(NSUInteger)index {
  return [_builderResult varsInt32AtIndex:index];
}
- (CMsgTrackedEvent_Builder *)addVarsInt32:(int32_t)value {
  if (_builderResult.varsInt32Array == nil) {
    _builderResult.varsInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_builderResult.varsInt32Array addInt32:value];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsInt32Array:(NSArray *)array {
  _builderResult.varsInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsInt32Values:(const int32_t *)values count:(NSUInteger)count {
  _builderResult.varsInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (CMsgTrackedEvent_Builder *)clearVarsInt32 {
  _builderResult.varsInt32Array = nil;
  return self;
}
- (PBAppendableArray *)varsInt64 {
  return _builderResult.varsInt64Array;
}
- (int64_t)varsInt64AtIndex:(NSUInteger)index {
  return [_builderResult varsInt64AtIndex:index];
}
- (CMsgTrackedEvent_Builder *)addVarsInt64:(int64_t)value {
  if (_builderResult.varsInt64Array == nil) {
    _builderResult.varsInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_builderResult.varsInt64Array addInt64:value];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsInt64Array:(NSArray *)array {
  _builderResult.varsInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsInt64Values:(const int64_t *)values count:(NSUInteger)count {
  _builderResult.varsInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (CMsgTrackedEvent_Builder *)clearVarsInt64 {
  _builderResult.varsInt64Array = nil;
  return self;
}
- (PBAppendableArray *)varsFloat {
  return _builderResult.varsFloatArray;
}
- (Float32)varsFloatAtIndex:(NSUInteger)index {
  return [_builderResult varsFloatAtIndex:index];
}
- (CMsgTrackedEvent_Builder *)addVarsFloat:(Float32)value {
  if (_builderResult.varsFloatArray == nil) {
    _builderResult.varsFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_builderResult.varsFloatArray addFloat:value];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsFloatArray:(NSArray *)array {
  _builderResult.varsFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsFloatValues:(const Float32 *)values count:(NSUInteger)count {
  _builderResult.varsFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (CMsgTrackedEvent_Builder *)clearVarsFloat {
  _builderResult.varsFloatArray = nil;
  return self;
}
- (PBAppendableArray *)varsDouble {
  return _builderResult.varsDoubleArray;
}
- (Float64)varsDoubleAtIndex:(NSUInteger)index {
  return [_builderResult varsDoubleAtIndex:index];
}
- (CMsgTrackedEvent_Builder *)addVarsDouble:(Float64)value {
  if (_builderResult.varsDoubleArray == nil) {
    _builderResult.varsDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_builderResult.varsDoubleArray addDouble:value];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsDoubleArray:(NSArray *)array {
  _builderResult.varsDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (CMsgTrackedEvent_Builder *)setVarsDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  _builderResult.varsDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (CMsgTrackedEvent_Builder *)clearVarsDouble {
  _builderResult.varsDoubleArray = nil;
  return self;
}
@end

@interface CMsgSendTrackedEvents ()
@property (retain) PBAppendableArray * eventsArray;
@end

@implementation CMsgSendTrackedEvents

@synthesize eventsArray;
@dynamic events;
- (void) dealloc {
  self.eventsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgSendTrackedEvents* defaultCMsgSendTrackedEventsInstance = nil;
+ (void) initialize {
  if (self == [CMsgSendTrackedEvents class]) {
    defaultCMsgSendTrackedEventsInstance = [[CMsgSendTrackedEvents alloc] init];
  }
}
+ (CMsgSendTrackedEvents*) defaultInstance {
  return defaultCMsgSendTrackedEventsInstance;
}
- (CMsgSendTrackedEvents*) defaultInstance {
  return defaultCMsgSendTrackedEventsInstance;
}
- (PBArray *)events {
  return eventsArray;
}
- (CMsgTrackedEvent*)eventsAtIndex:(NSUInteger)index {
  return [eventsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgTrackedEvent *element in self.eventsArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgTrackedEvent *element in self.eventsArray) {
    size_ += computeMessageSize(1, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgSendTrackedEvents*) parseFromData:(NSData*) data {
  return (CMsgSendTrackedEvents*)[[[CMsgSendTrackedEvents builder] mergeFromData:data] build];
}
+ (CMsgSendTrackedEvents*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSendTrackedEvents*)[[[CMsgSendTrackedEvents builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgSendTrackedEvents*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgSendTrackedEvents*)[[[CMsgSendTrackedEvents builder] mergeFromInputStream:input] build];
}
+ (CMsgSendTrackedEvents*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSendTrackedEvents*)[[[CMsgSendTrackedEvents builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSendTrackedEvents*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgSendTrackedEvents*)[[[CMsgSendTrackedEvents builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgSendTrackedEvents*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSendTrackedEvents*)[[[CMsgSendTrackedEvents builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSendTrackedEvents_Builder*) builder {
  return [[[CMsgSendTrackedEvents_Builder alloc] init] autorelease];
}
+ (CMsgSendTrackedEvents_Builder*) builderWithPrototype:(CMsgSendTrackedEvents*) prototype {
  return [[CMsgSendTrackedEvents builder] mergeFrom:prototype];
}
- (CMsgSendTrackedEvents_Builder*) builder {
  return [CMsgSendTrackedEvents builder];
}
- (CMsgSendTrackedEvents_Builder*) toBuilder {
  return [CMsgSendTrackedEvents builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgTrackedEvent* element in self.eventsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"events"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgSendTrackedEvents class]]) {
    return NO;
  }
  CMsgSendTrackedEvents *otherMessage = other;
  return
      [self.eventsArray isEqualToArray:otherMessage.eventsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgTrackedEvent* element in self.eventsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgSendTrackedEvents_Builder()
@property (retain) CMsgSendTrackedEvents* _builderResult;
@end

@implementation CMsgSendTrackedEvents_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgSendTrackedEvents alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgSendTrackedEvents_Builder*) clear {
  _builderResult = [[[CMsgSendTrackedEvents alloc] init] autorelease];
  return self;
}
- (CMsgSendTrackedEvents_Builder*) clone {
  return [CMsgSendTrackedEvents builderWithPrototype:_builderResult];
}
- (CMsgSendTrackedEvents*) defaultInstance {
  return [CMsgSendTrackedEvents defaultInstance];
}
- (CMsgSendTrackedEvents*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgSendTrackedEvents*) buildPartial {
  CMsgSendTrackedEvents* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgSendTrackedEvents_Builder*) mergeFrom:(CMsgSendTrackedEvents*) other {
  if (other == [CMsgSendTrackedEvents defaultInstance]) {
    return self;
  }
  if (other.eventsArray.count > 0) {
    if (_builderResult.eventsArray == nil) {
      _builderResult.eventsArray = [[other.eventsArray copyWithZone:[other.eventsArray zone]] autorelease];
    } else {
      [_builderResult.eventsArray appendArray:other.eventsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgSendTrackedEvents_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgSendTrackedEvents_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgTrackedEvent_Builder* subBuilder = [CMsgTrackedEvent builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEvents:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)events {
  return _builderResult.eventsArray;
}
- (CMsgTrackedEvent*)eventsAtIndex:(NSUInteger)index {
  return [_builderResult eventsAtIndex:index];
}
- (CMsgSendTrackedEvents_Builder *)addEvents:(CMsgTrackedEvent*)value {
  if (_builderResult.eventsArray == nil) {
    _builderResult.eventsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.eventsArray addObject:value];
  return self;
}
- (CMsgSendTrackedEvents_Builder *)setEventsArray:(NSArray *)array {
  _builderResult.eventsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgSendTrackedEvents_Builder *)setEventsValues:(const CMsgTrackedEvent* *)values count:(NSUInteger)count {
  _builderResult.eventsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgSendTrackedEvents_Builder *)clearEvents {
  _builderResult.eventsArray = nil;
  return self;
}
@end

@interface CMsgGameMatchSignOut ()
@property uint32_t matchId;
@property uint32_t duration;
@property BOOL goodGuysWin;
@property uint32_t date;
@property (retain) PBAppendableArray * numPlayersArray;
@property (retain) PBAppendableArray * teamsArray;
@property (retain) NSString* computerName;
@property (retain) PBAppendableArray * towerStatusArray;
@property (retain) PBAppendableArray * barracksStatusArray;
@property uint32_t cluster;
@property (retain) NSString* serverAddr;
@property uint32_t firstBloodTime;
@property Float32 gameBalance;
@property uint32_t eventScore;
@end

@implementation CMsgGameMatchSignOut

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value_ {
  hasDuration_ = !!value_;
}
@synthesize duration;
- (BOOL) hasGoodGuysWin {
  return !!hasGoodGuysWin_;
}
- (void) setHasGoodGuysWin:(BOOL) value_ {
  hasGoodGuysWin_ = !!value_;
}
- (BOOL) goodGuysWin {
  return !!goodGuysWin_;
}
- (void) setGoodGuysWin:(BOOL) value_ {
  goodGuysWin_ = !!value_;
}
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value_ {
  hasDate_ = !!value_;
}
@synthesize date;
@synthesize numPlayersArray;
@dynamic numPlayers;
@synthesize teamsArray;
@dynamic teams;
- (BOOL) hasComputerName {
  return !!hasComputerName_;
}
- (void) setHasComputerName:(BOOL) value_ {
  hasComputerName_ = !!value_;
}
@synthesize computerName;
@synthesize towerStatusArray;
@dynamic towerStatus;
@synthesize barracksStatusArray;
@dynamic barracksStatus;
- (BOOL) hasCluster {
  return !!hasCluster_;
}
- (void) setHasCluster:(BOOL) value_ {
  hasCluster_ = !!value_;
}
@synthesize cluster;
- (BOOL) hasServerAddr {
  return !!hasServerAddr_;
}
- (void) setHasServerAddr:(BOOL) value_ {
  hasServerAddr_ = !!value_;
}
@synthesize serverAddr;
- (BOOL) hasFirstBloodTime {
  return !!hasFirstBloodTime_;
}
- (void) setHasFirstBloodTime:(BOOL) value_ {
  hasFirstBloodTime_ = !!value_;
}
@synthesize firstBloodTime;
- (BOOL) hasGameBalance {
  return !!hasGameBalance_;
}
- (void) setHasGameBalance:(BOOL) value_ {
  hasGameBalance_ = !!value_;
}
@synthesize gameBalance;
- (BOOL) hasEventScore {
  return !!hasEventScore_;
}
- (void) setHasEventScore:(BOOL) value_ {
  hasEventScore_ = !!value_;
}
@synthesize eventScore;
- (void) dealloc {
  self.numPlayersArray = nil;
  self.teamsArray = nil;
  self.computerName = nil;
  self.towerStatusArray = nil;
  self.barracksStatusArray = nil;
  self.serverAddr = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
    self.duration = 0;
    self.goodGuysWin = NO;
    self.date = 0;
    self.computerName = @"";
    self.cluster = 0;
    self.serverAddr = @"";
    self.firstBloodTime = 0;
    self.gameBalance = 0;
    self.eventScore = 0;
  }
  return self;
}
static CMsgGameMatchSignOut* defaultCMsgGameMatchSignOutInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameMatchSignOut class]) {
    defaultCMsgGameMatchSignOutInstance = [[CMsgGameMatchSignOut alloc] init];
  }
}
+ (CMsgGameMatchSignOut*) defaultInstance {
  return defaultCMsgGameMatchSignOutInstance;
}
- (CMsgGameMatchSignOut*) defaultInstance {
  return defaultCMsgGameMatchSignOutInstance;
}
- (PBArray *)numPlayers {
  return numPlayersArray;
}
- (uint32_t)numPlayersAtIndex:(NSUInteger)index {
  return [numPlayersArray uint32AtIndex:index];
}
- (PBArray *)teams {
  return teamsArray;
}
- (CMsgGameMatchSignOut_CTeam*)teamsAtIndex:(NSUInteger)index {
  return [teamsArray objectAtIndex:index];
}
- (PBArray *)towerStatus {
  return towerStatusArray;
}
- (uint32_t)towerStatusAtIndex:(NSUInteger)index {
  return [towerStatusArray uint32AtIndex:index];
}
- (PBArray *)barracksStatus {
  return barracksStatusArray;
}
- (uint32_t)barracksStatusAtIndex:(NSUInteger)index {
  return [barracksStatusArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  if (self.hasDuration) {
    [output writeUInt32:2 value:self.duration];
  }
  if (self.hasGoodGuysWin) {
    [output writeBool:3 value:self.goodGuysWin];
  }
  if (self.hasDate) {
    [output writeFixed32:4 value:self.date];
  }
  const NSUInteger numPlayersArrayCount = self.numPlayersArray.count;
  if (numPlayersArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.numPlayersArray.data;
    for (NSUInteger i = 0; i < numPlayersArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  for (CMsgGameMatchSignOut_CTeam *element in self.teamsArray) {
    [output writeMessage:6 value:element];
  }
  if (self.hasComputerName) {
    [output writeString:7 value:self.computerName];
  }
  const NSUInteger towerStatusArrayCount = self.towerStatusArray.count;
  if (towerStatusArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.towerStatusArray.data;
    for (NSUInteger i = 0; i < towerStatusArrayCount; ++i) {
      [output writeUInt32:8 value:values[i]];
    }
  }
  const NSUInteger barracksStatusArrayCount = self.barracksStatusArray.count;
  if (barracksStatusArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.barracksStatusArray.data;
    for (NSUInteger i = 0; i < barracksStatusArrayCount; ++i) {
      [output writeUInt32:9 value:values[i]];
    }
  }
  if (self.hasCluster) {
    [output writeUInt32:10 value:self.cluster];
  }
  if (self.hasServerAddr) {
    [output writeString:11 value:self.serverAddr];
  }
  if (self.hasFirstBloodTime) {
    [output writeUInt32:12 value:self.firstBloodTime];
  }
  if (self.hasGameBalance) {
    [output writeFloat:13 value:self.gameBalance];
  }
  if (self.hasEventScore) {
    [output writeUInt32:14 value:self.eventScore];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  if (self.hasDuration) {
    size_ += computeUInt32Size(2, self.duration);
  }
  if (self.hasGoodGuysWin) {
    size_ += computeBoolSize(3, self.goodGuysWin);
  }
  if (self.hasDate) {
    size_ += computeFixed32Size(4, self.date);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.numPlayersArray.count;
    const uint32_t *values = (const uint32_t *)self.numPlayersArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  for (CMsgGameMatchSignOut_CTeam *element in self.teamsArray) {
    size_ += computeMessageSize(6, element);
  }
  if (self.hasComputerName) {
    size_ += computeStringSize(7, self.computerName);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.towerStatusArray.count;
    const uint32_t *values = (const uint32_t *)self.towerStatusArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.barracksStatusArray.count;
    const uint32_t *values = (const uint32_t *)self.barracksStatusArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasCluster) {
    size_ += computeUInt32Size(10, self.cluster);
  }
  if (self.hasServerAddr) {
    size_ += computeStringSize(11, self.serverAddr);
  }
  if (self.hasFirstBloodTime) {
    size_ += computeUInt32Size(12, self.firstBloodTime);
  }
  if (self.hasGameBalance) {
    size_ += computeFloatSize(13, self.gameBalance);
  }
  if (self.hasEventScore) {
    size_ += computeUInt32Size(14, self.eventScore);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameMatchSignOut*) parseFromData:(NSData*) data {
  return (CMsgGameMatchSignOut*)[[[CMsgGameMatchSignOut builder] mergeFromData:data] build];
}
+ (CMsgGameMatchSignOut*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignOut*)[[[CMsgGameMatchSignOut builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignOut*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameMatchSignOut*)[[[CMsgGameMatchSignOut builder] mergeFromInputStream:input] build];
}
+ (CMsgGameMatchSignOut*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignOut*)[[[CMsgGameMatchSignOut builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignOut*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameMatchSignOut*)[[[CMsgGameMatchSignOut builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameMatchSignOut*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignOut*)[[[CMsgGameMatchSignOut builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignOut_Builder*) builder {
  return [[[CMsgGameMatchSignOut_Builder alloc] init] autorelease];
}
+ (CMsgGameMatchSignOut_Builder*) builderWithPrototype:(CMsgGameMatchSignOut*) prototype {
  return [[CMsgGameMatchSignOut builder] mergeFrom:prototype];
}
- (CMsgGameMatchSignOut_Builder*) builder {
  return [CMsgGameMatchSignOut builder];
}
- (CMsgGameMatchSignOut_Builder*) toBuilder {
  return [CMsgGameMatchSignOut builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithInt:self.duration]];
  }
  if (self.hasGoodGuysWin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goodGuysWin", [NSNumber numberWithBool:self.goodGuysWin]];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  for (NSNumber* value in self.numPlayersArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numPlayers", value];
  }
  for (CMsgGameMatchSignOut_CTeam* element in self.teamsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"teams"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasComputerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"computerName", self.computerName];
  }
  for (NSNumber* value in self.towerStatusArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"towerStatus", value];
  }
  for (NSNumber* value in self.barracksStatusArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"barracksStatus", value];
  }
  if (self.hasCluster) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cluster", [NSNumber numberWithInt:self.cluster]];
  }
  if (self.hasServerAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverAddr", self.serverAddr];
  }
  if (self.hasFirstBloodTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"firstBloodTime", [NSNumber numberWithInt:self.firstBloodTime]];
  }
  if (self.hasGameBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameBalance", [NSNumber numberWithFloat:self.gameBalance]];
  }
  if (self.hasEventScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventScore", [NSNumber numberWithInt:self.eventScore]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameMatchSignOut class]]) {
    return NO;
  }
  CMsgGameMatchSignOut *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      self.hasGoodGuysWin == otherMessage.hasGoodGuysWin &&
      (!self.hasGoodGuysWin || self.goodGuysWin == otherMessage.goodGuysWin) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      [self.numPlayersArray isEqualToArray:otherMessage.numPlayersArray] &&
      [self.teamsArray isEqualToArray:otherMessage.teamsArray] &&
      self.hasComputerName == otherMessage.hasComputerName &&
      (!self.hasComputerName || [self.computerName isEqual:otherMessage.computerName]) &&
      [self.towerStatusArray isEqualToArray:otherMessage.towerStatusArray] &&
      [self.barracksStatusArray isEqualToArray:otherMessage.barracksStatusArray] &&
      self.hasCluster == otherMessage.hasCluster &&
      (!self.hasCluster || self.cluster == otherMessage.cluster) &&
      self.hasServerAddr == otherMessage.hasServerAddr &&
      (!self.hasServerAddr || [self.serverAddr isEqual:otherMessage.serverAddr]) &&
      self.hasFirstBloodTime == otherMessage.hasFirstBloodTime &&
      (!self.hasFirstBloodTime || self.firstBloodTime == otherMessage.firstBloodTime) &&
      self.hasGameBalance == otherMessage.hasGameBalance &&
      (!self.hasGameBalance || self.gameBalance == otherMessage.gameBalance) &&
      self.hasEventScore == otherMessage.hasEventScore &&
      (!self.hasEventScore || self.eventScore == otherMessage.eventScore) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.duration] hash];
  }
  if (self.hasGoodGuysWin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.goodGuysWin] hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  for (NSNumber* value in self.numPlayersArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (CMsgGameMatchSignOut_CTeam* element in self.teamsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasComputerName) {
    hashCode = hashCode * 31 + [self.computerName hash];
  }
  for (NSNumber* value in self.towerStatusArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.barracksStatusArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasCluster) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.cluster] hash];
  }
  if (self.hasServerAddr) {
    hashCode = hashCode * 31 + [self.serverAddr hash];
  }
  if (self.hasFirstBloodTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.firstBloodTime] hash];
  }
  if (self.hasGameBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.gameBalance] hash];
  }
  if (self.hasEventScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eventScore] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGameMatchSignOut_CTeam ()
@property (retain) PBAppendableArray * playersArray;
@end

@implementation CMsgGameMatchSignOut_CTeam

@synthesize playersArray;
@dynamic players;
- (void) dealloc {
  self.playersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgGameMatchSignOut_CTeam* defaultCMsgGameMatchSignOut_CTeamInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameMatchSignOut_CTeam class]) {
    defaultCMsgGameMatchSignOut_CTeamInstance = [[CMsgGameMatchSignOut_CTeam alloc] init];
  }
}
+ (CMsgGameMatchSignOut_CTeam*) defaultInstance {
  return defaultCMsgGameMatchSignOut_CTeamInstance;
}
- (CMsgGameMatchSignOut_CTeam*) defaultInstance {
  return defaultCMsgGameMatchSignOut_CTeamInstance;
}
- (PBArray *)players {
  return playersArray;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer*)playersAtIndex:(NSUInteger)index {
  return [playersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgGameMatchSignOut_CTeam_CPlayer *element in self.playersArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgGameMatchSignOut_CTeam_CPlayer *element in self.playersArray) {
    size_ += computeMessageSize(1, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameMatchSignOut_CTeam*) parseFromData:(NSData*) data {
  return (CMsgGameMatchSignOut_CTeam*)[[[CMsgGameMatchSignOut_CTeam builder] mergeFromData:data] build];
}
+ (CMsgGameMatchSignOut_CTeam*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignOut_CTeam*)[[[CMsgGameMatchSignOut_CTeam builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignOut_CTeam*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameMatchSignOut_CTeam*)[[[CMsgGameMatchSignOut_CTeam builder] mergeFromInputStream:input] build];
}
+ (CMsgGameMatchSignOut_CTeam*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignOut_CTeam*)[[[CMsgGameMatchSignOut_CTeam builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignOut_CTeam*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameMatchSignOut_CTeam*)[[[CMsgGameMatchSignOut_CTeam builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameMatchSignOut_CTeam*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignOut_CTeam*)[[[CMsgGameMatchSignOut_CTeam builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignOut_CTeam_Builder*) builder {
  return [[[CMsgGameMatchSignOut_CTeam_Builder alloc] init] autorelease];
}
+ (CMsgGameMatchSignOut_CTeam_Builder*) builderWithPrototype:(CMsgGameMatchSignOut_CTeam*) prototype {
  return [[CMsgGameMatchSignOut_CTeam builder] mergeFrom:prototype];
}
- (CMsgGameMatchSignOut_CTeam_Builder*) builder {
  return [CMsgGameMatchSignOut_CTeam builder];
}
- (CMsgGameMatchSignOut_CTeam_Builder*) toBuilder {
  return [CMsgGameMatchSignOut_CTeam builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgGameMatchSignOut_CTeam_CPlayer* element in self.playersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"players"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameMatchSignOut_CTeam class]]) {
    return NO;
  }
  CMsgGameMatchSignOut_CTeam *otherMessage = other;
  return
      [self.playersArray isEqualToArray:otherMessage.playersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgGameMatchSignOut_CTeam_CPlayer* element in self.playersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGameMatchSignOut_CTeam_CPlayer ()
@property uint64_t accountId;
@property uint32_t fakeClientId;
@property uint32_t heroId;
@property (retain) PBAppendableArray * itemsArray;
@property uint32_t gold;
@property uint32_t kills;
@property uint32_t deaths;
@property uint32_t assists;
@property uint32_t leaverStatus;
@property uint32_t lastHits;
@property uint32_t denies;
@property uint32_t goldPerMin;
@property uint32_t xpPerMinute;
@property uint32_t goldSpent;
@property uint32_t level;
@property uint32_t heroDamage;
@property uint32_t towerDamage;
@property uint32_t heroHealing;
@property uint32_t timeLastSeen;
@property uint32_t supportAbilityValue;
@property uint64_t partyId;
@property Float32 scaledKills;
@property Float32 scaledDeaths;
@property Float32 scaledAssists;
@property uint32_t claimedFarmGold;
@property uint32_t supportGold;
@property uint32_t claimedDenies;
@property uint32_t claimedMisses;
@property uint32_t misses;
@end

@implementation CMsgGameMatchSignOut_CTeam_CPlayer

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasFakeClientId {
  return !!hasFakeClientId_;
}
- (void) setHasFakeClientId:(BOOL) value_ {
  hasFakeClientId_ = !!value_;
}
@synthesize fakeClientId;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
@synthesize itemsArray;
@dynamic items;
- (BOOL) hasGold {
  return !!hasGold_;
}
- (void) setHasGold:(BOOL) value_ {
  hasGold_ = !!value_;
}
@synthesize gold;
- (BOOL) hasKills {
  return !!hasKills_;
}
- (void) setHasKills:(BOOL) value_ {
  hasKills_ = !!value_;
}
@synthesize kills;
- (BOOL) hasDeaths {
  return !!hasDeaths_;
}
- (void) setHasDeaths:(BOOL) value_ {
  hasDeaths_ = !!value_;
}
@synthesize deaths;
- (BOOL) hasAssists {
  return !!hasAssists_;
}
- (void) setHasAssists:(BOOL) value_ {
  hasAssists_ = !!value_;
}
@synthesize assists;
- (BOOL) hasLeaverStatus {
  return !!hasLeaverStatus_;
}
- (void) setHasLeaverStatus:(BOOL) value_ {
  hasLeaverStatus_ = !!value_;
}
@synthesize leaverStatus;
- (BOOL) hasLastHits {
  return !!hasLastHits_;
}
- (void) setHasLastHits:(BOOL) value_ {
  hasLastHits_ = !!value_;
}
@synthesize lastHits;
- (BOOL) hasDenies {
  return !!hasDenies_;
}
- (void) setHasDenies:(BOOL) value_ {
  hasDenies_ = !!value_;
}
@synthesize denies;
- (BOOL) hasGoldPerMin {
  return !!hasGoldPerMin_;
}
- (void) setHasGoldPerMin:(BOOL) value_ {
  hasGoldPerMin_ = !!value_;
}
@synthesize goldPerMin;
- (BOOL) hasXpPerMinute {
  return !!hasXpPerMinute_;
}
- (void) setHasXpPerMinute:(BOOL) value_ {
  hasXpPerMinute_ = !!value_;
}
@synthesize xpPerMinute;
- (BOOL) hasGoldSpent {
  return !!hasGoldSpent_;
}
- (void) setHasGoldSpent:(BOOL) value_ {
  hasGoldSpent_ = !!value_;
}
@synthesize goldSpent;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasHeroDamage {
  return !!hasHeroDamage_;
}
- (void) setHasHeroDamage:(BOOL) value_ {
  hasHeroDamage_ = !!value_;
}
@synthesize heroDamage;
- (BOOL) hasTowerDamage {
  return !!hasTowerDamage_;
}
- (void) setHasTowerDamage:(BOOL) value_ {
  hasTowerDamage_ = !!value_;
}
@synthesize towerDamage;
- (BOOL) hasHeroHealing {
  return !!hasHeroHealing_;
}
- (void) setHasHeroHealing:(BOOL) value_ {
  hasHeroHealing_ = !!value_;
}
@synthesize heroHealing;
- (BOOL) hasTimeLastSeen {
  return !!hasTimeLastSeen_;
}
- (void) setHasTimeLastSeen:(BOOL) value_ {
  hasTimeLastSeen_ = !!value_;
}
@synthesize timeLastSeen;
- (BOOL) hasSupportAbilityValue {
  return !!hasSupportAbilityValue_;
}
- (void) setHasSupportAbilityValue:(BOOL) value_ {
  hasSupportAbilityValue_ = !!value_;
}
@synthesize supportAbilityValue;
- (BOOL) hasPartyId {
  return !!hasPartyId_;
}
- (void) setHasPartyId:(BOOL) value_ {
  hasPartyId_ = !!value_;
}
@synthesize partyId;
- (BOOL) hasScaledKills {
  return !!hasScaledKills_;
}
- (void) setHasScaledKills:(BOOL) value_ {
  hasScaledKills_ = !!value_;
}
@synthesize scaledKills;
- (BOOL) hasScaledDeaths {
  return !!hasScaledDeaths_;
}
- (void) setHasScaledDeaths:(BOOL) value_ {
  hasScaledDeaths_ = !!value_;
}
@synthesize scaledDeaths;
- (BOOL) hasScaledAssists {
  return !!hasScaledAssists_;
}
- (void) setHasScaledAssists:(BOOL) value_ {
  hasScaledAssists_ = !!value_;
}
@synthesize scaledAssists;
- (BOOL) hasClaimedFarmGold {
  return !!hasClaimedFarmGold_;
}
- (void) setHasClaimedFarmGold:(BOOL) value_ {
  hasClaimedFarmGold_ = !!value_;
}
@synthesize claimedFarmGold;
- (BOOL) hasSupportGold {
  return !!hasSupportGold_;
}
- (void) setHasSupportGold:(BOOL) value_ {
  hasSupportGold_ = !!value_;
}
@synthesize supportGold;
- (BOOL) hasClaimedDenies {
  return !!hasClaimedDenies_;
}
- (void) setHasClaimedDenies:(BOOL) value_ {
  hasClaimedDenies_ = !!value_;
}
@synthesize claimedDenies;
- (BOOL) hasClaimedMisses {
  return !!hasClaimedMisses_;
}
- (void) setHasClaimedMisses:(BOOL) value_ {
  hasClaimedMisses_ = !!value_;
}
@synthesize claimedMisses;
- (BOOL) hasMisses {
  return !!hasMisses_;
}
- (void) setHasMisses:(BOOL) value_ {
  hasMisses_ = !!value_;
}
@synthesize misses;
- (void) dealloc {
  self.itemsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0L;
    self.fakeClientId = 0;
    self.heroId = 0;
    self.gold = 0;
    self.kills = 0;
    self.deaths = 0;
    self.assists = 0;
    self.leaverStatus = 0;
    self.lastHits = 0;
    self.denies = 0;
    self.goldPerMin = 0;
    self.xpPerMinute = 0;
    self.goldSpent = 0;
    self.level = 0;
    self.heroDamage = 0;
    self.towerDamage = 0;
    self.heroHealing = 0;
    self.timeLastSeen = 0;
    self.supportAbilityValue = 0;
    self.partyId = 0L;
    self.scaledKills = 0;
    self.scaledDeaths = 0;
    self.scaledAssists = 0;
    self.claimedFarmGold = 0;
    self.supportGold = 0;
    self.claimedDenies = 0;
    self.claimedMisses = 0;
    self.misses = 0;
  }
  return self;
}
static CMsgGameMatchSignOut_CTeam_CPlayer* defaultCMsgGameMatchSignOut_CTeam_CPlayerInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameMatchSignOut_CTeam_CPlayer class]) {
    defaultCMsgGameMatchSignOut_CTeam_CPlayerInstance = [[CMsgGameMatchSignOut_CTeam_CPlayer alloc] init];
  }
}
+ (CMsgGameMatchSignOut_CTeam_CPlayer*) defaultInstance {
  return defaultCMsgGameMatchSignOut_CTeam_CPlayerInstance;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer*) defaultInstance {
  return defaultCMsgGameMatchSignOut_CTeam_CPlayerInstance;
}
- (PBArray *)items {
  return itemsArray;
}
- (uint32_t)itemsAtIndex:(NSUInteger)index {
  return [itemsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeFixed64:1 value:self.accountId];
  }
  if (self.hasFakeClientId) {
    [output writeUInt32:2 value:self.fakeClientId];
  }
  if (self.hasHeroId) {
    [output writeUInt32:3 value:self.heroId];
  }
  const NSUInteger itemsArrayCount = self.itemsArray.count;
  if (itemsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.itemsArray.data;
    for (NSUInteger i = 0; i < itemsArrayCount; ++i) {
      [output writeUInt32:4 value:values[i]];
    }
  }
  if (self.hasGold) {
    [output writeUInt32:5 value:self.gold];
  }
  if (self.hasKills) {
    [output writeUInt32:6 value:self.kills];
  }
  if (self.hasDeaths) {
    [output writeUInt32:7 value:self.deaths];
  }
  if (self.hasAssists) {
    [output writeUInt32:8 value:self.assists];
  }
  if (self.hasLeaverStatus) {
    [output writeUInt32:9 value:self.leaverStatus];
  }
  if (self.hasLastHits) {
    [output writeUInt32:10 value:self.lastHits];
  }
  if (self.hasDenies) {
    [output writeUInt32:11 value:self.denies];
  }
  if (self.hasGoldPerMin) {
    [output writeUInt32:12 value:self.goldPerMin];
  }
  if (self.hasXpPerMinute) {
    [output writeUInt32:13 value:self.xpPerMinute];
  }
  if (self.hasGoldSpent) {
    [output writeUInt32:14 value:self.goldSpent];
  }
  if (self.hasLevel) {
    [output writeUInt32:15 value:self.level];
  }
  if (self.hasHeroDamage) {
    [output writeUInt32:16 value:self.heroDamage];
  }
  if (self.hasTowerDamage) {
    [output writeUInt32:17 value:self.towerDamage];
  }
  if (self.hasHeroHealing) {
    [output writeUInt32:18 value:self.heroHealing];
  }
  if (self.hasTimeLastSeen) {
    [output writeUInt32:19 value:self.timeLastSeen];
  }
  if (self.hasSupportAbilityValue) {
    [output writeUInt32:20 value:self.supportAbilityValue];
  }
  if (self.hasPartyId) {
    [output writeUInt64:21 value:self.partyId];
  }
  if (self.hasScaledKills) {
    [output writeFloat:24 value:self.scaledKills];
  }
  if (self.hasScaledDeaths) {
    [output writeFloat:25 value:self.scaledDeaths];
  }
  if (self.hasScaledAssists) {
    [output writeFloat:26 value:self.scaledAssists];
  }
  if (self.hasClaimedFarmGold) {
    [output writeUInt32:27 value:self.claimedFarmGold];
  }
  if (self.hasSupportGold) {
    [output writeUInt32:28 value:self.supportGold];
  }
  if (self.hasClaimedDenies) {
    [output writeUInt32:29 value:self.claimedDenies];
  }
  if (self.hasClaimedMisses) {
    [output writeUInt32:30 value:self.claimedMisses];
  }
  if (self.hasMisses) {
    [output writeUInt32:31 value:self.misses];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeFixed64Size(1, self.accountId);
  }
  if (self.hasFakeClientId) {
    size_ += computeUInt32Size(2, self.fakeClientId);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(3, self.heroId);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.itemsArray.count;
    const uint32_t *values = (const uint32_t *)self.itemsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasGold) {
    size_ += computeUInt32Size(5, self.gold);
  }
  if (self.hasKills) {
    size_ += computeUInt32Size(6, self.kills);
  }
  if (self.hasDeaths) {
    size_ += computeUInt32Size(7, self.deaths);
  }
  if (self.hasAssists) {
    size_ += computeUInt32Size(8, self.assists);
  }
  if (self.hasLeaverStatus) {
    size_ += computeUInt32Size(9, self.leaverStatus);
  }
  if (self.hasLastHits) {
    size_ += computeUInt32Size(10, self.lastHits);
  }
  if (self.hasDenies) {
    size_ += computeUInt32Size(11, self.denies);
  }
  if (self.hasGoldPerMin) {
    size_ += computeUInt32Size(12, self.goldPerMin);
  }
  if (self.hasXpPerMinute) {
    size_ += computeUInt32Size(13, self.xpPerMinute);
  }
  if (self.hasGoldSpent) {
    size_ += computeUInt32Size(14, self.goldSpent);
  }
  if (self.hasLevel) {
    size_ += computeUInt32Size(15, self.level);
  }
  if (self.hasHeroDamage) {
    size_ += computeUInt32Size(16, self.heroDamage);
  }
  if (self.hasTowerDamage) {
    size_ += computeUInt32Size(17, self.towerDamage);
  }
  if (self.hasHeroHealing) {
    size_ += computeUInt32Size(18, self.heroHealing);
  }
  if (self.hasTimeLastSeen) {
    size_ += computeUInt32Size(19, self.timeLastSeen);
  }
  if (self.hasSupportAbilityValue) {
    size_ += computeUInt32Size(20, self.supportAbilityValue);
  }
  if (self.hasPartyId) {
    size_ += computeUInt64Size(21, self.partyId);
  }
  if (self.hasScaledKills) {
    size_ += computeFloatSize(24, self.scaledKills);
  }
  if (self.hasScaledDeaths) {
    size_ += computeFloatSize(25, self.scaledDeaths);
  }
  if (self.hasScaledAssists) {
    size_ += computeFloatSize(26, self.scaledAssists);
  }
  if (self.hasClaimedFarmGold) {
    size_ += computeUInt32Size(27, self.claimedFarmGold);
  }
  if (self.hasSupportGold) {
    size_ += computeUInt32Size(28, self.supportGold);
  }
  if (self.hasClaimedDenies) {
    size_ += computeUInt32Size(29, self.claimedDenies);
  }
  if (self.hasClaimedMisses) {
    size_ += computeUInt32Size(30, self.claimedMisses);
  }
  if (self.hasMisses) {
    size_ += computeUInt32Size(31, self.misses);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameMatchSignOut_CTeam_CPlayer*) parseFromData:(NSData*) data {
  return (CMsgGameMatchSignOut_CTeam_CPlayer*)[[[CMsgGameMatchSignOut_CTeam_CPlayer builder] mergeFromData:data] build];
}
+ (CMsgGameMatchSignOut_CTeam_CPlayer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignOut_CTeam_CPlayer*)[[[CMsgGameMatchSignOut_CTeam_CPlayer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignOut_CTeam_CPlayer*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameMatchSignOut_CTeam_CPlayer*)[[[CMsgGameMatchSignOut_CTeam_CPlayer builder] mergeFromInputStream:input] build];
}
+ (CMsgGameMatchSignOut_CTeam_CPlayer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignOut_CTeam_CPlayer*)[[[CMsgGameMatchSignOut_CTeam_CPlayer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignOut_CTeam_CPlayer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameMatchSignOut_CTeam_CPlayer*)[[[CMsgGameMatchSignOut_CTeam_CPlayer builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameMatchSignOut_CTeam_CPlayer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignOut_CTeam_CPlayer*)[[[CMsgGameMatchSignOut_CTeam_CPlayer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) builder {
  return [[[CMsgGameMatchSignOut_CTeam_CPlayer_Builder alloc] init] autorelease];
}
+ (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) builderWithPrototype:(CMsgGameMatchSignOut_CTeam_CPlayer*) prototype {
  return [[CMsgGameMatchSignOut_CTeam_CPlayer builder] mergeFrom:prototype];
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) builder {
  return [CMsgGameMatchSignOut_CTeam_CPlayer builder];
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) toBuilder {
  return [CMsgGameMatchSignOut_CTeam_CPlayer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithLongLong:self.accountId]];
  }
  if (self.hasFakeClientId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fakeClientId", [NSNumber numberWithInt:self.fakeClientId]];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  for (NSNumber* value in self.itemsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"items", value];
  }
  if (self.hasGold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gold", [NSNumber numberWithInt:self.gold]];
  }
  if (self.hasKills) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kills", [NSNumber numberWithInt:self.kills]];
  }
  if (self.hasDeaths) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deaths", [NSNumber numberWithInt:self.deaths]];
  }
  if (self.hasAssists) {
    [output appendFormat:@"%@%@: %@\n", indent, @"assists", [NSNumber numberWithInt:self.assists]];
  }
  if (self.hasLeaverStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaverStatus", [NSNumber numberWithInt:self.leaverStatus]];
  }
  if (self.hasLastHits) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastHits", [NSNumber numberWithInt:self.lastHits]];
  }
  if (self.hasDenies) {
    [output appendFormat:@"%@%@: %@\n", indent, @"denies", [NSNumber numberWithInt:self.denies]];
  }
  if (self.hasGoldPerMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goldPerMin", [NSNumber numberWithInt:self.goldPerMin]];
  }
  if (self.hasXpPerMinute) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xpPerMinute", [NSNumber numberWithInt:self.xpPerMinute]];
  }
  if (self.hasGoldSpent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goldSpent", [NSNumber numberWithInt:self.goldSpent]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInt:self.level]];
  }
  if (self.hasHeroDamage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroDamage", [NSNumber numberWithInt:self.heroDamage]];
  }
  if (self.hasTowerDamage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"towerDamage", [NSNumber numberWithInt:self.towerDamage]];
  }
  if (self.hasHeroHealing) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroHealing", [NSNumber numberWithInt:self.heroHealing]];
  }
  if (self.hasTimeLastSeen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeLastSeen", [NSNumber numberWithInt:self.timeLastSeen]];
  }
  if (self.hasSupportAbilityValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportAbilityValue", [NSNumber numberWithInt:self.supportAbilityValue]];
  }
  if (self.hasPartyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"partyId", [NSNumber numberWithLongLong:self.partyId]];
  }
  if (self.hasScaledKills) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scaledKills", [NSNumber numberWithFloat:self.scaledKills]];
  }
  if (self.hasScaledDeaths) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scaledDeaths", [NSNumber numberWithFloat:self.scaledDeaths]];
  }
  if (self.hasScaledAssists) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scaledAssists", [NSNumber numberWithFloat:self.scaledAssists]];
  }
  if (self.hasClaimedFarmGold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"claimedFarmGold", [NSNumber numberWithInt:self.claimedFarmGold]];
  }
  if (self.hasSupportGold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportGold", [NSNumber numberWithInt:self.supportGold]];
  }
  if (self.hasClaimedDenies) {
    [output appendFormat:@"%@%@: %@\n", indent, @"claimedDenies", [NSNumber numberWithInt:self.claimedDenies]];
  }
  if (self.hasClaimedMisses) {
    [output appendFormat:@"%@%@: %@\n", indent, @"claimedMisses", [NSNumber numberWithInt:self.claimedMisses]];
  }
  if (self.hasMisses) {
    [output appendFormat:@"%@%@: %@\n", indent, @"misses", [NSNumber numberWithInt:self.misses]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameMatchSignOut_CTeam_CPlayer class]]) {
    return NO;
  }
  CMsgGameMatchSignOut_CTeam_CPlayer *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasFakeClientId == otherMessage.hasFakeClientId &&
      (!self.hasFakeClientId || self.fakeClientId == otherMessage.fakeClientId) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      [self.itemsArray isEqualToArray:otherMessage.itemsArray] &&
      self.hasGold == otherMessage.hasGold &&
      (!self.hasGold || self.gold == otherMessage.gold) &&
      self.hasKills == otherMessage.hasKills &&
      (!self.hasKills || self.kills == otherMessage.kills) &&
      self.hasDeaths == otherMessage.hasDeaths &&
      (!self.hasDeaths || self.deaths == otherMessage.deaths) &&
      self.hasAssists == otherMessage.hasAssists &&
      (!self.hasAssists || self.assists == otherMessage.assists) &&
      self.hasLeaverStatus == otherMessage.hasLeaverStatus &&
      (!self.hasLeaverStatus || self.leaverStatus == otherMessage.leaverStatus) &&
      self.hasLastHits == otherMessage.hasLastHits &&
      (!self.hasLastHits || self.lastHits == otherMessage.lastHits) &&
      self.hasDenies == otherMessage.hasDenies &&
      (!self.hasDenies || self.denies == otherMessage.denies) &&
      self.hasGoldPerMin == otherMessage.hasGoldPerMin &&
      (!self.hasGoldPerMin || self.goldPerMin == otherMessage.goldPerMin) &&
      self.hasXpPerMinute == otherMessage.hasXpPerMinute &&
      (!self.hasXpPerMinute || self.xpPerMinute == otherMessage.xpPerMinute) &&
      self.hasGoldSpent == otherMessage.hasGoldSpent &&
      (!self.hasGoldSpent || self.goldSpent == otherMessage.goldSpent) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasHeroDamage == otherMessage.hasHeroDamage &&
      (!self.hasHeroDamage || self.heroDamage == otherMessage.heroDamage) &&
      self.hasTowerDamage == otherMessage.hasTowerDamage &&
      (!self.hasTowerDamage || self.towerDamage == otherMessage.towerDamage) &&
      self.hasHeroHealing == otherMessage.hasHeroHealing &&
      (!self.hasHeroHealing || self.heroHealing == otherMessage.heroHealing) &&
      self.hasTimeLastSeen == otherMessage.hasTimeLastSeen &&
      (!self.hasTimeLastSeen || self.timeLastSeen == otherMessage.timeLastSeen) &&
      self.hasSupportAbilityValue == otherMessage.hasSupportAbilityValue &&
      (!self.hasSupportAbilityValue || self.supportAbilityValue == otherMessage.supportAbilityValue) &&
      self.hasPartyId == otherMessage.hasPartyId &&
      (!self.hasPartyId || self.partyId == otherMessage.partyId) &&
      self.hasScaledKills == otherMessage.hasScaledKills &&
      (!self.hasScaledKills || self.scaledKills == otherMessage.scaledKills) &&
      self.hasScaledDeaths == otherMessage.hasScaledDeaths &&
      (!self.hasScaledDeaths || self.scaledDeaths == otherMessage.scaledDeaths) &&
      self.hasScaledAssists == otherMessage.hasScaledAssists &&
      (!self.hasScaledAssists || self.scaledAssists == otherMessage.scaledAssists) &&
      self.hasClaimedFarmGold == otherMessage.hasClaimedFarmGold &&
      (!self.hasClaimedFarmGold || self.claimedFarmGold == otherMessage.claimedFarmGold) &&
      self.hasSupportGold == otherMessage.hasSupportGold &&
      (!self.hasSupportGold || self.supportGold == otherMessage.supportGold) &&
      self.hasClaimedDenies == otherMessage.hasClaimedDenies &&
      (!self.hasClaimedDenies || self.claimedDenies == otherMessage.claimedDenies) &&
      self.hasClaimedMisses == otherMessage.hasClaimedMisses &&
      (!self.hasClaimedMisses || self.claimedMisses == otherMessage.claimedMisses) &&
      self.hasMisses == otherMessage.hasMisses &&
      (!self.hasMisses || self.misses == otherMessage.misses) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.accountId] hash];
  }
  if (self.hasFakeClientId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.fakeClientId] hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  for (NSNumber* value in self.itemsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasGold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gold] hash];
  }
  if (self.hasKills) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.kills] hash];
  }
  if (self.hasDeaths) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.deaths] hash];
  }
  if (self.hasAssists) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.assists] hash];
  }
  if (self.hasLeaverStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leaverStatus] hash];
  }
  if (self.hasLastHits) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lastHits] hash];
  }
  if (self.hasDenies) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.denies] hash];
  }
  if (self.hasGoldPerMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.goldPerMin] hash];
  }
  if (self.hasXpPerMinute) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.xpPerMinute] hash];
  }
  if (self.hasGoldSpent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.goldSpent] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.level] hash];
  }
  if (self.hasHeroDamage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroDamage] hash];
  }
  if (self.hasTowerDamage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.towerDamage] hash];
  }
  if (self.hasHeroHealing) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroHealing] hash];
  }
  if (self.hasTimeLastSeen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeLastSeen] hash];
  }
  if (self.hasSupportAbilityValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.supportAbilityValue] hash];
  }
  if (self.hasPartyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.partyId] hash];
  }
  if (self.hasScaledKills) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.scaledKills] hash];
  }
  if (self.hasScaledDeaths) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.scaledDeaths] hash];
  }
  if (self.hasScaledAssists) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.scaledAssists] hash];
  }
  if (self.hasClaimedFarmGold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.claimedFarmGold] hash];
  }
  if (self.hasSupportGold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.supportGold] hash];
  }
  if (self.hasClaimedDenies) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.claimedDenies] hash];
  }
  if (self.hasClaimedMisses) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.claimedMisses] hash];
  }
  if (self.hasMisses) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.misses] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGameMatchSignOut_CTeam_CPlayer_Builder()
@property (retain) CMsgGameMatchSignOut_CTeam_CPlayer* _builderResult;
@end

@implementation CMsgGameMatchSignOut_CTeam_CPlayer_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameMatchSignOut_CTeam_CPlayer alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clear {
  _builderResult = [[[CMsgGameMatchSignOut_CTeam_CPlayer alloc] init] autorelease];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clone {
  return [CMsgGameMatchSignOut_CTeam_CPlayer builderWithPrototype:_builderResult];
}
- (CMsgGameMatchSignOut_CTeam_CPlayer*) defaultInstance {
  return [CMsgGameMatchSignOut_CTeam_CPlayer defaultInstance];
}
- (CMsgGameMatchSignOut_CTeam_CPlayer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameMatchSignOut_CTeam_CPlayer*) buildPartial {
  CMsgGameMatchSignOut_CTeam_CPlayer* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) mergeFrom:(CMsgGameMatchSignOut_CTeam_CPlayer*) other {
  if (other == [CMsgGameMatchSignOut_CTeam_CPlayer defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasFakeClientId) {
    [self setFakeClientId:other.fakeClientId];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.itemsArray.count > 0) {
    if (_builderResult.itemsArray == nil) {
      _builderResult.itemsArray = [[other.itemsArray copyWithZone:[other.itemsArray zone]] autorelease];
    } else {
      [_builderResult.itemsArray appendArray:other.itemsArray];
    }
  }
  if (other.hasGold) {
    [self setGold:other.gold];
  }
  if (other.hasKills) {
    [self setKills:other.kills];
  }
  if (other.hasDeaths) {
    [self setDeaths:other.deaths];
  }
  if (other.hasAssists) {
    [self setAssists:other.assists];
  }
  if (other.hasLeaverStatus) {
    [self setLeaverStatus:other.leaverStatus];
  }
  if (other.hasLastHits) {
    [self setLastHits:other.lastHits];
  }
  if (other.hasDenies) {
    [self setDenies:other.denies];
  }
  if (other.hasGoldPerMin) {
    [self setGoldPerMin:other.goldPerMin];
  }
  if (other.hasXpPerMinute) {
    [self setXpPerMinute:other.xpPerMinute];
  }
  if (other.hasGoldSpent) {
    [self setGoldSpent:other.goldSpent];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasHeroDamage) {
    [self setHeroDamage:other.heroDamage];
  }
  if (other.hasTowerDamage) {
    [self setTowerDamage:other.towerDamage];
  }
  if (other.hasHeroHealing) {
    [self setHeroHealing:other.heroHealing];
  }
  if (other.hasTimeLastSeen) {
    [self setTimeLastSeen:other.timeLastSeen];
  }
  if (other.hasSupportAbilityValue) {
    [self setSupportAbilityValue:other.supportAbilityValue];
  }
  if (other.hasPartyId) {
    [self setPartyId:other.partyId];
  }
  if (other.hasScaledKills) {
    [self setScaledKills:other.scaledKills];
  }
  if (other.hasScaledDeaths) {
    [self setScaledDeaths:other.scaledDeaths];
  }
  if (other.hasScaledAssists) {
    [self setScaledAssists:other.scaledAssists];
  }
  if (other.hasClaimedFarmGold) {
    [self setClaimedFarmGold:other.claimedFarmGold];
  }
  if (other.hasSupportGold) {
    [self setSupportGold:other.supportGold];
  }
  if (other.hasClaimedDenies) {
    [self setClaimedDenies:other.claimedDenies];
  }
  if (other.hasClaimedMisses) {
    [self setClaimedMisses:other.claimedMisses];
  }
  if (other.hasMisses) {
    [self setMisses:other.misses];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setAccountId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setFakeClientId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 32: {
        [self addItems:[input readUInt32]];
        break;
      }
      case 40: {
        [self setGold:[input readUInt32]];
        break;
      }
      case 48: {
        [self setKills:[input readUInt32]];
        break;
      }
      case 56: {
        [self setDeaths:[input readUInt32]];
        break;
      }
      case 64: {
        [self setAssists:[input readUInt32]];
        break;
      }
      case 72: {
        [self setLeaverStatus:[input readUInt32]];
        break;
      }
      case 80: {
        [self setLastHits:[input readUInt32]];
        break;
      }
      case 88: {
        [self setDenies:[input readUInt32]];
        break;
      }
      case 96: {
        [self setGoldPerMin:[input readUInt32]];
        break;
      }
      case 104: {
        [self setXpPerMinute:[input readUInt32]];
        break;
      }
      case 112: {
        [self setGoldSpent:[input readUInt32]];
        break;
      }
      case 120: {
        [self setLevel:[input readUInt32]];
        break;
      }
      case 128: {
        [self setHeroDamage:[input readUInt32]];
        break;
      }
      case 136: {
        [self setTowerDamage:[input readUInt32]];
        break;
      }
      case 144: {
        [self setHeroHealing:[input readUInt32]];
        break;
      }
      case 152: {
        [self setTimeLastSeen:[input readUInt32]];
        break;
      }
      case 160: {
        [self setSupportAbilityValue:[input readUInt32]];
        break;
      }
      case 168: {
        [self setPartyId:[input readUInt64]];
        break;
      }
      case 197: {
        [self setScaledKills:[input readFloat]];
        break;
      }
      case 205: {
        [self setScaledDeaths:[input readFloat]];
        break;
      }
      case 213: {
        [self setScaledAssists:[input readFloat]];
        break;
      }
      case 216: {
        [self setClaimedFarmGold:[input readUInt32]];
        break;
      }
      case 224: {
        [self setSupportGold:[input readUInt32]];
        break;
      }
      case 232: {
        [self setClaimedDenies:[input readUInt32]];
        break;
      }
      case 240: {
        [self setClaimedMisses:[input readUInt32]];
        break;
      }
      case 248: {
        [self setMisses:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint64_t) accountId {
  return _builderResult.accountId;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setAccountId:(uint64_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0L;
  return self;
}
- (BOOL) hasFakeClientId {
  return _builderResult.hasFakeClientId;
}
- (uint32_t) fakeClientId {
  return _builderResult.fakeClientId;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setFakeClientId:(uint32_t) value {
  _builderResult.hasFakeClientId = YES;
  _builderResult.fakeClientId = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearFakeClientId {
  _builderResult.hasFakeClientId = NO;
  _builderResult.fakeClientId = 0;
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (PBAppendableArray *)items {
  return _builderResult.itemsArray;
}
- (uint32_t)itemsAtIndex:(NSUInteger)index {
  return [_builderResult itemsAtIndex:index];
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder *)addItems:(uint32_t)value {
  if (_builderResult.itemsArray == nil) {
    _builderResult.itemsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.itemsArray addUint32:value];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder *)setItemsArray:(NSArray *)array {
  _builderResult.itemsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder *)setItemsValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.itemsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder *)clearItems {
  _builderResult.itemsArray = nil;
  return self;
}
- (BOOL) hasGold {
  return _builderResult.hasGold;
}
- (uint32_t) gold {
  return _builderResult.gold;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setGold:(uint32_t) value {
  _builderResult.hasGold = YES;
  _builderResult.gold = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearGold {
  _builderResult.hasGold = NO;
  _builderResult.gold = 0;
  return self;
}
- (BOOL) hasKills {
  return _builderResult.hasKills;
}
- (uint32_t) kills {
  return _builderResult.kills;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setKills:(uint32_t) value {
  _builderResult.hasKills = YES;
  _builderResult.kills = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearKills {
  _builderResult.hasKills = NO;
  _builderResult.kills = 0;
  return self;
}
- (BOOL) hasDeaths {
  return _builderResult.hasDeaths;
}
- (uint32_t) deaths {
  return _builderResult.deaths;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setDeaths:(uint32_t) value {
  _builderResult.hasDeaths = YES;
  _builderResult.deaths = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearDeaths {
  _builderResult.hasDeaths = NO;
  _builderResult.deaths = 0;
  return self;
}
- (BOOL) hasAssists {
  return _builderResult.hasAssists;
}
- (uint32_t) assists {
  return _builderResult.assists;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setAssists:(uint32_t) value {
  _builderResult.hasAssists = YES;
  _builderResult.assists = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearAssists {
  _builderResult.hasAssists = NO;
  _builderResult.assists = 0;
  return self;
}
- (BOOL) hasLeaverStatus {
  return _builderResult.hasLeaverStatus;
}
- (uint32_t) leaverStatus {
  return _builderResult.leaverStatus;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setLeaverStatus:(uint32_t) value {
  _builderResult.hasLeaverStatus = YES;
  _builderResult.leaverStatus = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearLeaverStatus {
  _builderResult.hasLeaverStatus = NO;
  _builderResult.leaverStatus = 0;
  return self;
}
- (BOOL) hasLastHits {
  return _builderResult.hasLastHits;
}
- (uint32_t) lastHits {
  return _builderResult.lastHits;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setLastHits:(uint32_t) value {
  _builderResult.hasLastHits = YES;
  _builderResult.lastHits = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearLastHits {
  _builderResult.hasLastHits = NO;
  _builderResult.lastHits = 0;
  return self;
}
- (BOOL) hasDenies {
  return _builderResult.hasDenies;
}
- (uint32_t) denies {
  return _builderResult.denies;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setDenies:(uint32_t) value {
  _builderResult.hasDenies = YES;
  _builderResult.denies = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearDenies {
  _builderResult.hasDenies = NO;
  _builderResult.denies = 0;
  return self;
}
- (BOOL) hasGoldPerMin {
  return _builderResult.hasGoldPerMin;
}
- (uint32_t) goldPerMin {
  return _builderResult.goldPerMin;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setGoldPerMin:(uint32_t) value {
  _builderResult.hasGoldPerMin = YES;
  _builderResult.goldPerMin = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearGoldPerMin {
  _builderResult.hasGoldPerMin = NO;
  _builderResult.goldPerMin = 0;
  return self;
}
- (BOOL) hasXpPerMinute {
  return _builderResult.hasXpPerMinute;
}
- (uint32_t) xpPerMinute {
  return _builderResult.xpPerMinute;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setXpPerMinute:(uint32_t) value {
  _builderResult.hasXpPerMinute = YES;
  _builderResult.xpPerMinute = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearXpPerMinute {
  _builderResult.hasXpPerMinute = NO;
  _builderResult.xpPerMinute = 0;
  return self;
}
- (BOOL) hasGoldSpent {
  return _builderResult.hasGoldSpent;
}
- (uint32_t) goldSpent {
  return _builderResult.goldSpent;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setGoldSpent:(uint32_t) value {
  _builderResult.hasGoldSpent = YES;
  _builderResult.goldSpent = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearGoldSpent {
  _builderResult.hasGoldSpent = NO;
  _builderResult.goldSpent = 0;
  return self;
}
- (BOOL) hasLevel {
  return _builderResult.hasLevel;
}
- (uint32_t) level {
  return _builderResult.level;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setLevel:(uint32_t) value {
  _builderResult.hasLevel = YES;
  _builderResult.level = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearLevel {
  _builderResult.hasLevel = NO;
  _builderResult.level = 0;
  return self;
}
- (BOOL) hasHeroDamage {
  return _builderResult.hasHeroDamage;
}
- (uint32_t) heroDamage {
  return _builderResult.heroDamage;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setHeroDamage:(uint32_t) value {
  _builderResult.hasHeroDamage = YES;
  _builderResult.heroDamage = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearHeroDamage {
  _builderResult.hasHeroDamage = NO;
  _builderResult.heroDamage = 0;
  return self;
}
- (BOOL) hasTowerDamage {
  return _builderResult.hasTowerDamage;
}
- (uint32_t) towerDamage {
  return _builderResult.towerDamage;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setTowerDamage:(uint32_t) value {
  _builderResult.hasTowerDamage = YES;
  _builderResult.towerDamage = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearTowerDamage {
  _builderResult.hasTowerDamage = NO;
  _builderResult.towerDamage = 0;
  return self;
}
- (BOOL) hasHeroHealing {
  return _builderResult.hasHeroHealing;
}
- (uint32_t) heroHealing {
  return _builderResult.heroHealing;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setHeroHealing:(uint32_t) value {
  _builderResult.hasHeroHealing = YES;
  _builderResult.heroHealing = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearHeroHealing {
  _builderResult.hasHeroHealing = NO;
  _builderResult.heroHealing = 0;
  return self;
}
- (BOOL) hasTimeLastSeen {
  return _builderResult.hasTimeLastSeen;
}
- (uint32_t) timeLastSeen {
  return _builderResult.timeLastSeen;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setTimeLastSeen:(uint32_t) value {
  _builderResult.hasTimeLastSeen = YES;
  _builderResult.timeLastSeen = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearTimeLastSeen {
  _builderResult.hasTimeLastSeen = NO;
  _builderResult.timeLastSeen = 0;
  return self;
}
- (BOOL) hasSupportAbilityValue {
  return _builderResult.hasSupportAbilityValue;
}
- (uint32_t) supportAbilityValue {
  return _builderResult.supportAbilityValue;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setSupportAbilityValue:(uint32_t) value {
  _builderResult.hasSupportAbilityValue = YES;
  _builderResult.supportAbilityValue = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearSupportAbilityValue {
  _builderResult.hasSupportAbilityValue = NO;
  _builderResult.supportAbilityValue = 0;
  return self;
}
- (BOOL) hasPartyId {
  return _builderResult.hasPartyId;
}
- (uint64_t) partyId {
  return _builderResult.partyId;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setPartyId:(uint64_t) value {
  _builderResult.hasPartyId = YES;
  _builderResult.partyId = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearPartyId {
  _builderResult.hasPartyId = NO;
  _builderResult.partyId = 0L;
  return self;
}
- (BOOL) hasScaledKills {
  return _builderResult.hasScaledKills;
}
- (Float32) scaledKills {
  return _builderResult.scaledKills;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setScaledKills:(Float32) value {
  _builderResult.hasScaledKills = YES;
  _builderResult.scaledKills = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearScaledKills {
  _builderResult.hasScaledKills = NO;
  _builderResult.scaledKills = 0;
  return self;
}
- (BOOL) hasScaledDeaths {
  return _builderResult.hasScaledDeaths;
}
- (Float32) scaledDeaths {
  return _builderResult.scaledDeaths;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setScaledDeaths:(Float32) value {
  _builderResult.hasScaledDeaths = YES;
  _builderResult.scaledDeaths = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearScaledDeaths {
  _builderResult.hasScaledDeaths = NO;
  _builderResult.scaledDeaths = 0;
  return self;
}
- (BOOL) hasScaledAssists {
  return _builderResult.hasScaledAssists;
}
- (Float32) scaledAssists {
  return _builderResult.scaledAssists;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setScaledAssists:(Float32) value {
  _builderResult.hasScaledAssists = YES;
  _builderResult.scaledAssists = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearScaledAssists {
  _builderResult.hasScaledAssists = NO;
  _builderResult.scaledAssists = 0;
  return self;
}
- (BOOL) hasClaimedFarmGold {
  return _builderResult.hasClaimedFarmGold;
}
- (uint32_t) claimedFarmGold {
  return _builderResult.claimedFarmGold;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setClaimedFarmGold:(uint32_t) value {
  _builderResult.hasClaimedFarmGold = YES;
  _builderResult.claimedFarmGold = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearClaimedFarmGold {
  _builderResult.hasClaimedFarmGold = NO;
  _builderResult.claimedFarmGold = 0;
  return self;
}
- (BOOL) hasSupportGold {
  return _builderResult.hasSupportGold;
}
- (uint32_t) supportGold {
  return _builderResult.supportGold;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setSupportGold:(uint32_t) value {
  _builderResult.hasSupportGold = YES;
  _builderResult.supportGold = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearSupportGold {
  _builderResult.hasSupportGold = NO;
  _builderResult.supportGold = 0;
  return self;
}
- (BOOL) hasClaimedDenies {
  return _builderResult.hasClaimedDenies;
}
- (uint32_t) claimedDenies {
  return _builderResult.claimedDenies;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setClaimedDenies:(uint32_t) value {
  _builderResult.hasClaimedDenies = YES;
  _builderResult.claimedDenies = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearClaimedDenies {
  _builderResult.hasClaimedDenies = NO;
  _builderResult.claimedDenies = 0;
  return self;
}
- (BOOL) hasClaimedMisses {
  return _builderResult.hasClaimedMisses;
}
- (uint32_t) claimedMisses {
  return _builderResult.claimedMisses;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setClaimedMisses:(uint32_t) value {
  _builderResult.hasClaimedMisses = YES;
  _builderResult.claimedMisses = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearClaimedMisses {
  _builderResult.hasClaimedMisses = NO;
  _builderResult.claimedMisses = 0;
  return self;
}
- (BOOL) hasMisses {
  return _builderResult.hasMisses;
}
- (uint32_t) misses {
  return _builderResult.misses;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) setMisses:(uint32_t) value {
  _builderResult.hasMisses = YES;
  _builderResult.misses = value;
  return self;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer_Builder*) clearMisses {
  _builderResult.hasMisses = NO;
  _builderResult.misses = 0;
  return self;
}
@end

@interface CMsgGameMatchSignOut_CTeam_Builder()
@property (retain) CMsgGameMatchSignOut_CTeam* _builderResult;
@end

@implementation CMsgGameMatchSignOut_CTeam_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameMatchSignOut_CTeam alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameMatchSignOut_CTeam_Builder*) clear {
  _builderResult = [[[CMsgGameMatchSignOut_CTeam alloc] init] autorelease];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_Builder*) clone {
  return [CMsgGameMatchSignOut_CTeam builderWithPrototype:_builderResult];
}
- (CMsgGameMatchSignOut_CTeam*) defaultInstance {
  return [CMsgGameMatchSignOut_CTeam defaultInstance];
}
- (CMsgGameMatchSignOut_CTeam*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameMatchSignOut_CTeam*) buildPartial {
  CMsgGameMatchSignOut_CTeam* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameMatchSignOut_CTeam_Builder*) mergeFrom:(CMsgGameMatchSignOut_CTeam*) other {
  if (other == [CMsgGameMatchSignOut_CTeam defaultInstance]) {
    return self;
  }
  if (other.playersArray.count > 0) {
    if (_builderResult.playersArray == nil) {
      _builderResult.playersArray = [[other.playersArray copyWithZone:[other.playersArray zone]] autorelease];
    } else {
      [_builderResult.playersArray appendArray:other.playersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameMatchSignOut_CTeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgGameMatchSignOut_CTeam_CPlayer_Builder* subBuilder = [CMsgGameMatchSignOut_CTeam_CPlayer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlayers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)players {
  return _builderResult.playersArray;
}
- (CMsgGameMatchSignOut_CTeam_CPlayer*)playersAtIndex:(NSUInteger)index {
  return [_builderResult playersAtIndex:index];
}
- (CMsgGameMatchSignOut_CTeam_Builder *)addPlayers:(CMsgGameMatchSignOut_CTeam_CPlayer*)value {
  if (_builderResult.playersArray == nil) {
    _builderResult.playersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.playersArray addObject:value];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_Builder *)setPlayersArray:(NSArray *)array {
  _builderResult.playersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_Builder *)setPlayersValues:(const CMsgGameMatchSignOut_CTeam_CPlayer* *)values count:(NSUInteger)count {
  _builderResult.playersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameMatchSignOut_CTeam_Builder *)clearPlayers {
  _builderResult.playersArray = nil;
  return self;
}
@end

@interface CMsgGameMatchSignOut_Builder()
@property (retain) CMsgGameMatchSignOut* _builderResult;
@end

@implementation CMsgGameMatchSignOut_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameMatchSignOut alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameMatchSignOut_Builder*) clear {
  _builderResult = [[[CMsgGameMatchSignOut alloc] init] autorelease];
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clone {
  return [CMsgGameMatchSignOut builderWithPrototype:_builderResult];
}
- (CMsgGameMatchSignOut*) defaultInstance {
  return [CMsgGameMatchSignOut defaultInstance];
}
- (CMsgGameMatchSignOut*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameMatchSignOut*) buildPartial {
  CMsgGameMatchSignOut* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameMatchSignOut_Builder*) mergeFrom:(CMsgGameMatchSignOut*) other {
  if (other == [CMsgGameMatchSignOut defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasGoodGuysWin) {
    [self setGoodGuysWin:other.goodGuysWin];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.numPlayersArray.count > 0) {
    if (_builderResult.numPlayersArray == nil) {
      _builderResult.numPlayersArray = [[other.numPlayersArray copyWithZone:[other.numPlayersArray zone]] autorelease];
    } else {
      [_builderResult.numPlayersArray appendArray:other.numPlayersArray];
    }
  }
  if (other.teamsArray.count > 0) {
    if (_builderResult.teamsArray == nil) {
      _builderResult.teamsArray = [[other.teamsArray copyWithZone:[other.teamsArray zone]] autorelease];
    } else {
      [_builderResult.teamsArray appendArray:other.teamsArray];
    }
  }
  if (other.hasComputerName) {
    [self setComputerName:other.computerName];
  }
  if (other.towerStatusArray.count > 0) {
    if (_builderResult.towerStatusArray == nil) {
      _builderResult.towerStatusArray = [[other.towerStatusArray copyWithZone:[other.towerStatusArray zone]] autorelease];
    } else {
      [_builderResult.towerStatusArray appendArray:other.towerStatusArray];
    }
  }
  if (other.barracksStatusArray.count > 0) {
    if (_builderResult.barracksStatusArray == nil) {
      _builderResult.barracksStatusArray = [[other.barracksStatusArray copyWithZone:[other.barracksStatusArray zone]] autorelease];
    } else {
      [_builderResult.barracksStatusArray appendArray:other.barracksStatusArray];
    }
  }
  if (other.hasCluster) {
    [self setCluster:other.cluster];
  }
  if (other.hasServerAddr) {
    [self setServerAddr:other.serverAddr];
  }
  if (other.hasFirstBloodTime) {
    [self setFirstBloodTime:other.firstBloodTime];
  }
  if (other.hasGameBalance) {
    [self setGameBalance:other.gameBalance];
  }
  if (other.hasEventScore) {
    [self setEventScore:other.eventScore];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameMatchSignOut_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameMatchSignOut_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setDuration:[input readUInt32]];
        break;
      }
      case 24: {
        [self setGoodGuysWin:[input readBool]];
        break;
      }
      case 37: {
        [self setDate:[input readFixed32]];
        break;
      }
      case 40: {
        [self addNumPlayers:[input readUInt32]];
        break;
      }
      case 50: {
        CMsgGameMatchSignOut_CTeam_Builder* subBuilder = [CMsgGameMatchSignOut_CTeam builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeams:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setComputerName:[input readString]];
        break;
      }
      case 64: {
        [self addTowerStatus:[input readUInt32]];
        break;
      }
      case 72: {
        [self addBarracksStatus:[input readUInt32]];
        break;
      }
      case 80: {
        [self setCluster:[input readUInt32]];
        break;
      }
      case 90: {
        [self setServerAddr:[input readString]];
        break;
      }
      case 96: {
        [self setFirstBloodTime:[input readUInt32]];
        break;
      }
      case 109: {
        [self setGameBalance:[input readFloat]];
        break;
      }
      case 112: {
        [self setEventScore:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgGameMatchSignOut_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (BOOL) hasDuration {
  return _builderResult.hasDuration;
}
- (uint32_t) duration {
  return _builderResult.duration;
}
- (CMsgGameMatchSignOut_Builder*) setDuration:(uint32_t) value {
  _builderResult.hasDuration = YES;
  _builderResult.duration = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearDuration {
  _builderResult.hasDuration = NO;
  _builderResult.duration = 0;
  return self;
}
- (BOOL) hasGoodGuysWin {
  return _builderResult.hasGoodGuysWin;
}
- (BOOL) goodGuysWin {
  return _builderResult.goodGuysWin;
}
- (CMsgGameMatchSignOut_Builder*) setGoodGuysWin:(BOOL) value {
  _builderResult.hasGoodGuysWin = YES;
  _builderResult.goodGuysWin = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearGoodGuysWin {
  _builderResult.hasGoodGuysWin = NO;
  _builderResult.goodGuysWin = NO;
  return self;
}
- (BOOL) hasDate {
  return _builderResult.hasDate;
}
- (uint32_t) date {
  return _builderResult.date;
}
- (CMsgGameMatchSignOut_Builder*) setDate:(uint32_t) value {
  _builderResult.hasDate = YES;
  _builderResult.date = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearDate {
  _builderResult.hasDate = NO;
  _builderResult.date = 0;
  return self;
}
- (PBAppendableArray *)numPlayers {
  return _builderResult.numPlayersArray;
}
- (uint32_t)numPlayersAtIndex:(NSUInteger)index {
  return [_builderResult numPlayersAtIndex:index];
}
- (CMsgGameMatchSignOut_Builder *)addNumPlayers:(uint32_t)value {
  if (_builderResult.numPlayersArray == nil) {
    _builderResult.numPlayersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.numPlayersArray addUint32:value];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)setNumPlayersArray:(NSArray *)array {
  _builderResult.numPlayersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)setNumPlayersValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.numPlayersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)clearNumPlayers {
  _builderResult.numPlayersArray = nil;
  return self;
}
- (PBAppendableArray *)teams {
  return _builderResult.teamsArray;
}
- (CMsgGameMatchSignOut_CTeam*)teamsAtIndex:(NSUInteger)index {
  return [_builderResult teamsAtIndex:index];
}
- (CMsgGameMatchSignOut_Builder *)addTeams:(CMsgGameMatchSignOut_CTeam*)value {
  if (_builderResult.teamsArray == nil) {
    _builderResult.teamsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.teamsArray addObject:value];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)setTeamsArray:(NSArray *)array {
  _builderResult.teamsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)setTeamsValues:(const CMsgGameMatchSignOut_CTeam* *)values count:(NSUInteger)count {
  _builderResult.teamsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)clearTeams {
  _builderResult.teamsArray = nil;
  return self;
}
- (BOOL) hasComputerName {
  return _builderResult.hasComputerName;
}
- (NSString*) computerName {
  return _builderResult.computerName;
}
- (CMsgGameMatchSignOut_Builder*) setComputerName:(NSString*) value {
  _builderResult.hasComputerName = YES;
  _builderResult.computerName = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearComputerName {
  _builderResult.hasComputerName = NO;
  _builderResult.computerName = @"";
  return self;
}
- (PBAppendableArray *)towerStatus {
  return _builderResult.towerStatusArray;
}
- (uint32_t)towerStatusAtIndex:(NSUInteger)index {
  return [_builderResult towerStatusAtIndex:index];
}
- (CMsgGameMatchSignOut_Builder *)addTowerStatus:(uint32_t)value {
  if (_builderResult.towerStatusArray == nil) {
    _builderResult.towerStatusArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.towerStatusArray addUint32:value];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)setTowerStatusArray:(NSArray *)array {
  _builderResult.towerStatusArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)setTowerStatusValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.towerStatusArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)clearTowerStatus {
  _builderResult.towerStatusArray = nil;
  return self;
}
- (PBAppendableArray *)barracksStatus {
  return _builderResult.barracksStatusArray;
}
- (uint32_t)barracksStatusAtIndex:(NSUInteger)index {
  return [_builderResult barracksStatusAtIndex:index];
}
- (CMsgGameMatchSignOut_Builder *)addBarracksStatus:(uint32_t)value {
  if (_builderResult.barracksStatusArray == nil) {
    _builderResult.barracksStatusArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.barracksStatusArray addUint32:value];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)setBarracksStatusArray:(NSArray *)array {
  _builderResult.barracksStatusArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)setBarracksStatusValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.barracksStatusArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgGameMatchSignOut_Builder *)clearBarracksStatus {
  _builderResult.barracksStatusArray = nil;
  return self;
}
- (BOOL) hasCluster {
  return _builderResult.hasCluster;
}
- (uint32_t) cluster {
  return _builderResult.cluster;
}
- (CMsgGameMatchSignOut_Builder*) setCluster:(uint32_t) value {
  _builderResult.hasCluster = YES;
  _builderResult.cluster = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearCluster {
  _builderResult.hasCluster = NO;
  _builderResult.cluster = 0;
  return self;
}
- (BOOL) hasServerAddr {
  return _builderResult.hasServerAddr;
}
- (NSString*) serverAddr {
  return _builderResult.serverAddr;
}
- (CMsgGameMatchSignOut_Builder*) setServerAddr:(NSString*) value {
  _builderResult.hasServerAddr = YES;
  _builderResult.serverAddr = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearServerAddr {
  _builderResult.hasServerAddr = NO;
  _builderResult.serverAddr = @"";
  return self;
}
- (BOOL) hasFirstBloodTime {
  return _builderResult.hasFirstBloodTime;
}
- (uint32_t) firstBloodTime {
  return _builderResult.firstBloodTime;
}
- (CMsgGameMatchSignOut_Builder*) setFirstBloodTime:(uint32_t) value {
  _builderResult.hasFirstBloodTime = YES;
  _builderResult.firstBloodTime = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearFirstBloodTime {
  _builderResult.hasFirstBloodTime = NO;
  _builderResult.firstBloodTime = 0;
  return self;
}
- (BOOL) hasGameBalance {
  return _builderResult.hasGameBalance;
}
- (Float32) gameBalance {
  return _builderResult.gameBalance;
}
- (CMsgGameMatchSignOut_Builder*) setGameBalance:(Float32) value {
  _builderResult.hasGameBalance = YES;
  _builderResult.gameBalance = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearGameBalance {
  _builderResult.hasGameBalance = NO;
  _builderResult.gameBalance = 0;
  return self;
}
- (BOOL) hasEventScore {
  return _builderResult.hasEventScore;
}
- (uint32_t) eventScore {
  return _builderResult.eventScore;
}
- (CMsgGameMatchSignOut_Builder*) setEventScore:(uint32_t) value {
  _builderResult.hasEventScore = YES;
  _builderResult.eventScore = value;
  return self;
}
- (CMsgGameMatchSignOut_Builder*) clearEventScore {
  _builderResult.hasEventScore = NO;
  _builderResult.eventScore = 0;
  return self;
}
@end

@interface CMsgGameMatchSignoutResponse ()
@property uint32_t matchId;
@property uint32_t replaySalt;
@property (retain) PBAppendableArray * timedRewardDetailsArray;
@property (retain) PBAppendableArray * xpRewardDetailsArray;
@property uint32_t leagueid;
@end

@implementation CMsgGameMatchSignoutResponse

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (BOOL) hasReplaySalt {
  return !!hasReplaySalt_;
}
- (void) setHasReplaySalt:(BOOL) value_ {
  hasReplaySalt_ = !!value_;
}
@synthesize replaySalt;
@synthesize timedRewardDetailsArray;
@dynamic timedRewardDetails;
@synthesize xpRewardDetailsArray;
@dynamic xpRewardDetails;
- (BOOL) hasLeagueid {
  return !!hasLeagueid_;
}
- (void) setHasLeagueid:(BOOL) value_ {
  hasLeagueid_ = !!value_;
}
@synthesize leagueid;
- (void) dealloc {
  self.timedRewardDetailsArray = nil;
  self.xpRewardDetailsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
    self.replaySalt = 0;
    self.leagueid = 0;
  }
  return self;
}
static CMsgGameMatchSignoutResponse* defaultCMsgGameMatchSignoutResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameMatchSignoutResponse class]) {
    defaultCMsgGameMatchSignoutResponseInstance = [[CMsgGameMatchSignoutResponse alloc] init];
  }
}
+ (CMsgGameMatchSignoutResponse*) defaultInstance {
  return defaultCMsgGameMatchSignoutResponseInstance;
}
- (CMsgGameMatchSignoutResponse*) defaultInstance {
  return defaultCMsgGameMatchSignoutResponseInstance;
}
- (PBArray *)timedRewardDetails {
  return timedRewardDetailsArray;
}
- (CLobbyTimedRewardDetails*)timedRewardDetailsAtIndex:(NSUInteger)index {
  return [timedRewardDetailsArray objectAtIndex:index];
}
- (PBArray *)xpRewardDetails {
  return xpRewardDetailsArray;
}
- (CDOTALobbyMember*)xpRewardDetailsAtIndex:(NSUInteger)index {
  return [xpRewardDetailsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  if (self.hasReplaySalt) {
    [output writeFixed32:2 value:self.replaySalt];
  }
  for (CLobbyTimedRewardDetails *element in self.timedRewardDetailsArray) {
    [output writeMessage:3 value:element];
  }
  for (CDOTALobbyMember *element in self.xpRewardDetailsArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasLeagueid) {
    [output writeUInt32:5 value:self.leagueid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  if (self.hasReplaySalt) {
    size_ += computeFixed32Size(2, self.replaySalt);
  }
  for (CLobbyTimedRewardDetails *element in self.timedRewardDetailsArray) {
    size_ += computeMessageSize(3, element);
  }
  for (CDOTALobbyMember *element in self.xpRewardDetailsArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasLeagueid) {
    size_ += computeUInt32Size(5, self.leagueid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameMatchSignoutResponse*) parseFromData:(NSData*) data {
  return (CMsgGameMatchSignoutResponse*)[[[CMsgGameMatchSignoutResponse builder] mergeFromData:data] build];
}
+ (CMsgGameMatchSignoutResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignoutResponse*)[[[CMsgGameMatchSignoutResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignoutResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameMatchSignoutResponse*)[[[CMsgGameMatchSignoutResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgGameMatchSignoutResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignoutResponse*)[[[CMsgGameMatchSignoutResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignoutResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameMatchSignoutResponse*)[[[CMsgGameMatchSignoutResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameMatchSignoutResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameMatchSignoutResponse*)[[[CMsgGameMatchSignoutResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameMatchSignoutResponse_Builder*) builder {
  return [[[CMsgGameMatchSignoutResponse_Builder alloc] init] autorelease];
}
+ (CMsgGameMatchSignoutResponse_Builder*) builderWithPrototype:(CMsgGameMatchSignoutResponse*) prototype {
  return [[CMsgGameMatchSignoutResponse builder] mergeFrom:prototype];
}
- (CMsgGameMatchSignoutResponse_Builder*) builder {
  return [CMsgGameMatchSignoutResponse builder];
}
- (CMsgGameMatchSignoutResponse_Builder*) toBuilder {
  return [CMsgGameMatchSignoutResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  if (self.hasReplaySalt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replaySalt", [NSNumber numberWithInt:self.replaySalt]];
  }
  for (CLobbyTimedRewardDetails* element in self.timedRewardDetailsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"timedRewardDetails"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CDOTALobbyMember* element in self.xpRewardDetailsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"xpRewardDetails"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLeagueid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueid", [NSNumber numberWithInt:self.leagueid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameMatchSignoutResponse class]]) {
    return NO;
  }
  CMsgGameMatchSignoutResponse *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      self.hasReplaySalt == otherMessage.hasReplaySalt &&
      (!self.hasReplaySalt || self.replaySalt == otherMessage.replaySalt) &&
      [self.timedRewardDetailsArray isEqualToArray:otherMessage.timedRewardDetailsArray] &&
      [self.xpRewardDetailsArray isEqualToArray:otherMessage.xpRewardDetailsArray] &&
      self.hasLeagueid == otherMessage.hasLeagueid &&
      (!self.hasLeagueid || self.leagueid == otherMessage.leagueid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  if (self.hasReplaySalt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replaySalt] hash];
  }
  for (CLobbyTimedRewardDetails* element in self.timedRewardDetailsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CDOTALobbyMember* element in self.xpRewardDetailsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasLeagueid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leagueid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGameMatchSignoutResponse_Builder()
@property (retain) CMsgGameMatchSignoutResponse* _builderResult;
@end

@implementation CMsgGameMatchSignoutResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameMatchSignoutResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameMatchSignoutResponse_Builder*) clear {
  _builderResult = [[[CMsgGameMatchSignoutResponse alloc] init] autorelease];
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder*) clone {
  return [CMsgGameMatchSignoutResponse builderWithPrototype:_builderResult];
}
- (CMsgGameMatchSignoutResponse*) defaultInstance {
  return [CMsgGameMatchSignoutResponse defaultInstance];
}
- (CMsgGameMatchSignoutResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameMatchSignoutResponse*) buildPartial {
  CMsgGameMatchSignoutResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameMatchSignoutResponse_Builder*) mergeFrom:(CMsgGameMatchSignoutResponse*) other {
  if (other == [CMsgGameMatchSignoutResponse defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.hasReplaySalt) {
    [self setReplaySalt:other.replaySalt];
  }
  if (other.timedRewardDetailsArray.count > 0) {
    if (_builderResult.timedRewardDetailsArray == nil) {
      _builderResult.timedRewardDetailsArray = [[other.timedRewardDetailsArray copyWithZone:[other.timedRewardDetailsArray zone]] autorelease];
    } else {
      [_builderResult.timedRewardDetailsArray appendArray:other.timedRewardDetailsArray];
    }
  }
  if (other.xpRewardDetailsArray.count > 0) {
    if (_builderResult.xpRewardDetailsArray == nil) {
      _builderResult.xpRewardDetailsArray = [[other.xpRewardDetailsArray copyWithZone:[other.xpRewardDetailsArray zone]] autorelease];
    } else {
      [_builderResult.xpRewardDetailsArray appendArray:other.xpRewardDetailsArray];
    }
  }
  if (other.hasLeagueid) {
    [self setLeagueid:other.leagueid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameMatchSignoutResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 21: {
        [self setReplaySalt:[input readFixed32]];
        break;
      }
      case 26: {
        CLobbyTimedRewardDetails_Builder* subBuilder = [CLobbyTimedRewardDetails builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTimedRewardDetails:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        CDOTALobbyMember_Builder* subBuilder = [CDOTALobbyMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addXpRewardDetails:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setLeagueid:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgGameMatchSignoutResponse_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (BOOL) hasReplaySalt {
  return _builderResult.hasReplaySalt;
}
- (uint32_t) replaySalt {
  return _builderResult.replaySalt;
}
- (CMsgGameMatchSignoutResponse_Builder*) setReplaySalt:(uint32_t) value {
  _builderResult.hasReplaySalt = YES;
  _builderResult.replaySalt = value;
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder*) clearReplaySalt {
  _builderResult.hasReplaySalt = NO;
  _builderResult.replaySalt = 0;
  return self;
}
- (PBAppendableArray *)timedRewardDetails {
  return _builderResult.timedRewardDetailsArray;
}
- (CLobbyTimedRewardDetails*)timedRewardDetailsAtIndex:(NSUInteger)index {
  return [_builderResult timedRewardDetailsAtIndex:index];
}
- (CMsgGameMatchSignoutResponse_Builder *)addTimedRewardDetails:(CLobbyTimedRewardDetails*)value {
  if (_builderResult.timedRewardDetailsArray == nil) {
    _builderResult.timedRewardDetailsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.timedRewardDetailsArray addObject:value];
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder *)setTimedRewardDetailsArray:(NSArray *)array {
  _builderResult.timedRewardDetailsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder *)setTimedRewardDetailsValues:(const CLobbyTimedRewardDetails* *)values count:(NSUInteger)count {
  _builderResult.timedRewardDetailsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder *)clearTimedRewardDetails {
  _builderResult.timedRewardDetailsArray = nil;
  return self;
}
- (PBAppendableArray *)xpRewardDetails {
  return _builderResult.xpRewardDetailsArray;
}
- (CDOTALobbyMember*)xpRewardDetailsAtIndex:(NSUInteger)index {
  return [_builderResult xpRewardDetailsAtIndex:index];
}
- (CMsgGameMatchSignoutResponse_Builder *)addXpRewardDetails:(CDOTALobbyMember*)value {
  if (_builderResult.xpRewardDetailsArray == nil) {
    _builderResult.xpRewardDetailsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.xpRewardDetailsArray addObject:value];
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder *)setXpRewardDetailsArray:(NSArray *)array {
  _builderResult.xpRewardDetailsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder *)setXpRewardDetailsValues:(const CDOTALobbyMember* *)values count:(NSUInteger)count {
  _builderResult.xpRewardDetailsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder *)clearXpRewardDetails {
  _builderResult.xpRewardDetailsArray = nil;
  return self;
}
- (BOOL) hasLeagueid {
  return _builderResult.hasLeagueid;
}
- (uint32_t) leagueid {
  return _builderResult.leagueid;
}
- (CMsgGameMatchSignoutResponse_Builder*) setLeagueid:(uint32_t) value {
  _builderResult.hasLeagueid = YES;
  _builderResult.leagueid = value;
  return self;
}
- (CMsgGameMatchSignoutResponse_Builder*) clearLeagueid {
  _builderResult.hasLeagueid = NO;
  _builderResult.leagueid = 0;
  return self;
}
@end

@interface CMsgGameChatLog ()
@property uint32_t matchId;
@property (retain) PBAppendableArray * linesArray;
@end

@implementation CMsgGameChatLog

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
@synthesize linesArray;
@dynamic lines;
- (void) dealloc {
  self.linesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
  }
  return self;
}
static CMsgGameChatLog* defaultCMsgGameChatLogInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameChatLog class]) {
    defaultCMsgGameChatLogInstance = [[CMsgGameChatLog alloc] init];
  }
}
+ (CMsgGameChatLog*) defaultInstance {
  return defaultCMsgGameChatLogInstance;
}
- (CMsgGameChatLog*) defaultInstance {
  return defaultCMsgGameChatLogInstance;
}
- (PBArray *)lines {
  return linesArray;
}
- (CMsgGameChatLog_CChatLine*)linesAtIndex:(NSUInteger)index {
  return [linesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  for (CMsgGameChatLog_CChatLine *element in self.linesArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  for (CMsgGameChatLog_CChatLine *element in self.linesArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameChatLog*) parseFromData:(NSData*) data {
  return (CMsgGameChatLog*)[[[CMsgGameChatLog builder] mergeFromData:data] build];
}
+ (CMsgGameChatLog*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameChatLog*)[[[CMsgGameChatLog builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameChatLog*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameChatLog*)[[[CMsgGameChatLog builder] mergeFromInputStream:input] build];
}
+ (CMsgGameChatLog*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameChatLog*)[[[CMsgGameChatLog builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameChatLog*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameChatLog*)[[[CMsgGameChatLog builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameChatLog*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameChatLog*)[[[CMsgGameChatLog builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameChatLog_Builder*) builder {
  return [[[CMsgGameChatLog_Builder alloc] init] autorelease];
}
+ (CMsgGameChatLog_Builder*) builderWithPrototype:(CMsgGameChatLog*) prototype {
  return [[CMsgGameChatLog builder] mergeFrom:prototype];
}
- (CMsgGameChatLog_Builder*) builder {
  return [CMsgGameChatLog builder];
}
- (CMsgGameChatLog_Builder*) toBuilder {
  return [CMsgGameChatLog builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  for (CMsgGameChatLog_CChatLine* element in self.linesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"lines"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameChatLog class]]) {
    return NO;
  }
  CMsgGameChatLog *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      [self.linesArray isEqualToArray:otherMessage.linesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  for (CMsgGameChatLog_CChatLine* element in self.linesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGameChatLog_CChatLine ()
@property uint32_t accountId;
@property uint32_t teamOnly;
@property (retain) NSString* text;
@property uint32_t gameTime;
@end

@implementation CMsgGameChatLog_CChatLine

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasTeamOnly {
  return !!hasTeamOnly_;
}
- (void) setHasTeamOnly:(BOOL) value_ {
  hasTeamOnly_ = !!value_;
}
@synthesize teamOnly;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value_ {
  hasText_ = !!value_;
}
@synthesize text;
- (BOOL) hasGameTime {
  return !!hasGameTime_;
}
- (void) setHasGameTime:(BOOL) value_ {
  hasGameTime_ = !!value_;
}
@synthesize gameTime;
- (void) dealloc {
  self.text = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.teamOnly = 0;
    self.text = @"";
    self.gameTime = 0;
  }
  return self;
}
static CMsgGameChatLog_CChatLine* defaultCMsgGameChatLog_CChatLineInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameChatLog_CChatLine class]) {
    defaultCMsgGameChatLog_CChatLineInstance = [[CMsgGameChatLog_CChatLine alloc] init];
  }
}
+ (CMsgGameChatLog_CChatLine*) defaultInstance {
  return defaultCMsgGameChatLog_CChatLineInstance;
}
- (CMsgGameChatLog_CChatLine*) defaultInstance {
  return defaultCMsgGameChatLog_CChatLineInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasTeamOnly) {
    [output writeUInt32:2 value:self.teamOnly];
  }
  if (self.hasText) {
    [output writeString:3 value:self.text];
  }
  if (self.hasGameTime) {
    [output writeUInt32:4 value:self.gameTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasTeamOnly) {
    size_ += computeUInt32Size(2, self.teamOnly);
  }
  if (self.hasText) {
    size_ += computeStringSize(3, self.text);
  }
  if (self.hasGameTime) {
    size_ += computeUInt32Size(4, self.gameTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameChatLog_CChatLine*) parseFromData:(NSData*) data {
  return (CMsgGameChatLog_CChatLine*)[[[CMsgGameChatLog_CChatLine builder] mergeFromData:data] build];
}
+ (CMsgGameChatLog_CChatLine*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameChatLog_CChatLine*)[[[CMsgGameChatLog_CChatLine builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameChatLog_CChatLine*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameChatLog_CChatLine*)[[[CMsgGameChatLog_CChatLine builder] mergeFromInputStream:input] build];
}
+ (CMsgGameChatLog_CChatLine*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameChatLog_CChatLine*)[[[CMsgGameChatLog_CChatLine builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameChatLog_CChatLine*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameChatLog_CChatLine*)[[[CMsgGameChatLog_CChatLine builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameChatLog_CChatLine*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameChatLog_CChatLine*)[[[CMsgGameChatLog_CChatLine builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameChatLog_CChatLine_Builder*) builder {
  return [[[CMsgGameChatLog_CChatLine_Builder alloc] init] autorelease];
}
+ (CMsgGameChatLog_CChatLine_Builder*) builderWithPrototype:(CMsgGameChatLog_CChatLine*) prototype {
  return [[CMsgGameChatLog_CChatLine builder] mergeFrom:prototype];
}
- (CMsgGameChatLog_CChatLine_Builder*) builder {
  return [CMsgGameChatLog_CChatLine builder];
}
- (CMsgGameChatLog_CChatLine_Builder*) toBuilder {
  return [CMsgGameChatLog_CChatLine builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasTeamOnly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamOnly", [NSNumber numberWithInt:self.teamOnly]];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasGameTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameTime", [NSNumber numberWithInt:self.gameTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameChatLog_CChatLine class]]) {
    return NO;
  }
  CMsgGameChatLog_CChatLine *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasTeamOnly == otherMessage.hasTeamOnly &&
      (!self.hasTeamOnly || self.teamOnly == otherMessage.teamOnly) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasGameTime == otherMessage.hasGameTime &&
      (!self.hasGameTime || self.gameTime == otherMessage.gameTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasTeamOnly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamOnly] hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasGameTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGameChatLog_CChatLine_Builder()
@property (retain) CMsgGameChatLog_CChatLine* _builderResult;
@end

@implementation CMsgGameChatLog_CChatLine_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameChatLog_CChatLine alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameChatLog_CChatLine_Builder*) clear {
  _builderResult = [[[CMsgGameChatLog_CChatLine alloc] init] autorelease];
  return self;
}
- (CMsgGameChatLog_CChatLine_Builder*) clone {
  return [CMsgGameChatLog_CChatLine builderWithPrototype:_builderResult];
}
- (CMsgGameChatLog_CChatLine*) defaultInstance {
  return [CMsgGameChatLog_CChatLine defaultInstance];
}
- (CMsgGameChatLog_CChatLine*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameChatLog_CChatLine*) buildPartial {
  CMsgGameChatLog_CChatLine* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameChatLog_CChatLine_Builder*) mergeFrom:(CMsgGameChatLog_CChatLine*) other {
  if (other == [CMsgGameChatLog_CChatLine defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasTeamOnly) {
    [self setTeamOnly:other.teamOnly];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasGameTime) {
    [self setGameTime:other.gameTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameChatLog_CChatLine_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameChatLog_CChatLine_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setTeamOnly:[input readUInt32]];
        break;
      }
      case 26: {
        [self setText:[input readString]];
        break;
      }
      case 32: {
        [self setGameTime:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgGameChatLog_CChatLine_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgGameChatLog_CChatLine_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasTeamOnly {
  return _builderResult.hasTeamOnly;
}
- (uint32_t) teamOnly {
  return _builderResult.teamOnly;
}
- (CMsgGameChatLog_CChatLine_Builder*) setTeamOnly:(uint32_t) value {
  _builderResult.hasTeamOnly = YES;
  _builderResult.teamOnly = value;
  return self;
}
- (CMsgGameChatLog_CChatLine_Builder*) clearTeamOnly {
  _builderResult.hasTeamOnly = NO;
  _builderResult.teamOnly = 0;
  return self;
}
- (BOOL) hasText {
  return _builderResult.hasText;
}
- (NSString*) text {
  return _builderResult.text;
}
- (CMsgGameChatLog_CChatLine_Builder*) setText:(NSString*) value {
  _builderResult.hasText = YES;
  _builderResult.text = value;
  return self;
}
- (CMsgGameChatLog_CChatLine_Builder*) clearText {
  _builderResult.hasText = NO;
  _builderResult.text = @"";
  return self;
}
- (BOOL) hasGameTime {
  return _builderResult.hasGameTime;
}
- (uint32_t) gameTime {
  return _builderResult.gameTime;
}
- (CMsgGameChatLog_CChatLine_Builder*) setGameTime:(uint32_t) value {
  _builderResult.hasGameTime = YES;
  _builderResult.gameTime = value;
  return self;
}
- (CMsgGameChatLog_CChatLine_Builder*) clearGameTime {
  _builderResult.hasGameTime = NO;
  _builderResult.gameTime = 0;
  return self;
}
@end

@interface CMsgGameChatLog_Builder()
@property (retain) CMsgGameChatLog* _builderResult;
@end

@implementation CMsgGameChatLog_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameChatLog alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameChatLog_Builder*) clear {
  _builderResult = [[[CMsgGameChatLog alloc] init] autorelease];
  return self;
}
- (CMsgGameChatLog_Builder*) clone {
  return [CMsgGameChatLog builderWithPrototype:_builderResult];
}
- (CMsgGameChatLog*) defaultInstance {
  return [CMsgGameChatLog defaultInstance];
}
- (CMsgGameChatLog*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameChatLog*) buildPartial {
  CMsgGameChatLog* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameChatLog_Builder*) mergeFrom:(CMsgGameChatLog*) other {
  if (other == [CMsgGameChatLog defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.linesArray.count > 0) {
    if (_builderResult.linesArray == nil) {
      _builderResult.linesArray = [[other.linesArray copyWithZone:[other.linesArray zone]] autorelease];
    } else {
      [_builderResult.linesArray appendArray:other.linesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameChatLog_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameChatLog_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 18: {
        CMsgGameChatLog_CChatLine_Builder* subBuilder = [CMsgGameChatLog_CChatLine builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLines:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgGameChatLog_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgGameChatLog_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (PBAppendableArray *)lines {
  return _builderResult.linesArray;
}
- (CMsgGameChatLog_CChatLine*)linesAtIndex:(NSUInteger)index {
  return [_builderResult linesAtIndex:index];
}
- (CMsgGameChatLog_Builder *)addLines:(CMsgGameChatLog_CChatLine*)value {
  if (_builderResult.linesArray == nil) {
    _builderResult.linesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.linesArray addObject:value];
  return self;
}
- (CMsgGameChatLog_Builder *)setLinesArray:(NSArray *)array {
  _builderResult.linesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameChatLog_Builder *)setLinesValues:(const CMsgGameChatLog_CChatLine* *)values count:(NSUInteger)count {
  _builderResult.linesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgGameChatLog_Builder *)clearLines {
  _builderResult.linesArray = nil;
  return self;
}
@end

@interface CMsgTutorialLobbyCreate ()
@property (retain) NSString* searchKey;
@property uint32_t tutorialLesson;
@property uint32_t clientVersion;
@end

@implementation CMsgTutorialLobbyCreate

- (BOOL) hasSearchKey {
  return !!hasSearchKey_;
}
- (void) setHasSearchKey:(BOOL) value_ {
  hasSearchKey_ = !!value_;
}
@synthesize searchKey;
- (BOOL) hasTutorialLesson {
  return !!hasTutorialLesson_;
}
- (void) setHasTutorialLesson:(BOOL) value_ {
  hasTutorialLesson_ = !!value_;
}
@synthesize tutorialLesson;
- (BOOL) hasClientVersion {
  return !!hasClientVersion_;
}
- (void) setHasClientVersion:(BOOL) value_ {
  hasClientVersion_ = !!value_;
}
@synthesize clientVersion;
- (void) dealloc {
  self.searchKey = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.searchKey = @"";
    self.tutorialLesson = 0;
    self.clientVersion = 0;
  }
  return self;
}
static CMsgTutorialLobbyCreate* defaultCMsgTutorialLobbyCreateInstance = nil;
+ (void) initialize {
  if (self == [CMsgTutorialLobbyCreate class]) {
    defaultCMsgTutorialLobbyCreateInstance = [[CMsgTutorialLobbyCreate alloc] init];
  }
}
+ (CMsgTutorialLobbyCreate*) defaultInstance {
  return defaultCMsgTutorialLobbyCreateInstance;
}
- (CMsgTutorialLobbyCreate*) defaultInstance {
  return defaultCMsgTutorialLobbyCreateInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSearchKey) {
    [output writeString:1 value:self.searchKey];
  }
  if (self.hasTutorialLesson) {
    [output writeUInt32:2 value:self.tutorialLesson];
  }
  if (self.hasClientVersion) {
    [output writeUInt32:3 value:self.clientVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSearchKey) {
    size_ += computeStringSize(1, self.searchKey);
  }
  if (self.hasTutorialLesson) {
    size_ += computeUInt32Size(2, self.tutorialLesson);
  }
  if (self.hasClientVersion) {
    size_ += computeUInt32Size(3, self.clientVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgTutorialLobbyCreate*) parseFromData:(NSData*) data {
  return (CMsgTutorialLobbyCreate*)[[[CMsgTutorialLobbyCreate builder] mergeFromData:data] build];
}
+ (CMsgTutorialLobbyCreate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTutorialLobbyCreate*)[[[CMsgTutorialLobbyCreate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgTutorialLobbyCreate*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgTutorialLobbyCreate*)[[[CMsgTutorialLobbyCreate builder] mergeFromInputStream:input] build];
}
+ (CMsgTutorialLobbyCreate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTutorialLobbyCreate*)[[[CMsgTutorialLobbyCreate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTutorialLobbyCreate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgTutorialLobbyCreate*)[[[CMsgTutorialLobbyCreate builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgTutorialLobbyCreate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTutorialLobbyCreate*)[[[CMsgTutorialLobbyCreate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTutorialLobbyCreate_Builder*) builder {
  return [[[CMsgTutorialLobbyCreate_Builder alloc] init] autorelease];
}
+ (CMsgTutorialLobbyCreate_Builder*) builderWithPrototype:(CMsgTutorialLobbyCreate*) prototype {
  return [[CMsgTutorialLobbyCreate builder] mergeFrom:prototype];
}
- (CMsgTutorialLobbyCreate_Builder*) builder {
  return [CMsgTutorialLobbyCreate builder];
}
- (CMsgTutorialLobbyCreate_Builder*) toBuilder {
  return [CMsgTutorialLobbyCreate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSearchKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchKey", self.searchKey];
  }
  if (self.hasTutorialLesson) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tutorialLesson", [NSNumber numberWithInt:self.tutorialLesson]];
  }
  if (self.hasClientVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientVersion", [NSNumber numberWithInt:self.clientVersion]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgTutorialLobbyCreate class]]) {
    return NO;
  }
  CMsgTutorialLobbyCreate *otherMessage = other;
  return
      self.hasSearchKey == otherMessage.hasSearchKey &&
      (!self.hasSearchKey || [self.searchKey isEqual:otherMessage.searchKey]) &&
      self.hasTutorialLesson == otherMessage.hasTutorialLesson &&
      (!self.hasTutorialLesson || self.tutorialLesson == otherMessage.tutorialLesson) &&
      self.hasClientVersion == otherMessage.hasClientVersion &&
      (!self.hasClientVersion || self.clientVersion == otherMessage.clientVersion) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSearchKey) {
    hashCode = hashCode * 31 + [self.searchKey hash];
  }
  if (self.hasTutorialLesson) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tutorialLesson] hash];
  }
  if (self.hasClientVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.clientVersion] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgTutorialLobbyCreate_Builder()
@property (retain) CMsgTutorialLobbyCreate* _builderResult;
@end

@implementation CMsgTutorialLobbyCreate_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgTutorialLobbyCreate alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgTutorialLobbyCreate_Builder*) clear {
  _builderResult = [[[CMsgTutorialLobbyCreate alloc] init] autorelease];
  return self;
}
- (CMsgTutorialLobbyCreate_Builder*) clone {
  return [CMsgTutorialLobbyCreate builderWithPrototype:_builderResult];
}
- (CMsgTutorialLobbyCreate*) defaultInstance {
  return [CMsgTutorialLobbyCreate defaultInstance];
}
- (CMsgTutorialLobbyCreate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgTutorialLobbyCreate*) buildPartial {
  CMsgTutorialLobbyCreate* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgTutorialLobbyCreate_Builder*) mergeFrom:(CMsgTutorialLobbyCreate*) other {
  if (other == [CMsgTutorialLobbyCreate defaultInstance]) {
    return self;
  }
  if (other.hasSearchKey) {
    [self setSearchKey:other.searchKey];
  }
  if (other.hasTutorialLesson) {
    [self setTutorialLesson:other.tutorialLesson];
  }
  if (other.hasClientVersion) {
    [self setClientVersion:other.clientVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgTutorialLobbyCreate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgTutorialLobbyCreate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSearchKey:[input readString]];
        break;
      }
      case 16: {
        [self setTutorialLesson:[input readUInt32]];
        break;
      }
      case 24: {
        [self setClientVersion:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSearchKey {
  return _builderResult.hasSearchKey;
}
- (NSString*) searchKey {
  return _builderResult.searchKey;
}
- (CMsgTutorialLobbyCreate_Builder*) setSearchKey:(NSString*) value {
  _builderResult.hasSearchKey = YES;
  _builderResult.searchKey = value;
  return self;
}
- (CMsgTutorialLobbyCreate_Builder*) clearSearchKey {
  _builderResult.hasSearchKey = NO;
  _builderResult.searchKey = @"";
  return self;
}
- (BOOL) hasTutorialLesson {
  return _builderResult.hasTutorialLesson;
}
- (uint32_t) tutorialLesson {
  return _builderResult.tutorialLesson;
}
- (CMsgTutorialLobbyCreate_Builder*) setTutorialLesson:(uint32_t) value {
  _builderResult.hasTutorialLesson = YES;
  _builderResult.tutorialLesson = value;
  return self;
}
- (CMsgTutorialLobbyCreate_Builder*) clearTutorialLesson {
  _builderResult.hasTutorialLesson = NO;
  _builderResult.tutorialLesson = 0;
  return self;
}
- (BOOL) hasClientVersion {
  return _builderResult.hasClientVersion;
}
- (uint32_t) clientVersion {
  return _builderResult.clientVersion;
}
- (CMsgTutorialLobbyCreate_Builder*) setClientVersion:(uint32_t) value {
  _builderResult.hasClientVersion = YES;
  _builderResult.clientVersion = value;
  return self;
}
- (CMsgTutorialLobbyCreate_Builder*) clearClientVersion {
  _builderResult.hasClientVersion = NO;
  _builderResult.clientVersion = 0;
  return self;
}
@end

@interface CMsgInitialQuestionnaireResponse ()
@property uint32_t initialSkill;
@end

@implementation CMsgInitialQuestionnaireResponse

- (BOOL) hasInitialSkill {
  return !!hasInitialSkill_;
}
- (void) setHasInitialSkill:(BOOL) value_ {
  hasInitialSkill_ = !!value_;
}
@synthesize initialSkill;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.initialSkill = 0;
  }
  return self;
}
static CMsgInitialQuestionnaireResponse* defaultCMsgInitialQuestionnaireResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgInitialQuestionnaireResponse class]) {
    defaultCMsgInitialQuestionnaireResponseInstance = [[CMsgInitialQuestionnaireResponse alloc] init];
  }
}
+ (CMsgInitialQuestionnaireResponse*) defaultInstance {
  return defaultCMsgInitialQuestionnaireResponseInstance;
}
- (CMsgInitialQuestionnaireResponse*) defaultInstance {
  return defaultCMsgInitialQuestionnaireResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInitialSkill) {
    [output writeUInt32:1 value:self.initialSkill];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInitialSkill) {
    size_ += computeUInt32Size(1, self.initialSkill);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgInitialQuestionnaireResponse*) parseFromData:(NSData*) data {
  return (CMsgInitialQuestionnaireResponse*)[[[CMsgInitialQuestionnaireResponse builder] mergeFromData:data] build];
}
+ (CMsgInitialQuestionnaireResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgInitialQuestionnaireResponse*)[[[CMsgInitialQuestionnaireResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgInitialQuestionnaireResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgInitialQuestionnaireResponse*)[[[CMsgInitialQuestionnaireResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgInitialQuestionnaireResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgInitialQuestionnaireResponse*)[[[CMsgInitialQuestionnaireResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgInitialQuestionnaireResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgInitialQuestionnaireResponse*)[[[CMsgInitialQuestionnaireResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgInitialQuestionnaireResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgInitialQuestionnaireResponse*)[[[CMsgInitialQuestionnaireResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgInitialQuestionnaireResponse_Builder*) builder {
  return [[[CMsgInitialQuestionnaireResponse_Builder alloc] init] autorelease];
}
+ (CMsgInitialQuestionnaireResponse_Builder*) builderWithPrototype:(CMsgInitialQuestionnaireResponse*) prototype {
  return [[CMsgInitialQuestionnaireResponse builder] mergeFrom:prototype];
}
- (CMsgInitialQuestionnaireResponse_Builder*) builder {
  return [CMsgInitialQuestionnaireResponse builder];
}
- (CMsgInitialQuestionnaireResponse_Builder*) toBuilder {
  return [CMsgInitialQuestionnaireResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInitialSkill) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initialSkill", [NSNumber numberWithInt:self.initialSkill]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgInitialQuestionnaireResponse class]]) {
    return NO;
  }
  CMsgInitialQuestionnaireResponse *otherMessage = other;
  return
      self.hasInitialSkill == otherMessage.hasInitialSkill &&
      (!self.hasInitialSkill || self.initialSkill == otherMessage.initialSkill) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasInitialSkill) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.initialSkill] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgInitialQuestionnaireResponse_Builder()
@property (retain) CMsgInitialQuestionnaireResponse* _builderResult;
@end

@implementation CMsgInitialQuestionnaireResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgInitialQuestionnaireResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgInitialQuestionnaireResponse_Builder*) clear {
  _builderResult = [[[CMsgInitialQuestionnaireResponse alloc] init] autorelease];
  return self;
}
- (CMsgInitialQuestionnaireResponse_Builder*) clone {
  return [CMsgInitialQuestionnaireResponse builderWithPrototype:_builderResult];
}
- (CMsgInitialQuestionnaireResponse*) defaultInstance {
  return [CMsgInitialQuestionnaireResponse defaultInstance];
}
- (CMsgInitialQuestionnaireResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgInitialQuestionnaireResponse*) buildPartial {
  CMsgInitialQuestionnaireResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgInitialQuestionnaireResponse_Builder*) mergeFrom:(CMsgInitialQuestionnaireResponse*) other {
  if (other == [CMsgInitialQuestionnaireResponse defaultInstance]) {
    return self;
  }
  if (other.hasInitialSkill) {
    [self setInitialSkill:other.initialSkill];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgInitialQuestionnaireResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgInitialQuestionnaireResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInitialSkill:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasInitialSkill {
  return _builderResult.hasInitialSkill;
}
- (uint32_t) initialSkill {
  return _builderResult.initialSkill;
}
- (CMsgInitialQuestionnaireResponse_Builder*) setInitialSkill:(uint32_t) value {
  _builderResult.hasInitialSkill = YES;
  _builderResult.initialSkill = value;
  return self;
}
- (CMsgInitialQuestionnaireResponse_Builder*) clearInitialSkill {
  _builderResult.hasInitialSkill = NO;
  _builderResult.initialSkill = 0;
  return self;
}
@end

@interface CMsgInterGCSurgeTest ()
@end

@implementation CMsgInterGCSurgeTest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgInterGCSurgeTest* defaultCMsgInterGCSurgeTestInstance = nil;
+ (void) initialize {
  if (self == [CMsgInterGCSurgeTest class]) {
    defaultCMsgInterGCSurgeTestInstance = [[CMsgInterGCSurgeTest alloc] init];
  }
}
+ (CMsgInterGCSurgeTest*) defaultInstance {
  return defaultCMsgInterGCSurgeTestInstance;
}
- (CMsgInterGCSurgeTest*) defaultInstance {
  return defaultCMsgInterGCSurgeTestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgInterGCSurgeTest*) parseFromData:(NSData*) data {
  return (CMsgInterGCSurgeTest*)[[[CMsgInterGCSurgeTest builder] mergeFromData:data] build];
}
+ (CMsgInterGCSurgeTest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgInterGCSurgeTest*)[[[CMsgInterGCSurgeTest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgInterGCSurgeTest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgInterGCSurgeTest*)[[[CMsgInterGCSurgeTest builder] mergeFromInputStream:input] build];
}
+ (CMsgInterGCSurgeTest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgInterGCSurgeTest*)[[[CMsgInterGCSurgeTest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgInterGCSurgeTest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgInterGCSurgeTest*)[[[CMsgInterGCSurgeTest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgInterGCSurgeTest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgInterGCSurgeTest*)[[[CMsgInterGCSurgeTest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgInterGCSurgeTest_Builder*) builder {
  return [[[CMsgInterGCSurgeTest_Builder alloc] init] autorelease];
}
+ (CMsgInterGCSurgeTest_Builder*) builderWithPrototype:(CMsgInterGCSurgeTest*) prototype {
  return [[CMsgInterGCSurgeTest builder] mergeFrom:prototype];
}
- (CMsgInterGCSurgeTest_Builder*) builder {
  return [CMsgInterGCSurgeTest builder];
}
- (CMsgInterGCSurgeTest_Builder*) toBuilder {
  return [CMsgInterGCSurgeTest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgInterGCSurgeTest class]]) {
    return NO;
  }
  CMsgInterGCSurgeTest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgInterGCSurgeTest_Builder()
@property (retain) CMsgInterGCSurgeTest* _builderResult;
@end

@implementation CMsgInterGCSurgeTest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgInterGCSurgeTest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgInterGCSurgeTest_Builder*) clear {
  _builderResult = [[[CMsgInterGCSurgeTest alloc] init] autorelease];
  return self;
}
- (CMsgInterGCSurgeTest_Builder*) clone {
  return [CMsgInterGCSurgeTest builderWithPrototype:_builderResult];
}
- (CMsgInterGCSurgeTest*) defaultInstance {
  return [CMsgInterGCSurgeTest defaultInstance];
}
- (CMsgInterGCSurgeTest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgInterGCSurgeTest*) buildPartial {
  CMsgInterGCSurgeTest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgInterGCSurgeTest_Builder*) mergeFrom:(CMsgInterGCSurgeTest*) other {
  if (other == [CMsgInterGCSurgeTest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgInterGCSurgeTest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgInterGCSurgeTest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgInterGCProfile ()
@property BOOL start;
@end

@implementation CMsgInterGCProfile

- (BOOL) hasStart {
  return !!hasStart_;
}
- (void) setHasStart:(BOOL) value_ {
  hasStart_ = !!value_;
}
- (BOOL) start {
  return !!start_;
}
- (void) setStart:(BOOL) value_ {
  start_ = !!value_;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.start = NO;
  }
  return self;
}
static CMsgInterGCProfile* defaultCMsgInterGCProfileInstance = nil;
+ (void) initialize {
  if (self == [CMsgInterGCProfile class]) {
    defaultCMsgInterGCProfileInstance = [[CMsgInterGCProfile alloc] init];
  }
}
+ (CMsgInterGCProfile*) defaultInstance {
  return defaultCMsgInterGCProfileInstance;
}
- (CMsgInterGCProfile*) defaultInstance {
  return defaultCMsgInterGCProfileInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStart) {
    [output writeBool:1 value:self.start];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStart) {
    size_ += computeBoolSize(1, self.start);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgInterGCProfile*) parseFromData:(NSData*) data {
  return (CMsgInterGCProfile*)[[[CMsgInterGCProfile builder] mergeFromData:data] build];
}
+ (CMsgInterGCProfile*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgInterGCProfile*)[[[CMsgInterGCProfile builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgInterGCProfile*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgInterGCProfile*)[[[CMsgInterGCProfile builder] mergeFromInputStream:input] build];
}
+ (CMsgInterGCProfile*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgInterGCProfile*)[[[CMsgInterGCProfile builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgInterGCProfile*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgInterGCProfile*)[[[CMsgInterGCProfile builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgInterGCProfile*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgInterGCProfile*)[[[CMsgInterGCProfile builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgInterGCProfile_Builder*) builder {
  return [[[CMsgInterGCProfile_Builder alloc] init] autorelease];
}
+ (CMsgInterGCProfile_Builder*) builderWithPrototype:(CMsgInterGCProfile*) prototype {
  return [[CMsgInterGCProfile builder] mergeFrom:prototype];
}
- (CMsgInterGCProfile_Builder*) builder {
  return [CMsgInterGCProfile builder];
}
- (CMsgInterGCProfile_Builder*) toBuilder {
  return [CMsgInterGCProfile builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"start", [NSNumber numberWithBool:self.start]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgInterGCProfile class]]) {
    return NO;
  }
  CMsgInterGCProfile *otherMessage = other;
  return
      self.hasStart == otherMessage.hasStart &&
      (!self.hasStart || self.start == otherMessage.start) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasStart) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.start] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgInterGCProfile_Builder()
@property (retain) CMsgInterGCProfile* _builderResult;
@end

@implementation CMsgInterGCProfile_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgInterGCProfile alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgInterGCProfile_Builder*) clear {
  _builderResult = [[[CMsgInterGCProfile alloc] init] autorelease];
  return self;
}
- (CMsgInterGCProfile_Builder*) clone {
  return [CMsgInterGCProfile builderWithPrototype:_builderResult];
}
- (CMsgInterGCProfile*) defaultInstance {
  return [CMsgInterGCProfile defaultInstance];
}
- (CMsgInterGCProfile*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgInterGCProfile*) buildPartial {
  CMsgInterGCProfile* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgInterGCProfile_Builder*) mergeFrom:(CMsgInterGCProfile*) other {
  if (other == [CMsgInterGCProfile defaultInstance]) {
    return self;
  }
  if (other.hasStart) {
    [self setStart:other.start];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgInterGCProfile_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgInterGCProfile_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStart:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasStart {
  return _builderResult.hasStart;
}
- (BOOL) start {
  return _builderResult.start;
}
- (CMsgInterGCProfile_Builder*) setStart:(BOOL) value {
  _builderResult.hasStart = YES;
  _builderResult.start = value;
  return self;
}
- (CMsgInterGCProfile_Builder*) clearStart {
  _builderResult.hasStart = NO;
  _builderResult.start = NO;
  return self;
}
@end

@interface CMsgDOTATournament ()
@property (retain) PBAppendableArray * teamsArray;
@property (retain) PBAppendableArray * gamesArray;
@property uint64_t gid;
@end

@implementation CMsgDOTATournament

@synthesize teamsArray;
@dynamic teams;
@synthesize gamesArray;
@dynamic games;
- (BOOL) hasGid {
  return !!hasGid_;
}
- (void) setHasGid:(BOOL) value_ {
  hasGid_ = !!value_;
}
@synthesize gid;
- (void) dealloc {
  self.teamsArray = nil;
  self.gamesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gid = 0L;
  }
  return self;
}
static CMsgDOTATournament* defaultCMsgDOTATournamentInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATournament class]) {
    defaultCMsgDOTATournamentInstance = [[CMsgDOTATournament alloc] init];
  }
}
+ (CMsgDOTATournament*) defaultInstance {
  return defaultCMsgDOTATournamentInstance;
}
- (CMsgDOTATournament*) defaultInstance {
  return defaultCMsgDOTATournamentInstance;
}
- (PBArray *)teams {
  return teamsArray;
}
- (CMsgDOTATournament_Team*)teamsAtIndex:(NSUInteger)index {
  return [teamsArray objectAtIndex:index];
}
- (PBArray *)games {
  return gamesArray;
}
- (CMsgDOTATournament_Game*)gamesAtIndex:(NSUInteger)index {
  return [gamesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgDOTATournament_Team *element in self.teamsArray) {
    [output writeMessage:1 value:element];
  }
  for (CMsgDOTATournament_Game *element in self.gamesArray) {
    [output writeMessage:2 value:element];
  }
  if (self.hasGid) {
    [output writeUInt64:3 value:self.gid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgDOTATournament_Team *element in self.teamsArray) {
    size_ += computeMessageSize(1, element);
  }
  for (CMsgDOTATournament_Game *element in self.gamesArray) {
    size_ += computeMessageSize(2, element);
  }
  if (self.hasGid) {
    size_ += computeUInt64Size(3, self.gid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATournament*) parseFromData:(NSData*) data {
  return (CMsgDOTATournament*)[[[CMsgDOTATournament builder] mergeFromData:data] build];
}
+ (CMsgDOTATournament*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament*)[[[CMsgDOTATournament builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATournament*)[[[CMsgDOTATournament builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATournament*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament*)[[[CMsgDOTATournament builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATournament*)[[[CMsgDOTATournament builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATournament*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament*)[[[CMsgDOTATournament builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Builder*) builder {
  return [[[CMsgDOTATournament_Builder alloc] init] autorelease];
}
+ (CMsgDOTATournament_Builder*) builderWithPrototype:(CMsgDOTATournament*) prototype {
  return [[CMsgDOTATournament builder] mergeFrom:prototype];
}
- (CMsgDOTATournament_Builder*) builder {
  return [CMsgDOTATournament builder];
}
- (CMsgDOTATournament_Builder*) toBuilder {
  return [CMsgDOTATournament builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgDOTATournament_Team* element in self.teamsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"teams"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CMsgDOTATournament_Game* element in self.gamesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"games"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gid", [NSNumber numberWithLongLong:self.gid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATournament class]]) {
    return NO;
  }
  CMsgDOTATournament *otherMessage = other;
  return
      [self.teamsArray isEqualToArray:otherMessage.teamsArray] &&
      [self.gamesArray isEqualToArray:otherMessage.gamesArray] &&
      self.hasGid == otherMessage.hasGid &&
      (!self.hasGid || self.gid == otherMessage.gid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgDOTATournament_Team* element in self.teamsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CMsgDOTATournament_Game* element in self.gamesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasGid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.gid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATournament_Team ()
@property uint32_t teamId;
@property (retain) NSString* teamName;
@property (retain) NSString* teamAbbrev;
@property (retain) PBAppendableArray * playersArray;
@property uint32_t seed;
@property uint64_t teamLogo;
@end

@implementation CMsgDOTATournament_Team

- (BOOL) hasTeamId {
  return !!hasTeamId_;
}
- (void) setHasTeamId:(BOOL) value_ {
  hasTeamId_ = !!value_;
}
@synthesize teamId;
- (BOOL) hasTeamName {
  return !!hasTeamName_;
}
- (void) setHasTeamName:(BOOL) value_ {
  hasTeamName_ = !!value_;
}
@synthesize teamName;
- (BOOL) hasTeamAbbrev {
  return !!hasTeamAbbrev_;
}
- (void) setHasTeamAbbrev:(BOOL) value_ {
  hasTeamAbbrev_ = !!value_;
}
@synthesize teamAbbrev;
@synthesize playersArray;
@dynamic players;
- (BOOL) hasSeed {
  return !!hasSeed_;
}
- (void) setHasSeed:(BOOL) value_ {
  hasSeed_ = !!value_;
}
@synthesize seed;
- (BOOL) hasTeamLogo {
  return !!hasTeamLogo_;
}
- (void) setHasTeamLogo:(BOOL) value_ {
  hasTeamLogo_ = !!value_;
}
@synthesize teamLogo;
- (void) dealloc {
  self.teamName = nil;
  self.teamAbbrev = nil;
  self.playersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.teamId = 0;
    self.teamName = @"";
    self.teamAbbrev = @"";
    self.seed = 0;
    self.teamLogo = 0L;
  }
  return self;
}
static CMsgDOTATournament_Team* defaultCMsgDOTATournament_TeamInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATournament_Team class]) {
    defaultCMsgDOTATournament_TeamInstance = [[CMsgDOTATournament_Team alloc] init];
  }
}
+ (CMsgDOTATournament_Team*) defaultInstance {
  return defaultCMsgDOTATournament_TeamInstance;
}
- (CMsgDOTATournament_Team*) defaultInstance {
  return defaultCMsgDOTATournament_TeamInstance;
}
- (PBArray *)players {
  return playersArray;
}
- (uint32_t)playersAtIndex:(NSUInteger)index {
  return [playersArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTeamId) {
    [output writeUInt32:1 value:self.teamId];
  }
  if (self.hasTeamName) {
    [output writeString:2 value:self.teamName];
  }
  if (self.hasTeamAbbrev) {
    [output writeString:3 value:self.teamAbbrev];
  }
  const NSUInteger playersArrayCount = self.playersArray.count;
  if (playersArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.playersArray.data;
    for (NSUInteger i = 0; i < playersArrayCount; ++i) {
      [output writeUInt32:4 value:values[i]];
    }
  }
  if (self.hasSeed) {
    [output writeUInt32:5 value:self.seed];
  }
  if (self.hasTeamLogo) {
    [output writeUInt64:6 value:self.teamLogo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTeamId) {
    size_ += computeUInt32Size(1, self.teamId);
  }
  if (self.hasTeamName) {
    size_ += computeStringSize(2, self.teamName);
  }
  if (self.hasTeamAbbrev) {
    size_ += computeStringSize(3, self.teamAbbrev);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.playersArray.count;
    const uint32_t *values = (const uint32_t *)self.playersArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasSeed) {
    size_ += computeUInt32Size(5, self.seed);
  }
  if (self.hasTeamLogo) {
    size_ += computeUInt64Size(6, self.teamLogo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATournament_Team*) parseFromData:(NSData*) data {
  return (CMsgDOTATournament_Team*)[[[CMsgDOTATournament_Team builder] mergeFromData:data] build];
}
+ (CMsgDOTATournament_Team*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament_Team*)[[[CMsgDOTATournament_Team builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Team*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATournament_Team*)[[[CMsgDOTATournament_Team builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATournament_Team*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament_Team*)[[[CMsgDOTATournament_Team builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Team*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATournament_Team*)[[[CMsgDOTATournament_Team builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATournament_Team*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament_Team*)[[[CMsgDOTATournament_Team builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Team_Builder*) builder {
  return [[[CMsgDOTATournament_Team_Builder alloc] init] autorelease];
}
+ (CMsgDOTATournament_Team_Builder*) builderWithPrototype:(CMsgDOTATournament_Team*) prototype {
  return [[CMsgDOTATournament_Team builder] mergeFrom:prototype];
}
- (CMsgDOTATournament_Team_Builder*) builder {
  return [CMsgDOTATournament_Team builder];
}
- (CMsgDOTATournament_Team_Builder*) toBuilder {
  return [CMsgDOTATournament_Team builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamId", [NSNumber numberWithInt:self.teamId]];
  }
  if (self.hasTeamName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamName", self.teamName];
  }
  if (self.hasTeamAbbrev) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamAbbrev", self.teamAbbrev];
  }
  for (NSNumber* value in self.playersArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"players", value];
  }
  if (self.hasSeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seed", [NSNumber numberWithInt:self.seed]];
  }
  if (self.hasTeamLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamLogo", [NSNumber numberWithLongLong:self.teamLogo]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATournament_Team class]]) {
    return NO;
  }
  CMsgDOTATournament_Team *otherMessage = other;
  return
      self.hasTeamId == otherMessage.hasTeamId &&
      (!self.hasTeamId || self.teamId == otherMessage.teamId) &&
      self.hasTeamName == otherMessage.hasTeamName &&
      (!self.hasTeamName || [self.teamName isEqual:otherMessage.teamName]) &&
      self.hasTeamAbbrev == otherMessage.hasTeamAbbrev &&
      (!self.hasTeamAbbrev || [self.teamAbbrev isEqual:otherMessage.teamAbbrev]) &&
      [self.playersArray isEqualToArray:otherMessage.playersArray] &&
      self.hasSeed == otherMessage.hasSeed &&
      (!self.hasSeed || self.seed == otherMessage.seed) &&
      self.hasTeamLogo == otherMessage.hasTeamLogo &&
      (!self.hasTeamLogo || self.teamLogo == otherMessage.teamLogo) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamId] hash];
  }
  if (self.hasTeamName) {
    hashCode = hashCode * 31 + [self.teamName hash];
  }
  if (self.hasTeamAbbrev) {
    hashCode = hashCode * 31 + [self.teamAbbrev hash];
  }
  for (NSNumber* value in self.playersArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasSeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.seed] hash];
  }
  if (self.hasTeamLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.teamLogo] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATournament_Team_Builder()
@property (retain) CMsgDOTATournament_Team* _builderResult;
@end

@implementation CMsgDOTATournament_Team_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATournament_Team alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATournament_Team_Builder*) clear {
  _builderResult = [[[CMsgDOTATournament_Team alloc] init] autorelease];
  return self;
}
- (CMsgDOTATournament_Team_Builder*) clone {
  return [CMsgDOTATournament_Team builderWithPrototype:_builderResult];
}
- (CMsgDOTATournament_Team*) defaultInstance {
  return [CMsgDOTATournament_Team defaultInstance];
}
- (CMsgDOTATournament_Team*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATournament_Team*) buildPartial {
  CMsgDOTATournament_Team* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATournament_Team_Builder*) mergeFrom:(CMsgDOTATournament_Team*) other {
  if (other == [CMsgDOTATournament_Team defaultInstance]) {
    return self;
  }
  if (other.hasTeamId) {
    [self setTeamId:other.teamId];
  }
  if (other.hasTeamName) {
    [self setTeamName:other.teamName];
  }
  if (other.hasTeamAbbrev) {
    [self setTeamAbbrev:other.teamAbbrev];
  }
  if (other.playersArray.count > 0) {
    if (_builderResult.playersArray == nil) {
      _builderResult.playersArray = [[other.playersArray copyWithZone:[other.playersArray zone]] autorelease];
    } else {
      [_builderResult.playersArray appendArray:other.playersArray];
    }
  }
  if (other.hasSeed) {
    [self setSeed:other.seed];
  }
  if (other.hasTeamLogo) {
    [self setTeamLogo:other.teamLogo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATournament_Team_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATournament_Team_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTeamId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setTeamName:[input readString]];
        break;
      }
      case 26: {
        [self setTeamAbbrev:[input readString]];
        break;
      }
      case 32: {
        [self addPlayers:[input readUInt32]];
        break;
      }
      case 40: {
        [self setSeed:[input readUInt32]];
        break;
      }
      case 48: {
        [self setTeamLogo:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasTeamId {
  return _builderResult.hasTeamId;
}
- (uint32_t) teamId {
  return _builderResult.teamId;
}
- (CMsgDOTATournament_Team_Builder*) setTeamId:(uint32_t) value {
  _builderResult.hasTeamId = YES;
  _builderResult.teamId = value;
  return self;
}
- (CMsgDOTATournament_Team_Builder*) clearTeamId {
  _builderResult.hasTeamId = NO;
  _builderResult.teamId = 0;
  return self;
}
- (BOOL) hasTeamName {
  return _builderResult.hasTeamName;
}
- (NSString*) teamName {
  return _builderResult.teamName;
}
- (CMsgDOTATournament_Team_Builder*) setTeamName:(NSString*) value {
  _builderResult.hasTeamName = YES;
  _builderResult.teamName = value;
  return self;
}
- (CMsgDOTATournament_Team_Builder*) clearTeamName {
  _builderResult.hasTeamName = NO;
  _builderResult.teamName = @"";
  return self;
}
- (BOOL) hasTeamAbbrev {
  return _builderResult.hasTeamAbbrev;
}
- (NSString*) teamAbbrev {
  return _builderResult.teamAbbrev;
}
- (CMsgDOTATournament_Team_Builder*) setTeamAbbrev:(NSString*) value {
  _builderResult.hasTeamAbbrev = YES;
  _builderResult.teamAbbrev = value;
  return self;
}
- (CMsgDOTATournament_Team_Builder*) clearTeamAbbrev {
  _builderResult.hasTeamAbbrev = NO;
  _builderResult.teamAbbrev = @"";
  return self;
}
- (PBAppendableArray *)players {
  return _builderResult.playersArray;
}
- (uint32_t)playersAtIndex:(NSUInteger)index {
  return [_builderResult playersAtIndex:index];
}
- (CMsgDOTATournament_Team_Builder *)addPlayers:(uint32_t)value {
  if (_builderResult.playersArray == nil) {
    _builderResult.playersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.playersArray addUint32:value];
  return self;
}
- (CMsgDOTATournament_Team_Builder *)setPlayersArray:(NSArray *)array {
  _builderResult.playersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTATournament_Team_Builder *)setPlayersValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.playersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTATournament_Team_Builder *)clearPlayers {
  _builderResult.playersArray = nil;
  return self;
}
- (BOOL) hasSeed {
  return _builderResult.hasSeed;
}
- (uint32_t) seed {
  return _builderResult.seed;
}
- (CMsgDOTATournament_Team_Builder*) setSeed:(uint32_t) value {
  _builderResult.hasSeed = YES;
  _builderResult.seed = value;
  return self;
}
- (CMsgDOTATournament_Team_Builder*) clearSeed {
  _builderResult.hasSeed = NO;
  _builderResult.seed = 0;
  return self;
}
- (BOOL) hasTeamLogo {
  return _builderResult.hasTeamLogo;
}
- (uint64_t) teamLogo {
  return _builderResult.teamLogo;
}
- (CMsgDOTATournament_Team_Builder*) setTeamLogo:(uint64_t) value {
  _builderResult.hasTeamLogo = YES;
  _builderResult.teamLogo = value;
  return self;
}
- (CMsgDOTATournament_Team_Builder*) clearTeamLogo {
  _builderResult.hasTeamLogo = NO;
  _builderResult.teamLogo = 0L;
  return self;
}
@end

@interface CMsgDOTATournament_Game ()
@property uint32_t gameId;
@property uint32_t goodTeamId;
@property uint32_t badTeamId;
@property uint64_t lobbyId;
@property uint32_t matchId;
@property (retain) NSString* gameName;
@property BOOL liveStream;
@property (retain) NSString* message;
@property BOOL resultsFinal;
@property (retain) PBAppendableArray * replayUrlsArray;
@end

@implementation CMsgDOTATournament_Game

- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value_ {
  hasGameId_ = !!value_;
}
@synthesize gameId;
- (BOOL) hasGoodTeamId {
  return !!hasGoodTeamId_;
}
- (void) setHasGoodTeamId:(BOOL) value_ {
  hasGoodTeamId_ = !!value_;
}
@synthesize goodTeamId;
- (BOOL) hasBadTeamId {
  return !!hasBadTeamId_;
}
- (void) setHasBadTeamId:(BOOL) value_ {
  hasBadTeamId_ = !!value_;
}
@synthesize badTeamId;
- (BOOL) hasLobbyId {
  return !!hasLobbyId_;
}
- (void) setHasLobbyId:(BOOL) value_ {
  hasLobbyId_ = !!value_;
}
@synthesize lobbyId;
- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (BOOL) hasGameName {
  return !!hasGameName_;
}
- (void) setHasGameName:(BOOL) value_ {
  hasGameName_ = !!value_;
}
@synthesize gameName;
- (BOOL) hasLiveStream {
  return !!hasLiveStream_;
}
- (void) setHasLiveStream:(BOOL) value_ {
  hasLiveStream_ = !!value_;
}
- (BOOL) liveStream {
  return !!liveStream_;
}
- (void) setLiveStream:(BOOL) value_ {
  liveStream_ = !!value_;
}
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value_ {
  hasMessage_ = !!value_;
}
@synthesize message;
- (BOOL) hasResultsFinal {
  return !!hasResultsFinal_;
}
- (void) setHasResultsFinal:(BOOL) value_ {
  hasResultsFinal_ = !!value_;
}
- (BOOL) resultsFinal {
  return !!resultsFinal_;
}
- (void) setResultsFinal:(BOOL) value_ {
  resultsFinal_ = !!value_;
}
@synthesize replayUrlsArray;
@dynamic replayUrls;
- (void) dealloc {
  self.gameName = nil;
  self.message = nil;
  self.replayUrlsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameId = 0;
    self.goodTeamId = 0;
    self.badTeamId = 0;
    self.lobbyId = 0L;
    self.matchId = 0;
    self.gameName = @"";
    self.liveStream = NO;
    self.message = @"";
    self.resultsFinal = NO;
  }
  return self;
}
static CMsgDOTATournament_Game* defaultCMsgDOTATournament_GameInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATournament_Game class]) {
    defaultCMsgDOTATournament_GameInstance = [[CMsgDOTATournament_Game alloc] init];
  }
}
+ (CMsgDOTATournament_Game*) defaultInstance {
  return defaultCMsgDOTATournament_GameInstance;
}
- (CMsgDOTATournament_Game*) defaultInstance {
  return defaultCMsgDOTATournament_GameInstance;
}
- (PBArray *)replayUrls {
  return replayUrlsArray;
}
- (CMsgDOTATournament_Game_ReplayURL*)replayUrlsAtIndex:(NSUInteger)index {
  return [replayUrlsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameId) {
    [output writeUInt32:1 value:self.gameId];
  }
  if (self.hasGoodTeamId) {
    [output writeUInt32:2 value:self.goodTeamId];
  }
  if (self.hasBadTeamId) {
    [output writeUInt32:3 value:self.badTeamId];
  }
  if (self.hasLobbyId) {
    [output writeFixed64:4 value:self.lobbyId];
  }
  if (self.hasMatchId) {
    [output writeUInt32:5 value:self.matchId];
  }
  if (self.hasGameName) {
    [output writeString:6 value:self.gameName];
  }
  if (self.hasLiveStream) {
    [output writeBool:7 value:self.liveStream];
  }
  if (self.hasMessage) {
    [output writeString:9 value:self.message];
  }
  if (self.hasResultsFinal) {
    [output writeBool:10 value:self.resultsFinal];
  }
  for (CMsgDOTATournament_Game_ReplayURL *element in self.replayUrlsArray) {
    [output writeMessage:11 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameId) {
    size_ += computeUInt32Size(1, self.gameId);
  }
  if (self.hasGoodTeamId) {
    size_ += computeUInt32Size(2, self.goodTeamId);
  }
  if (self.hasBadTeamId) {
    size_ += computeUInt32Size(3, self.badTeamId);
  }
  if (self.hasLobbyId) {
    size_ += computeFixed64Size(4, self.lobbyId);
  }
  if (self.hasMatchId) {
    size_ += computeUInt32Size(5, self.matchId);
  }
  if (self.hasGameName) {
    size_ += computeStringSize(6, self.gameName);
  }
  if (self.hasLiveStream) {
    size_ += computeBoolSize(7, self.liveStream);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(9, self.message);
  }
  if (self.hasResultsFinal) {
    size_ += computeBoolSize(10, self.resultsFinal);
  }
  for (CMsgDOTATournament_Game_ReplayURL *element in self.replayUrlsArray) {
    size_ += computeMessageSize(11, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATournament_Game*) parseFromData:(NSData*) data {
  return (CMsgDOTATournament_Game*)[[[CMsgDOTATournament_Game builder] mergeFromData:data] build];
}
+ (CMsgDOTATournament_Game*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament_Game*)[[[CMsgDOTATournament_Game builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Game*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATournament_Game*)[[[CMsgDOTATournament_Game builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATournament_Game*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament_Game*)[[[CMsgDOTATournament_Game builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Game*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATournament_Game*)[[[CMsgDOTATournament_Game builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATournament_Game*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament_Game*)[[[CMsgDOTATournament_Game builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Game_Builder*) builder {
  return [[[CMsgDOTATournament_Game_Builder alloc] init] autorelease];
}
+ (CMsgDOTATournament_Game_Builder*) builderWithPrototype:(CMsgDOTATournament_Game*) prototype {
  return [[CMsgDOTATournament_Game builder] mergeFrom:prototype];
}
- (CMsgDOTATournament_Game_Builder*) builder {
  return [CMsgDOTATournament_Game builder];
}
- (CMsgDOTATournament_Game_Builder*) toBuilder {
  return [CMsgDOTATournament_Game builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", [NSNumber numberWithInt:self.gameId]];
  }
  if (self.hasGoodTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goodTeamId", [NSNumber numberWithInt:self.goodTeamId]];
  }
  if (self.hasBadTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"badTeamId", [NSNumber numberWithInt:self.badTeamId]];
  }
  if (self.hasLobbyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyId", [NSNumber numberWithLongLong:self.lobbyId]];
  }
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  if (self.hasGameName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameName", self.gameName];
  }
  if (self.hasLiveStream) {
    [output appendFormat:@"%@%@: %@\n", indent, @"liveStream", [NSNumber numberWithBool:self.liveStream]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasResultsFinal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultsFinal", [NSNumber numberWithBool:self.resultsFinal]];
  }
  for (CMsgDOTATournament_Game_ReplayURL* element in self.replayUrlsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"replayUrls"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATournament_Game class]]) {
    return NO;
  }
  CMsgDOTATournament_Game *otherMessage = other;
  return
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || self.gameId == otherMessage.gameId) &&
      self.hasGoodTeamId == otherMessage.hasGoodTeamId &&
      (!self.hasGoodTeamId || self.goodTeamId == otherMessage.goodTeamId) &&
      self.hasBadTeamId == otherMessage.hasBadTeamId &&
      (!self.hasBadTeamId || self.badTeamId == otherMessage.badTeamId) &&
      self.hasLobbyId == otherMessage.hasLobbyId &&
      (!self.hasLobbyId || self.lobbyId == otherMessage.lobbyId) &&
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      self.hasGameName == otherMessage.hasGameName &&
      (!self.hasGameName || [self.gameName isEqual:otherMessage.gameName]) &&
      self.hasLiveStream == otherMessage.hasLiveStream &&
      (!self.hasLiveStream || self.liveStream == otherMessage.liveStream) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasResultsFinal == otherMessage.hasResultsFinal &&
      (!self.hasResultsFinal || self.resultsFinal == otherMessage.resultsFinal) &&
      [self.replayUrlsArray isEqualToArray:otherMessage.replayUrlsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameId] hash];
  }
  if (self.hasGoodTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.goodTeamId] hash];
  }
  if (self.hasBadTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.badTeamId] hash];
  }
  if (self.hasLobbyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lobbyId] hash];
  }
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  if (self.hasGameName) {
    hashCode = hashCode * 31 + [self.gameName hash];
  }
  if (self.hasLiveStream) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.liveStream] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasResultsFinal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.resultsFinal] hash];
  }
  for (CMsgDOTATournament_Game_ReplayURL* element in self.replayUrlsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATournament_Game_ReplayURL ()
@property uint32_t providerId;
@property uint32_t streamId;
@property (retain) NSString* url;
@property (retain) NSString* description;
@end

@implementation CMsgDOTATournament_Game_ReplayURL

- (BOOL) hasProviderId {
  return !!hasProviderId_;
}
- (void) setHasProviderId:(BOOL) value_ {
  hasProviderId_ = !!value_;
}
@synthesize providerId;
- (BOOL) hasStreamId {
  return !!hasStreamId_;
}
- (void) setHasStreamId:(BOOL) value_ {
  hasStreamId_ = !!value_;
}
@synthesize streamId;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value_ {
  hasDescription_ = !!value_;
}
@synthesize description;
- (void) dealloc {
  self.url = nil;
  self.description = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.providerId = 0;
    self.streamId = 0;
    self.url = @"";
    self.description = @"";
  }
  return self;
}
static CMsgDOTATournament_Game_ReplayURL* defaultCMsgDOTATournament_Game_ReplayURLInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATournament_Game_ReplayURL class]) {
    defaultCMsgDOTATournament_Game_ReplayURLInstance = [[CMsgDOTATournament_Game_ReplayURL alloc] init];
  }
}
+ (CMsgDOTATournament_Game_ReplayURL*) defaultInstance {
  return defaultCMsgDOTATournament_Game_ReplayURLInstance;
}
- (CMsgDOTATournament_Game_ReplayURL*) defaultInstance {
  return defaultCMsgDOTATournament_Game_ReplayURLInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProviderId) {
    [output writeUInt32:1 value:self.providerId];
  }
  if (self.hasStreamId) {
    [output writeUInt32:2 value:self.streamId];
  }
  if (self.hasUrl) {
    [output writeString:3 value:self.url];
  }
  if (self.hasDescription) {
    [output writeString:4 value:self.description];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProviderId) {
    size_ += computeUInt32Size(1, self.providerId);
  }
  if (self.hasStreamId) {
    size_ += computeUInt32Size(2, self.streamId);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(3, self.url);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(4, self.description);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATournament_Game_ReplayURL*) parseFromData:(NSData*) data {
  return (CMsgDOTATournament_Game_ReplayURL*)[[[CMsgDOTATournament_Game_ReplayURL builder] mergeFromData:data] build];
}
+ (CMsgDOTATournament_Game_ReplayURL*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament_Game_ReplayURL*)[[[CMsgDOTATournament_Game_ReplayURL builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Game_ReplayURL*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATournament_Game_ReplayURL*)[[[CMsgDOTATournament_Game_ReplayURL builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATournament_Game_ReplayURL*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament_Game_ReplayURL*)[[[CMsgDOTATournament_Game_ReplayURL builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Game_ReplayURL*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATournament_Game_ReplayURL*)[[[CMsgDOTATournament_Game_ReplayURL builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATournament_Game_ReplayURL*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournament_Game_ReplayURL*)[[[CMsgDOTATournament_Game_ReplayURL builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournament_Game_ReplayURL_Builder*) builder {
  return [[[CMsgDOTATournament_Game_ReplayURL_Builder alloc] init] autorelease];
}
+ (CMsgDOTATournament_Game_ReplayURL_Builder*) builderWithPrototype:(CMsgDOTATournament_Game_ReplayURL*) prototype {
  return [[CMsgDOTATournament_Game_ReplayURL builder] mergeFrom:prototype];
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) builder {
  return [CMsgDOTATournament_Game_ReplayURL builder];
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) toBuilder {
  return [CMsgDOTATournament_Game_ReplayURL builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProviderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"providerId", [NSNumber numberWithInt:self.providerId]];
  }
  if (self.hasStreamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"streamId", [NSNumber numberWithInt:self.streamId]];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATournament_Game_ReplayURL class]]) {
    return NO;
  }
  CMsgDOTATournament_Game_ReplayURL *otherMessage = other;
  return
      self.hasProviderId == otherMessage.hasProviderId &&
      (!self.hasProviderId || self.providerId == otherMessage.providerId) &&
      self.hasStreamId == otherMessage.hasStreamId &&
      (!self.hasStreamId || self.streamId == otherMessage.streamId) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasProviderId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.providerId] hash];
  }
  if (self.hasStreamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.streamId] hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATournament_Game_ReplayURL_Builder()
@property (retain) CMsgDOTATournament_Game_ReplayURL* _builderResult;
@end

@implementation CMsgDOTATournament_Game_ReplayURL_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATournament_Game_ReplayURL alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) clear {
  _builderResult = [[[CMsgDOTATournament_Game_ReplayURL alloc] init] autorelease];
  return self;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) clone {
  return [CMsgDOTATournament_Game_ReplayURL builderWithPrototype:_builderResult];
}
- (CMsgDOTATournament_Game_ReplayURL*) defaultInstance {
  return [CMsgDOTATournament_Game_ReplayURL defaultInstance];
}
- (CMsgDOTATournament_Game_ReplayURL*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATournament_Game_ReplayURL*) buildPartial {
  CMsgDOTATournament_Game_ReplayURL* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) mergeFrom:(CMsgDOTATournament_Game_ReplayURL*) other {
  if (other == [CMsgDOTATournament_Game_ReplayURL defaultInstance]) {
    return self;
  }
  if (other.hasProviderId) {
    [self setProviderId:other.providerId];
  }
  if (other.hasStreamId) {
    [self setStreamId:other.streamId];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setProviderId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setStreamId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setUrl:[input readString]];
        break;
      }
      case 34: {
        [self setDescription:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasProviderId {
  return _builderResult.hasProviderId;
}
- (uint32_t) providerId {
  return _builderResult.providerId;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) setProviderId:(uint32_t) value {
  _builderResult.hasProviderId = YES;
  _builderResult.providerId = value;
  return self;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) clearProviderId {
  _builderResult.hasProviderId = NO;
  _builderResult.providerId = 0;
  return self;
}
- (BOOL) hasStreamId {
  return _builderResult.hasStreamId;
}
- (uint32_t) streamId {
  return _builderResult.streamId;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) setStreamId:(uint32_t) value {
  _builderResult.hasStreamId = YES;
  _builderResult.streamId = value;
  return self;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) clearStreamId {
  _builderResult.hasStreamId = NO;
  _builderResult.streamId = 0;
  return self;
}
- (BOOL) hasUrl {
  return _builderResult.hasUrl;
}
- (NSString*) url {
  return _builderResult.url;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) setUrl:(NSString*) value {
  _builderResult.hasUrl = YES;
  _builderResult.url = value;
  return self;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) clearUrl {
  _builderResult.hasUrl = NO;
  _builderResult.url = @"";
  return self;
}
- (BOOL) hasDescription {
  return _builderResult.hasDescription;
}
- (NSString*) description {
  return _builderResult.description;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) setDescription:(NSString*) value {
  _builderResult.hasDescription = YES;
  _builderResult.description = value;
  return self;
}
- (CMsgDOTATournament_Game_ReplayURL_Builder*) clearDescription {
  _builderResult.hasDescription = NO;
  _builderResult.description = @"";
  return self;
}
@end

@interface CMsgDOTATournament_Game_Builder()
@property (retain) CMsgDOTATournament_Game* _builderResult;
@end

@implementation CMsgDOTATournament_Game_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATournament_Game alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATournament_Game_Builder*) clear {
  _builderResult = [[[CMsgDOTATournament_Game alloc] init] autorelease];
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clone {
  return [CMsgDOTATournament_Game builderWithPrototype:_builderResult];
}
- (CMsgDOTATournament_Game*) defaultInstance {
  return [CMsgDOTATournament_Game defaultInstance];
}
- (CMsgDOTATournament_Game*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATournament_Game*) buildPartial {
  CMsgDOTATournament_Game* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATournament_Game_Builder*) mergeFrom:(CMsgDOTATournament_Game*) other {
  if (other == [CMsgDOTATournament_Game defaultInstance]) {
    return self;
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  if (other.hasGoodTeamId) {
    [self setGoodTeamId:other.goodTeamId];
  }
  if (other.hasBadTeamId) {
    [self setBadTeamId:other.badTeamId];
  }
  if (other.hasLobbyId) {
    [self setLobbyId:other.lobbyId];
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.hasGameName) {
    [self setGameName:other.gameName];
  }
  if (other.hasLiveStream) {
    [self setLiveStream:other.liveStream];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasResultsFinal) {
    [self setResultsFinal:other.resultsFinal];
  }
  if (other.replayUrlsArray.count > 0) {
    if (_builderResult.replayUrlsArray == nil) {
      _builderResult.replayUrlsArray = [[other.replayUrlsArray copyWithZone:[other.replayUrlsArray zone]] autorelease];
    } else {
      [_builderResult.replayUrlsArray appendArray:other.replayUrlsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATournament_Game_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATournament_Game_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGameId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setGoodTeamId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setBadTeamId:[input readUInt32]];
        break;
      }
      case 33: {
        [self setLobbyId:[input readFixed64]];
        break;
      }
      case 40: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 50: {
        [self setGameName:[input readString]];
        break;
      }
      case 56: {
        [self setLiveStream:[input readBool]];
        break;
      }
      case 74: {
        [self setMessage:[input readString]];
        break;
      }
      case 80: {
        [self setResultsFinal:[input readBool]];
        break;
      }
      case 90: {
        CMsgDOTATournament_Game_ReplayURL_Builder* subBuilder = [CMsgDOTATournament_Game_ReplayURL builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReplayUrls:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasGameId {
  return _builderResult.hasGameId;
}
- (uint32_t) gameId {
  return _builderResult.gameId;
}
- (CMsgDOTATournament_Game_Builder*) setGameId:(uint32_t) value {
  _builderResult.hasGameId = YES;
  _builderResult.gameId = value;
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clearGameId {
  _builderResult.hasGameId = NO;
  _builderResult.gameId = 0;
  return self;
}
- (BOOL) hasGoodTeamId {
  return _builderResult.hasGoodTeamId;
}
- (uint32_t) goodTeamId {
  return _builderResult.goodTeamId;
}
- (CMsgDOTATournament_Game_Builder*) setGoodTeamId:(uint32_t) value {
  _builderResult.hasGoodTeamId = YES;
  _builderResult.goodTeamId = value;
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clearGoodTeamId {
  _builderResult.hasGoodTeamId = NO;
  _builderResult.goodTeamId = 0;
  return self;
}
- (BOOL) hasBadTeamId {
  return _builderResult.hasBadTeamId;
}
- (uint32_t) badTeamId {
  return _builderResult.badTeamId;
}
- (CMsgDOTATournament_Game_Builder*) setBadTeamId:(uint32_t) value {
  _builderResult.hasBadTeamId = YES;
  _builderResult.badTeamId = value;
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clearBadTeamId {
  _builderResult.hasBadTeamId = NO;
  _builderResult.badTeamId = 0;
  return self;
}
- (BOOL) hasLobbyId {
  return _builderResult.hasLobbyId;
}
- (uint64_t) lobbyId {
  return _builderResult.lobbyId;
}
- (CMsgDOTATournament_Game_Builder*) setLobbyId:(uint64_t) value {
  _builderResult.hasLobbyId = YES;
  _builderResult.lobbyId = value;
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clearLobbyId {
  _builderResult.hasLobbyId = NO;
  _builderResult.lobbyId = 0L;
  return self;
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgDOTATournament_Game_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (BOOL) hasGameName {
  return _builderResult.hasGameName;
}
- (NSString*) gameName {
  return _builderResult.gameName;
}
- (CMsgDOTATournament_Game_Builder*) setGameName:(NSString*) value {
  _builderResult.hasGameName = YES;
  _builderResult.gameName = value;
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clearGameName {
  _builderResult.hasGameName = NO;
  _builderResult.gameName = @"";
  return self;
}
- (BOOL) hasLiveStream {
  return _builderResult.hasLiveStream;
}
- (BOOL) liveStream {
  return _builderResult.liveStream;
}
- (CMsgDOTATournament_Game_Builder*) setLiveStream:(BOOL) value {
  _builderResult.hasLiveStream = YES;
  _builderResult.liveStream = value;
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clearLiveStream {
  _builderResult.hasLiveStream = NO;
  _builderResult.liveStream = NO;
  return self;
}
- (BOOL) hasMessage {
  return _builderResult.hasMessage;
}
- (NSString*) message {
  return _builderResult.message;
}
- (CMsgDOTATournament_Game_Builder*) setMessage:(NSString*) value {
  _builderResult.hasMessage = YES;
  _builderResult.message = value;
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clearMessage {
  _builderResult.hasMessage = NO;
  _builderResult.message = @"";
  return self;
}
- (BOOL) hasResultsFinal {
  return _builderResult.hasResultsFinal;
}
- (BOOL) resultsFinal {
  return _builderResult.resultsFinal;
}
- (CMsgDOTATournament_Game_Builder*) setResultsFinal:(BOOL) value {
  _builderResult.hasResultsFinal = YES;
  _builderResult.resultsFinal = value;
  return self;
}
- (CMsgDOTATournament_Game_Builder*) clearResultsFinal {
  _builderResult.hasResultsFinal = NO;
  _builderResult.resultsFinal = NO;
  return self;
}
- (PBAppendableArray *)replayUrls {
  return _builderResult.replayUrlsArray;
}
- (CMsgDOTATournament_Game_ReplayURL*)replayUrlsAtIndex:(NSUInteger)index {
  return [_builderResult replayUrlsAtIndex:index];
}
- (CMsgDOTATournament_Game_Builder *)addReplayUrls:(CMsgDOTATournament_Game_ReplayURL*)value {
  if (_builderResult.replayUrlsArray == nil) {
    _builderResult.replayUrlsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.replayUrlsArray addObject:value];
  return self;
}
- (CMsgDOTATournament_Game_Builder *)setReplayUrlsArray:(NSArray *)array {
  _builderResult.replayUrlsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTATournament_Game_Builder *)setReplayUrlsValues:(const CMsgDOTATournament_Game_ReplayURL* *)values count:(NSUInteger)count {
  _builderResult.replayUrlsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTATournament_Game_Builder *)clearReplayUrls {
  _builderResult.replayUrlsArray = nil;
  return self;
}
@end

@interface CMsgDOTATournament_Builder()
@property (retain) CMsgDOTATournament* _builderResult;
@end

@implementation CMsgDOTATournament_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATournament alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATournament_Builder*) clear {
  _builderResult = [[[CMsgDOTATournament alloc] init] autorelease];
  return self;
}
- (CMsgDOTATournament_Builder*) clone {
  return [CMsgDOTATournament builderWithPrototype:_builderResult];
}
- (CMsgDOTATournament*) defaultInstance {
  return [CMsgDOTATournament defaultInstance];
}
- (CMsgDOTATournament*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATournament*) buildPartial {
  CMsgDOTATournament* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATournament_Builder*) mergeFrom:(CMsgDOTATournament*) other {
  if (other == [CMsgDOTATournament defaultInstance]) {
    return self;
  }
  if (other.teamsArray.count > 0) {
    if (_builderResult.teamsArray == nil) {
      _builderResult.teamsArray = [[other.teamsArray copyWithZone:[other.teamsArray zone]] autorelease];
    } else {
      [_builderResult.teamsArray appendArray:other.teamsArray];
    }
  }
  if (other.gamesArray.count > 0) {
    if (_builderResult.gamesArray == nil) {
      _builderResult.gamesArray = [[other.gamesArray copyWithZone:[other.gamesArray zone]] autorelease];
    } else {
      [_builderResult.gamesArray appendArray:other.gamesArray];
    }
  }
  if (other.hasGid) {
    [self setGid:other.gid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATournament_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATournament_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTATournament_Team_Builder* subBuilder = [CMsgDOTATournament_Team builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeams:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CMsgDOTATournament_Game_Builder* subBuilder = [CMsgDOTATournament_Game builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGames:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setGid:[input readUInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)teams {
  return _builderResult.teamsArray;
}
- (CMsgDOTATournament_Team*)teamsAtIndex:(NSUInteger)index {
  return [_builderResult teamsAtIndex:index];
}
- (CMsgDOTATournament_Builder *)addTeams:(CMsgDOTATournament_Team*)value {
  if (_builderResult.teamsArray == nil) {
    _builderResult.teamsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.teamsArray addObject:value];
  return self;
}
- (CMsgDOTATournament_Builder *)setTeamsArray:(NSArray *)array {
  _builderResult.teamsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTATournament_Builder *)setTeamsValues:(const CMsgDOTATournament_Team* *)values count:(NSUInteger)count {
  _builderResult.teamsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTATournament_Builder *)clearTeams {
  _builderResult.teamsArray = nil;
  return self;
}
- (PBAppendableArray *)games {
  return _builderResult.gamesArray;
}
- (CMsgDOTATournament_Game*)gamesAtIndex:(NSUInteger)index {
  return [_builderResult gamesAtIndex:index];
}
- (CMsgDOTATournament_Builder *)addGames:(CMsgDOTATournament_Game*)value {
  if (_builderResult.gamesArray == nil) {
    _builderResult.gamesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.gamesArray addObject:value];
  return self;
}
- (CMsgDOTATournament_Builder *)setGamesArray:(NSArray *)array {
  _builderResult.gamesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTATournament_Builder *)setGamesValues:(const CMsgDOTATournament_Game* *)values count:(NSUInteger)count {
  _builderResult.gamesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTATournament_Builder *)clearGames {
  _builderResult.gamesArray = nil;
  return self;
}
- (BOOL) hasGid {
  return _builderResult.hasGid;
}
- (uint64_t) gid {
  return _builderResult.gid;
}
- (CMsgDOTATournament_Builder*) setGid:(uint64_t) value {
  _builderResult.hasGid = YES;
  _builderResult.gid = value;
  return self;
}
- (CMsgDOTATournament_Builder*) clearGid {
  _builderResult.hasGid = NO;
  _builderResult.gid = 0L;
  return self;
}
@end

@interface CMsgDOTATournamentRequest ()
@property uint32_t tournamentId;
@property uint64_t clientTournamentGid;
@end

@implementation CMsgDOTATournamentRequest

- (BOOL) hasTournamentId {
  return !!hasTournamentId_;
}
- (void) setHasTournamentId:(BOOL) value_ {
  hasTournamentId_ = !!value_;
}
@synthesize tournamentId;
- (BOOL) hasClientTournamentGid {
  return !!hasClientTournamentGid_;
}
- (void) setHasClientTournamentGid:(BOOL) value_ {
  hasClientTournamentGid_ = !!value_;
}
@synthesize clientTournamentGid;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tournamentId = 0;
    self.clientTournamentGid = 0L;
  }
  return self;
}
static CMsgDOTATournamentRequest* defaultCMsgDOTATournamentRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATournamentRequest class]) {
    defaultCMsgDOTATournamentRequestInstance = [[CMsgDOTATournamentRequest alloc] init];
  }
}
+ (CMsgDOTATournamentRequest*) defaultInstance {
  return defaultCMsgDOTATournamentRequestInstance;
}
- (CMsgDOTATournamentRequest*) defaultInstance {
  return defaultCMsgDOTATournamentRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTournamentId) {
    [output writeUInt32:1 value:self.tournamentId];
  }
  if (self.hasClientTournamentGid) {
    [output writeUInt64:2 value:self.clientTournamentGid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTournamentId) {
    size_ += computeUInt32Size(1, self.tournamentId);
  }
  if (self.hasClientTournamentGid) {
    size_ += computeUInt64Size(2, self.clientTournamentGid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATournamentRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTATournamentRequest*)[[[CMsgDOTATournamentRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTATournamentRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournamentRequest*)[[[CMsgDOTATournamentRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournamentRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATournamentRequest*)[[[CMsgDOTATournamentRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATournamentRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournamentRequest*)[[[CMsgDOTATournamentRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournamentRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATournamentRequest*)[[[CMsgDOTATournamentRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATournamentRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournamentRequest*)[[[CMsgDOTATournamentRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournamentRequest_Builder*) builder {
  return [[[CMsgDOTATournamentRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTATournamentRequest_Builder*) builderWithPrototype:(CMsgDOTATournamentRequest*) prototype {
  return [[CMsgDOTATournamentRequest builder] mergeFrom:prototype];
}
- (CMsgDOTATournamentRequest_Builder*) builder {
  return [CMsgDOTATournamentRequest builder];
}
- (CMsgDOTATournamentRequest_Builder*) toBuilder {
  return [CMsgDOTATournamentRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTournamentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentId", [NSNumber numberWithInt:self.tournamentId]];
  }
  if (self.hasClientTournamentGid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientTournamentGid", [NSNumber numberWithLongLong:self.clientTournamentGid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATournamentRequest class]]) {
    return NO;
  }
  CMsgDOTATournamentRequest *otherMessage = other;
  return
      self.hasTournamentId == otherMessage.hasTournamentId &&
      (!self.hasTournamentId || self.tournamentId == otherMessage.tournamentId) &&
      self.hasClientTournamentGid == otherMessage.hasClientTournamentGid &&
      (!self.hasClientTournamentGid || self.clientTournamentGid == otherMessage.clientTournamentGid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTournamentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentId] hash];
  }
  if (self.hasClientTournamentGid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.clientTournamentGid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATournamentRequest_Builder()
@property (retain) CMsgDOTATournamentRequest* _builderResult;
@end

@implementation CMsgDOTATournamentRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATournamentRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATournamentRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTATournamentRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTATournamentRequest_Builder*) clone {
  return [CMsgDOTATournamentRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTATournamentRequest*) defaultInstance {
  return [CMsgDOTATournamentRequest defaultInstance];
}
- (CMsgDOTATournamentRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATournamentRequest*) buildPartial {
  CMsgDOTATournamentRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATournamentRequest_Builder*) mergeFrom:(CMsgDOTATournamentRequest*) other {
  if (other == [CMsgDOTATournamentRequest defaultInstance]) {
    return self;
  }
  if (other.hasTournamentId) {
    [self setTournamentId:other.tournamentId];
  }
  if (other.hasClientTournamentGid) {
    [self setClientTournamentGid:other.clientTournamentGid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATournamentRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATournamentRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTournamentId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setClientTournamentGid:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasTournamentId {
  return _builderResult.hasTournamentId;
}
- (uint32_t) tournamentId {
  return _builderResult.tournamentId;
}
- (CMsgDOTATournamentRequest_Builder*) setTournamentId:(uint32_t) value {
  _builderResult.hasTournamentId = YES;
  _builderResult.tournamentId = value;
  return self;
}
- (CMsgDOTATournamentRequest_Builder*) clearTournamentId {
  _builderResult.hasTournamentId = NO;
  _builderResult.tournamentId = 0;
  return self;
}
- (BOOL) hasClientTournamentGid {
  return _builderResult.hasClientTournamentGid;
}
- (uint64_t) clientTournamentGid {
  return _builderResult.clientTournamentGid;
}
- (CMsgDOTATournamentRequest_Builder*) setClientTournamentGid:(uint64_t) value {
  _builderResult.hasClientTournamentGid = YES;
  _builderResult.clientTournamentGid = value;
  return self;
}
- (CMsgDOTATournamentRequest_Builder*) clearClientTournamentGid {
  _builderResult.hasClientTournamentGid = NO;
  _builderResult.clientTournamentGid = 0L;
  return self;
}
@end

@interface CMsgDOTATournamentResponse ()
@property uint32_t result;
@property (retain) CMsgDOTATournament* tournament;
@end

@implementation CMsgDOTATournamentResponse

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) value_ {
  hasResult_ = !!value_;
}
@synthesize result;
- (BOOL) hasTournament {
  return !!hasTournament_;
}
- (void) setHasTournament:(BOOL) value_ {
  hasTournament_ = !!value_;
}
@synthesize tournament;
- (void) dealloc {
  self.tournament = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = 2;
    self.tournament = [CMsgDOTATournament defaultInstance];
  }
  return self;
}
static CMsgDOTATournamentResponse* defaultCMsgDOTATournamentResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATournamentResponse class]) {
    defaultCMsgDOTATournamentResponseInstance = [[CMsgDOTATournamentResponse alloc] init];
  }
}
+ (CMsgDOTATournamentResponse*) defaultInstance {
  return defaultCMsgDOTATournamentResponseInstance;
}
- (CMsgDOTATournamentResponse*) defaultInstance {
  return defaultCMsgDOTATournamentResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeUInt32:1 value:self.result];
  }
  if (self.hasTournament) {
    [output writeMessage:2 value:self.tournament];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeUInt32Size(1, self.result);
  }
  if (self.hasTournament) {
    size_ += computeMessageSize(2, self.tournament);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATournamentResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTATournamentResponse*)[[[CMsgDOTATournamentResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTATournamentResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournamentResponse*)[[[CMsgDOTATournamentResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournamentResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATournamentResponse*)[[[CMsgDOTATournamentResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATournamentResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournamentResponse*)[[[CMsgDOTATournamentResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournamentResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATournamentResponse*)[[[CMsgDOTATournamentResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATournamentResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATournamentResponse*)[[[CMsgDOTATournamentResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATournamentResponse_Builder*) builder {
  return [[[CMsgDOTATournamentResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTATournamentResponse_Builder*) builderWithPrototype:(CMsgDOTATournamentResponse*) prototype {
  return [[CMsgDOTATournamentResponse builder] mergeFrom:prototype];
}
- (CMsgDOTATournamentResponse_Builder*) builder {
  return [CMsgDOTATournamentResponse builder];
}
- (CMsgDOTATournamentResponse_Builder*) toBuilder {
  return [CMsgDOTATournamentResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", [NSNumber numberWithInt:self.result]];
  }
  if (self.hasTournament) {
    [output appendFormat:@"%@%@ {\n", indent, @"tournament"];
    [self.tournament writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATournamentResponse class]]) {
    return NO;
  }
  CMsgDOTATournamentResponse *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      self.hasTournament == otherMessage.hasTournament &&
      (!self.hasTournament || [self.tournament isEqual:otherMessage.tournament]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.result] hash];
  }
  if (self.hasTournament) {
    hashCode = hashCode * 31 + [self.tournament hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATournamentResponse_Builder()
@property (retain) CMsgDOTATournamentResponse* _builderResult;
@end

@implementation CMsgDOTATournamentResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATournamentResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATournamentResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTATournamentResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTATournamentResponse_Builder*) clone {
  return [CMsgDOTATournamentResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTATournamentResponse*) defaultInstance {
  return [CMsgDOTATournamentResponse defaultInstance];
}
- (CMsgDOTATournamentResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATournamentResponse*) buildPartial {
  CMsgDOTATournamentResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATournamentResponse_Builder*) mergeFrom:(CMsgDOTATournamentResponse*) other {
  if (other == [CMsgDOTATournamentResponse defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  if (other.hasTournament) {
    [self mergeTournament:other.tournament];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATournamentResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATournamentResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResult:[input readUInt32]];
        break;
      }
      case 18: {
        CMsgDOTATournament_Builder* subBuilder = [CMsgDOTATournament builder];
        if (self.hasTournament) {
          [subBuilder mergeFrom:self.tournament];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTournament:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return _builderResult.hasResult;
}
- (uint32_t) result {
  return _builderResult.result;
}
- (CMsgDOTATournamentResponse_Builder*) setResult:(uint32_t) value {
  _builderResult.hasResult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTATournamentResponse_Builder*) clearResult {
  _builderResult.hasResult = NO;
  _builderResult.result = 2;
  return self;
}
- (BOOL) hasTournament {
  return _builderResult.hasTournament;
}
- (CMsgDOTATournament*) tournament {
  return _builderResult.tournament;
}
- (CMsgDOTATournamentResponse_Builder*) setTournament:(CMsgDOTATournament*) value {
  _builderResult.hasTournament = YES;
  _builderResult.tournament = value;
  return self;
}
- (CMsgDOTATournamentResponse_Builder*) setTournamentBuilder:(CMsgDOTATournament_Builder*) builderForValue {
  return [self setTournament:[builderForValue build]];
}
- (CMsgDOTATournamentResponse_Builder*) mergeTournament:(CMsgDOTATournament*) value {
  if (_builderResult.hasTournament &&
      _builderResult.tournament != [CMsgDOTATournament defaultInstance]) {
    _builderResult.tournament =
      [[[CMsgDOTATournament builderWithPrototype:_builderResult.tournament] mergeFrom:value] buildPartial];
  } else {
    _builderResult.tournament = value;
  }
  _builderResult.hasTournament = YES;
  return self;
}
- (CMsgDOTATournamentResponse_Builder*) clearTournament {
  _builderResult.hasTournament = NO;
  _builderResult.tournament = [CMsgDOTATournament defaultInstance];
  return self;
}
@end

@interface CMsgDOTAClearTournamentGame ()
@property uint32_t tournamentId;
@property uint32_t gameId;
@end

@implementation CMsgDOTAClearTournamentGame

- (BOOL) hasTournamentId {
  return !!hasTournamentId_;
}
- (void) setHasTournamentId:(BOOL) value_ {
  hasTournamentId_ = !!value_;
}
@synthesize tournamentId;
- (BOOL) hasGameId {
  return !!hasGameId_;
}
- (void) setHasGameId:(BOOL) value_ {
  hasGameId_ = !!value_;
}
@synthesize gameId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tournamentId = 0;
    self.gameId = 0;
  }
  return self;
}
static CMsgDOTAClearTournamentGame* defaultCMsgDOTAClearTournamentGameInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAClearTournamentGame class]) {
    defaultCMsgDOTAClearTournamentGameInstance = [[CMsgDOTAClearTournamentGame alloc] init];
  }
}
+ (CMsgDOTAClearTournamentGame*) defaultInstance {
  return defaultCMsgDOTAClearTournamentGameInstance;
}
- (CMsgDOTAClearTournamentGame*) defaultInstance {
  return defaultCMsgDOTAClearTournamentGameInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTournamentId) {
    [output writeUInt32:1 value:self.tournamentId];
  }
  if (self.hasGameId) {
    [output writeUInt32:2 value:self.gameId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTournamentId) {
    size_ += computeUInt32Size(1, self.tournamentId);
  }
  if (self.hasGameId) {
    size_ += computeUInt32Size(2, self.gameId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAClearTournamentGame*) parseFromData:(NSData*) data {
  return (CMsgDOTAClearTournamentGame*)[[[CMsgDOTAClearTournamentGame builder] mergeFromData:data] build];
}
+ (CMsgDOTAClearTournamentGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAClearTournamentGame*)[[[CMsgDOTAClearTournamentGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAClearTournamentGame*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAClearTournamentGame*)[[[CMsgDOTAClearTournamentGame builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAClearTournamentGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAClearTournamentGame*)[[[CMsgDOTAClearTournamentGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAClearTournamentGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAClearTournamentGame*)[[[CMsgDOTAClearTournamentGame builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAClearTournamentGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAClearTournamentGame*)[[[CMsgDOTAClearTournamentGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAClearTournamentGame_Builder*) builder {
  return [[[CMsgDOTAClearTournamentGame_Builder alloc] init] autorelease];
}
+ (CMsgDOTAClearTournamentGame_Builder*) builderWithPrototype:(CMsgDOTAClearTournamentGame*) prototype {
  return [[CMsgDOTAClearTournamentGame builder] mergeFrom:prototype];
}
- (CMsgDOTAClearTournamentGame_Builder*) builder {
  return [CMsgDOTAClearTournamentGame builder];
}
- (CMsgDOTAClearTournamentGame_Builder*) toBuilder {
  return [CMsgDOTAClearTournamentGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTournamentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentId", [NSNumber numberWithInt:self.tournamentId]];
  }
  if (self.hasGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameId", [NSNumber numberWithInt:self.gameId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAClearTournamentGame class]]) {
    return NO;
  }
  CMsgDOTAClearTournamentGame *otherMessage = other;
  return
      self.hasTournamentId == otherMessage.hasTournamentId &&
      (!self.hasTournamentId || self.tournamentId == otherMessage.tournamentId) &&
      self.hasGameId == otherMessage.hasGameId &&
      (!self.hasGameId || self.gameId == otherMessage.gameId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTournamentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentId] hash];
  }
  if (self.hasGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAClearTournamentGame_Builder()
@property (retain) CMsgDOTAClearTournamentGame* _builderResult;
@end

@implementation CMsgDOTAClearTournamentGame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAClearTournamentGame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAClearTournamentGame_Builder*) clear {
  _builderResult = [[[CMsgDOTAClearTournamentGame alloc] init] autorelease];
  return self;
}
- (CMsgDOTAClearTournamentGame_Builder*) clone {
  return [CMsgDOTAClearTournamentGame builderWithPrototype:_builderResult];
}
- (CMsgDOTAClearTournamentGame*) defaultInstance {
  return [CMsgDOTAClearTournamentGame defaultInstance];
}
- (CMsgDOTAClearTournamentGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAClearTournamentGame*) buildPartial {
  CMsgDOTAClearTournamentGame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAClearTournamentGame_Builder*) mergeFrom:(CMsgDOTAClearTournamentGame*) other {
  if (other == [CMsgDOTAClearTournamentGame defaultInstance]) {
    return self;
  }
  if (other.hasTournamentId) {
    [self setTournamentId:other.tournamentId];
  }
  if (other.hasGameId) {
    [self setGameId:other.gameId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAClearTournamentGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAClearTournamentGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTournamentId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setGameId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTournamentId {
  return _builderResult.hasTournamentId;
}
- (uint32_t) tournamentId {
  return _builderResult.tournamentId;
}
- (CMsgDOTAClearTournamentGame_Builder*) setTournamentId:(uint32_t) value {
  _builderResult.hasTournamentId = YES;
  _builderResult.tournamentId = value;
  return self;
}
- (CMsgDOTAClearTournamentGame_Builder*) clearTournamentId {
  _builderResult.hasTournamentId = NO;
  _builderResult.tournamentId = 0;
  return self;
}
- (BOOL) hasGameId {
  return _builderResult.hasGameId;
}
- (uint32_t) gameId {
  return _builderResult.gameId;
}
- (CMsgDOTAClearTournamentGame_Builder*) setGameId:(uint32_t) value {
  _builderResult.hasGameId = YES;
  _builderResult.gameId = value;
  return self;
}
- (CMsgDOTAClearTournamentGame_Builder*) clearGameId {
  _builderResult.hasGameId = NO;
  _builderResult.gameId = 0;
  return self;
}
@end

@interface CMsgDOTAMatch ()
@property uint32_t season;
@property BOOL goodGuysWin;
@property uint32_t duration;
@property uint32_t startTime;
@property (retain) PBAppendableArray * playersArray;
@property uint32_t matchId;
@property (retain) PBAppendableArray * towerStatusArray;
@property (retain) PBAppendableArray * barracksStatusArray;
@property uint32_t cluster;
@property uint32_t firstBloodTime;
@property uint32_t replaySalt;
@property uint32_t serverIp;
@property uint32_t serverPort;
@property uint32_t lobbyType;
@property uint32_t humanPlayers;
@property uint32_t averageSkill;
@property Float32 gameBalance;
@property uint32_t radiantTeamId;
@property uint32_t direTeamId;
@property uint32_t leagueid;
@property (retain) NSString* radiantName;
@property (retain) NSString* direName;
@property uint64_t radiantLogo;
@property uint64_t direLogo;
@property uint32_t radiantTeamComplete;
@property uint32_t direTeamComplete;
@property uint32_t positiveVotes;
@property uint32_t negativeVotes;
@property DOTA_GameMode game_mode;
@end

@implementation CMsgDOTAMatch

- (BOOL) hasSeason {
  return !!hasSeason_;
}
- (void) setHasSeason:(BOOL) value_ {
  hasSeason_ = !!value_;
}
@synthesize season;
- (BOOL) hasGoodGuysWin {
  return !!hasGoodGuysWin_;
}
- (void) setHasGoodGuysWin:(BOOL) value_ {
  hasGoodGuysWin_ = !!value_;
}
- (BOOL) goodGuysWin {
  return !!goodGuysWin_;
}
- (void) setGoodGuysWin:(BOOL) value_ {
  goodGuysWin_ = !!value_;
}
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value_ {
  hasDuration_ = !!value_;
}
@synthesize duration;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) value_ {
  hasStartTime_ = !!value_;
}
@synthesize startTime;
@synthesize playersArray;
@dynamic players;
- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
@synthesize towerStatusArray;
@dynamic towerStatus;
@synthesize barracksStatusArray;
@dynamic barracksStatus;
- (BOOL) hasCluster {
  return !!hasCluster_;
}
- (void) setHasCluster:(BOOL) value_ {
  hasCluster_ = !!value_;
}
@synthesize cluster;
- (BOOL) hasFirstBloodTime {
  return !!hasFirstBloodTime_;
}
- (void) setHasFirstBloodTime:(BOOL) value_ {
  hasFirstBloodTime_ = !!value_;
}
@synthesize firstBloodTime;
- (BOOL) hasReplaySalt {
  return !!hasReplaySalt_;
}
- (void) setHasReplaySalt:(BOOL) value_ {
  hasReplaySalt_ = !!value_;
}
@synthesize replaySalt;
- (BOOL) hasServerIp {
  return !!hasServerIp_;
}
- (void) setHasServerIp:(BOOL) value_ {
  hasServerIp_ = !!value_;
}
@synthesize serverIp;
- (BOOL) hasServerPort {
  return !!hasServerPort_;
}
- (void) setHasServerPort:(BOOL) value_ {
  hasServerPort_ = !!value_;
}
@synthesize serverPort;
- (BOOL) hasLobbyType {
  return !!hasLobbyType_;
}
- (void) setHasLobbyType:(BOOL) value_ {
  hasLobbyType_ = !!value_;
}
@synthesize lobbyType;
- (BOOL) hasHumanPlayers {
  return !!hasHumanPlayers_;
}
- (void) setHasHumanPlayers:(BOOL) value_ {
  hasHumanPlayers_ = !!value_;
}
@synthesize humanPlayers;
- (BOOL) hasAverageSkill {
  return !!hasAverageSkill_;
}
- (void) setHasAverageSkill:(BOOL) value_ {
  hasAverageSkill_ = !!value_;
}
@synthesize averageSkill;
- (BOOL) hasGameBalance {
  return !!hasGameBalance_;
}
- (void) setHasGameBalance:(BOOL) value_ {
  hasGameBalance_ = !!value_;
}
@synthesize gameBalance;
- (BOOL) hasRadiantTeamId {
  return !!hasRadiantTeamId_;
}
- (void) setHasRadiantTeamId:(BOOL) value_ {
  hasRadiantTeamId_ = !!value_;
}
@synthesize radiantTeamId;
- (BOOL) hasDireTeamId {
  return !!hasDireTeamId_;
}
- (void) setHasDireTeamId:(BOOL) value_ {
  hasDireTeamId_ = !!value_;
}
@synthesize direTeamId;
- (BOOL) hasLeagueid {
  return !!hasLeagueid_;
}
- (void) setHasLeagueid:(BOOL) value_ {
  hasLeagueid_ = !!value_;
}
@synthesize leagueid;
- (BOOL) hasRadiantName {
  return !!hasRadiantName_;
}
- (void) setHasRadiantName:(BOOL) value_ {
  hasRadiantName_ = !!value_;
}
@synthesize radiantName;
- (BOOL) hasDireName {
  return !!hasDireName_;
}
- (void) setHasDireName:(BOOL) value_ {
  hasDireName_ = !!value_;
}
@synthesize direName;
- (BOOL) hasRadiantLogo {
  return !!hasRadiantLogo_;
}
- (void) setHasRadiantLogo:(BOOL) value_ {
  hasRadiantLogo_ = !!value_;
}
@synthesize radiantLogo;
- (BOOL) hasDireLogo {
  return !!hasDireLogo_;
}
- (void) setHasDireLogo:(BOOL) value_ {
  hasDireLogo_ = !!value_;
}
@synthesize direLogo;
- (BOOL) hasRadiantTeamComplete {
  return !!hasRadiantTeamComplete_;
}
- (void) setHasRadiantTeamComplete:(BOOL) value_ {
  hasRadiantTeamComplete_ = !!value_;
}
@synthesize radiantTeamComplete;
- (BOOL) hasDireTeamComplete {
  return !!hasDireTeamComplete_;
}
- (void) setHasDireTeamComplete:(BOOL) value_ {
  hasDireTeamComplete_ = !!value_;
}
@synthesize direTeamComplete;
- (BOOL) hasPositiveVotes {
  return !!hasPositiveVotes_;
}
- (void) setHasPositiveVotes:(BOOL) value_ {
  hasPositiveVotes_ = !!value_;
}
@synthesize positiveVotes;
- (BOOL) hasNegativeVotes {
  return !!hasNegativeVotes_;
}
- (void) setHasNegativeVotes:(BOOL) value_ {
  hasNegativeVotes_ = !!value_;
}
@synthesize negativeVotes;
- (BOOL) hasgame_mode {
  return !!hasgame_mode_;
}
- (void) setHasgame_mode:(BOOL) value_ {
  hasgame_mode_ = !!value_;
}
@synthesize game_mode;
- (void) dealloc {
  self.playersArray = nil;
  self.towerStatusArray = nil;
  self.barracksStatusArray = nil;
  self.radiantName = nil;
  self.direName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.season = 0;
    self.goodGuysWin = NO;
    self.duration = 0;
    self.startTime = 0;
    self.matchId = 0;
    self.cluster = 0;
    self.firstBloodTime = 0;
    self.replaySalt = 0;
    self.serverIp = 0;
    self.serverPort = 0;
    self.lobbyType = 0;
    self.humanPlayers = 0;
    self.averageSkill = 0;
    self.gameBalance = 0;
    self.radiantTeamId = 0;
    self.direTeamId = 0;
    self.leagueid = 0;
    self.radiantName = @"";
    self.direName = @"";
    self.radiantLogo = 0L;
    self.direLogo = 0L;
    self.radiantTeamComplete = 0;
    self.direTeamComplete = 0;
    self.positiveVotes = 0;
    self.negativeVotes = 0;
    self.game_mode = DOTA_GameModeDOTA_GAMEMODE_NONE;
  }
  return self;
}
static CMsgDOTAMatch* defaultCMsgDOTAMatchInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAMatch class]) {
    defaultCMsgDOTAMatchInstance = [[CMsgDOTAMatch alloc] init];
  }
}
+ (CMsgDOTAMatch*) defaultInstance {
  return defaultCMsgDOTAMatchInstance;
}
- (CMsgDOTAMatch*) defaultInstance {
  return defaultCMsgDOTAMatchInstance;
}
- (PBArray *)players {
  return playersArray;
}
- (CMsgDOTAMatch_Player*)playersAtIndex:(NSUInteger)index {
  return [playersArray objectAtIndex:index];
}
- (PBArray *)towerStatus {
  return towerStatusArray;
}
- (uint32_t)towerStatusAtIndex:(NSUInteger)index {
  return [towerStatusArray uint32AtIndex:index];
}
- (PBArray *)barracksStatus {
  return barracksStatusArray;
}
- (uint32_t)barracksStatusAtIndex:(NSUInteger)index {
  return [barracksStatusArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeason) {
    [output writeUInt32:1 value:self.season];
  }
  if (self.hasGoodGuysWin) {
    [output writeBool:2 value:self.goodGuysWin];
  }
  if (self.hasDuration) {
    [output writeUInt32:3 value:self.duration];
  }
  if (self.hasStartTime) {
    [output writeFixed32:4 value:self.startTime];
  }
  for (CMsgDOTAMatch_Player *element in self.playersArray) {
    [output writeMessage:5 value:element];
  }
  if (self.hasMatchId) {
    [output writeUInt32:6 value:self.matchId];
  }
  const NSUInteger towerStatusArrayCount = self.towerStatusArray.count;
  if (towerStatusArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.towerStatusArray.data;
    for (NSUInteger i = 0; i < towerStatusArrayCount; ++i) {
      [output writeUInt32:8 value:values[i]];
    }
  }
  const NSUInteger barracksStatusArrayCount = self.barracksStatusArray.count;
  if (barracksStatusArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.barracksStatusArray.data;
    for (NSUInteger i = 0; i < barracksStatusArrayCount; ++i) {
      [output writeUInt32:9 value:values[i]];
    }
  }
  if (self.hasCluster) {
    [output writeUInt32:10 value:self.cluster];
  }
  if (self.hasFirstBloodTime) {
    [output writeUInt32:12 value:self.firstBloodTime];
  }
  if (self.hasReplaySalt) {
    [output writeFixed32:13 value:self.replaySalt];
  }
  if (self.hasServerIp) {
    [output writeFixed32:14 value:self.serverIp];
  }
  if (self.hasServerPort) {
    [output writeUInt32:15 value:self.serverPort];
  }
  if (self.hasLobbyType) {
    [output writeUInt32:16 value:self.lobbyType];
  }
  if (self.hasHumanPlayers) {
    [output writeUInt32:17 value:self.humanPlayers];
  }
  if (self.hasAverageSkill) {
    [output writeUInt32:18 value:self.averageSkill];
  }
  if (self.hasGameBalance) {
    [output writeFloat:19 value:self.gameBalance];
  }
  if (self.hasRadiantTeamId) {
    [output writeUInt32:20 value:self.radiantTeamId];
  }
  if (self.hasDireTeamId) {
    [output writeUInt32:21 value:self.direTeamId];
  }
  if (self.hasLeagueid) {
    [output writeUInt32:22 value:self.leagueid];
  }
  if (self.hasRadiantName) {
    [output writeString:23 value:self.radiantName];
  }
  if (self.hasDireName) {
    [output writeString:24 value:self.direName];
  }
  if (self.hasRadiantLogo) {
    [output writeUInt64:25 value:self.radiantLogo];
  }
  if (self.hasDireLogo) {
    [output writeUInt64:26 value:self.direLogo];
  }
  if (self.hasRadiantTeamComplete) {
    [output writeUInt32:27 value:self.radiantTeamComplete];
  }
  if (self.hasDireTeamComplete) {
    [output writeUInt32:28 value:self.direTeamComplete];
  }
  if (self.hasPositiveVotes) {
    [output writeUInt32:29 value:self.positiveVotes];
  }
  if (self.hasNegativeVotes) {
    [output writeUInt32:30 value:self.negativeVotes];
  }
  if (self.hasgame_mode) {
    [output writeEnum:31 value:self.game_mode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeason) {
    size_ += computeUInt32Size(1, self.season);
  }
  if (self.hasGoodGuysWin) {
    size_ += computeBoolSize(2, self.goodGuysWin);
  }
  if (self.hasDuration) {
    size_ += computeUInt32Size(3, self.duration);
  }
  if (self.hasStartTime) {
    size_ += computeFixed32Size(4, self.startTime);
  }
  for (CMsgDOTAMatch_Player *element in self.playersArray) {
    size_ += computeMessageSize(5, element);
  }
  if (self.hasMatchId) {
    size_ += computeUInt32Size(6, self.matchId);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.towerStatusArray.count;
    const uint32_t *values = (const uint32_t *)self.towerStatusArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.barracksStatusArray.count;
    const uint32_t *values = (const uint32_t *)self.barracksStatusArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasCluster) {
    size_ += computeUInt32Size(10, self.cluster);
  }
  if (self.hasFirstBloodTime) {
    size_ += computeUInt32Size(12, self.firstBloodTime);
  }
  if (self.hasReplaySalt) {
    size_ += computeFixed32Size(13, self.replaySalt);
  }
  if (self.hasServerIp) {
    size_ += computeFixed32Size(14, self.serverIp);
  }
  if (self.hasServerPort) {
    size_ += computeUInt32Size(15, self.serverPort);
  }
  if (self.hasLobbyType) {
    size_ += computeUInt32Size(16, self.lobbyType);
  }
  if (self.hasHumanPlayers) {
    size_ += computeUInt32Size(17, self.humanPlayers);
  }
  if (self.hasAverageSkill) {
    size_ += computeUInt32Size(18, self.averageSkill);
  }
  if (self.hasGameBalance) {
    size_ += computeFloatSize(19, self.gameBalance);
  }
  if (self.hasRadiantTeamId) {
    size_ += computeUInt32Size(20, self.radiantTeamId);
  }
  if (self.hasDireTeamId) {
    size_ += computeUInt32Size(21, self.direTeamId);
  }
  if (self.hasLeagueid) {
    size_ += computeUInt32Size(22, self.leagueid);
  }
  if (self.hasRadiantName) {
    size_ += computeStringSize(23, self.radiantName);
  }
  if (self.hasDireName) {
    size_ += computeStringSize(24, self.direName);
  }
  if (self.hasRadiantLogo) {
    size_ += computeUInt64Size(25, self.radiantLogo);
  }
  if (self.hasDireLogo) {
    size_ += computeUInt64Size(26, self.direLogo);
  }
  if (self.hasRadiantTeamComplete) {
    size_ += computeUInt32Size(27, self.radiantTeamComplete);
  }
  if (self.hasDireTeamComplete) {
    size_ += computeUInt32Size(28, self.direTeamComplete);
  }
  if (self.hasPositiveVotes) {
    size_ += computeUInt32Size(29, self.positiveVotes);
  }
  if (self.hasNegativeVotes) {
    size_ += computeUInt32Size(30, self.negativeVotes);
  }
  if (self.hasgame_mode) {
    size_ += computeEnumSize(31, self.game_mode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAMatch*) parseFromData:(NSData*) data {
  return (CMsgDOTAMatch*)[[[CMsgDOTAMatch builder] mergeFromData:data] build];
}
+ (CMsgDOTAMatch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatch*)[[[CMsgDOTAMatch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatch*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAMatch*)[[[CMsgDOTAMatch builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAMatch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatch*)[[[CMsgDOTAMatch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAMatch*)[[[CMsgDOTAMatch builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAMatch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatch*)[[[CMsgDOTAMatch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatch_Builder*) builder {
  return [[[CMsgDOTAMatch_Builder alloc] init] autorelease];
}
+ (CMsgDOTAMatch_Builder*) builderWithPrototype:(CMsgDOTAMatch*) prototype {
  return [[CMsgDOTAMatch builder] mergeFrom:prototype];
}
- (CMsgDOTAMatch_Builder*) builder {
  return [CMsgDOTAMatch builder];
}
- (CMsgDOTAMatch_Builder*) toBuilder {
  return [CMsgDOTAMatch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"season", [NSNumber numberWithInt:self.season]];
  }
  if (self.hasGoodGuysWin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goodGuysWin", [NSNumber numberWithBool:self.goodGuysWin]];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithInt:self.duration]];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithInt:self.startTime]];
  }
  for (CMsgDOTAMatch_Player* element in self.playersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"players"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  for (NSNumber* value in self.towerStatusArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"towerStatus", value];
  }
  for (NSNumber* value in self.barracksStatusArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"barracksStatus", value];
  }
  if (self.hasCluster) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cluster", [NSNumber numberWithInt:self.cluster]];
  }
  if (self.hasFirstBloodTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"firstBloodTime", [NSNumber numberWithInt:self.firstBloodTime]];
  }
  if (self.hasReplaySalt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replaySalt", [NSNumber numberWithInt:self.replaySalt]];
  }
  if (self.hasServerIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverIp", [NSNumber numberWithInt:self.serverIp]];
  }
  if (self.hasServerPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverPort", [NSNumber numberWithInt:self.serverPort]];
  }
  if (self.hasLobbyType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyType", [NSNumber numberWithInt:self.lobbyType]];
  }
  if (self.hasHumanPlayers) {
    [output appendFormat:@"%@%@: %@\n", indent, @"humanPlayers", [NSNumber numberWithInt:self.humanPlayers]];
  }
  if (self.hasAverageSkill) {
    [output appendFormat:@"%@%@: %@\n", indent, @"averageSkill", [NSNumber numberWithInt:self.averageSkill]];
  }
  if (self.hasGameBalance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameBalance", [NSNumber numberWithFloat:self.gameBalance]];
  }
  if (self.hasRadiantTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"radiantTeamId", [NSNumber numberWithInt:self.radiantTeamId]];
  }
  if (self.hasDireTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direTeamId", [NSNumber numberWithInt:self.direTeamId]];
  }
  if (self.hasLeagueid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueid", [NSNumber numberWithInt:self.leagueid]];
  }
  if (self.hasRadiantName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"radiantName", self.radiantName];
  }
  if (self.hasDireName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direName", self.direName];
  }
  if (self.hasRadiantLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"radiantLogo", [NSNumber numberWithLongLong:self.radiantLogo]];
  }
  if (self.hasDireLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direLogo", [NSNumber numberWithLongLong:self.direLogo]];
  }
  if (self.hasRadiantTeamComplete) {
    [output appendFormat:@"%@%@: %@\n", indent, @"radiantTeamComplete", [NSNumber numberWithInt:self.radiantTeamComplete]];
  }
  if (self.hasDireTeamComplete) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direTeamComplete", [NSNumber numberWithInt:self.direTeamComplete]];
  }
  if (self.hasPositiveVotes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"positiveVotes", [NSNumber numberWithInt:self.positiveVotes]];
  }
  if (self.hasNegativeVotes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negativeVotes", [NSNumber numberWithInt:self.negativeVotes]];
  }
  if (self.hasgame_mode) {
    [output appendFormat:@"%@%@: %d\n", indent, @"game_mode", self.game_mode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAMatch class]]) {
    return NO;
  }
  CMsgDOTAMatch *otherMessage = other;
  return
      self.hasSeason == otherMessage.hasSeason &&
      (!self.hasSeason || self.season == otherMessage.season) &&
      self.hasGoodGuysWin == otherMessage.hasGoodGuysWin &&
      (!self.hasGoodGuysWin || self.goodGuysWin == otherMessage.goodGuysWin) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || self.startTime == otherMessage.startTime) &&
      [self.playersArray isEqualToArray:otherMessage.playersArray] &&
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      [self.towerStatusArray isEqualToArray:otherMessage.towerStatusArray] &&
      [self.barracksStatusArray isEqualToArray:otherMessage.barracksStatusArray] &&
      self.hasCluster == otherMessage.hasCluster &&
      (!self.hasCluster || self.cluster == otherMessage.cluster) &&
      self.hasFirstBloodTime == otherMessage.hasFirstBloodTime &&
      (!self.hasFirstBloodTime || self.firstBloodTime == otherMessage.firstBloodTime) &&
      self.hasReplaySalt == otherMessage.hasReplaySalt &&
      (!self.hasReplaySalt || self.replaySalt == otherMessage.replaySalt) &&
      self.hasServerIp == otherMessage.hasServerIp &&
      (!self.hasServerIp || self.serverIp == otherMessage.serverIp) &&
      self.hasServerPort == otherMessage.hasServerPort &&
      (!self.hasServerPort || self.serverPort == otherMessage.serverPort) &&
      self.hasLobbyType == otherMessage.hasLobbyType &&
      (!self.hasLobbyType || self.lobbyType == otherMessage.lobbyType) &&
      self.hasHumanPlayers == otherMessage.hasHumanPlayers &&
      (!self.hasHumanPlayers || self.humanPlayers == otherMessage.humanPlayers) &&
      self.hasAverageSkill == otherMessage.hasAverageSkill &&
      (!self.hasAverageSkill || self.averageSkill == otherMessage.averageSkill) &&
      self.hasGameBalance == otherMessage.hasGameBalance &&
      (!self.hasGameBalance || self.gameBalance == otherMessage.gameBalance) &&
      self.hasRadiantTeamId == otherMessage.hasRadiantTeamId &&
      (!self.hasRadiantTeamId || self.radiantTeamId == otherMessage.radiantTeamId) &&
      self.hasDireTeamId == otherMessage.hasDireTeamId &&
      (!self.hasDireTeamId || self.direTeamId == otherMessage.direTeamId) &&
      self.hasLeagueid == otherMessage.hasLeagueid &&
      (!self.hasLeagueid || self.leagueid == otherMessage.leagueid) &&
      self.hasRadiantName == otherMessage.hasRadiantName &&
      (!self.hasRadiantName || [self.radiantName isEqual:otherMessage.radiantName]) &&
      self.hasDireName == otherMessage.hasDireName &&
      (!self.hasDireName || [self.direName isEqual:otherMessage.direName]) &&
      self.hasRadiantLogo == otherMessage.hasRadiantLogo &&
      (!self.hasRadiantLogo || self.radiantLogo == otherMessage.radiantLogo) &&
      self.hasDireLogo == otherMessage.hasDireLogo &&
      (!self.hasDireLogo || self.direLogo == otherMessage.direLogo) &&
      self.hasRadiantTeamComplete == otherMessage.hasRadiantTeamComplete &&
      (!self.hasRadiantTeamComplete || self.radiantTeamComplete == otherMessage.radiantTeamComplete) &&
      self.hasDireTeamComplete == otherMessage.hasDireTeamComplete &&
      (!self.hasDireTeamComplete || self.direTeamComplete == otherMessage.direTeamComplete) &&
      self.hasPositiveVotes == otherMessage.hasPositiveVotes &&
      (!self.hasPositiveVotes || self.positiveVotes == otherMessage.positiveVotes) &&
      self.hasNegativeVotes == otherMessage.hasNegativeVotes &&
      (!self.hasNegativeVotes || self.negativeVotes == otherMessage.negativeVotes) &&
      self.hasgame_mode == otherMessage.hasgame_mode &&
      (!self.hasgame_mode || self.game_mode == otherMessage.game_mode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSeason) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.season] hash];
  }
  if (self.hasGoodGuysWin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.goodGuysWin] hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.duration] hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.startTime] hash];
  }
  for (CMsgDOTAMatch_Player* element in self.playersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  for (NSNumber* value in self.towerStatusArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.barracksStatusArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasCluster) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.cluster] hash];
  }
  if (self.hasFirstBloodTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.firstBloodTime] hash];
  }
  if (self.hasReplaySalt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replaySalt] hash];
  }
  if (self.hasServerIp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverIp] hash];
  }
  if (self.hasServerPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverPort] hash];
  }
  if (self.hasLobbyType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lobbyType] hash];
  }
  if (self.hasHumanPlayers) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.humanPlayers] hash];
  }
  if (self.hasAverageSkill) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.averageSkill] hash];
  }
  if (self.hasGameBalance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.gameBalance] hash];
  }
  if (self.hasRadiantTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.radiantTeamId] hash];
  }
  if (self.hasDireTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.direTeamId] hash];
  }
  if (self.hasLeagueid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leagueid] hash];
  }
  if (self.hasRadiantName) {
    hashCode = hashCode * 31 + [self.radiantName hash];
  }
  if (self.hasDireName) {
    hashCode = hashCode * 31 + [self.direName hash];
  }
  if (self.hasRadiantLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.radiantLogo] hash];
  }
  if (self.hasDireLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.direLogo] hash];
  }
  if (self.hasRadiantTeamComplete) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.radiantTeamComplete] hash];
  }
  if (self.hasDireTeamComplete) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.direTeamComplete] hash];
  }
  if (self.hasPositiveVotes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.positiveVotes] hash];
  }
  if (self.hasNegativeVotes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.negativeVotes] hash];
  }
  if (self.hasgame_mode) {
    hashCode = hashCode * 31 + self.game_mode;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAMatch_Player ()
@property uint32_t accountId;
@property uint32_t playerSlot;
@property uint32_t heroId;
@property uint32_t item0;
@property uint32_t item1;
@property uint32_t item2;
@property uint32_t item3;
@property uint32_t item4;
@property uint32_t item5;
@property Float32 expectedTeamContribution;
@property Float32 scaledMetric;
@property uint32_t previousRank;
@property uint32_t rankChange;
@property uint32_t kills;
@property uint32_t deaths;
@property uint32_t assists;
@property uint32_t leaverStatus;
@property uint32_t gold;
@property uint32_t lastHits;
@property uint32_t denies;
@property uint32_t goldPerMin;
@property uint32_t xpPerMin;
@property uint32_t goldSpent;
@property uint32_t heroDamage;
@property uint32_t towerDamage;
@property uint32_t heroHealing;
@property uint32_t level;
@property uint32_t timeLastSeen;
@property (retain) NSString* playerName;
@property uint32_t supportAbilityValue;
@property BOOL feedingDetected;
@property uint32_t searchRank;
@property uint32_t searchRankUncertainty;
@property uint32_t rankUncertaintyChange;
@property uint32_t heroPlayCount;
@property uint64_t partyId;
@property Float32 scaledKills;
@property Float32 scaledDeaths;
@property Float32 scaledAssists;
@property uint32_t claimedFarmGold;
@property uint32_t supportGold;
@property uint32_t claimedDenies;
@property uint32_t claimedMisses;
@property uint32_t misses;
@end

@implementation CMsgDOTAMatch_Player

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasPlayerSlot {
  return !!hasPlayerSlot_;
}
- (void) setHasPlayerSlot:(BOOL) value_ {
  hasPlayerSlot_ = !!value_;
}
@synthesize playerSlot;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (BOOL) hasItem0 {
  return !!hasItem0_;
}
- (void) setHasItem0:(BOOL) value_ {
  hasItem0_ = !!value_;
}
@synthesize item0;
- (BOOL) hasItem1 {
  return !!hasItem1_;
}
- (void) setHasItem1:(BOOL) value_ {
  hasItem1_ = !!value_;
}
@synthesize item1;
- (BOOL) hasItem2 {
  return !!hasItem2_;
}
- (void) setHasItem2:(BOOL) value_ {
  hasItem2_ = !!value_;
}
@synthesize item2;
- (BOOL) hasItem3 {
  return !!hasItem3_;
}
- (void) setHasItem3:(BOOL) value_ {
  hasItem3_ = !!value_;
}
@synthesize item3;
- (BOOL) hasItem4 {
  return !!hasItem4_;
}
- (void) setHasItem4:(BOOL) value_ {
  hasItem4_ = !!value_;
}
@synthesize item4;
- (BOOL) hasItem5 {
  return !!hasItem5_;
}
- (void) setHasItem5:(BOOL) value_ {
  hasItem5_ = !!value_;
}
@synthesize item5;
- (BOOL) hasExpectedTeamContribution {
  return !!hasExpectedTeamContribution_;
}
- (void) setHasExpectedTeamContribution:(BOOL) value_ {
  hasExpectedTeamContribution_ = !!value_;
}
@synthesize expectedTeamContribution;
- (BOOL) hasScaledMetric {
  return !!hasScaledMetric_;
}
- (void) setHasScaledMetric:(BOOL) value_ {
  hasScaledMetric_ = !!value_;
}
@synthesize scaledMetric;
- (BOOL) hasPreviousRank {
  return !!hasPreviousRank_;
}
- (void) setHasPreviousRank:(BOOL) value_ {
  hasPreviousRank_ = !!value_;
}
@synthesize previousRank;
- (BOOL) hasRankChange {
  return !!hasRankChange_;
}
- (void) setHasRankChange:(BOOL) value_ {
  hasRankChange_ = !!value_;
}
@synthesize rankChange;
- (BOOL) hasKills {
  return !!hasKills_;
}
- (void) setHasKills:(BOOL) value_ {
  hasKills_ = !!value_;
}
@synthesize kills;
- (BOOL) hasDeaths {
  return !!hasDeaths_;
}
- (void) setHasDeaths:(BOOL) value_ {
  hasDeaths_ = !!value_;
}
@synthesize deaths;
- (BOOL) hasAssists {
  return !!hasAssists_;
}
- (void) setHasAssists:(BOOL) value_ {
  hasAssists_ = !!value_;
}
@synthesize assists;
- (BOOL) hasLeaverStatus {
  return !!hasLeaverStatus_;
}
- (void) setHasLeaverStatus:(BOOL) value_ {
  hasLeaverStatus_ = !!value_;
}
@synthesize leaverStatus;
- (BOOL) hasGold {
  return !!hasGold_;
}
- (void) setHasGold:(BOOL) value_ {
  hasGold_ = !!value_;
}
@synthesize gold;
- (BOOL) hasLastHits {
  return !!hasLastHits_;
}
- (void) setHasLastHits:(BOOL) value_ {
  hasLastHits_ = !!value_;
}
@synthesize lastHits;
- (BOOL) hasDenies {
  return !!hasDenies_;
}
- (void) setHasDenies:(BOOL) value_ {
  hasDenies_ = !!value_;
}
@synthesize denies;
- (BOOL) hasGoldPerMin {
  return !!hasGoldPerMin_;
}
- (void) setHasGoldPerMin:(BOOL) value_ {
  hasGoldPerMin_ = !!value_;
}
@synthesize goldPerMin;
- (BOOL) hasXpPerMin {
  return !!hasXpPerMin_;
}
- (void) setHasXpPerMin:(BOOL) value_ {
  hasXpPerMin_ = !!value_;
}
@synthesize xpPerMin;
- (BOOL) hasGoldSpent {
  return !!hasGoldSpent_;
}
- (void) setHasGoldSpent:(BOOL) value_ {
  hasGoldSpent_ = !!value_;
}
@synthesize goldSpent;
- (BOOL) hasHeroDamage {
  return !!hasHeroDamage_;
}
- (void) setHasHeroDamage:(BOOL) value_ {
  hasHeroDamage_ = !!value_;
}
@synthesize heroDamage;
- (BOOL) hasTowerDamage {
  return !!hasTowerDamage_;
}
- (void) setHasTowerDamage:(BOOL) value_ {
  hasTowerDamage_ = !!value_;
}
@synthesize towerDamage;
- (BOOL) hasHeroHealing {
  return !!hasHeroHealing_;
}
- (void) setHasHeroHealing:(BOOL) value_ {
  hasHeroHealing_ = !!value_;
}
@synthesize heroHealing;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasTimeLastSeen {
  return !!hasTimeLastSeen_;
}
- (void) setHasTimeLastSeen:(BOOL) value_ {
  hasTimeLastSeen_ = !!value_;
}
@synthesize timeLastSeen;
- (BOOL) hasPlayerName {
  return !!hasPlayerName_;
}
- (void) setHasPlayerName:(BOOL) value_ {
  hasPlayerName_ = !!value_;
}
@synthesize playerName;
- (BOOL) hasSupportAbilityValue {
  return !!hasSupportAbilityValue_;
}
- (void) setHasSupportAbilityValue:(BOOL) value_ {
  hasSupportAbilityValue_ = !!value_;
}
@synthesize supportAbilityValue;
- (BOOL) hasFeedingDetected {
  return !!hasFeedingDetected_;
}
- (void) setHasFeedingDetected:(BOOL) value_ {
  hasFeedingDetected_ = !!value_;
}
- (BOOL) feedingDetected {
  return !!feedingDetected_;
}
- (void) setFeedingDetected:(BOOL) value_ {
  feedingDetected_ = !!value_;
}
- (BOOL) hasSearchRank {
  return !!hasSearchRank_;
}
- (void) setHasSearchRank:(BOOL) value_ {
  hasSearchRank_ = !!value_;
}
@synthesize searchRank;
- (BOOL) hasSearchRankUncertainty {
  return !!hasSearchRankUncertainty_;
}
- (void) setHasSearchRankUncertainty:(BOOL) value_ {
  hasSearchRankUncertainty_ = !!value_;
}
@synthesize searchRankUncertainty;
- (BOOL) hasRankUncertaintyChange {
  return !!hasRankUncertaintyChange_;
}
- (void) setHasRankUncertaintyChange:(BOOL) value_ {
  hasRankUncertaintyChange_ = !!value_;
}
@synthesize rankUncertaintyChange;
- (BOOL) hasHeroPlayCount {
  return !!hasHeroPlayCount_;
}
- (void) setHasHeroPlayCount:(BOOL) value_ {
  hasHeroPlayCount_ = !!value_;
}
@synthesize heroPlayCount;
- (BOOL) hasPartyId {
  return !!hasPartyId_;
}
- (void) setHasPartyId:(BOOL) value_ {
  hasPartyId_ = !!value_;
}
@synthesize partyId;
- (BOOL) hasScaledKills {
  return !!hasScaledKills_;
}
- (void) setHasScaledKills:(BOOL) value_ {
  hasScaledKills_ = !!value_;
}
@synthesize scaledKills;
- (BOOL) hasScaledDeaths {
  return !!hasScaledDeaths_;
}
- (void) setHasScaledDeaths:(BOOL) value_ {
  hasScaledDeaths_ = !!value_;
}
@synthesize scaledDeaths;
- (BOOL) hasScaledAssists {
  return !!hasScaledAssists_;
}
- (void) setHasScaledAssists:(BOOL) value_ {
  hasScaledAssists_ = !!value_;
}
@synthesize scaledAssists;
- (BOOL) hasClaimedFarmGold {
  return !!hasClaimedFarmGold_;
}
- (void) setHasClaimedFarmGold:(BOOL) value_ {
  hasClaimedFarmGold_ = !!value_;
}
@synthesize claimedFarmGold;
- (BOOL) hasSupportGold {
  return !!hasSupportGold_;
}
- (void) setHasSupportGold:(BOOL) value_ {
  hasSupportGold_ = !!value_;
}
@synthesize supportGold;
- (BOOL) hasClaimedDenies {
  return !!hasClaimedDenies_;
}
- (void) setHasClaimedDenies:(BOOL) value_ {
  hasClaimedDenies_ = !!value_;
}
@synthesize claimedDenies;
- (BOOL) hasClaimedMisses {
  return !!hasClaimedMisses_;
}
- (void) setHasClaimedMisses:(BOOL) value_ {
  hasClaimedMisses_ = !!value_;
}
@synthesize claimedMisses;
- (BOOL) hasMisses {
  return !!hasMisses_;
}
- (void) setHasMisses:(BOOL) value_ {
  hasMisses_ = !!value_;
}
@synthesize misses;
- (void) dealloc {
  self.playerName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.playerSlot = 0;
    self.heroId = 0;
    self.item0 = 0;
    self.item1 = 0;
    self.item2 = 0;
    self.item3 = 0;
    self.item4 = 0;
    self.item5 = 0;
    self.expectedTeamContribution = 0;
    self.scaledMetric = 0;
    self.previousRank = 0;
    self.rankChange = 0;
    self.kills = 0;
    self.deaths = 0;
    self.assists = 0;
    self.leaverStatus = 0;
    self.gold = 0;
    self.lastHits = 0;
    self.denies = 0;
    self.goldPerMin = 0;
    self.xpPerMin = 0;
    self.goldSpent = 0;
    self.heroDamage = 0;
    self.towerDamage = 0;
    self.heroHealing = 0;
    self.level = 0;
    self.timeLastSeen = 0;
    self.playerName = @"";
    self.supportAbilityValue = 0;
    self.feedingDetected = NO;
    self.searchRank = 0;
    self.searchRankUncertainty = 0;
    self.rankUncertaintyChange = 0;
    self.heroPlayCount = 0;
    self.partyId = 0L;
    self.scaledKills = 0;
    self.scaledDeaths = 0;
    self.scaledAssists = 0;
    self.claimedFarmGold = 0;
    self.supportGold = 0;
    self.claimedDenies = 0;
    self.claimedMisses = 0;
    self.misses = 0;
  }
  return self;
}
static CMsgDOTAMatch_Player* defaultCMsgDOTAMatch_PlayerInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAMatch_Player class]) {
    defaultCMsgDOTAMatch_PlayerInstance = [[CMsgDOTAMatch_Player alloc] init];
  }
}
+ (CMsgDOTAMatch_Player*) defaultInstance {
  return defaultCMsgDOTAMatch_PlayerInstance;
}
- (CMsgDOTAMatch_Player*) defaultInstance {
  return defaultCMsgDOTAMatch_PlayerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasPlayerSlot) {
    [output writeUInt32:2 value:self.playerSlot];
  }
  if (self.hasHeroId) {
    [output writeUInt32:3 value:self.heroId];
  }
  if (self.hasItem0) {
    [output writeUInt32:4 value:self.item0];
  }
  if (self.hasItem1) {
    [output writeUInt32:5 value:self.item1];
  }
  if (self.hasItem2) {
    [output writeUInt32:6 value:self.item2];
  }
  if (self.hasItem3) {
    [output writeUInt32:7 value:self.item3];
  }
  if (self.hasItem4) {
    [output writeUInt32:8 value:self.item4];
  }
  if (self.hasItem5) {
    [output writeUInt32:9 value:self.item5];
  }
  if (self.hasExpectedTeamContribution) {
    [output writeFloat:10 value:self.expectedTeamContribution];
  }
  if (self.hasScaledMetric) {
    [output writeFloat:11 value:self.scaledMetric];
  }
  if (self.hasPreviousRank) {
    [output writeUInt32:12 value:self.previousRank];
  }
  if (self.hasRankChange) {
    [output writeUInt32:13 value:self.rankChange];
  }
  if (self.hasKills) {
    [output writeUInt32:14 value:self.kills];
  }
  if (self.hasDeaths) {
    [output writeUInt32:15 value:self.deaths];
  }
  if (self.hasAssists) {
    [output writeUInt32:16 value:self.assists];
  }
  if (self.hasLeaverStatus) {
    [output writeUInt32:17 value:self.leaverStatus];
  }
  if (self.hasGold) {
    [output writeUInt32:18 value:self.gold];
  }
  if (self.hasLastHits) {
    [output writeUInt32:19 value:self.lastHits];
  }
  if (self.hasDenies) {
    [output writeUInt32:20 value:self.denies];
  }
  if (self.hasGoldPerMin) {
    [output writeUInt32:21 value:self.goldPerMin];
  }
  if (self.hasXpPerMin) {
    [output writeUInt32:22 value:self.xpPerMin];
  }
  if (self.hasGoldSpent) {
    [output writeUInt32:23 value:self.goldSpent];
  }
  if (self.hasHeroDamage) {
    [output writeUInt32:24 value:self.heroDamage];
  }
  if (self.hasTowerDamage) {
    [output writeUInt32:25 value:self.towerDamage];
  }
  if (self.hasHeroHealing) {
    [output writeUInt32:26 value:self.heroHealing];
  }
  if (self.hasLevel) {
    [output writeUInt32:27 value:self.level];
  }
  if (self.hasTimeLastSeen) {
    [output writeUInt32:28 value:self.timeLastSeen];
  }
  if (self.hasPlayerName) {
    [output writeString:29 value:self.playerName];
  }
  if (self.hasSupportAbilityValue) {
    [output writeUInt32:30 value:self.supportAbilityValue];
  }
  if (self.hasFeedingDetected) {
    [output writeBool:32 value:self.feedingDetected];
  }
  if (self.hasSearchRank) {
    [output writeUInt32:34 value:self.searchRank];
  }
  if (self.hasSearchRankUncertainty) {
    [output writeUInt32:35 value:self.searchRankUncertainty];
  }
  if (self.hasRankUncertaintyChange) {
    [output writeUInt32:36 value:self.rankUncertaintyChange];
  }
  if (self.hasHeroPlayCount) {
    [output writeUInt32:37 value:self.heroPlayCount];
  }
  if (self.hasPartyId) {
    [output writeFixed64:38 value:self.partyId];
  }
  if (self.hasScaledKills) {
    [output writeFloat:39 value:self.scaledKills];
  }
  if (self.hasScaledDeaths) {
    [output writeFloat:40 value:self.scaledDeaths];
  }
  if (self.hasScaledAssists) {
    [output writeFloat:41 value:self.scaledAssists];
  }
  if (self.hasClaimedFarmGold) {
    [output writeUInt32:42 value:self.claimedFarmGold];
  }
  if (self.hasSupportGold) {
    [output writeUInt32:43 value:self.supportGold];
  }
  if (self.hasClaimedDenies) {
    [output writeUInt32:44 value:self.claimedDenies];
  }
  if (self.hasClaimedMisses) {
    [output writeUInt32:45 value:self.claimedMisses];
  }
  if (self.hasMisses) {
    [output writeUInt32:46 value:self.misses];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasPlayerSlot) {
    size_ += computeUInt32Size(2, self.playerSlot);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(3, self.heroId);
  }
  if (self.hasItem0) {
    size_ += computeUInt32Size(4, self.item0);
  }
  if (self.hasItem1) {
    size_ += computeUInt32Size(5, self.item1);
  }
  if (self.hasItem2) {
    size_ += computeUInt32Size(6, self.item2);
  }
  if (self.hasItem3) {
    size_ += computeUInt32Size(7, self.item3);
  }
  if (self.hasItem4) {
    size_ += computeUInt32Size(8, self.item4);
  }
  if (self.hasItem5) {
    size_ += computeUInt32Size(9, self.item5);
  }
  if (self.hasExpectedTeamContribution) {
    size_ += computeFloatSize(10, self.expectedTeamContribution);
  }
  if (self.hasScaledMetric) {
    size_ += computeFloatSize(11, self.scaledMetric);
  }
  if (self.hasPreviousRank) {
    size_ += computeUInt32Size(12, self.previousRank);
  }
  if (self.hasRankChange) {
    size_ += computeUInt32Size(13, self.rankChange);
  }
  if (self.hasKills) {
    size_ += computeUInt32Size(14, self.kills);
  }
  if (self.hasDeaths) {
    size_ += computeUInt32Size(15, self.deaths);
  }
  if (self.hasAssists) {
    size_ += computeUInt32Size(16, self.assists);
  }
  if (self.hasLeaverStatus) {
    size_ += computeUInt32Size(17, self.leaverStatus);
  }
  if (self.hasGold) {
    size_ += computeUInt32Size(18, self.gold);
  }
  if (self.hasLastHits) {
    size_ += computeUInt32Size(19, self.lastHits);
  }
  if (self.hasDenies) {
    size_ += computeUInt32Size(20, self.denies);
  }
  if (self.hasGoldPerMin) {
    size_ += computeUInt32Size(21, self.goldPerMin);
  }
  if (self.hasXpPerMin) {
    size_ += computeUInt32Size(22, self.xpPerMin);
  }
  if (self.hasGoldSpent) {
    size_ += computeUInt32Size(23, self.goldSpent);
  }
  if (self.hasHeroDamage) {
    size_ += computeUInt32Size(24, self.heroDamage);
  }
  if (self.hasTowerDamage) {
    size_ += computeUInt32Size(25, self.towerDamage);
  }
  if (self.hasHeroHealing) {
    size_ += computeUInt32Size(26, self.heroHealing);
  }
  if (self.hasLevel) {
    size_ += computeUInt32Size(27, self.level);
  }
  if (self.hasTimeLastSeen) {
    size_ += computeUInt32Size(28, self.timeLastSeen);
  }
  if (self.hasPlayerName) {
    size_ += computeStringSize(29, self.playerName);
  }
  if (self.hasSupportAbilityValue) {
    size_ += computeUInt32Size(30, self.supportAbilityValue);
  }
  if (self.hasFeedingDetected) {
    size_ += computeBoolSize(32, self.feedingDetected);
  }
  if (self.hasSearchRank) {
    size_ += computeUInt32Size(34, self.searchRank);
  }
  if (self.hasSearchRankUncertainty) {
    size_ += computeUInt32Size(35, self.searchRankUncertainty);
  }
  if (self.hasRankUncertaintyChange) {
    size_ += computeUInt32Size(36, self.rankUncertaintyChange);
  }
  if (self.hasHeroPlayCount) {
    size_ += computeUInt32Size(37, self.heroPlayCount);
  }
  if (self.hasPartyId) {
    size_ += computeFixed64Size(38, self.partyId);
  }
  if (self.hasScaledKills) {
    size_ += computeFloatSize(39, self.scaledKills);
  }
  if (self.hasScaledDeaths) {
    size_ += computeFloatSize(40, self.scaledDeaths);
  }
  if (self.hasScaledAssists) {
    size_ += computeFloatSize(41, self.scaledAssists);
  }
  if (self.hasClaimedFarmGold) {
    size_ += computeUInt32Size(42, self.claimedFarmGold);
  }
  if (self.hasSupportGold) {
    size_ += computeUInt32Size(43, self.supportGold);
  }
  if (self.hasClaimedDenies) {
    size_ += computeUInt32Size(44, self.claimedDenies);
  }
  if (self.hasClaimedMisses) {
    size_ += computeUInt32Size(45, self.claimedMisses);
  }
  if (self.hasMisses) {
    size_ += computeUInt32Size(46, self.misses);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAMatch_Player*) parseFromData:(NSData*) data {
  return (CMsgDOTAMatch_Player*)[[[CMsgDOTAMatch_Player builder] mergeFromData:data] build];
}
+ (CMsgDOTAMatch_Player*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatch_Player*)[[[CMsgDOTAMatch_Player builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatch_Player*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAMatch_Player*)[[[CMsgDOTAMatch_Player builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAMatch_Player*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatch_Player*)[[[CMsgDOTAMatch_Player builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatch_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAMatch_Player*)[[[CMsgDOTAMatch_Player builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAMatch_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatch_Player*)[[[CMsgDOTAMatch_Player builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatch_Player_Builder*) builder {
  return [[[CMsgDOTAMatch_Player_Builder alloc] init] autorelease];
}
+ (CMsgDOTAMatch_Player_Builder*) builderWithPrototype:(CMsgDOTAMatch_Player*) prototype {
  return [[CMsgDOTAMatch_Player builder] mergeFrom:prototype];
}
- (CMsgDOTAMatch_Player_Builder*) builder {
  return [CMsgDOTAMatch_Player builder];
}
- (CMsgDOTAMatch_Player_Builder*) toBuilder {
  return [CMsgDOTAMatch_Player builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasPlayerSlot) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerSlot", [NSNumber numberWithInt:self.playerSlot]];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  if (self.hasItem0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item0", [NSNumber numberWithInt:self.item0]];
  }
  if (self.hasItem1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item1", [NSNumber numberWithInt:self.item1]];
  }
  if (self.hasItem2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item2", [NSNumber numberWithInt:self.item2]];
  }
  if (self.hasItem3) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item3", [NSNumber numberWithInt:self.item3]];
  }
  if (self.hasItem4) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item4", [NSNumber numberWithInt:self.item4]];
  }
  if (self.hasItem5) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item5", [NSNumber numberWithInt:self.item5]];
  }
  if (self.hasExpectedTeamContribution) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expectedTeamContribution", [NSNumber numberWithFloat:self.expectedTeamContribution]];
  }
  if (self.hasScaledMetric) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scaledMetric", [NSNumber numberWithFloat:self.scaledMetric]];
  }
  if (self.hasPreviousRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"previousRank", [NSNumber numberWithInt:self.previousRank]];
  }
  if (self.hasRankChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rankChange", [NSNumber numberWithInt:self.rankChange]];
  }
  if (self.hasKills) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kills", [NSNumber numberWithInt:self.kills]];
  }
  if (self.hasDeaths) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deaths", [NSNumber numberWithInt:self.deaths]];
  }
  if (self.hasAssists) {
    [output appendFormat:@"%@%@: %@\n", indent, @"assists", [NSNumber numberWithInt:self.assists]];
  }
  if (self.hasLeaverStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaverStatus", [NSNumber numberWithInt:self.leaverStatus]];
  }
  if (self.hasGold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gold", [NSNumber numberWithInt:self.gold]];
  }
  if (self.hasLastHits) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastHits", [NSNumber numberWithInt:self.lastHits]];
  }
  if (self.hasDenies) {
    [output appendFormat:@"%@%@: %@\n", indent, @"denies", [NSNumber numberWithInt:self.denies]];
  }
  if (self.hasGoldPerMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goldPerMin", [NSNumber numberWithInt:self.goldPerMin]];
  }
  if (self.hasXpPerMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xpPerMin", [NSNumber numberWithInt:self.xpPerMin]];
  }
  if (self.hasGoldSpent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goldSpent", [NSNumber numberWithInt:self.goldSpent]];
  }
  if (self.hasHeroDamage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroDamage", [NSNumber numberWithInt:self.heroDamage]];
  }
  if (self.hasTowerDamage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"towerDamage", [NSNumber numberWithInt:self.towerDamage]];
  }
  if (self.hasHeroHealing) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroHealing", [NSNumber numberWithInt:self.heroHealing]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInt:self.level]];
  }
  if (self.hasTimeLastSeen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeLastSeen", [NSNumber numberWithInt:self.timeLastSeen]];
  }
  if (self.hasPlayerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerName", self.playerName];
  }
  if (self.hasSupportAbilityValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportAbilityValue", [NSNumber numberWithInt:self.supportAbilityValue]];
  }
  if (self.hasFeedingDetected) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feedingDetected", [NSNumber numberWithBool:self.feedingDetected]];
  }
  if (self.hasSearchRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchRank", [NSNumber numberWithInt:self.searchRank]];
  }
  if (self.hasSearchRankUncertainty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchRankUncertainty", [NSNumber numberWithInt:self.searchRankUncertainty]];
  }
  if (self.hasRankUncertaintyChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rankUncertaintyChange", [NSNumber numberWithInt:self.rankUncertaintyChange]];
  }
  if (self.hasHeroPlayCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroPlayCount", [NSNumber numberWithInt:self.heroPlayCount]];
  }
  if (self.hasPartyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"partyId", [NSNumber numberWithLongLong:self.partyId]];
  }
  if (self.hasScaledKills) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scaledKills", [NSNumber numberWithFloat:self.scaledKills]];
  }
  if (self.hasScaledDeaths) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scaledDeaths", [NSNumber numberWithFloat:self.scaledDeaths]];
  }
  if (self.hasScaledAssists) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scaledAssists", [NSNumber numberWithFloat:self.scaledAssists]];
  }
  if (self.hasClaimedFarmGold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"claimedFarmGold", [NSNumber numberWithInt:self.claimedFarmGold]];
  }
  if (self.hasSupportGold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportGold", [NSNumber numberWithInt:self.supportGold]];
  }
  if (self.hasClaimedDenies) {
    [output appendFormat:@"%@%@: %@\n", indent, @"claimedDenies", [NSNumber numberWithInt:self.claimedDenies]];
  }
  if (self.hasClaimedMisses) {
    [output appendFormat:@"%@%@: %@\n", indent, @"claimedMisses", [NSNumber numberWithInt:self.claimedMisses]];
  }
  if (self.hasMisses) {
    [output appendFormat:@"%@%@: %@\n", indent, @"misses", [NSNumber numberWithInt:self.misses]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAMatch_Player class]]) {
    return NO;
  }
  CMsgDOTAMatch_Player *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasPlayerSlot == otherMessage.hasPlayerSlot &&
      (!self.hasPlayerSlot || self.playerSlot == otherMessage.playerSlot) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      self.hasItem0 == otherMessage.hasItem0 &&
      (!self.hasItem0 || self.item0 == otherMessage.item0) &&
      self.hasItem1 == otherMessage.hasItem1 &&
      (!self.hasItem1 || self.item1 == otherMessage.item1) &&
      self.hasItem2 == otherMessage.hasItem2 &&
      (!self.hasItem2 || self.item2 == otherMessage.item2) &&
      self.hasItem3 == otherMessage.hasItem3 &&
      (!self.hasItem3 || self.item3 == otherMessage.item3) &&
      self.hasItem4 == otherMessage.hasItem4 &&
      (!self.hasItem4 || self.item4 == otherMessage.item4) &&
      self.hasItem5 == otherMessage.hasItem5 &&
      (!self.hasItem5 || self.item5 == otherMessage.item5) &&
      self.hasExpectedTeamContribution == otherMessage.hasExpectedTeamContribution &&
      (!self.hasExpectedTeamContribution || self.expectedTeamContribution == otherMessage.expectedTeamContribution) &&
      self.hasScaledMetric == otherMessage.hasScaledMetric &&
      (!self.hasScaledMetric || self.scaledMetric == otherMessage.scaledMetric) &&
      self.hasPreviousRank == otherMessage.hasPreviousRank &&
      (!self.hasPreviousRank || self.previousRank == otherMessage.previousRank) &&
      self.hasRankChange == otherMessage.hasRankChange &&
      (!self.hasRankChange || self.rankChange == otherMessage.rankChange) &&
      self.hasKills == otherMessage.hasKills &&
      (!self.hasKills || self.kills == otherMessage.kills) &&
      self.hasDeaths == otherMessage.hasDeaths &&
      (!self.hasDeaths || self.deaths == otherMessage.deaths) &&
      self.hasAssists == otherMessage.hasAssists &&
      (!self.hasAssists || self.assists == otherMessage.assists) &&
      self.hasLeaverStatus == otherMessage.hasLeaverStatus &&
      (!self.hasLeaverStatus || self.leaverStatus == otherMessage.leaverStatus) &&
      self.hasGold == otherMessage.hasGold &&
      (!self.hasGold || self.gold == otherMessage.gold) &&
      self.hasLastHits == otherMessage.hasLastHits &&
      (!self.hasLastHits || self.lastHits == otherMessage.lastHits) &&
      self.hasDenies == otherMessage.hasDenies &&
      (!self.hasDenies || self.denies == otherMessage.denies) &&
      self.hasGoldPerMin == otherMessage.hasGoldPerMin &&
      (!self.hasGoldPerMin || self.goldPerMin == otherMessage.goldPerMin) &&
      self.hasXpPerMin == otherMessage.hasXpPerMin &&
      (!self.hasXpPerMin || self.xpPerMin == otherMessage.xpPerMin) &&
      self.hasGoldSpent == otherMessage.hasGoldSpent &&
      (!self.hasGoldSpent || self.goldSpent == otherMessage.goldSpent) &&
      self.hasHeroDamage == otherMessage.hasHeroDamage &&
      (!self.hasHeroDamage || self.heroDamage == otherMessage.heroDamage) &&
      self.hasTowerDamage == otherMessage.hasTowerDamage &&
      (!self.hasTowerDamage || self.towerDamage == otherMessage.towerDamage) &&
      self.hasHeroHealing == otherMessage.hasHeroHealing &&
      (!self.hasHeroHealing || self.heroHealing == otherMessage.heroHealing) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasTimeLastSeen == otherMessage.hasTimeLastSeen &&
      (!self.hasTimeLastSeen || self.timeLastSeen == otherMessage.timeLastSeen) &&
      self.hasPlayerName == otherMessage.hasPlayerName &&
      (!self.hasPlayerName || [self.playerName isEqual:otherMessage.playerName]) &&
      self.hasSupportAbilityValue == otherMessage.hasSupportAbilityValue &&
      (!self.hasSupportAbilityValue || self.supportAbilityValue == otherMessage.supportAbilityValue) &&
      self.hasFeedingDetected == otherMessage.hasFeedingDetected &&
      (!self.hasFeedingDetected || self.feedingDetected == otherMessage.feedingDetected) &&
      self.hasSearchRank == otherMessage.hasSearchRank &&
      (!self.hasSearchRank || self.searchRank == otherMessage.searchRank) &&
      self.hasSearchRankUncertainty == otherMessage.hasSearchRankUncertainty &&
      (!self.hasSearchRankUncertainty || self.searchRankUncertainty == otherMessage.searchRankUncertainty) &&
      self.hasRankUncertaintyChange == otherMessage.hasRankUncertaintyChange &&
      (!self.hasRankUncertaintyChange || self.rankUncertaintyChange == otherMessage.rankUncertaintyChange) &&
      self.hasHeroPlayCount == otherMessage.hasHeroPlayCount &&
      (!self.hasHeroPlayCount || self.heroPlayCount == otherMessage.heroPlayCount) &&
      self.hasPartyId == otherMessage.hasPartyId &&
      (!self.hasPartyId || self.partyId == otherMessage.partyId) &&
      self.hasScaledKills == otherMessage.hasScaledKills &&
      (!self.hasScaledKills || self.scaledKills == otherMessage.scaledKills) &&
      self.hasScaledDeaths == otherMessage.hasScaledDeaths &&
      (!self.hasScaledDeaths || self.scaledDeaths == otherMessage.scaledDeaths) &&
      self.hasScaledAssists == otherMessage.hasScaledAssists &&
      (!self.hasScaledAssists || self.scaledAssists == otherMessage.scaledAssists) &&
      self.hasClaimedFarmGold == otherMessage.hasClaimedFarmGold &&
      (!self.hasClaimedFarmGold || self.claimedFarmGold == otherMessage.claimedFarmGold) &&
      self.hasSupportGold == otherMessage.hasSupportGold &&
      (!self.hasSupportGold || self.supportGold == otherMessage.supportGold) &&
      self.hasClaimedDenies == otherMessage.hasClaimedDenies &&
      (!self.hasClaimedDenies || self.claimedDenies == otherMessage.claimedDenies) &&
      self.hasClaimedMisses == otherMessage.hasClaimedMisses &&
      (!self.hasClaimedMisses || self.claimedMisses == otherMessage.claimedMisses) &&
      self.hasMisses == otherMessage.hasMisses &&
      (!self.hasMisses || self.misses == otherMessage.misses) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasPlayerSlot) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.playerSlot] hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  if (self.hasItem0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item0] hash];
  }
  if (self.hasItem1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item1] hash];
  }
  if (self.hasItem2) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item2] hash];
  }
  if (self.hasItem3) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item3] hash];
  }
  if (self.hasItem4) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item4] hash];
  }
  if (self.hasItem5) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item5] hash];
  }
  if (self.hasExpectedTeamContribution) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.expectedTeamContribution] hash];
  }
  if (self.hasScaledMetric) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.scaledMetric] hash];
  }
  if (self.hasPreviousRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.previousRank] hash];
  }
  if (self.hasRankChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rankChange] hash];
  }
  if (self.hasKills) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.kills] hash];
  }
  if (self.hasDeaths) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.deaths] hash];
  }
  if (self.hasAssists) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.assists] hash];
  }
  if (self.hasLeaverStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leaverStatus] hash];
  }
  if (self.hasGold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gold] hash];
  }
  if (self.hasLastHits) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lastHits] hash];
  }
  if (self.hasDenies) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.denies] hash];
  }
  if (self.hasGoldPerMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.goldPerMin] hash];
  }
  if (self.hasXpPerMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.xpPerMin] hash];
  }
  if (self.hasGoldSpent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.goldSpent] hash];
  }
  if (self.hasHeroDamage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroDamage] hash];
  }
  if (self.hasTowerDamage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.towerDamage] hash];
  }
  if (self.hasHeroHealing) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroHealing] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.level] hash];
  }
  if (self.hasTimeLastSeen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeLastSeen] hash];
  }
  if (self.hasPlayerName) {
    hashCode = hashCode * 31 + [self.playerName hash];
  }
  if (self.hasSupportAbilityValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.supportAbilityValue] hash];
  }
  if (self.hasFeedingDetected) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.feedingDetected] hash];
  }
  if (self.hasSearchRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.searchRank] hash];
  }
  if (self.hasSearchRankUncertainty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.searchRankUncertainty] hash];
  }
  if (self.hasRankUncertaintyChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rankUncertaintyChange] hash];
  }
  if (self.hasHeroPlayCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroPlayCount] hash];
  }
  if (self.hasPartyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.partyId] hash];
  }
  if (self.hasScaledKills) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.scaledKills] hash];
  }
  if (self.hasScaledDeaths) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.scaledDeaths] hash];
  }
  if (self.hasScaledAssists) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.scaledAssists] hash];
  }
  if (self.hasClaimedFarmGold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.claimedFarmGold] hash];
  }
  if (self.hasSupportGold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.supportGold] hash];
  }
  if (self.hasClaimedDenies) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.claimedDenies] hash];
  }
  if (self.hasClaimedMisses) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.claimedMisses] hash];
  }
  if (self.hasMisses) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.misses] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAMatch_Player_Builder()
@property (retain) CMsgDOTAMatch_Player* _builderResult;
@end

@implementation CMsgDOTAMatch_Player_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAMatch_Player alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAMatch_Player_Builder*) clear {
  _builderResult = [[[CMsgDOTAMatch_Player alloc] init] autorelease];
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clone {
  return [CMsgDOTAMatch_Player builderWithPrototype:_builderResult];
}
- (CMsgDOTAMatch_Player*) defaultInstance {
  return [CMsgDOTAMatch_Player defaultInstance];
}
- (CMsgDOTAMatch_Player*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAMatch_Player*) buildPartial {
  CMsgDOTAMatch_Player* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAMatch_Player_Builder*) mergeFrom:(CMsgDOTAMatch_Player*) other {
  if (other == [CMsgDOTAMatch_Player defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasPlayerSlot) {
    [self setPlayerSlot:other.playerSlot];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.hasItem0) {
    [self setItem0:other.item0];
  }
  if (other.hasItem1) {
    [self setItem1:other.item1];
  }
  if (other.hasItem2) {
    [self setItem2:other.item2];
  }
  if (other.hasItem3) {
    [self setItem3:other.item3];
  }
  if (other.hasItem4) {
    [self setItem4:other.item4];
  }
  if (other.hasItem5) {
    [self setItem5:other.item5];
  }
  if (other.hasExpectedTeamContribution) {
    [self setExpectedTeamContribution:other.expectedTeamContribution];
  }
  if (other.hasScaledMetric) {
    [self setScaledMetric:other.scaledMetric];
  }
  if (other.hasPreviousRank) {
    [self setPreviousRank:other.previousRank];
  }
  if (other.hasRankChange) {
    [self setRankChange:other.rankChange];
  }
  if (other.hasKills) {
    [self setKills:other.kills];
  }
  if (other.hasDeaths) {
    [self setDeaths:other.deaths];
  }
  if (other.hasAssists) {
    [self setAssists:other.assists];
  }
  if (other.hasLeaverStatus) {
    [self setLeaverStatus:other.leaverStatus];
  }
  if (other.hasGold) {
    [self setGold:other.gold];
  }
  if (other.hasLastHits) {
    [self setLastHits:other.lastHits];
  }
  if (other.hasDenies) {
    [self setDenies:other.denies];
  }
  if (other.hasGoldPerMin) {
    [self setGoldPerMin:other.goldPerMin];
  }
  if (other.hasXpPerMin) {
    [self setXpPerMin:other.xpPerMin];
  }
  if (other.hasGoldSpent) {
    [self setGoldSpent:other.goldSpent];
  }
  if (other.hasHeroDamage) {
    [self setHeroDamage:other.heroDamage];
  }
  if (other.hasTowerDamage) {
    [self setTowerDamage:other.towerDamage];
  }
  if (other.hasHeroHealing) {
    [self setHeroHealing:other.heroHealing];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasTimeLastSeen) {
    [self setTimeLastSeen:other.timeLastSeen];
  }
  if (other.hasPlayerName) {
    [self setPlayerName:other.playerName];
  }
  if (other.hasSupportAbilityValue) {
    [self setSupportAbilityValue:other.supportAbilityValue];
  }
  if (other.hasFeedingDetected) {
    [self setFeedingDetected:other.feedingDetected];
  }
  if (other.hasSearchRank) {
    [self setSearchRank:other.searchRank];
  }
  if (other.hasSearchRankUncertainty) {
    [self setSearchRankUncertainty:other.searchRankUncertainty];
  }
  if (other.hasRankUncertaintyChange) {
    [self setRankUncertaintyChange:other.rankUncertaintyChange];
  }
  if (other.hasHeroPlayCount) {
    [self setHeroPlayCount:other.heroPlayCount];
  }
  if (other.hasPartyId) {
    [self setPartyId:other.partyId];
  }
  if (other.hasScaledKills) {
    [self setScaledKills:other.scaledKills];
  }
  if (other.hasScaledDeaths) {
    [self setScaledDeaths:other.scaledDeaths];
  }
  if (other.hasScaledAssists) {
    [self setScaledAssists:other.scaledAssists];
  }
  if (other.hasClaimedFarmGold) {
    [self setClaimedFarmGold:other.claimedFarmGold];
  }
  if (other.hasSupportGold) {
    [self setSupportGold:other.supportGold];
  }
  if (other.hasClaimedDenies) {
    [self setClaimedDenies:other.claimedDenies];
  }
  if (other.hasClaimedMisses) {
    [self setClaimedMisses:other.claimedMisses];
  }
  if (other.hasMisses) {
    [self setMisses:other.misses];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAMatch_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setPlayerSlot:[input readUInt32]];
        break;
      }
      case 24: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setItem0:[input readUInt32]];
        break;
      }
      case 40: {
        [self setItem1:[input readUInt32]];
        break;
      }
      case 48: {
        [self setItem2:[input readUInt32]];
        break;
      }
      case 56: {
        [self setItem3:[input readUInt32]];
        break;
      }
      case 64: {
        [self setItem4:[input readUInt32]];
        break;
      }
      case 72: {
        [self setItem5:[input readUInt32]];
        break;
      }
      case 85: {
        [self setExpectedTeamContribution:[input readFloat]];
        break;
      }
      case 93: {
        [self setScaledMetric:[input readFloat]];
        break;
      }
      case 96: {
        [self setPreviousRank:[input readUInt32]];
        break;
      }
      case 104: {
        [self setRankChange:[input readUInt32]];
        break;
      }
      case 112: {
        [self setKills:[input readUInt32]];
        break;
      }
      case 120: {
        [self setDeaths:[input readUInt32]];
        break;
      }
      case 128: {
        [self setAssists:[input readUInt32]];
        break;
      }
      case 136: {
        [self setLeaverStatus:[input readUInt32]];
        break;
      }
      case 144: {
        [self setGold:[input readUInt32]];
        break;
      }
      case 152: {
        [self setLastHits:[input readUInt32]];
        break;
      }
      case 160: {
        [self setDenies:[input readUInt32]];
        break;
      }
      case 168: {
        [self setGoldPerMin:[input readUInt32]];
        break;
      }
      case 176: {
        [self setXpPerMin:[input readUInt32]];
        break;
      }
      case 184: {
        [self setGoldSpent:[input readUInt32]];
        break;
      }
      case 192: {
        [self setHeroDamage:[input readUInt32]];
        break;
      }
      case 200: {
        [self setTowerDamage:[input readUInt32]];
        break;
      }
      case 208: {
        [self setHeroHealing:[input readUInt32]];
        break;
      }
      case 216: {
        [self setLevel:[input readUInt32]];
        break;
      }
      case 224: {
        [self setTimeLastSeen:[input readUInt32]];
        break;
      }
      case 234: {
        [self setPlayerName:[input readString]];
        break;
      }
      case 240: {
        [self setSupportAbilityValue:[input readUInt32]];
        break;
      }
      case 256: {
        [self setFeedingDetected:[input readBool]];
        break;
      }
      case 272: {
        [self setSearchRank:[input readUInt32]];
        break;
      }
      case 280: {
        [self setSearchRankUncertainty:[input readUInt32]];
        break;
      }
      case 288: {
        [self setRankUncertaintyChange:[input readUInt32]];
        break;
      }
      case 296: {
        [self setHeroPlayCount:[input readUInt32]];
        break;
      }
      case 305: {
        [self setPartyId:[input readFixed64]];
        break;
      }
      case 317: {
        [self setScaledKills:[input readFloat]];
        break;
      }
      case 325: {
        [self setScaledDeaths:[input readFloat]];
        break;
      }
      case 333: {
        [self setScaledAssists:[input readFloat]];
        break;
      }
      case 336: {
        [self setClaimedFarmGold:[input readUInt32]];
        break;
      }
      case 344: {
        [self setSupportGold:[input readUInt32]];
        break;
      }
      case 352: {
        [self setClaimedDenies:[input readUInt32]];
        break;
      }
      case 360: {
        [self setClaimedMisses:[input readUInt32]];
        break;
      }
      case 368: {
        [self setMisses:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTAMatch_Player_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasPlayerSlot {
  return _builderResult.hasPlayerSlot;
}
- (uint32_t) playerSlot {
  return _builderResult.playerSlot;
}
- (CMsgDOTAMatch_Player_Builder*) setPlayerSlot:(uint32_t) value {
  _builderResult.hasPlayerSlot = YES;
  _builderResult.playerSlot = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearPlayerSlot {
  _builderResult.hasPlayerSlot = NO;
  _builderResult.playerSlot = 0;
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTAMatch_Player_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (BOOL) hasItem0 {
  return _builderResult.hasItem0;
}
- (uint32_t) item0 {
  return _builderResult.item0;
}
- (CMsgDOTAMatch_Player_Builder*) setItem0:(uint32_t) value {
  _builderResult.hasItem0 = YES;
  _builderResult.item0 = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearItem0 {
  _builderResult.hasItem0 = NO;
  _builderResult.item0 = 0;
  return self;
}
- (BOOL) hasItem1 {
  return _builderResult.hasItem1;
}
- (uint32_t) item1 {
  return _builderResult.item1;
}
- (CMsgDOTAMatch_Player_Builder*) setItem1:(uint32_t) value {
  _builderResult.hasItem1 = YES;
  _builderResult.item1 = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearItem1 {
  _builderResult.hasItem1 = NO;
  _builderResult.item1 = 0;
  return self;
}
- (BOOL) hasItem2 {
  return _builderResult.hasItem2;
}
- (uint32_t) item2 {
  return _builderResult.item2;
}
- (CMsgDOTAMatch_Player_Builder*) setItem2:(uint32_t) value {
  _builderResult.hasItem2 = YES;
  _builderResult.item2 = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearItem2 {
  _builderResult.hasItem2 = NO;
  _builderResult.item2 = 0;
  return self;
}
- (BOOL) hasItem3 {
  return _builderResult.hasItem3;
}
- (uint32_t) item3 {
  return _builderResult.item3;
}
- (CMsgDOTAMatch_Player_Builder*) setItem3:(uint32_t) value {
  _builderResult.hasItem3 = YES;
  _builderResult.item3 = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearItem3 {
  _builderResult.hasItem3 = NO;
  _builderResult.item3 = 0;
  return self;
}
- (BOOL) hasItem4 {
  return _builderResult.hasItem4;
}
- (uint32_t) item4 {
  return _builderResult.item4;
}
- (CMsgDOTAMatch_Player_Builder*) setItem4:(uint32_t) value {
  _builderResult.hasItem4 = YES;
  _builderResult.item4 = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearItem4 {
  _builderResult.hasItem4 = NO;
  _builderResult.item4 = 0;
  return self;
}
- (BOOL) hasItem5 {
  return _builderResult.hasItem5;
}
- (uint32_t) item5 {
  return _builderResult.item5;
}
- (CMsgDOTAMatch_Player_Builder*) setItem5:(uint32_t) value {
  _builderResult.hasItem5 = YES;
  _builderResult.item5 = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearItem5 {
  _builderResult.hasItem5 = NO;
  _builderResult.item5 = 0;
  return self;
}
- (BOOL) hasExpectedTeamContribution {
  return _builderResult.hasExpectedTeamContribution;
}
- (Float32) expectedTeamContribution {
  return _builderResult.expectedTeamContribution;
}
- (CMsgDOTAMatch_Player_Builder*) setExpectedTeamContribution:(Float32) value {
  _builderResult.hasExpectedTeamContribution = YES;
  _builderResult.expectedTeamContribution = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearExpectedTeamContribution {
  _builderResult.hasExpectedTeamContribution = NO;
  _builderResult.expectedTeamContribution = 0;
  return self;
}
- (BOOL) hasScaledMetric {
  return _builderResult.hasScaledMetric;
}
- (Float32) scaledMetric {
  return _builderResult.scaledMetric;
}
- (CMsgDOTAMatch_Player_Builder*) setScaledMetric:(Float32) value {
  _builderResult.hasScaledMetric = YES;
  _builderResult.scaledMetric = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearScaledMetric {
  _builderResult.hasScaledMetric = NO;
  _builderResult.scaledMetric = 0;
  return self;
}
- (BOOL) hasPreviousRank {
  return _builderResult.hasPreviousRank;
}
- (uint32_t) previousRank {
  return _builderResult.previousRank;
}
- (CMsgDOTAMatch_Player_Builder*) setPreviousRank:(uint32_t) value {
  _builderResult.hasPreviousRank = YES;
  _builderResult.previousRank = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearPreviousRank {
  _builderResult.hasPreviousRank = NO;
  _builderResult.previousRank = 0;
  return self;
}
- (BOOL) hasRankChange {
  return _builderResult.hasRankChange;
}
- (uint32_t) rankChange {
  return _builderResult.rankChange;
}
- (CMsgDOTAMatch_Player_Builder*) setRankChange:(uint32_t) value {
  _builderResult.hasRankChange = YES;
  _builderResult.rankChange = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearRankChange {
  _builderResult.hasRankChange = NO;
  _builderResult.rankChange = 0;
  return self;
}
- (BOOL) hasKills {
  return _builderResult.hasKills;
}
- (uint32_t) kills {
  return _builderResult.kills;
}
- (CMsgDOTAMatch_Player_Builder*) setKills:(uint32_t) value {
  _builderResult.hasKills = YES;
  _builderResult.kills = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearKills {
  _builderResult.hasKills = NO;
  _builderResult.kills = 0;
  return self;
}
- (BOOL) hasDeaths {
  return _builderResult.hasDeaths;
}
- (uint32_t) deaths {
  return _builderResult.deaths;
}
- (CMsgDOTAMatch_Player_Builder*) setDeaths:(uint32_t) value {
  _builderResult.hasDeaths = YES;
  _builderResult.deaths = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearDeaths {
  _builderResult.hasDeaths = NO;
  _builderResult.deaths = 0;
  return self;
}
- (BOOL) hasAssists {
  return _builderResult.hasAssists;
}
- (uint32_t) assists {
  return _builderResult.assists;
}
- (CMsgDOTAMatch_Player_Builder*) setAssists:(uint32_t) value {
  _builderResult.hasAssists = YES;
  _builderResult.assists = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearAssists {
  _builderResult.hasAssists = NO;
  _builderResult.assists = 0;
  return self;
}
- (BOOL) hasLeaverStatus {
  return _builderResult.hasLeaverStatus;
}
- (uint32_t) leaverStatus {
  return _builderResult.leaverStatus;
}
- (CMsgDOTAMatch_Player_Builder*) setLeaverStatus:(uint32_t) value {
  _builderResult.hasLeaverStatus = YES;
  _builderResult.leaverStatus = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearLeaverStatus {
  _builderResult.hasLeaverStatus = NO;
  _builderResult.leaverStatus = 0;
  return self;
}
- (BOOL) hasGold {
  return _builderResult.hasGold;
}
- (uint32_t) gold {
  return _builderResult.gold;
}
- (CMsgDOTAMatch_Player_Builder*) setGold:(uint32_t) value {
  _builderResult.hasGold = YES;
  _builderResult.gold = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearGold {
  _builderResult.hasGold = NO;
  _builderResult.gold = 0;
  return self;
}
- (BOOL) hasLastHits {
  return _builderResult.hasLastHits;
}
- (uint32_t) lastHits {
  return _builderResult.lastHits;
}
- (CMsgDOTAMatch_Player_Builder*) setLastHits:(uint32_t) value {
  _builderResult.hasLastHits = YES;
  _builderResult.lastHits = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearLastHits {
  _builderResult.hasLastHits = NO;
  _builderResult.lastHits = 0;
  return self;
}
- (BOOL) hasDenies {
  return _builderResult.hasDenies;
}
- (uint32_t) denies {
  return _builderResult.denies;
}
- (CMsgDOTAMatch_Player_Builder*) setDenies:(uint32_t) value {
  _builderResult.hasDenies = YES;
  _builderResult.denies = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearDenies {
  _builderResult.hasDenies = NO;
  _builderResult.denies = 0;
  return self;
}
- (BOOL) hasGoldPerMin {
  return _builderResult.hasGoldPerMin;
}
- (uint32_t) goldPerMin {
  return _builderResult.goldPerMin;
}
- (CMsgDOTAMatch_Player_Builder*) setGoldPerMin:(uint32_t) value {
  _builderResult.hasGoldPerMin = YES;
  _builderResult.goldPerMin = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearGoldPerMin {
  _builderResult.hasGoldPerMin = NO;
  _builderResult.goldPerMin = 0;
  return self;
}
- (BOOL) hasXpPerMin {
  return _builderResult.hasXpPerMin;
}
- (uint32_t) xpPerMin {
  return _builderResult.xpPerMin;
}
- (CMsgDOTAMatch_Player_Builder*) setXpPerMin:(uint32_t) value {
  _builderResult.hasXpPerMin = YES;
  _builderResult.xpPerMin = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearXpPerMin {
  _builderResult.hasXpPerMin = NO;
  _builderResult.xpPerMin = 0;
  return self;
}
- (BOOL) hasGoldSpent {
  return _builderResult.hasGoldSpent;
}
- (uint32_t) goldSpent {
  return _builderResult.goldSpent;
}
- (CMsgDOTAMatch_Player_Builder*) setGoldSpent:(uint32_t) value {
  _builderResult.hasGoldSpent = YES;
  _builderResult.goldSpent = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearGoldSpent {
  _builderResult.hasGoldSpent = NO;
  _builderResult.goldSpent = 0;
  return self;
}
- (BOOL) hasHeroDamage {
  return _builderResult.hasHeroDamage;
}
- (uint32_t) heroDamage {
  return _builderResult.heroDamage;
}
- (CMsgDOTAMatch_Player_Builder*) setHeroDamage:(uint32_t) value {
  _builderResult.hasHeroDamage = YES;
  _builderResult.heroDamage = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearHeroDamage {
  _builderResult.hasHeroDamage = NO;
  _builderResult.heroDamage = 0;
  return self;
}
- (BOOL) hasTowerDamage {
  return _builderResult.hasTowerDamage;
}
- (uint32_t) towerDamage {
  return _builderResult.towerDamage;
}
- (CMsgDOTAMatch_Player_Builder*) setTowerDamage:(uint32_t) value {
  _builderResult.hasTowerDamage = YES;
  _builderResult.towerDamage = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearTowerDamage {
  _builderResult.hasTowerDamage = NO;
  _builderResult.towerDamage = 0;
  return self;
}
- (BOOL) hasHeroHealing {
  return _builderResult.hasHeroHealing;
}
- (uint32_t) heroHealing {
  return _builderResult.heroHealing;
}
- (CMsgDOTAMatch_Player_Builder*) setHeroHealing:(uint32_t) value {
  _builderResult.hasHeroHealing = YES;
  _builderResult.heroHealing = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearHeroHealing {
  _builderResult.hasHeroHealing = NO;
  _builderResult.heroHealing = 0;
  return self;
}
- (BOOL) hasLevel {
  return _builderResult.hasLevel;
}
- (uint32_t) level {
  return _builderResult.level;
}
- (CMsgDOTAMatch_Player_Builder*) setLevel:(uint32_t) value {
  _builderResult.hasLevel = YES;
  _builderResult.level = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearLevel {
  _builderResult.hasLevel = NO;
  _builderResult.level = 0;
  return self;
}
- (BOOL) hasTimeLastSeen {
  return _builderResult.hasTimeLastSeen;
}
- (uint32_t) timeLastSeen {
  return _builderResult.timeLastSeen;
}
- (CMsgDOTAMatch_Player_Builder*) setTimeLastSeen:(uint32_t) value {
  _builderResult.hasTimeLastSeen = YES;
  _builderResult.timeLastSeen = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearTimeLastSeen {
  _builderResult.hasTimeLastSeen = NO;
  _builderResult.timeLastSeen = 0;
  return self;
}
- (BOOL) hasPlayerName {
  return _builderResult.hasPlayerName;
}
- (NSString*) playerName {
  return _builderResult.playerName;
}
- (CMsgDOTAMatch_Player_Builder*) setPlayerName:(NSString*) value {
  _builderResult.hasPlayerName = YES;
  _builderResult.playerName = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearPlayerName {
  _builderResult.hasPlayerName = NO;
  _builderResult.playerName = @"";
  return self;
}
- (BOOL) hasSupportAbilityValue {
  return _builderResult.hasSupportAbilityValue;
}
- (uint32_t) supportAbilityValue {
  return _builderResult.supportAbilityValue;
}
- (CMsgDOTAMatch_Player_Builder*) setSupportAbilityValue:(uint32_t) value {
  _builderResult.hasSupportAbilityValue = YES;
  _builderResult.supportAbilityValue = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearSupportAbilityValue {
  _builderResult.hasSupportAbilityValue = NO;
  _builderResult.supportAbilityValue = 0;
  return self;
}
- (BOOL) hasFeedingDetected {
  return _builderResult.hasFeedingDetected;
}
- (BOOL) feedingDetected {
  return _builderResult.feedingDetected;
}
- (CMsgDOTAMatch_Player_Builder*) setFeedingDetected:(BOOL) value {
  _builderResult.hasFeedingDetected = YES;
  _builderResult.feedingDetected = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearFeedingDetected {
  _builderResult.hasFeedingDetected = NO;
  _builderResult.feedingDetected = NO;
  return self;
}
- (BOOL) hasSearchRank {
  return _builderResult.hasSearchRank;
}
- (uint32_t) searchRank {
  return _builderResult.searchRank;
}
- (CMsgDOTAMatch_Player_Builder*) setSearchRank:(uint32_t) value {
  _builderResult.hasSearchRank = YES;
  _builderResult.searchRank = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearSearchRank {
  _builderResult.hasSearchRank = NO;
  _builderResult.searchRank = 0;
  return self;
}
- (BOOL) hasSearchRankUncertainty {
  return _builderResult.hasSearchRankUncertainty;
}
- (uint32_t) searchRankUncertainty {
  return _builderResult.searchRankUncertainty;
}
- (CMsgDOTAMatch_Player_Builder*) setSearchRankUncertainty:(uint32_t) value {
  _builderResult.hasSearchRankUncertainty = YES;
  _builderResult.searchRankUncertainty = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearSearchRankUncertainty {
  _builderResult.hasSearchRankUncertainty = NO;
  _builderResult.searchRankUncertainty = 0;
  return self;
}
- (BOOL) hasRankUncertaintyChange {
  return _builderResult.hasRankUncertaintyChange;
}
- (uint32_t) rankUncertaintyChange {
  return _builderResult.rankUncertaintyChange;
}
- (CMsgDOTAMatch_Player_Builder*) setRankUncertaintyChange:(uint32_t) value {
  _builderResult.hasRankUncertaintyChange = YES;
  _builderResult.rankUncertaintyChange = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearRankUncertaintyChange {
  _builderResult.hasRankUncertaintyChange = NO;
  _builderResult.rankUncertaintyChange = 0;
  return self;
}
- (BOOL) hasHeroPlayCount {
  return _builderResult.hasHeroPlayCount;
}
- (uint32_t) heroPlayCount {
  return _builderResult.heroPlayCount;
}
- (CMsgDOTAMatch_Player_Builder*) setHeroPlayCount:(uint32_t) value {
  _builderResult.hasHeroPlayCount = YES;
  _builderResult.heroPlayCount = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearHeroPlayCount {
  _builderResult.hasHeroPlayCount = NO;
  _builderResult.heroPlayCount = 0;
  return self;
}
- (BOOL) hasPartyId {
  return _builderResult.hasPartyId;
}
- (uint64_t) partyId {
  return _builderResult.partyId;
}
- (CMsgDOTAMatch_Player_Builder*) setPartyId:(uint64_t) value {
  _builderResult.hasPartyId = YES;
  _builderResult.partyId = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearPartyId {
  _builderResult.hasPartyId = NO;
  _builderResult.partyId = 0L;
  return self;
}
- (BOOL) hasScaledKills {
  return _builderResult.hasScaledKills;
}
- (Float32) scaledKills {
  return _builderResult.scaledKills;
}
- (CMsgDOTAMatch_Player_Builder*) setScaledKills:(Float32) value {
  _builderResult.hasScaledKills = YES;
  _builderResult.scaledKills = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearScaledKills {
  _builderResult.hasScaledKills = NO;
  _builderResult.scaledKills = 0;
  return self;
}
- (BOOL) hasScaledDeaths {
  return _builderResult.hasScaledDeaths;
}
- (Float32) scaledDeaths {
  return _builderResult.scaledDeaths;
}
- (CMsgDOTAMatch_Player_Builder*) setScaledDeaths:(Float32) value {
  _builderResult.hasScaledDeaths = YES;
  _builderResult.scaledDeaths = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearScaledDeaths {
  _builderResult.hasScaledDeaths = NO;
  _builderResult.scaledDeaths = 0;
  return self;
}
- (BOOL) hasScaledAssists {
  return _builderResult.hasScaledAssists;
}
- (Float32) scaledAssists {
  return _builderResult.scaledAssists;
}
- (CMsgDOTAMatch_Player_Builder*) setScaledAssists:(Float32) value {
  _builderResult.hasScaledAssists = YES;
  _builderResult.scaledAssists = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearScaledAssists {
  _builderResult.hasScaledAssists = NO;
  _builderResult.scaledAssists = 0;
  return self;
}
- (BOOL) hasClaimedFarmGold {
  return _builderResult.hasClaimedFarmGold;
}
- (uint32_t) claimedFarmGold {
  return _builderResult.claimedFarmGold;
}
- (CMsgDOTAMatch_Player_Builder*) setClaimedFarmGold:(uint32_t) value {
  _builderResult.hasClaimedFarmGold = YES;
  _builderResult.claimedFarmGold = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearClaimedFarmGold {
  _builderResult.hasClaimedFarmGold = NO;
  _builderResult.claimedFarmGold = 0;
  return self;
}
- (BOOL) hasSupportGold {
  return _builderResult.hasSupportGold;
}
- (uint32_t) supportGold {
  return _builderResult.supportGold;
}
- (CMsgDOTAMatch_Player_Builder*) setSupportGold:(uint32_t) value {
  _builderResult.hasSupportGold = YES;
  _builderResult.supportGold = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearSupportGold {
  _builderResult.hasSupportGold = NO;
  _builderResult.supportGold = 0;
  return self;
}
- (BOOL) hasClaimedDenies {
  return _builderResult.hasClaimedDenies;
}
- (uint32_t) claimedDenies {
  return _builderResult.claimedDenies;
}
- (CMsgDOTAMatch_Player_Builder*) setClaimedDenies:(uint32_t) value {
  _builderResult.hasClaimedDenies = YES;
  _builderResult.claimedDenies = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearClaimedDenies {
  _builderResult.hasClaimedDenies = NO;
  _builderResult.claimedDenies = 0;
  return self;
}
- (BOOL) hasClaimedMisses {
  return _builderResult.hasClaimedMisses;
}
- (uint32_t) claimedMisses {
  return _builderResult.claimedMisses;
}
- (CMsgDOTAMatch_Player_Builder*) setClaimedMisses:(uint32_t) value {
  _builderResult.hasClaimedMisses = YES;
  _builderResult.claimedMisses = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearClaimedMisses {
  _builderResult.hasClaimedMisses = NO;
  _builderResult.claimedMisses = 0;
  return self;
}
- (BOOL) hasMisses {
  return _builderResult.hasMisses;
}
- (uint32_t) misses {
  return _builderResult.misses;
}
- (CMsgDOTAMatch_Player_Builder*) setMisses:(uint32_t) value {
  _builderResult.hasMisses = YES;
  _builderResult.misses = value;
  return self;
}
- (CMsgDOTAMatch_Player_Builder*) clearMisses {
  _builderResult.hasMisses = NO;
  _builderResult.misses = 0;
  return self;
}
@end

@interface CMsgDOTAMatch_Builder()
@property (retain) CMsgDOTAMatch* _builderResult;
@end

@implementation CMsgDOTAMatch_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAMatch alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAMatch_Builder*) clear {
  _builderResult = [[[CMsgDOTAMatch alloc] init] autorelease];
  return self;
}
- (CMsgDOTAMatch_Builder*) clone {
  return [CMsgDOTAMatch builderWithPrototype:_builderResult];
}
- (CMsgDOTAMatch*) defaultInstance {
  return [CMsgDOTAMatch defaultInstance];
}
- (CMsgDOTAMatch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAMatch*) buildPartial {
  CMsgDOTAMatch* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAMatch_Builder*) mergeFrom:(CMsgDOTAMatch*) other {
  if (other == [CMsgDOTAMatch defaultInstance]) {
    return self;
  }
  if (other.hasSeason) {
    [self setSeason:other.season];
  }
  if (other.hasGoodGuysWin) {
    [self setGoodGuysWin:other.goodGuysWin];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.playersArray.count > 0) {
    if (_builderResult.playersArray == nil) {
      _builderResult.playersArray = [[other.playersArray copyWithZone:[other.playersArray zone]] autorelease];
    } else {
      [_builderResult.playersArray appendArray:other.playersArray];
    }
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.towerStatusArray.count > 0) {
    if (_builderResult.towerStatusArray == nil) {
      _builderResult.towerStatusArray = [[other.towerStatusArray copyWithZone:[other.towerStatusArray zone]] autorelease];
    } else {
      [_builderResult.towerStatusArray appendArray:other.towerStatusArray];
    }
  }
  if (other.barracksStatusArray.count > 0) {
    if (_builderResult.barracksStatusArray == nil) {
      _builderResult.barracksStatusArray = [[other.barracksStatusArray copyWithZone:[other.barracksStatusArray zone]] autorelease];
    } else {
      [_builderResult.barracksStatusArray appendArray:other.barracksStatusArray];
    }
  }
  if (other.hasCluster) {
    [self setCluster:other.cluster];
  }
  if (other.hasFirstBloodTime) {
    [self setFirstBloodTime:other.firstBloodTime];
  }
  if (other.hasReplaySalt) {
    [self setReplaySalt:other.replaySalt];
  }
  if (other.hasServerIp) {
    [self setServerIp:other.serverIp];
  }
  if (other.hasServerPort) {
    [self setServerPort:other.serverPort];
  }
  if (other.hasLobbyType) {
    [self setLobbyType:other.lobbyType];
  }
  if (other.hasHumanPlayers) {
    [self setHumanPlayers:other.humanPlayers];
  }
  if (other.hasAverageSkill) {
    [self setAverageSkill:other.averageSkill];
  }
  if (other.hasGameBalance) {
    [self setGameBalance:other.gameBalance];
  }
  if (other.hasRadiantTeamId) {
    [self setRadiantTeamId:other.radiantTeamId];
  }
  if (other.hasDireTeamId) {
    [self setDireTeamId:other.direTeamId];
  }
  if (other.hasLeagueid) {
    [self setLeagueid:other.leagueid];
  }
  if (other.hasRadiantName) {
    [self setRadiantName:other.radiantName];
  }
  if (other.hasDireName) {
    [self setDireName:other.direName];
  }
  if (other.hasRadiantLogo) {
    [self setRadiantLogo:other.radiantLogo];
  }
  if (other.hasDireLogo) {
    [self setDireLogo:other.direLogo];
  }
  if (other.hasRadiantTeamComplete) {
    [self setRadiantTeamComplete:other.radiantTeamComplete];
  }
  if (other.hasDireTeamComplete) {
    [self setDireTeamComplete:other.direTeamComplete];
  }
  if (other.hasPositiveVotes) {
    [self setPositiveVotes:other.positiveVotes];
  }
  if (other.hasNegativeVotes) {
    [self setNegativeVotes:other.negativeVotes];
  }
  if (other.hasgame_mode) {
    [self setgame_mode:other.game_mode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAMatch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAMatch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeason:[input readUInt32]];
        break;
      }
      case 16: {
        [self setGoodGuysWin:[input readBool]];
        break;
      }
      case 24: {
        [self setDuration:[input readUInt32]];
        break;
      }
      case 37: {
        [self setStartTime:[input readFixed32]];
        break;
      }
      case 42: {
        CMsgDOTAMatch_Player_Builder* subBuilder = [CMsgDOTAMatch_Player builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlayers:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 64: {
        [self addTowerStatus:[input readUInt32]];
        break;
      }
      case 72: {
        [self addBarracksStatus:[input readUInt32]];
        break;
      }
      case 80: {
        [self setCluster:[input readUInt32]];
        break;
      }
      case 96: {
        [self setFirstBloodTime:[input readUInt32]];
        break;
      }
      case 109: {
        [self setReplaySalt:[input readFixed32]];
        break;
      }
      case 117: {
        [self setServerIp:[input readFixed32]];
        break;
      }
      case 120: {
        [self setServerPort:[input readUInt32]];
        break;
      }
      case 128: {
        [self setLobbyType:[input readUInt32]];
        break;
      }
      case 136: {
        [self setHumanPlayers:[input readUInt32]];
        break;
      }
      case 144: {
        [self setAverageSkill:[input readUInt32]];
        break;
      }
      case 157: {
        [self setGameBalance:[input readFloat]];
        break;
      }
      case 160: {
        [self setRadiantTeamId:[input readUInt32]];
        break;
      }
      case 168: {
        [self setDireTeamId:[input readUInt32]];
        break;
      }
      case 176: {
        [self setLeagueid:[input readUInt32]];
        break;
      }
      case 186: {
        [self setRadiantName:[input readString]];
        break;
      }
      case 194: {
        [self setDireName:[input readString]];
        break;
      }
      case 200: {
        [self setRadiantLogo:[input readUInt64]];
        break;
      }
      case 208: {
        [self setDireLogo:[input readUInt64]];
        break;
      }
      case 216: {
        [self setRadiantTeamComplete:[input readUInt32]];
        break;
      }
      case 224: {
        [self setDireTeamComplete:[input readUInt32]];
        break;
      }
      case 232: {
        [self setPositiveVotes:[input readUInt32]];
        break;
      }
      case 240: {
        [self setNegativeVotes:[input readUInt32]];
        break;
      }
      case 248: {
        int32_t value = [input readEnum];
        if (DOTA_GameModeIsValidValue(value)) {
          [self setgame_mode:value];
        } else {
          [unknownFields mergeVarintField:31 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSeason {
  return _builderResult.hasSeason;
}
- (uint32_t) season {
  return _builderResult.season;
}
- (CMsgDOTAMatch_Builder*) setSeason:(uint32_t) value {
  _builderResult.hasSeason = YES;
  _builderResult.season = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearSeason {
  _builderResult.hasSeason = NO;
  _builderResult.season = 0;
  return self;
}
- (BOOL) hasGoodGuysWin {
  return _builderResult.hasGoodGuysWin;
}
- (BOOL) goodGuysWin {
  return _builderResult.goodGuysWin;
}
- (CMsgDOTAMatch_Builder*) setGoodGuysWin:(BOOL) value {
  _builderResult.hasGoodGuysWin = YES;
  _builderResult.goodGuysWin = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearGoodGuysWin {
  _builderResult.hasGoodGuysWin = NO;
  _builderResult.goodGuysWin = NO;
  return self;
}
- (BOOL) hasDuration {
  return _builderResult.hasDuration;
}
- (uint32_t) duration {
  return _builderResult.duration;
}
- (CMsgDOTAMatch_Builder*) setDuration:(uint32_t) value {
  _builderResult.hasDuration = YES;
  _builderResult.duration = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearDuration {
  _builderResult.hasDuration = NO;
  _builderResult.duration = 0;
  return self;
}
- (BOOL) hasStartTime {
  return _builderResult.hasStartTime;
}
- (uint32_t) startTime {
  return _builderResult.startTime;
}
- (CMsgDOTAMatch_Builder*) setStartTime:(uint32_t) value {
  _builderResult.hasStartTime = YES;
  _builderResult.startTime = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearStartTime {
  _builderResult.hasStartTime = NO;
  _builderResult.startTime = 0;
  return self;
}
- (PBAppendableArray *)players {
  return _builderResult.playersArray;
}
- (CMsgDOTAMatch_Player*)playersAtIndex:(NSUInteger)index {
  return [_builderResult playersAtIndex:index];
}
- (CMsgDOTAMatch_Builder *)addPlayers:(CMsgDOTAMatch_Player*)value {
  if (_builderResult.playersArray == nil) {
    _builderResult.playersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.playersArray addObject:value];
  return self;
}
- (CMsgDOTAMatch_Builder *)setPlayersArray:(NSArray *)array {
  _builderResult.playersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAMatch_Builder *)setPlayersValues:(const CMsgDOTAMatch_Player* *)values count:(NSUInteger)count {
  _builderResult.playersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAMatch_Builder *)clearPlayers {
  _builderResult.playersArray = nil;
  return self;
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgDOTAMatch_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (PBAppendableArray *)towerStatus {
  return _builderResult.towerStatusArray;
}
- (uint32_t)towerStatusAtIndex:(NSUInteger)index {
  return [_builderResult towerStatusAtIndex:index];
}
- (CMsgDOTAMatch_Builder *)addTowerStatus:(uint32_t)value {
  if (_builderResult.towerStatusArray == nil) {
    _builderResult.towerStatusArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.towerStatusArray addUint32:value];
  return self;
}
- (CMsgDOTAMatch_Builder *)setTowerStatusArray:(NSArray *)array {
  _builderResult.towerStatusArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAMatch_Builder *)setTowerStatusValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.towerStatusArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAMatch_Builder *)clearTowerStatus {
  _builderResult.towerStatusArray = nil;
  return self;
}
- (PBAppendableArray *)barracksStatus {
  return _builderResult.barracksStatusArray;
}
- (uint32_t)barracksStatusAtIndex:(NSUInteger)index {
  return [_builderResult barracksStatusAtIndex:index];
}
- (CMsgDOTAMatch_Builder *)addBarracksStatus:(uint32_t)value {
  if (_builderResult.barracksStatusArray == nil) {
    _builderResult.barracksStatusArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.barracksStatusArray addUint32:value];
  return self;
}
- (CMsgDOTAMatch_Builder *)setBarracksStatusArray:(NSArray *)array {
  _builderResult.barracksStatusArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAMatch_Builder *)setBarracksStatusValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.barracksStatusArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAMatch_Builder *)clearBarracksStatus {
  _builderResult.barracksStatusArray = nil;
  return self;
}
- (BOOL) hasCluster {
  return _builderResult.hasCluster;
}
- (uint32_t) cluster {
  return _builderResult.cluster;
}
- (CMsgDOTAMatch_Builder*) setCluster:(uint32_t) value {
  _builderResult.hasCluster = YES;
  _builderResult.cluster = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearCluster {
  _builderResult.hasCluster = NO;
  _builderResult.cluster = 0;
  return self;
}
- (BOOL) hasFirstBloodTime {
  return _builderResult.hasFirstBloodTime;
}
- (uint32_t) firstBloodTime {
  return _builderResult.firstBloodTime;
}
- (CMsgDOTAMatch_Builder*) setFirstBloodTime:(uint32_t) value {
  _builderResult.hasFirstBloodTime = YES;
  _builderResult.firstBloodTime = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearFirstBloodTime {
  _builderResult.hasFirstBloodTime = NO;
  _builderResult.firstBloodTime = 0;
  return self;
}
- (BOOL) hasReplaySalt {
  return _builderResult.hasReplaySalt;
}
- (uint32_t) replaySalt {
  return _builderResult.replaySalt;
}
- (CMsgDOTAMatch_Builder*) setReplaySalt:(uint32_t) value {
  _builderResult.hasReplaySalt = YES;
  _builderResult.replaySalt = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearReplaySalt {
  _builderResult.hasReplaySalt = NO;
  _builderResult.replaySalt = 0;
  return self;
}
- (BOOL) hasServerIp {
  return _builderResult.hasServerIp;
}
- (uint32_t) serverIp {
  return _builderResult.serverIp;
}
- (CMsgDOTAMatch_Builder*) setServerIp:(uint32_t) value {
  _builderResult.hasServerIp = YES;
  _builderResult.serverIp = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearServerIp {
  _builderResult.hasServerIp = NO;
  _builderResult.serverIp = 0;
  return self;
}
- (BOOL) hasServerPort {
  return _builderResult.hasServerPort;
}
- (uint32_t) serverPort {
  return _builderResult.serverPort;
}
- (CMsgDOTAMatch_Builder*) setServerPort:(uint32_t) value {
  _builderResult.hasServerPort = YES;
  _builderResult.serverPort = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearServerPort {
  _builderResult.hasServerPort = NO;
  _builderResult.serverPort = 0;
  return self;
}
- (BOOL) hasLobbyType {
  return _builderResult.hasLobbyType;
}
- (uint32_t) lobbyType {
  return _builderResult.lobbyType;
}
- (CMsgDOTAMatch_Builder*) setLobbyType:(uint32_t) value {
  _builderResult.hasLobbyType = YES;
  _builderResult.lobbyType = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearLobbyType {
  _builderResult.hasLobbyType = NO;
  _builderResult.lobbyType = 0;
  return self;
}
- (BOOL) hasHumanPlayers {
  return _builderResult.hasHumanPlayers;
}
- (uint32_t) humanPlayers {
  return _builderResult.humanPlayers;
}
- (CMsgDOTAMatch_Builder*) setHumanPlayers:(uint32_t) value {
  _builderResult.hasHumanPlayers = YES;
  _builderResult.humanPlayers = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearHumanPlayers {
  _builderResult.hasHumanPlayers = NO;
  _builderResult.humanPlayers = 0;
  return self;
}
- (BOOL) hasAverageSkill {
  return _builderResult.hasAverageSkill;
}
- (uint32_t) averageSkill {
  return _builderResult.averageSkill;
}
- (CMsgDOTAMatch_Builder*) setAverageSkill:(uint32_t) value {
  _builderResult.hasAverageSkill = YES;
  _builderResult.averageSkill = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearAverageSkill {
  _builderResult.hasAverageSkill = NO;
  _builderResult.averageSkill = 0;
  return self;
}
- (BOOL) hasGameBalance {
  return _builderResult.hasGameBalance;
}
- (Float32) gameBalance {
  return _builderResult.gameBalance;
}
- (CMsgDOTAMatch_Builder*) setGameBalance:(Float32) value {
  _builderResult.hasGameBalance = YES;
  _builderResult.gameBalance = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearGameBalance {
  _builderResult.hasGameBalance = NO;
  _builderResult.gameBalance = 0;
  return self;
}
- (BOOL) hasRadiantTeamId {
  return _builderResult.hasRadiantTeamId;
}
- (uint32_t) radiantTeamId {
  return _builderResult.radiantTeamId;
}
- (CMsgDOTAMatch_Builder*) setRadiantTeamId:(uint32_t) value {
  _builderResult.hasRadiantTeamId = YES;
  _builderResult.radiantTeamId = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearRadiantTeamId {
  _builderResult.hasRadiantTeamId = NO;
  _builderResult.radiantTeamId = 0;
  return self;
}
- (BOOL) hasDireTeamId {
  return _builderResult.hasDireTeamId;
}
- (uint32_t) direTeamId {
  return _builderResult.direTeamId;
}
- (CMsgDOTAMatch_Builder*) setDireTeamId:(uint32_t) value {
  _builderResult.hasDireTeamId = YES;
  _builderResult.direTeamId = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearDireTeamId {
  _builderResult.hasDireTeamId = NO;
  _builderResult.direTeamId = 0;
  return self;
}
- (BOOL) hasLeagueid {
  return _builderResult.hasLeagueid;
}
- (uint32_t) leagueid {
  return _builderResult.leagueid;
}
- (CMsgDOTAMatch_Builder*) setLeagueid:(uint32_t) value {
  _builderResult.hasLeagueid = YES;
  _builderResult.leagueid = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearLeagueid {
  _builderResult.hasLeagueid = NO;
  _builderResult.leagueid = 0;
  return self;
}
- (BOOL) hasRadiantName {
  return _builderResult.hasRadiantName;
}
- (NSString*) radiantName {
  return _builderResult.radiantName;
}
- (CMsgDOTAMatch_Builder*) setRadiantName:(NSString*) value {
  _builderResult.hasRadiantName = YES;
  _builderResult.radiantName = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearRadiantName {
  _builderResult.hasRadiantName = NO;
  _builderResult.radiantName = @"";
  return self;
}
- (BOOL) hasDireName {
  return _builderResult.hasDireName;
}
- (NSString*) direName {
  return _builderResult.direName;
}
- (CMsgDOTAMatch_Builder*) setDireName:(NSString*) value {
  _builderResult.hasDireName = YES;
  _builderResult.direName = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearDireName {
  _builderResult.hasDireName = NO;
  _builderResult.direName = @"";
  return self;
}
- (BOOL) hasRadiantLogo {
  return _builderResult.hasRadiantLogo;
}
- (uint64_t) radiantLogo {
  return _builderResult.radiantLogo;
}
- (CMsgDOTAMatch_Builder*) setRadiantLogo:(uint64_t) value {
  _builderResult.hasRadiantLogo = YES;
  _builderResult.radiantLogo = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearRadiantLogo {
  _builderResult.hasRadiantLogo = NO;
  _builderResult.radiantLogo = 0L;
  return self;
}
- (BOOL) hasDireLogo {
  return _builderResult.hasDireLogo;
}
- (uint64_t) direLogo {
  return _builderResult.direLogo;
}
- (CMsgDOTAMatch_Builder*) setDireLogo:(uint64_t) value {
  _builderResult.hasDireLogo = YES;
  _builderResult.direLogo = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearDireLogo {
  _builderResult.hasDireLogo = NO;
  _builderResult.direLogo = 0L;
  return self;
}
- (BOOL) hasRadiantTeamComplete {
  return _builderResult.hasRadiantTeamComplete;
}
- (uint32_t) radiantTeamComplete {
  return _builderResult.radiantTeamComplete;
}
- (CMsgDOTAMatch_Builder*) setRadiantTeamComplete:(uint32_t) value {
  _builderResult.hasRadiantTeamComplete = YES;
  _builderResult.radiantTeamComplete = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearRadiantTeamComplete {
  _builderResult.hasRadiantTeamComplete = NO;
  _builderResult.radiantTeamComplete = 0;
  return self;
}
- (BOOL) hasDireTeamComplete {
  return _builderResult.hasDireTeamComplete;
}
- (uint32_t) direTeamComplete {
  return _builderResult.direTeamComplete;
}
- (CMsgDOTAMatch_Builder*) setDireTeamComplete:(uint32_t) value {
  _builderResult.hasDireTeamComplete = YES;
  _builderResult.direTeamComplete = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearDireTeamComplete {
  _builderResult.hasDireTeamComplete = NO;
  _builderResult.direTeamComplete = 0;
  return self;
}
- (BOOL) hasPositiveVotes {
  return _builderResult.hasPositiveVotes;
}
- (uint32_t) positiveVotes {
  return _builderResult.positiveVotes;
}
- (CMsgDOTAMatch_Builder*) setPositiveVotes:(uint32_t) value {
  _builderResult.hasPositiveVotes = YES;
  _builderResult.positiveVotes = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearPositiveVotes {
  _builderResult.hasPositiveVotes = NO;
  _builderResult.positiveVotes = 0;
  return self;
}
- (BOOL) hasNegativeVotes {
  return _builderResult.hasNegativeVotes;
}
- (uint32_t) negativeVotes {
  return _builderResult.negativeVotes;
}
- (CMsgDOTAMatch_Builder*) setNegativeVotes:(uint32_t) value {
  _builderResult.hasNegativeVotes = YES;
  _builderResult.negativeVotes = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) clearNegativeVotes {
  _builderResult.hasNegativeVotes = NO;
  _builderResult.negativeVotes = 0;
  return self;
}
- (BOOL) hasgame_mode {
  return _builderResult.hasgame_mode;
}
- (DOTA_GameMode) game_mode {
  return _builderResult.game_mode;
}
- (CMsgDOTAMatch_Builder*) setgame_mode:(DOTA_GameMode) value {
  _builderResult.hasgame_mode = YES;
  _builderResult.game_mode = value;
  return self;
}
- (CMsgDOTAMatch_Builder*) cleargame_mode {
  _builderResult.hasgame_mode = NO;
  _builderResult.game_mode = DOTA_GameModeDOTA_GAMEMODE_NONE;
  return self;
}
@end

@interface CMsgDOTAPlayerMatchHistory ()
@property (retain) PBAppendableArray * matchIdsArray;
@end

@implementation CMsgDOTAPlayerMatchHistory

@synthesize matchIdsArray;
@dynamic matchIds;
- (void) dealloc {
  self.matchIdsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAPlayerMatchHistory* defaultCMsgDOTAPlayerMatchHistoryInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAPlayerMatchHistory class]) {
    defaultCMsgDOTAPlayerMatchHistoryInstance = [[CMsgDOTAPlayerMatchHistory alloc] init];
  }
}
+ (CMsgDOTAPlayerMatchHistory*) defaultInstance {
  return defaultCMsgDOTAPlayerMatchHistoryInstance;
}
- (CMsgDOTAPlayerMatchHistory*) defaultInstance {
  return defaultCMsgDOTAPlayerMatchHistoryInstance;
}
- (PBArray *)matchIds {
  return matchIdsArray;
}
- (uint32_t)matchIdsAtIndex:(NSUInteger)index {
  return [matchIdsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger matchIdsArrayCount = self.matchIdsArray.count;
  if (matchIdsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.matchIdsArray.data;
    for (NSUInteger i = 0; i < matchIdsArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.matchIdsArray.count;
    const uint32_t *values = (const uint32_t *)self.matchIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAPlayerMatchHistory*) parseFromData:(NSData*) data {
  return (CMsgDOTAPlayerMatchHistory*)[[[CMsgDOTAPlayerMatchHistory builder] mergeFromData:data] build];
}
+ (CMsgDOTAPlayerMatchHistory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerMatchHistory*)[[[CMsgDOTAPlayerMatchHistory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerMatchHistory*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAPlayerMatchHistory*)[[[CMsgDOTAPlayerMatchHistory builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAPlayerMatchHistory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerMatchHistory*)[[[CMsgDOTAPlayerMatchHistory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerMatchHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAPlayerMatchHistory*)[[[CMsgDOTAPlayerMatchHistory builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAPlayerMatchHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerMatchHistory*)[[[CMsgDOTAPlayerMatchHistory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerMatchHistory_Builder*) builder {
  return [[[CMsgDOTAPlayerMatchHistory_Builder alloc] init] autorelease];
}
+ (CMsgDOTAPlayerMatchHistory_Builder*) builderWithPrototype:(CMsgDOTAPlayerMatchHistory*) prototype {
  return [[CMsgDOTAPlayerMatchHistory builder] mergeFrom:prototype];
}
- (CMsgDOTAPlayerMatchHistory_Builder*) builder {
  return [CMsgDOTAPlayerMatchHistory builder];
}
- (CMsgDOTAPlayerMatchHistory_Builder*) toBuilder {
  return [CMsgDOTAPlayerMatchHistory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.matchIdsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchIds", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAPlayerMatchHistory class]]) {
    return NO;
  }
  CMsgDOTAPlayerMatchHistory *otherMessage = other;
  return
      [self.matchIdsArray isEqualToArray:otherMessage.matchIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.matchIdsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAPlayerMatchHistory_Builder()
@property (retain) CMsgDOTAPlayerMatchHistory* _builderResult;
@end

@implementation CMsgDOTAPlayerMatchHistory_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAPlayerMatchHistory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAPlayerMatchHistory_Builder*) clear {
  _builderResult = [[[CMsgDOTAPlayerMatchHistory alloc] init] autorelease];
  return self;
}
- (CMsgDOTAPlayerMatchHistory_Builder*) clone {
  return [CMsgDOTAPlayerMatchHistory builderWithPrototype:_builderResult];
}
- (CMsgDOTAPlayerMatchHistory*) defaultInstance {
  return [CMsgDOTAPlayerMatchHistory defaultInstance];
}
- (CMsgDOTAPlayerMatchHistory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAPlayerMatchHistory*) buildPartial {
  CMsgDOTAPlayerMatchHistory* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAPlayerMatchHistory_Builder*) mergeFrom:(CMsgDOTAPlayerMatchHistory*) other {
  if (other == [CMsgDOTAPlayerMatchHistory defaultInstance]) {
    return self;
  }
  if (other.matchIdsArray.count > 0) {
    if (_builderResult.matchIdsArray == nil) {
      _builderResult.matchIdsArray = [[other.matchIdsArray copyWithZone:[other.matchIdsArray zone]] autorelease];
    } else {
      [_builderResult.matchIdsArray appendArray:other.matchIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAPlayerMatchHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAPlayerMatchHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addMatchIds:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)matchIds {
  return _builderResult.matchIdsArray;
}
- (uint32_t)matchIdsAtIndex:(NSUInteger)index {
  return [_builderResult matchIdsAtIndex:index];
}
- (CMsgDOTAPlayerMatchHistory_Builder *)addMatchIds:(uint32_t)value {
  if (_builderResult.matchIdsArray == nil) {
    _builderResult.matchIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.matchIdsArray addUint32:value];
  return self;
}
- (CMsgDOTAPlayerMatchHistory_Builder *)setMatchIdsArray:(NSArray *)array {
  _builderResult.matchIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAPlayerMatchHistory_Builder *)setMatchIdsValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.matchIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAPlayerMatchHistory_Builder *)clearMatchIds {
  _builderResult.matchIdsArray = nil;
  return self;
}
@end

@interface CMsgDOTAMatchHistoryFilter ()
@property (retain) PBAppendableArray * matchIdsArray;
@property uint32_t newestMatchIdAtLastQuery;
@property uint32_t timeLastQuery;
@end

@implementation CMsgDOTAMatchHistoryFilter

@synthesize matchIdsArray;
@dynamic matchIds;
- (BOOL) hasNewestMatchIdAtLastQuery {
  return !!hasNewestMatchIdAtLastQuery_;
}
- (void) setHasNewestMatchIdAtLastQuery:(BOOL) value_ {
  hasNewestMatchIdAtLastQuery_ = !!value_;
}
@synthesize newestMatchIdAtLastQuery;
- (BOOL) hasTimeLastQuery {
  return !!hasTimeLastQuery_;
}
- (void) setHasTimeLastQuery:(BOOL) value_ {
  hasTimeLastQuery_ = !!value_;
}
@synthesize timeLastQuery;
- (void) dealloc {
  self.matchIdsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.newestMatchIdAtLastQuery = 0;
    self.timeLastQuery = 0;
  }
  return self;
}
static CMsgDOTAMatchHistoryFilter* defaultCMsgDOTAMatchHistoryFilterInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAMatchHistoryFilter class]) {
    defaultCMsgDOTAMatchHistoryFilterInstance = [[CMsgDOTAMatchHistoryFilter alloc] init];
  }
}
+ (CMsgDOTAMatchHistoryFilter*) defaultInstance {
  return defaultCMsgDOTAMatchHistoryFilterInstance;
}
- (CMsgDOTAMatchHistoryFilter*) defaultInstance {
  return defaultCMsgDOTAMatchHistoryFilterInstance;
}
- (PBArray *)matchIds {
  return matchIdsArray;
}
- (uint32_t)matchIdsAtIndex:(NSUInteger)index {
  return [matchIdsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger matchIdsArrayCount = self.matchIdsArray.count;
  if (matchIdsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.matchIdsArray.data;
    for (NSUInteger i = 0; i < matchIdsArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  if (self.hasNewestMatchIdAtLastQuery) {
    [output writeUInt32:2 value:self.newestMatchIdAtLastQuery];
  }
  if (self.hasTimeLastQuery) {
    [output writeUInt32:3 value:self.timeLastQuery];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.matchIdsArray.count;
    const uint32_t *values = (const uint32_t *)self.matchIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasNewestMatchIdAtLastQuery) {
    size_ += computeUInt32Size(2, self.newestMatchIdAtLastQuery);
  }
  if (self.hasTimeLastQuery) {
    size_ += computeUInt32Size(3, self.timeLastQuery);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAMatchHistoryFilter*) parseFromData:(NSData*) data {
  return (CMsgDOTAMatchHistoryFilter*)[[[CMsgDOTAMatchHistoryFilter builder] mergeFromData:data] build];
}
+ (CMsgDOTAMatchHistoryFilter*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchHistoryFilter*)[[[CMsgDOTAMatchHistoryFilter builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchHistoryFilter*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAMatchHistoryFilter*)[[[CMsgDOTAMatchHistoryFilter builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAMatchHistoryFilter*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchHistoryFilter*)[[[CMsgDOTAMatchHistoryFilter builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchHistoryFilter*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAMatchHistoryFilter*)[[[CMsgDOTAMatchHistoryFilter builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAMatchHistoryFilter*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchHistoryFilter*)[[[CMsgDOTAMatchHistoryFilter builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchHistoryFilter_Builder*) builder {
  return [[[CMsgDOTAMatchHistoryFilter_Builder alloc] init] autorelease];
}
+ (CMsgDOTAMatchHistoryFilter_Builder*) builderWithPrototype:(CMsgDOTAMatchHistoryFilter*) prototype {
  return [[CMsgDOTAMatchHistoryFilter builder] mergeFrom:prototype];
}
- (CMsgDOTAMatchHistoryFilter_Builder*) builder {
  return [CMsgDOTAMatchHistoryFilter builder];
}
- (CMsgDOTAMatchHistoryFilter_Builder*) toBuilder {
  return [CMsgDOTAMatchHistoryFilter builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.matchIdsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchIds", value];
  }
  if (self.hasNewestMatchIdAtLastQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newestMatchIdAtLastQuery", [NSNumber numberWithInt:self.newestMatchIdAtLastQuery]];
  }
  if (self.hasTimeLastQuery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeLastQuery", [NSNumber numberWithInt:self.timeLastQuery]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAMatchHistoryFilter class]]) {
    return NO;
  }
  CMsgDOTAMatchHistoryFilter *otherMessage = other;
  return
      [self.matchIdsArray isEqualToArray:otherMessage.matchIdsArray] &&
      self.hasNewestMatchIdAtLastQuery == otherMessage.hasNewestMatchIdAtLastQuery &&
      (!self.hasNewestMatchIdAtLastQuery || self.newestMatchIdAtLastQuery == otherMessage.newestMatchIdAtLastQuery) &&
      self.hasTimeLastQuery == otherMessage.hasTimeLastQuery &&
      (!self.hasTimeLastQuery || self.timeLastQuery == otherMessage.timeLastQuery) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.matchIdsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasNewestMatchIdAtLastQuery) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.newestMatchIdAtLastQuery] hash];
  }
  if (self.hasTimeLastQuery) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeLastQuery] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAMatchHistoryFilter_Builder()
@property (retain) CMsgDOTAMatchHistoryFilter* _builderResult;
@end

@implementation CMsgDOTAMatchHistoryFilter_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAMatchHistoryFilter alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAMatchHistoryFilter_Builder*) clear {
  _builderResult = [[[CMsgDOTAMatchHistoryFilter alloc] init] autorelease];
  return self;
}
- (CMsgDOTAMatchHistoryFilter_Builder*) clone {
  return [CMsgDOTAMatchHistoryFilter builderWithPrototype:_builderResult];
}
- (CMsgDOTAMatchHistoryFilter*) defaultInstance {
  return [CMsgDOTAMatchHistoryFilter defaultInstance];
}
- (CMsgDOTAMatchHistoryFilter*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAMatchHistoryFilter*) buildPartial {
  CMsgDOTAMatchHistoryFilter* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAMatchHistoryFilter_Builder*) mergeFrom:(CMsgDOTAMatchHistoryFilter*) other {
  if (other == [CMsgDOTAMatchHistoryFilter defaultInstance]) {
    return self;
  }
  if (other.matchIdsArray.count > 0) {
    if (_builderResult.matchIdsArray == nil) {
      _builderResult.matchIdsArray = [[other.matchIdsArray copyWithZone:[other.matchIdsArray zone]] autorelease];
    } else {
      [_builderResult.matchIdsArray appendArray:other.matchIdsArray];
    }
  }
  if (other.hasNewestMatchIdAtLastQuery) {
    [self setNewestMatchIdAtLastQuery:other.newestMatchIdAtLastQuery];
  }
  if (other.hasTimeLastQuery) {
    [self setTimeLastQuery:other.timeLastQuery];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAMatchHistoryFilter_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAMatchHistoryFilter_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addMatchIds:[input readUInt32]];
        break;
      }
      case 16: {
        [self setNewestMatchIdAtLastQuery:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTimeLastQuery:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)matchIds {
  return _builderResult.matchIdsArray;
}
- (uint32_t)matchIdsAtIndex:(NSUInteger)index {
  return [_builderResult matchIdsAtIndex:index];
}
- (CMsgDOTAMatchHistoryFilter_Builder *)addMatchIds:(uint32_t)value {
  if (_builderResult.matchIdsArray == nil) {
    _builderResult.matchIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.matchIdsArray addUint32:value];
  return self;
}
- (CMsgDOTAMatchHistoryFilter_Builder *)setMatchIdsArray:(NSArray *)array {
  _builderResult.matchIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAMatchHistoryFilter_Builder *)setMatchIdsValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.matchIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAMatchHistoryFilter_Builder *)clearMatchIds {
  _builderResult.matchIdsArray = nil;
  return self;
}
- (BOOL) hasNewestMatchIdAtLastQuery {
  return _builderResult.hasNewestMatchIdAtLastQuery;
}
- (uint32_t) newestMatchIdAtLastQuery {
  return _builderResult.newestMatchIdAtLastQuery;
}
- (CMsgDOTAMatchHistoryFilter_Builder*) setNewestMatchIdAtLastQuery:(uint32_t) value {
  _builderResult.hasNewestMatchIdAtLastQuery = YES;
  _builderResult.newestMatchIdAtLastQuery = value;
  return self;
}
- (CMsgDOTAMatchHistoryFilter_Builder*) clearNewestMatchIdAtLastQuery {
  _builderResult.hasNewestMatchIdAtLastQuery = NO;
  _builderResult.newestMatchIdAtLastQuery = 0;
  return self;
}
- (BOOL) hasTimeLastQuery {
  return _builderResult.hasTimeLastQuery;
}
- (uint32_t) timeLastQuery {
  return _builderResult.timeLastQuery;
}
- (CMsgDOTAMatchHistoryFilter_Builder*) setTimeLastQuery:(uint32_t) value {
  _builderResult.hasTimeLastQuery = YES;
  _builderResult.timeLastQuery = value;
  return self;
}
- (CMsgDOTAMatchHistoryFilter_Builder*) clearTimeLastQuery {
  _builderResult.hasTimeLastQuery = NO;
  _builderResult.timeLastQuery = 0;
  return self;
}
@end

@interface CMsgDOTARequestMatches ()
@property (retain) NSString* playerName;
@property uint32_t heroId;
@property uint32_t gameMode;
@property uint32_t dateMin;
@property uint32_t dateMax;
@property BOOL friendsOnly;
@property BOOL recentlyPlayedOnly;
@property uint32_t matchesRequested;
@property uint32_t startAtMatchId;
@property uint32_t minPlayers;
@property uint32_t requestId;
@property BOOL tournamentGamesOnly;
@property uint32_t accountId;
@property uint32_t leagueId;
@property CMsgDOTARequestMatches_SkillLevel skill;
@end

@implementation CMsgDOTARequestMatches

- (BOOL) hasPlayerName {
  return !!hasPlayerName_;
}
- (void) setHasPlayerName:(BOOL) value_ {
  hasPlayerName_ = !!value_;
}
@synthesize playerName;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (BOOL) hasGameMode {
  return !!hasGameMode_;
}
- (void) setHasGameMode:(BOOL) value_ {
  hasGameMode_ = !!value_;
}
@synthesize gameMode;
- (BOOL) hasDateMin {
  return !!hasDateMin_;
}
- (void) setHasDateMin:(BOOL) value_ {
  hasDateMin_ = !!value_;
}
@synthesize dateMin;
- (BOOL) hasDateMax {
  return !!hasDateMax_;
}
- (void) setHasDateMax:(BOOL) value_ {
  hasDateMax_ = !!value_;
}
@synthesize dateMax;
- (BOOL) hasFriendsOnly {
  return !!hasFriendsOnly_;
}
- (void) setHasFriendsOnly:(BOOL) value_ {
  hasFriendsOnly_ = !!value_;
}
- (BOOL) friendsOnly {
  return !!friendsOnly_;
}
- (void) setFriendsOnly:(BOOL) value_ {
  friendsOnly_ = !!value_;
}
- (BOOL) hasRecentlyPlayedOnly {
  return !!hasRecentlyPlayedOnly_;
}
- (void) setHasRecentlyPlayedOnly:(BOOL) value_ {
  hasRecentlyPlayedOnly_ = !!value_;
}
- (BOOL) recentlyPlayedOnly {
  return !!recentlyPlayedOnly_;
}
- (void) setRecentlyPlayedOnly:(BOOL) value_ {
  recentlyPlayedOnly_ = !!value_;
}
- (BOOL) hasMatchesRequested {
  return !!hasMatchesRequested_;
}
- (void) setHasMatchesRequested:(BOOL) value_ {
  hasMatchesRequested_ = !!value_;
}
@synthesize matchesRequested;
- (BOOL) hasStartAtMatchId {
  return !!hasStartAtMatchId_;
}
- (void) setHasStartAtMatchId:(BOOL) value_ {
  hasStartAtMatchId_ = !!value_;
}
@synthesize startAtMatchId;
- (BOOL) hasMinPlayers {
  return !!hasMinPlayers_;
}
- (void) setHasMinPlayers:(BOOL) value_ {
  hasMinPlayers_ = !!value_;
}
@synthesize minPlayers;
- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) value_ {
  hasRequestId_ = !!value_;
}
@synthesize requestId;
- (BOOL) hasTournamentGamesOnly {
  return !!hasTournamentGamesOnly_;
}
- (void) setHasTournamentGamesOnly:(BOOL) value_ {
  hasTournamentGamesOnly_ = !!value_;
}
- (BOOL) tournamentGamesOnly {
  return !!tournamentGamesOnly_;
}
- (void) setTournamentGamesOnly:(BOOL) value_ {
  tournamentGamesOnly_ = !!value_;
}
- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasLeagueId {
  return !!hasLeagueId_;
}
- (void) setHasLeagueId:(BOOL) value_ {
  hasLeagueId_ = !!value_;
}
@synthesize leagueId;
- (BOOL) hasskill {
  return !!hasskill_;
}
- (void) setHasskill:(BOOL) value_ {
  hasskill_ = !!value_;
}
@synthesize skill;
- (void) dealloc {
  self.playerName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.playerName = @"";
    self.heroId = 0;
    self.gameMode = 0;
    self.dateMin = 0;
    self.dateMax = 0;
    self.friendsOnly = NO;
    self.recentlyPlayedOnly = NO;
    self.matchesRequested = 0;
    self.startAtMatchId = 0;
    self.minPlayers = 0;
    self.requestId = 0;
    self.tournamentGamesOnly = NO;
    self.accountId = 0;
    self.leagueId = 0;
    self.skill = CMsgDOTARequestMatches_SkillLevelAny;
  }
  return self;
}
static CMsgDOTARequestMatches* defaultCMsgDOTARequestMatchesInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestMatches class]) {
    defaultCMsgDOTARequestMatchesInstance = [[CMsgDOTARequestMatches alloc] init];
  }
}
+ (CMsgDOTARequestMatches*) defaultInstance {
  return defaultCMsgDOTARequestMatchesInstance;
}
- (CMsgDOTARequestMatches*) defaultInstance {
  return defaultCMsgDOTARequestMatchesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPlayerName) {
    [output writeString:1 value:self.playerName];
  }
  if (self.hasHeroId) {
    [output writeUInt32:2 value:self.heroId];
  }
  if (self.hasGameMode) {
    [output writeUInt32:3 value:self.gameMode];
  }
  if (self.hasDateMin) {
    [output writeFixed32:6 value:self.dateMin];
  }
  if (self.hasDateMax) {
    [output writeFixed32:7 value:self.dateMax];
  }
  if (self.hasFriendsOnly) {
    [output writeBool:8 value:self.friendsOnly];
  }
  if (self.hasRecentlyPlayedOnly) {
    [output writeBool:9 value:self.recentlyPlayedOnly];
  }
  if (self.hasMatchesRequested) {
    [output writeUInt32:10 value:self.matchesRequested];
  }
  if (self.hasStartAtMatchId) {
    [output writeUInt32:11 value:self.startAtMatchId];
  }
  if (self.hasMinPlayers) {
    [output writeFixed32:12 value:self.minPlayers];
  }
  if (self.hasRequestId) {
    [output writeUInt32:13 value:self.requestId];
  }
  if (self.hasTournamentGamesOnly) {
    [output writeBool:14 value:self.tournamentGamesOnly];
  }
  if (self.hasAccountId) {
    [output writeUInt32:15 value:self.accountId];
  }
  if (self.hasLeagueId) {
    [output writeUInt32:16 value:self.leagueId];
  }
  if (self.hasskill) {
    [output writeEnum:17 value:self.skill];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPlayerName) {
    size_ += computeStringSize(1, self.playerName);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(2, self.heroId);
  }
  if (self.hasGameMode) {
    size_ += computeUInt32Size(3, self.gameMode);
  }
  if (self.hasDateMin) {
    size_ += computeFixed32Size(6, self.dateMin);
  }
  if (self.hasDateMax) {
    size_ += computeFixed32Size(7, self.dateMax);
  }
  if (self.hasFriendsOnly) {
    size_ += computeBoolSize(8, self.friendsOnly);
  }
  if (self.hasRecentlyPlayedOnly) {
    size_ += computeBoolSize(9, self.recentlyPlayedOnly);
  }
  if (self.hasMatchesRequested) {
    size_ += computeUInt32Size(10, self.matchesRequested);
  }
  if (self.hasStartAtMatchId) {
    size_ += computeUInt32Size(11, self.startAtMatchId);
  }
  if (self.hasMinPlayers) {
    size_ += computeFixed32Size(12, self.minPlayers);
  }
  if (self.hasRequestId) {
    size_ += computeUInt32Size(13, self.requestId);
  }
  if (self.hasTournamentGamesOnly) {
    size_ += computeBoolSize(14, self.tournamentGamesOnly);
  }
  if (self.hasAccountId) {
    size_ += computeUInt32Size(15, self.accountId);
  }
  if (self.hasLeagueId) {
    size_ += computeUInt32Size(16, self.leagueId);
  }
  if (self.hasskill) {
    size_ += computeEnumSize(17, self.skill);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestMatches*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestMatches*)[[[CMsgDOTARequestMatches builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestMatches*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestMatches*)[[[CMsgDOTARequestMatches builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestMatches*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestMatches*)[[[CMsgDOTARequestMatches builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestMatches*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestMatches*)[[[CMsgDOTARequestMatches builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestMatches*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestMatches*)[[[CMsgDOTARequestMatches builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestMatches*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestMatches*)[[[CMsgDOTARequestMatches builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestMatches_Builder*) builder {
  return [[[CMsgDOTARequestMatches_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestMatches_Builder*) builderWithPrototype:(CMsgDOTARequestMatches*) prototype {
  return [[CMsgDOTARequestMatches builder] mergeFrom:prototype];
}
- (CMsgDOTARequestMatches_Builder*) builder {
  return [CMsgDOTARequestMatches builder];
}
- (CMsgDOTARequestMatches_Builder*) toBuilder {
  return [CMsgDOTARequestMatches builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPlayerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerName", self.playerName];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  if (self.hasGameMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameMode", [NSNumber numberWithInt:self.gameMode]];
  }
  if (self.hasDateMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dateMin", [NSNumber numberWithInt:self.dateMin]];
  }
  if (self.hasDateMax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dateMax", [NSNumber numberWithInt:self.dateMax]];
  }
  if (self.hasFriendsOnly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendsOnly", [NSNumber numberWithBool:self.friendsOnly]];
  }
  if (self.hasRecentlyPlayedOnly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recentlyPlayedOnly", [NSNumber numberWithBool:self.recentlyPlayedOnly]];
  }
  if (self.hasMatchesRequested) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchesRequested", [NSNumber numberWithInt:self.matchesRequested]];
  }
  if (self.hasStartAtMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startAtMatchId", [NSNumber numberWithInt:self.startAtMatchId]];
  }
  if (self.hasMinPlayers) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minPlayers", [NSNumber numberWithInt:self.minPlayers]];
  }
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", [NSNumber numberWithInt:self.requestId]];
  }
  if (self.hasTournamentGamesOnly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentGamesOnly", [NSNumber numberWithBool:self.tournamentGamesOnly]];
  }
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasLeagueId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueId", [NSNumber numberWithInt:self.leagueId]];
  }
  if (self.hasskill) {
    [output appendFormat:@"%@%@: %d\n", indent, @"skill", self.skill];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestMatches class]]) {
    return NO;
  }
  CMsgDOTARequestMatches *otherMessage = other;
  return
      self.hasPlayerName == otherMessage.hasPlayerName &&
      (!self.hasPlayerName || [self.playerName isEqual:otherMessage.playerName]) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      self.hasGameMode == otherMessage.hasGameMode &&
      (!self.hasGameMode || self.gameMode == otherMessage.gameMode) &&
      self.hasDateMin == otherMessage.hasDateMin &&
      (!self.hasDateMin || self.dateMin == otherMessage.dateMin) &&
      self.hasDateMax == otherMessage.hasDateMax &&
      (!self.hasDateMax || self.dateMax == otherMessage.dateMax) &&
      self.hasFriendsOnly == otherMessage.hasFriendsOnly &&
      (!self.hasFriendsOnly || self.friendsOnly == otherMessage.friendsOnly) &&
      self.hasRecentlyPlayedOnly == otherMessage.hasRecentlyPlayedOnly &&
      (!self.hasRecentlyPlayedOnly || self.recentlyPlayedOnly == otherMessage.recentlyPlayedOnly) &&
      self.hasMatchesRequested == otherMessage.hasMatchesRequested &&
      (!self.hasMatchesRequested || self.matchesRequested == otherMessage.matchesRequested) &&
      self.hasStartAtMatchId == otherMessage.hasStartAtMatchId &&
      (!self.hasStartAtMatchId || self.startAtMatchId == otherMessage.startAtMatchId) &&
      self.hasMinPlayers == otherMessage.hasMinPlayers &&
      (!self.hasMinPlayers || self.minPlayers == otherMessage.minPlayers) &&
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || self.requestId == otherMessage.requestId) &&
      self.hasTournamentGamesOnly == otherMessage.hasTournamentGamesOnly &&
      (!self.hasTournamentGamesOnly || self.tournamentGamesOnly == otherMessage.tournamentGamesOnly) &&
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasLeagueId == otherMessage.hasLeagueId &&
      (!self.hasLeagueId || self.leagueId == otherMessage.leagueId) &&
      self.hasskill == otherMessage.hasskill &&
      (!self.hasskill || self.skill == otherMessage.skill) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPlayerName) {
    hashCode = hashCode * 31 + [self.playerName hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  if (self.hasGameMode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameMode] hash];
  }
  if (self.hasDateMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.dateMin] hash];
  }
  if (self.hasDateMax) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.dateMax] hash];
  }
  if (self.hasFriendsOnly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.friendsOnly] hash];
  }
  if (self.hasRecentlyPlayedOnly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.recentlyPlayedOnly] hash];
  }
  if (self.hasMatchesRequested) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchesRequested] hash];
  }
  if (self.hasStartAtMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.startAtMatchId] hash];
  }
  if (self.hasMinPlayers) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.minPlayers] hash];
  }
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.requestId] hash];
  }
  if (self.hasTournamentGamesOnly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tournamentGamesOnly] hash];
  }
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasLeagueId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leagueId] hash];
  }
  if (self.hasskill) {
    hashCode = hashCode * 31 + self.skill;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTARequestMatches_SkillLevelIsValidValue(CMsgDOTARequestMatches_SkillLevel value) {
  switch (value) {
    case CMsgDOTARequestMatches_SkillLevelAny:
    case CMsgDOTARequestMatches_SkillLevelNormal:
    case CMsgDOTARequestMatches_SkillLevelHigh:
    case CMsgDOTARequestMatches_SkillLevelVeryHigh:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTARequestMatches_Builder()
@property (retain) CMsgDOTARequestMatches* _builderResult;
@end

@implementation CMsgDOTARequestMatches_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestMatches alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestMatches_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestMatches alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clone {
  return [CMsgDOTARequestMatches builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestMatches*) defaultInstance {
  return [CMsgDOTARequestMatches defaultInstance];
}
- (CMsgDOTARequestMatches*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestMatches*) buildPartial {
  CMsgDOTARequestMatches* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestMatches_Builder*) mergeFrom:(CMsgDOTARequestMatches*) other {
  if (other == [CMsgDOTARequestMatches defaultInstance]) {
    return self;
  }
  if (other.hasPlayerName) {
    [self setPlayerName:other.playerName];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.hasGameMode) {
    [self setGameMode:other.gameMode];
  }
  if (other.hasDateMin) {
    [self setDateMin:other.dateMin];
  }
  if (other.hasDateMax) {
    [self setDateMax:other.dateMax];
  }
  if (other.hasFriendsOnly) {
    [self setFriendsOnly:other.friendsOnly];
  }
  if (other.hasRecentlyPlayedOnly) {
    [self setRecentlyPlayedOnly:other.recentlyPlayedOnly];
  }
  if (other.hasMatchesRequested) {
    [self setMatchesRequested:other.matchesRequested];
  }
  if (other.hasStartAtMatchId) {
    [self setStartAtMatchId:other.startAtMatchId];
  }
  if (other.hasMinPlayers) {
    [self setMinPlayers:other.minPlayers];
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  if (other.hasTournamentGamesOnly) {
    [self setTournamentGamesOnly:other.tournamentGamesOnly];
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasLeagueId) {
    [self setLeagueId:other.leagueId];
  }
  if (other.hasskill) {
    [self setskill:other.skill];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestMatches_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestMatches_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPlayerName:[input readString]];
        break;
      }
      case 16: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setGameMode:[input readUInt32]];
        break;
      }
      case 53: {
        [self setDateMin:[input readFixed32]];
        break;
      }
      case 61: {
        [self setDateMax:[input readFixed32]];
        break;
      }
      case 64: {
        [self setFriendsOnly:[input readBool]];
        break;
      }
      case 72: {
        [self setRecentlyPlayedOnly:[input readBool]];
        break;
      }
      case 80: {
        [self setMatchesRequested:[input readUInt32]];
        break;
      }
      case 88: {
        [self setStartAtMatchId:[input readUInt32]];
        break;
      }
      case 101: {
        [self setMinPlayers:[input readFixed32]];
        break;
      }
      case 104: {
        [self setRequestId:[input readUInt32]];
        break;
      }
      case 112: {
        [self setTournamentGamesOnly:[input readBool]];
        break;
      }
      case 120: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 128: {
        [self setLeagueId:[input readUInt32]];
        break;
      }
      case 136: {
        int32_t value = [input readEnum];
        if (CMsgDOTARequestMatches_SkillLevelIsValidValue(value)) {
          [self setskill:value];
        } else {
          [unknownFields mergeVarintField:17 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasPlayerName {
  return _builderResult.hasPlayerName;
}
- (NSString*) playerName {
  return _builderResult.playerName;
}
- (CMsgDOTARequestMatches_Builder*) setPlayerName:(NSString*) value {
  _builderResult.hasPlayerName = YES;
  _builderResult.playerName = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearPlayerName {
  _builderResult.hasPlayerName = NO;
  _builderResult.playerName = @"";
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTARequestMatches_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (BOOL) hasGameMode {
  return _builderResult.hasGameMode;
}
- (uint32_t) gameMode {
  return _builderResult.gameMode;
}
- (CMsgDOTARequestMatches_Builder*) setGameMode:(uint32_t) value {
  _builderResult.hasGameMode = YES;
  _builderResult.gameMode = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearGameMode {
  _builderResult.hasGameMode = NO;
  _builderResult.gameMode = 0;
  return self;
}
- (BOOL) hasDateMin {
  return _builderResult.hasDateMin;
}
- (uint32_t) dateMin {
  return _builderResult.dateMin;
}
- (CMsgDOTARequestMatches_Builder*) setDateMin:(uint32_t) value {
  _builderResult.hasDateMin = YES;
  _builderResult.dateMin = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearDateMin {
  _builderResult.hasDateMin = NO;
  _builderResult.dateMin = 0;
  return self;
}
- (BOOL) hasDateMax {
  return _builderResult.hasDateMax;
}
- (uint32_t) dateMax {
  return _builderResult.dateMax;
}
- (CMsgDOTARequestMatches_Builder*) setDateMax:(uint32_t) value {
  _builderResult.hasDateMax = YES;
  _builderResult.dateMax = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearDateMax {
  _builderResult.hasDateMax = NO;
  _builderResult.dateMax = 0;
  return self;
}
- (BOOL) hasFriendsOnly {
  return _builderResult.hasFriendsOnly;
}
- (BOOL) friendsOnly {
  return _builderResult.friendsOnly;
}
- (CMsgDOTARequestMatches_Builder*) setFriendsOnly:(BOOL) value {
  _builderResult.hasFriendsOnly = YES;
  _builderResult.friendsOnly = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearFriendsOnly {
  _builderResult.hasFriendsOnly = NO;
  _builderResult.friendsOnly = NO;
  return self;
}
- (BOOL) hasRecentlyPlayedOnly {
  return _builderResult.hasRecentlyPlayedOnly;
}
- (BOOL) recentlyPlayedOnly {
  return _builderResult.recentlyPlayedOnly;
}
- (CMsgDOTARequestMatches_Builder*) setRecentlyPlayedOnly:(BOOL) value {
  _builderResult.hasRecentlyPlayedOnly = YES;
  _builderResult.recentlyPlayedOnly = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearRecentlyPlayedOnly {
  _builderResult.hasRecentlyPlayedOnly = NO;
  _builderResult.recentlyPlayedOnly = NO;
  return self;
}
- (BOOL) hasMatchesRequested {
  return _builderResult.hasMatchesRequested;
}
- (uint32_t) matchesRequested {
  return _builderResult.matchesRequested;
}
- (CMsgDOTARequestMatches_Builder*) setMatchesRequested:(uint32_t) value {
  _builderResult.hasMatchesRequested = YES;
  _builderResult.matchesRequested = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearMatchesRequested {
  _builderResult.hasMatchesRequested = NO;
  _builderResult.matchesRequested = 0;
  return self;
}
- (BOOL) hasStartAtMatchId {
  return _builderResult.hasStartAtMatchId;
}
- (uint32_t) startAtMatchId {
  return _builderResult.startAtMatchId;
}
- (CMsgDOTARequestMatches_Builder*) setStartAtMatchId:(uint32_t) value {
  _builderResult.hasStartAtMatchId = YES;
  _builderResult.startAtMatchId = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearStartAtMatchId {
  _builderResult.hasStartAtMatchId = NO;
  _builderResult.startAtMatchId = 0;
  return self;
}
- (BOOL) hasMinPlayers {
  return _builderResult.hasMinPlayers;
}
- (uint32_t) minPlayers {
  return _builderResult.minPlayers;
}
- (CMsgDOTARequestMatches_Builder*) setMinPlayers:(uint32_t) value {
  _builderResult.hasMinPlayers = YES;
  _builderResult.minPlayers = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearMinPlayers {
  _builderResult.hasMinPlayers = NO;
  _builderResult.minPlayers = 0;
  return self;
}
- (BOOL) hasRequestId {
  return _builderResult.hasRequestId;
}
- (uint32_t) requestId {
  return _builderResult.requestId;
}
- (CMsgDOTARequestMatches_Builder*) setRequestId:(uint32_t) value {
  _builderResult.hasRequestId = YES;
  _builderResult.requestId = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearRequestId {
  _builderResult.hasRequestId = NO;
  _builderResult.requestId = 0;
  return self;
}
- (BOOL) hasTournamentGamesOnly {
  return _builderResult.hasTournamentGamesOnly;
}
- (BOOL) tournamentGamesOnly {
  return _builderResult.tournamentGamesOnly;
}
- (CMsgDOTARequestMatches_Builder*) setTournamentGamesOnly:(BOOL) value {
  _builderResult.hasTournamentGamesOnly = YES;
  _builderResult.tournamentGamesOnly = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearTournamentGamesOnly {
  _builderResult.hasTournamentGamesOnly = NO;
  _builderResult.tournamentGamesOnly = NO;
  return self;
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTARequestMatches_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasLeagueId {
  return _builderResult.hasLeagueId;
}
- (uint32_t) leagueId {
  return _builderResult.leagueId;
}
- (CMsgDOTARequestMatches_Builder*) setLeagueId:(uint32_t) value {
  _builderResult.hasLeagueId = YES;
  _builderResult.leagueId = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearLeagueId {
  _builderResult.hasLeagueId = NO;
  _builderResult.leagueId = 0;
  return self;
}
- (BOOL) hasskill {
  return _builderResult.hasskill;
}
- (CMsgDOTARequestMatches_SkillLevel) skill {
  return _builderResult.skill;
}
- (CMsgDOTARequestMatches_Builder*) setskill:(CMsgDOTARequestMatches_SkillLevel) value {
  _builderResult.hasskill = YES;
  _builderResult.skill = value;
  return self;
}
- (CMsgDOTARequestMatches_Builder*) clearskill {
  _builderResult.hasskill = NO;
  _builderResult.skill = CMsgDOTARequestMatches_SkillLevelAny;
  return self;
}
@end

@interface CMsgDOTARequestMatchesResponse ()
@property (retain) PBAppendableArray * matchesArray;
@property uint32_t requestId;
@property uint32_t totalResults;
@property uint32_t resultsRemaining;
@end

@implementation CMsgDOTARequestMatchesResponse

@synthesize matchesArray;
@dynamic matches;
- (BOOL) hasRequestId {
  return !!hasRequestId_;
}
- (void) setHasRequestId:(BOOL) value_ {
  hasRequestId_ = !!value_;
}
@synthesize requestId;
- (BOOL) hasTotalResults {
  return !!hasTotalResults_;
}
- (void) setHasTotalResults:(BOOL) value_ {
  hasTotalResults_ = !!value_;
}
@synthesize totalResults;
- (BOOL) hasResultsRemaining {
  return !!hasResultsRemaining_;
}
- (void) setHasResultsRemaining:(BOOL) value_ {
  hasResultsRemaining_ = !!value_;
}
@synthesize resultsRemaining;
- (void) dealloc {
  self.matchesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.requestId = 0;
    self.totalResults = 0;
    self.resultsRemaining = 0;
  }
  return self;
}
static CMsgDOTARequestMatchesResponse* defaultCMsgDOTARequestMatchesResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestMatchesResponse class]) {
    defaultCMsgDOTARequestMatchesResponseInstance = [[CMsgDOTARequestMatchesResponse alloc] init];
  }
}
+ (CMsgDOTARequestMatchesResponse*) defaultInstance {
  return defaultCMsgDOTARequestMatchesResponseInstance;
}
- (CMsgDOTARequestMatchesResponse*) defaultInstance {
  return defaultCMsgDOTARequestMatchesResponseInstance;
}
- (PBArray *)matches {
  return matchesArray;
}
- (CMsgDOTAMatch*)matchesAtIndex:(NSUInteger)index {
  return [matchesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgDOTAMatch *element in self.matchesArray) {
    [output writeMessage:1 value:element];
  }
  if (self.hasRequestId) {
    [output writeUInt32:2 value:self.requestId];
  }
  if (self.hasTotalResults) {
    [output writeUInt32:3 value:self.totalResults];
  }
  if (self.hasResultsRemaining) {
    [output writeUInt32:4 value:self.resultsRemaining];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgDOTAMatch *element in self.matchesArray) {
    size_ += computeMessageSize(1, element);
  }
  if (self.hasRequestId) {
    size_ += computeUInt32Size(2, self.requestId);
  }
  if (self.hasTotalResults) {
    size_ += computeUInt32Size(3, self.totalResults);
  }
  if (self.hasResultsRemaining) {
    size_ += computeUInt32Size(4, self.resultsRemaining);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestMatchesResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestMatchesResponse*)[[[CMsgDOTARequestMatchesResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestMatchesResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestMatchesResponse*)[[[CMsgDOTARequestMatchesResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestMatchesResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestMatchesResponse*)[[[CMsgDOTARequestMatchesResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestMatchesResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestMatchesResponse*)[[[CMsgDOTARequestMatchesResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestMatchesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestMatchesResponse*)[[[CMsgDOTARequestMatchesResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestMatchesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestMatchesResponse*)[[[CMsgDOTARequestMatchesResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestMatchesResponse_Builder*) builder {
  return [[[CMsgDOTARequestMatchesResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestMatchesResponse_Builder*) builderWithPrototype:(CMsgDOTARequestMatchesResponse*) prototype {
  return [[CMsgDOTARequestMatchesResponse builder] mergeFrom:prototype];
}
- (CMsgDOTARequestMatchesResponse_Builder*) builder {
  return [CMsgDOTARequestMatchesResponse builder];
}
- (CMsgDOTARequestMatchesResponse_Builder*) toBuilder {
  return [CMsgDOTARequestMatchesResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgDOTAMatch* element in self.matchesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"matches"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestId", [NSNumber numberWithInt:self.requestId]];
  }
  if (self.hasTotalResults) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalResults", [NSNumber numberWithInt:self.totalResults]];
  }
  if (self.hasResultsRemaining) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultsRemaining", [NSNumber numberWithInt:self.resultsRemaining]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestMatchesResponse class]]) {
    return NO;
  }
  CMsgDOTARequestMatchesResponse *otherMessage = other;
  return
      [self.matchesArray isEqualToArray:otherMessage.matchesArray] &&
      self.hasRequestId == otherMessage.hasRequestId &&
      (!self.hasRequestId || self.requestId == otherMessage.requestId) &&
      self.hasTotalResults == otherMessage.hasTotalResults &&
      (!self.hasTotalResults || self.totalResults == otherMessage.totalResults) &&
      self.hasResultsRemaining == otherMessage.hasResultsRemaining &&
      (!self.hasResultsRemaining || self.resultsRemaining == otherMessage.resultsRemaining) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgDOTAMatch* element in self.matchesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasRequestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.requestId] hash];
  }
  if (self.hasTotalResults) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.totalResults] hash];
  }
  if (self.hasResultsRemaining) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.resultsRemaining] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestMatchesResponse_Builder()
@property (retain) CMsgDOTARequestMatchesResponse* _builderResult;
@end

@implementation CMsgDOTARequestMatchesResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestMatchesResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestMatchesResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestMatchesResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestMatchesResponse_Builder*) clone {
  return [CMsgDOTARequestMatchesResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestMatchesResponse*) defaultInstance {
  return [CMsgDOTARequestMatchesResponse defaultInstance];
}
- (CMsgDOTARequestMatchesResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestMatchesResponse*) buildPartial {
  CMsgDOTARequestMatchesResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestMatchesResponse_Builder*) mergeFrom:(CMsgDOTARequestMatchesResponse*) other {
  if (other == [CMsgDOTARequestMatchesResponse defaultInstance]) {
    return self;
  }
  if (other.matchesArray.count > 0) {
    if (_builderResult.matchesArray == nil) {
      _builderResult.matchesArray = [[other.matchesArray copyWithZone:[other.matchesArray zone]] autorelease];
    } else {
      [_builderResult.matchesArray appendArray:other.matchesArray];
    }
  }
  if (other.hasRequestId) {
    [self setRequestId:other.requestId];
  }
  if (other.hasTotalResults) {
    [self setTotalResults:other.totalResults];
  }
  if (other.hasResultsRemaining) {
    [self setResultsRemaining:other.resultsRemaining];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestMatchesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestMatchesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTAMatch_Builder* subBuilder = [CMsgDOTAMatch builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMatches:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setRequestId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTotalResults:[input readUInt32]];
        break;
      }
      case 32: {
        [self setResultsRemaining:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)matches {
  return _builderResult.matchesArray;
}
- (CMsgDOTAMatch*)matchesAtIndex:(NSUInteger)index {
  return [_builderResult matchesAtIndex:index];
}
- (CMsgDOTARequestMatchesResponse_Builder *)addMatches:(CMsgDOTAMatch*)value {
  if (_builderResult.matchesArray == nil) {
    _builderResult.matchesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.matchesArray addObject:value];
  return self;
}
- (CMsgDOTARequestMatchesResponse_Builder *)setMatchesArray:(NSArray *)array {
  _builderResult.matchesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestMatchesResponse_Builder *)setMatchesValues:(const CMsgDOTAMatch* *)values count:(NSUInteger)count {
  _builderResult.matchesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestMatchesResponse_Builder *)clearMatches {
  _builderResult.matchesArray = nil;
  return self;
}
- (BOOL) hasRequestId {
  return _builderResult.hasRequestId;
}
- (uint32_t) requestId {
  return _builderResult.requestId;
}
- (CMsgDOTARequestMatchesResponse_Builder*) setRequestId:(uint32_t) value {
  _builderResult.hasRequestId = YES;
  _builderResult.requestId = value;
  return self;
}
- (CMsgDOTARequestMatchesResponse_Builder*) clearRequestId {
  _builderResult.hasRequestId = NO;
  _builderResult.requestId = 0;
  return self;
}
- (BOOL) hasTotalResults {
  return _builderResult.hasTotalResults;
}
- (uint32_t) totalResults {
  return _builderResult.totalResults;
}
- (CMsgDOTARequestMatchesResponse_Builder*) setTotalResults:(uint32_t) value {
  _builderResult.hasTotalResults = YES;
  _builderResult.totalResults = value;
  return self;
}
- (CMsgDOTARequestMatchesResponse_Builder*) clearTotalResults {
  _builderResult.hasTotalResults = NO;
  _builderResult.totalResults = 0;
  return self;
}
- (BOOL) hasResultsRemaining {
  return _builderResult.hasResultsRemaining;
}
- (uint32_t) resultsRemaining {
  return _builderResult.resultsRemaining;
}
- (CMsgDOTARequestMatchesResponse_Builder*) setResultsRemaining:(uint32_t) value {
  _builderResult.hasResultsRemaining = YES;
  _builderResult.resultsRemaining = value;
  return self;
}
- (CMsgDOTARequestMatchesResponse_Builder*) clearResultsRemaining {
  _builderResult.hasResultsRemaining = NO;
  _builderResult.resultsRemaining = 0;
  return self;
}
@end

@interface CMsgDOTAPopup ()
@property CMsgDOTAPopup_PopupID id;
@property (retain) NSString* customText;
@end

@implementation CMsgDOTAPopup

- (BOOL) hasid {
  return !!hasid_;
}
- (void) setHasid:(BOOL) value_ {
  hasid_ = !!value_;
}
@synthesize id;
- (BOOL) hasCustomText {
  return !!hasCustomText_;
}
- (void) setHasCustomText:(BOOL) value_ {
  hasCustomText_ = !!value_;
}
@synthesize customText;
- (void) dealloc {
  self.customText = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = CMsgDOTAPopup_PopupIDKICKED_FROM_LOBBY;
    self.customText = @"";
  }
  return self;
}
static CMsgDOTAPopup* defaultCMsgDOTAPopupInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAPopup class]) {
    defaultCMsgDOTAPopupInstance = [[CMsgDOTAPopup alloc] init];
  }
}
+ (CMsgDOTAPopup*) defaultInstance {
  return defaultCMsgDOTAPopupInstance;
}
- (CMsgDOTAPopup*) defaultInstance {
  return defaultCMsgDOTAPopupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasid) {
    [output writeEnum:1 value:self.id];
  }
  if (self.hasCustomText) {
    [output writeString:2 value:self.customText];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasid) {
    size_ += computeEnumSize(1, self.id);
  }
  if (self.hasCustomText) {
    size_ += computeStringSize(2, self.customText);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAPopup*) parseFromData:(NSData*) data {
  return (CMsgDOTAPopup*)[[[CMsgDOTAPopup builder] mergeFromData:data] build];
}
+ (CMsgDOTAPopup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPopup*)[[[CMsgDOTAPopup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPopup*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAPopup*)[[[CMsgDOTAPopup builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAPopup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPopup*)[[[CMsgDOTAPopup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPopup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAPopup*)[[[CMsgDOTAPopup builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAPopup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPopup*)[[[CMsgDOTAPopup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPopup_Builder*) builder {
  return [[[CMsgDOTAPopup_Builder alloc] init] autorelease];
}
+ (CMsgDOTAPopup_Builder*) builderWithPrototype:(CMsgDOTAPopup*) prototype {
  return [[CMsgDOTAPopup builder] mergeFrom:prototype];
}
- (CMsgDOTAPopup_Builder*) builder {
  return [CMsgDOTAPopup builder];
}
- (CMsgDOTAPopup_Builder*) toBuilder {
  return [CMsgDOTAPopup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasid) {
    [output appendFormat:@"%@%@: %d\n", indent, @"id", self.id];
  }
  if (self.hasCustomText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"customText", self.customText];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAPopup class]]) {
    return NO;
  }
  CMsgDOTAPopup *otherMessage = other;
  return
      self.hasid == otherMessage.hasid &&
      (!self.hasid || self.id == otherMessage.id) &&
      self.hasCustomText == otherMessage.hasCustomText &&
      (!self.hasCustomText || [self.customText isEqual:otherMessage.customText]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasid) {
    hashCode = hashCode * 31 + self.id;
  }
  if (self.hasCustomText) {
    hashCode = hashCode * 31 + [self.customText hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTAPopup_PopupIDIsValidValue(CMsgDOTAPopup_PopupID value) {
  switch (value) {
    case CMsgDOTAPopup_PopupIDKICKED_FROM_LOBBY:
    case CMsgDOTAPopup_PopupIDKICKED_FROM_PARTY:
    case CMsgDOTAPopup_PopupIDKICKED_FROM_TEAM:
    case CMsgDOTAPopup_PopupIDTEAM_WAS_DISBANDED:
    case CMsgDOTAPopup_PopupIDTEAM_MATCHMAKE_ALREADY_MATCH:
    case CMsgDOTAPopup_PopupIDTEAM_MATCHMAKE_ALREADY_FINDING:
    case CMsgDOTAPopup_PopupIDTEAM_MATCHMAKE_FULL:
    case CMsgDOTAPopup_PopupIDTEAM_MATCHMAKE_FAIL_ADD:
    case CMsgDOTAPopup_PopupIDTEAM_MATCHMAKE_FAIL_ADD_CURRENT:
    case CMsgDOTAPopup_PopupIDTEAM_MATCHMAKE_FAILED_TEAM_MEMBER:
    case CMsgDOTAPopup_PopupIDTEAM_MATCHMAKE_ALREADY_GAME:
    case CMsgDOTAPopup_PopupIDTEAM_MATCHMAKE_FAIL_GET_PARTY:
    case CMsgDOTAPopup_PopupIDMATCHMAKING_DISABLED:
    case CMsgDOTAPopup_PopupIDINVITE_DENIED:
    case CMsgDOTAPopup_PopupIDPARTY_FULL:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTAPopup_Builder()
@property (retain) CMsgDOTAPopup* _builderResult;
@end

@implementation CMsgDOTAPopup_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAPopup alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAPopup_Builder*) clear {
  _builderResult = [[[CMsgDOTAPopup alloc] init] autorelease];
  return self;
}
- (CMsgDOTAPopup_Builder*) clone {
  return [CMsgDOTAPopup builderWithPrototype:_builderResult];
}
- (CMsgDOTAPopup*) defaultInstance {
  return [CMsgDOTAPopup defaultInstance];
}
- (CMsgDOTAPopup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAPopup*) buildPartial {
  CMsgDOTAPopup* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAPopup_Builder*) mergeFrom:(CMsgDOTAPopup*) other {
  if (other == [CMsgDOTAPopup defaultInstance]) {
    return self;
  }
  if (other.hasid) {
    [self setid:other.id];
  }
  if (other.hasCustomText) {
    [self setCustomText:other.customText];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAPopup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAPopup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTAPopup_PopupIDIsValidValue(value)) {
          [self setid:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setCustomText:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasid {
  return _builderResult.hasid;
}
- (CMsgDOTAPopup_PopupID) id {
  return _builderResult.id;
}
- (CMsgDOTAPopup_Builder*) setid:(CMsgDOTAPopup_PopupID) value {
  _builderResult.hasid = YES;
  _builderResult.id = value;
  return self;
}
- (CMsgDOTAPopup_Builder*) clearid {
  _builderResult.hasid = NO;
  _builderResult.id = CMsgDOTAPopup_PopupIDKICKED_FROM_LOBBY;
  return self;
}
- (BOOL) hasCustomText {
  return _builderResult.hasCustomText;
}
- (NSString*) customText {
  return _builderResult.customText;
}
- (CMsgDOTAPopup_Builder*) setCustomText:(NSString*) value {
  _builderResult.hasCustomText = YES;
  _builderResult.customText = value;
  return self;
}
- (CMsgDOTAPopup_Builder*) clearCustomText {
  _builderResult.hasCustomText = NO;
  _builderResult.customText = @"";
  return self;
}
@end

@interface CMsgDOTATeamMemberSDO ()
@property uint32_t accountId;
@property uint32_t teamId;
@end

@implementation CMsgDOTATeamMemberSDO

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasTeamId {
  return !!hasTeamId_;
}
- (void) setHasTeamId:(BOOL) value_ {
  hasTeamId_ = !!value_;
}
@synthesize teamId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.teamId = 0;
  }
  return self;
}
static CMsgDOTATeamMemberSDO* defaultCMsgDOTATeamMemberSDOInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeamMemberSDO class]) {
    defaultCMsgDOTATeamMemberSDOInstance = [[CMsgDOTATeamMemberSDO alloc] init];
  }
}
+ (CMsgDOTATeamMemberSDO*) defaultInstance {
  return defaultCMsgDOTATeamMemberSDOInstance;
}
- (CMsgDOTATeamMemberSDO*) defaultInstance {
  return defaultCMsgDOTATeamMemberSDOInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasTeamId) {
    [output writeUInt32:2 value:self.teamId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasTeamId) {
    size_ += computeUInt32Size(2, self.teamId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeamMemberSDO*) parseFromData:(NSData*) data {
  return (CMsgDOTATeamMemberSDO*)[[[CMsgDOTATeamMemberSDO builder] mergeFromData:data] build];
}
+ (CMsgDOTATeamMemberSDO*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamMemberSDO*)[[[CMsgDOTATeamMemberSDO builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamMemberSDO*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeamMemberSDO*)[[[CMsgDOTATeamMemberSDO builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeamMemberSDO*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamMemberSDO*)[[[CMsgDOTATeamMemberSDO builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamMemberSDO*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeamMemberSDO*)[[[CMsgDOTATeamMemberSDO builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeamMemberSDO*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamMemberSDO*)[[[CMsgDOTATeamMemberSDO builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamMemberSDO_Builder*) builder {
  return [[[CMsgDOTATeamMemberSDO_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeamMemberSDO_Builder*) builderWithPrototype:(CMsgDOTATeamMemberSDO*) prototype {
  return [[CMsgDOTATeamMemberSDO builder] mergeFrom:prototype];
}
- (CMsgDOTATeamMemberSDO_Builder*) builder {
  return [CMsgDOTATeamMemberSDO builder];
}
- (CMsgDOTATeamMemberSDO_Builder*) toBuilder {
  return [CMsgDOTATeamMemberSDO builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamId", [NSNumber numberWithInt:self.teamId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeamMemberSDO class]]) {
    return NO;
  }
  CMsgDOTATeamMemberSDO *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasTeamId == otherMessage.hasTeamId &&
      (!self.hasTeamId || self.teamId == otherMessage.teamId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATeamMemberSDO_Builder()
@property (retain) CMsgDOTATeamMemberSDO* _builderResult;
@end

@implementation CMsgDOTATeamMemberSDO_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeamMemberSDO alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeamMemberSDO_Builder*) clear {
  _builderResult = [[[CMsgDOTATeamMemberSDO alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeamMemberSDO_Builder*) clone {
  return [CMsgDOTATeamMemberSDO builderWithPrototype:_builderResult];
}
- (CMsgDOTATeamMemberSDO*) defaultInstance {
  return [CMsgDOTATeamMemberSDO defaultInstance];
}
- (CMsgDOTATeamMemberSDO*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeamMemberSDO*) buildPartial {
  CMsgDOTATeamMemberSDO* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeamMemberSDO_Builder*) mergeFrom:(CMsgDOTATeamMemberSDO*) other {
  if (other == [CMsgDOTATeamMemberSDO defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasTeamId) {
    [self setTeamId:other.teamId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeamMemberSDO_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeamMemberSDO_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setTeamId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTATeamMemberSDO_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTATeamMemberSDO_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasTeamId {
  return _builderResult.hasTeamId;
}
- (uint32_t) teamId {
  return _builderResult.teamId;
}
- (CMsgDOTATeamMemberSDO_Builder*) setTeamId:(uint32_t) value {
  _builderResult.hasTeamId = YES;
  _builderResult.teamId = value;
  return self;
}
- (CMsgDOTATeamMemberSDO_Builder*) clearTeamId {
  _builderResult.hasTeamId = NO;
  _builderResult.teamId = 0;
  return self;
}
@end

@interface CMsgDOTATeamMember ()
@property uint32_t accountId;
@property uint32_t teamId;
@property uint32_t permissions;
@property uint32_t timeJoined;
@end

@implementation CMsgDOTATeamMember

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasTeamId {
  return !!hasTeamId_;
}
- (void) setHasTeamId:(BOOL) value_ {
  hasTeamId_ = !!value_;
}
@synthesize teamId;
- (BOOL) hasPermissions {
  return !!hasPermissions_;
}
- (void) setHasPermissions:(BOOL) value_ {
  hasPermissions_ = !!value_;
}
@synthesize permissions;
- (BOOL) hasTimeJoined {
  return !!hasTimeJoined_;
}
- (void) setHasTimeJoined:(BOOL) value_ {
  hasTimeJoined_ = !!value_;
}
@synthesize timeJoined;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.teamId = 0;
    self.permissions = 0;
    self.timeJoined = 0;
  }
  return self;
}
static CMsgDOTATeamMember* defaultCMsgDOTATeamMemberInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeamMember class]) {
    defaultCMsgDOTATeamMemberInstance = [[CMsgDOTATeamMember alloc] init];
  }
}
+ (CMsgDOTATeamMember*) defaultInstance {
  return defaultCMsgDOTATeamMemberInstance;
}
- (CMsgDOTATeamMember*) defaultInstance {
  return defaultCMsgDOTATeamMemberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasTeamId) {
    [output writeUInt32:2 value:self.teamId];
  }
  if (self.hasPermissions) {
    [output writeUInt32:3 value:self.permissions];
  }
  if (self.hasTimeJoined) {
    [output writeUInt32:4 value:self.timeJoined];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasTeamId) {
    size_ += computeUInt32Size(2, self.teamId);
  }
  if (self.hasPermissions) {
    size_ += computeUInt32Size(3, self.permissions);
  }
  if (self.hasTimeJoined) {
    size_ += computeUInt32Size(4, self.timeJoined);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeamMember*) parseFromData:(NSData*) data {
  return (CMsgDOTATeamMember*)[[[CMsgDOTATeamMember builder] mergeFromData:data] build];
}
+ (CMsgDOTATeamMember*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamMember*)[[[CMsgDOTATeamMember builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamMember*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeamMember*)[[[CMsgDOTATeamMember builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeamMember*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamMember*)[[[CMsgDOTATeamMember builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamMember*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeamMember*)[[[CMsgDOTATeamMember builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeamMember*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamMember*)[[[CMsgDOTATeamMember builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamMember_Builder*) builder {
  return [[[CMsgDOTATeamMember_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeamMember_Builder*) builderWithPrototype:(CMsgDOTATeamMember*) prototype {
  return [[CMsgDOTATeamMember builder] mergeFrom:prototype];
}
- (CMsgDOTATeamMember_Builder*) builder {
  return [CMsgDOTATeamMember builder];
}
- (CMsgDOTATeamMember_Builder*) toBuilder {
  return [CMsgDOTATeamMember builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamId", [NSNumber numberWithInt:self.teamId]];
  }
  if (self.hasPermissions) {
    [output appendFormat:@"%@%@: %@\n", indent, @"permissions", [NSNumber numberWithInt:self.permissions]];
  }
  if (self.hasTimeJoined) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeJoined", [NSNumber numberWithInt:self.timeJoined]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeamMember class]]) {
    return NO;
  }
  CMsgDOTATeamMember *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasTeamId == otherMessage.hasTeamId &&
      (!self.hasTeamId || self.teamId == otherMessage.teamId) &&
      self.hasPermissions == otherMessage.hasPermissions &&
      (!self.hasPermissions || self.permissions == otherMessage.permissions) &&
      self.hasTimeJoined == otherMessage.hasTimeJoined &&
      (!self.hasTimeJoined || self.timeJoined == otherMessage.timeJoined) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamId] hash];
  }
  if (self.hasPermissions) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.permissions] hash];
  }
  if (self.hasTimeJoined) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeJoined] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATeamMember_Builder()
@property (retain) CMsgDOTATeamMember* _builderResult;
@end

@implementation CMsgDOTATeamMember_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeamMember alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeamMember_Builder*) clear {
  _builderResult = [[[CMsgDOTATeamMember alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeamMember_Builder*) clone {
  return [CMsgDOTATeamMember builderWithPrototype:_builderResult];
}
- (CMsgDOTATeamMember*) defaultInstance {
  return [CMsgDOTATeamMember defaultInstance];
}
- (CMsgDOTATeamMember*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeamMember*) buildPartial {
  CMsgDOTATeamMember* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeamMember_Builder*) mergeFrom:(CMsgDOTATeamMember*) other {
  if (other == [CMsgDOTATeamMember defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasTeamId) {
    [self setTeamId:other.teamId];
  }
  if (other.hasPermissions) {
    [self setPermissions:other.permissions];
  }
  if (other.hasTimeJoined) {
    [self setTimeJoined:other.timeJoined];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeamMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeamMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setTeamId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPermissions:[input readUInt32]];
        break;
      }
      case 32: {
        [self setTimeJoined:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTATeamMember_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTATeamMember_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasTeamId {
  return _builderResult.hasTeamId;
}
- (uint32_t) teamId {
  return _builderResult.teamId;
}
- (CMsgDOTATeamMember_Builder*) setTeamId:(uint32_t) value {
  _builderResult.hasTeamId = YES;
  _builderResult.teamId = value;
  return self;
}
- (CMsgDOTATeamMember_Builder*) clearTeamId {
  _builderResult.hasTeamId = NO;
  _builderResult.teamId = 0;
  return self;
}
- (BOOL) hasPermissions {
  return _builderResult.hasPermissions;
}
- (uint32_t) permissions {
  return _builderResult.permissions;
}
- (CMsgDOTATeamMember_Builder*) setPermissions:(uint32_t) value {
  _builderResult.hasPermissions = YES;
  _builderResult.permissions = value;
  return self;
}
- (CMsgDOTATeamMember_Builder*) clearPermissions {
  _builderResult.hasPermissions = NO;
  _builderResult.permissions = 0;
  return self;
}
- (BOOL) hasTimeJoined {
  return _builderResult.hasTimeJoined;
}
- (uint32_t) timeJoined {
  return _builderResult.timeJoined;
}
- (CMsgDOTATeamMember_Builder*) setTimeJoined:(uint32_t) value {
  _builderResult.hasTimeJoined = YES;
  _builderResult.timeJoined = value;
  return self;
}
- (CMsgDOTATeamMember_Builder*) clearTimeJoined {
  _builderResult.hasTimeJoined = NO;
  _builderResult.timeJoined = 0;
  return self;
}
@end

@interface CMsgDOTATeam ()
@property (retain) PBAppendableArray * membersArray;
@property uint32_t teamId;
@property (retain) NSString* name;
@property (retain) NSString* tag;
@property uint32_t adminId;
@property uint32_t timeCreated;
@property BOOL disbanded;
@property uint32_t wins;
@property uint32_t losses;
@property uint32_t rank;
@property uint64_t logo;
@property uint64_t baseLogo;
@property uint64_t bannerLogo;
@property uint64_t sponsorLogo;
@property (retain) NSString* countryCode;
@property (retain) NSString* url;
@property uint32_t fullgamesplayed;
@property (retain) PBAppendableArray * leaguesArray;
@property uint32_t gamesplayed;
@end

@implementation CMsgDOTATeam

@synthesize membersArray;
@dynamic members;
- (BOOL) hasTeamId {
  return !!hasTeamId_;
}
- (void) setHasTeamId:(BOOL) value_ {
  hasTeamId_ = !!value_;
}
@synthesize teamId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) value_ {
  hasTag_ = !!value_;
}
@synthesize tag;
- (BOOL) hasAdminId {
  return !!hasAdminId_;
}
- (void) setHasAdminId:(BOOL) value_ {
  hasAdminId_ = !!value_;
}
@synthesize adminId;
- (BOOL) hasTimeCreated {
  return !!hasTimeCreated_;
}
- (void) setHasTimeCreated:(BOOL) value_ {
  hasTimeCreated_ = !!value_;
}
@synthesize timeCreated;
- (BOOL) hasDisbanded {
  return !!hasDisbanded_;
}
- (void) setHasDisbanded:(BOOL) value_ {
  hasDisbanded_ = !!value_;
}
- (BOOL) disbanded {
  return !!disbanded_;
}
- (void) setDisbanded:(BOOL) value_ {
  disbanded_ = !!value_;
}
- (BOOL) hasWins {
  return !!hasWins_;
}
- (void) setHasWins:(BOOL) value_ {
  hasWins_ = !!value_;
}
@synthesize wins;
- (BOOL) hasLosses {
  return !!hasLosses_;
}
- (void) setHasLosses:(BOOL) value_ {
  hasLosses_ = !!value_;
}
@synthesize losses;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value_ {
  hasRank_ = !!value_;
}
@synthesize rank;
- (BOOL) hasLogo {
  return !!hasLogo_;
}
- (void) setHasLogo:(BOOL) value_ {
  hasLogo_ = !!value_;
}
@synthesize logo;
- (BOOL) hasBaseLogo {
  return !!hasBaseLogo_;
}
- (void) setHasBaseLogo:(BOOL) value_ {
  hasBaseLogo_ = !!value_;
}
@synthesize baseLogo;
- (BOOL) hasBannerLogo {
  return !!hasBannerLogo_;
}
- (void) setHasBannerLogo:(BOOL) value_ {
  hasBannerLogo_ = !!value_;
}
@synthesize bannerLogo;
- (BOOL) hasSponsorLogo {
  return !!hasSponsorLogo_;
}
- (void) setHasSponsorLogo:(BOOL) value_ {
  hasSponsorLogo_ = !!value_;
}
@synthesize sponsorLogo;
- (BOOL) hasCountryCode {
  return !!hasCountryCode_;
}
- (void) setHasCountryCode:(BOOL) value_ {
  hasCountryCode_ = !!value_;
}
@synthesize countryCode;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (BOOL) hasFullgamesplayed {
  return !!hasFullgamesplayed_;
}
- (void) setHasFullgamesplayed:(BOOL) value_ {
  hasFullgamesplayed_ = !!value_;
}
@synthesize fullgamesplayed;
@synthesize leaguesArray;
@dynamic leagues;
- (BOOL) hasGamesplayed {
  return !!hasGamesplayed_;
}
- (void) setHasGamesplayed:(BOOL) value_ {
  hasGamesplayed_ = !!value_;
}
@synthesize gamesplayed;
- (void) dealloc {
  self.membersArray = nil;
  self.name = nil;
  self.tag = nil;
  self.countryCode = nil;
  self.url = nil;
  self.leaguesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.teamId = 0;
    self.name = @"";
    self.tag = @"";
    self.adminId = 0;
    self.timeCreated = 0;
    self.disbanded = NO;
    self.wins = 0;
    self.losses = 0;
    self.rank = 0;
    self.logo = 0L;
    self.baseLogo = 0L;
    self.bannerLogo = 0L;
    self.sponsorLogo = 0L;
    self.countryCode = @"";
    self.url = @"";
    self.fullgamesplayed = 0;
    self.gamesplayed = 0;
  }
  return self;
}
static CMsgDOTATeam* defaultCMsgDOTATeamInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeam class]) {
    defaultCMsgDOTATeamInstance = [[CMsgDOTATeam alloc] init];
  }
}
+ (CMsgDOTATeam*) defaultInstance {
  return defaultCMsgDOTATeamInstance;
}
- (CMsgDOTATeam*) defaultInstance {
  return defaultCMsgDOTATeamInstance;
}
- (PBArray *)members {
  return membersArray;
}
- (CMsgDOTATeamMember*)membersAtIndex:(NSUInteger)index {
  return [membersArray objectAtIndex:index];
}
- (PBArray *)leagues {
  return leaguesArray;
}
- (uint32_t)leaguesAtIndex:(NSUInteger)index {
  return [leaguesArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgDOTATeamMember *element in self.membersArray) {
    [output writeMessage:1 value:element];
  }
  if (self.hasTeamId) {
    [output writeUInt32:2 value:self.teamId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasTag) {
    [output writeString:4 value:self.tag];
  }
  if (self.hasAdminId) {
    [output writeUInt32:5 value:self.adminId];
  }
  if (self.hasTimeCreated) {
    [output writeUInt32:6 value:self.timeCreated];
  }
  if (self.hasDisbanded) {
    [output writeBool:7 value:self.disbanded];
  }
  if (self.hasWins) {
    [output writeUInt32:8 value:self.wins];
  }
  if (self.hasLosses) {
    [output writeUInt32:9 value:self.losses];
  }
  if (self.hasRank) {
    [output writeUInt32:10 value:self.rank];
  }
  if (self.hasLogo) {
    [output writeUInt64:11 value:self.logo];
  }
  if (self.hasBaseLogo) {
    [output writeUInt64:12 value:self.baseLogo];
  }
  if (self.hasBannerLogo) {
    [output writeUInt64:13 value:self.bannerLogo];
  }
  if (self.hasSponsorLogo) {
    [output writeUInt64:14 value:self.sponsorLogo];
  }
  if (self.hasCountryCode) {
    [output writeString:15 value:self.countryCode];
  }
  if (self.hasUrl) {
    [output writeString:16 value:self.url];
  }
  if (self.hasFullgamesplayed) {
    [output writeUInt32:17 value:self.fullgamesplayed];
  }
  const NSUInteger leaguesArrayCount = self.leaguesArray.count;
  if (leaguesArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.leaguesArray.data;
    for (NSUInteger i = 0; i < leaguesArrayCount; ++i) {
      [output writeUInt32:18 value:values[i]];
    }
  }
  if (self.hasGamesplayed) {
    [output writeUInt32:19 value:self.gamesplayed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgDOTATeamMember *element in self.membersArray) {
    size_ += computeMessageSize(1, element);
  }
  if (self.hasTeamId) {
    size_ += computeUInt32Size(2, self.teamId);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasTag) {
    size_ += computeStringSize(4, self.tag);
  }
  if (self.hasAdminId) {
    size_ += computeUInt32Size(5, self.adminId);
  }
  if (self.hasTimeCreated) {
    size_ += computeUInt32Size(6, self.timeCreated);
  }
  if (self.hasDisbanded) {
    size_ += computeBoolSize(7, self.disbanded);
  }
  if (self.hasWins) {
    size_ += computeUInt32Size(8, self.wins);
  }
  if (self.hasLosses) {
    size_ += computeUInt32Size(9, self.losses);
  }
  if (self.hasRank) {
    size_ += computeUInt32Size(10, self.rank);
  }
  if (self.hasLogo) {
    size_ += computeUInt64Size(11, self.logo);
  }
  if (self.hasBaseLogo) {
    size_ += computeUInt64Size(12, self.baseLogo);
  }
  if (self.hasBannerLogo) {
    size_ += computeUInt64Size(13, self.bannerLogo);
  }
  if (self.hasSponsorLogo) {
    size_ += computeUInt64Size(14, self.sponsorLogo);
  }
  if (self.hasCountryCode) {
    size_ += computeStringSize(15, self.countryCode);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(16, self.url);
  }
  if (self.hasFullgamesplayed) {
    size_ += computeUInt32Size(17, self.fullgamesplayed);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.leaguesArray.count;
    const uint32_t *values = (const uint32_t *)self.leaguesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  if (self.hasGamesplayed) {
    size_ += computeUInt32Size(19, self.gamesplayed);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeam*) parseFromData:(NSData*) data {
  return (CMsgDOTATeam*)[[[CMsgDOTATeam builder] mergeFromData:data] build];
}
+ (CMsgDOTATeam*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeam*)[[[CMsgDOTATeam builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeam*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeam*)[[[CMsgDOTATeam builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeam*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeam*)[[[CMsgDOTATeam builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeam*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeam*)[[[CMsgDOTATeam builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeam*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeam*)[[[CMsgDOTATeam builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeam_Builder*) builder {
  return [[[CMsgDOTATeam_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeam_Builder*) builderWithPrototype:(CMsgDOTATeam*) prototype {
  return [[CMsgDOTATeam builder] mergeFrom:prototype];
}
- (CMsgDOTATeam_Builder*) builder {
  return [CMsgDOTATeam builder];
}
- (CMsgDOTATeam_Builder*) toBuilder {
  return [CMsgDOTATeam builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgDOTATeamMember* element in self.membersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"members"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamId", [NSNumber numberWithInt:self.teamId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", self.tag];
  }
  if (self.hasAdminId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"adminId", [NSNumber numberWithInt:self.adminId]];
  }
  if (self.hasTimeCreated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeCreated", [NSNumber numberWithInt:self.timeCreated]];
  }
  if (self.hasDisbanded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"disbanded", [NSNumber numberWithBool:self.disbanded]];
  }
  if (self.hasWins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wins", [NSNumber numberWithInt:self.wins]];
  }
  if (self.hasLosses) {
    [output appendFormat:@"%@%@: %@\n", indent, @"losses", [NSNumber numberWithInt:self.losses]];
  }
  if (self.hasRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rank", [NSNumber numberWithInt:self.rank]];
  }
  if (self.hasLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logo", [NSNumber numberWithLongLong:self.logo]];
  }
  if (self.hasBaseLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseLogo", [NSNumber numberWithLongLong:self.baseLogo]];
  }
  if (self.hasBannerLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bannerLogo", [NSNumber numberWithLongLong:self.bannerLogo]];
  }
  if (self.hasSponsorLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sponsorLogo", [NSNumber numberWithLongLong:self.sponsorLogo]];
  }
  if (self.hasCountryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"countryCode", self.countryCode];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasFullgamesplayed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fullgamesplayed", [NSNumber numberWithInt:self.fullgamesplayed]];
  }
  for (NSNumber* value in self.leaguesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagues", value];
  }
  if (self.hasGamesplayed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gamesplayed", [NSNumber numberWithInt:self.gamesplayed]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeam class]]) {
    return NO;
  }
  CMsgDOTATeam *otherMessage = other;
  return
      [self.membersArray isEqualToArray:otherMessage.membersArray] &&
      self.hasTeamId == otherMessage.hasTeamId &&
      (!self.hasTeamId || self.teamId == otherMessage.teamId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || [self.tag isEqual:otherMessage.tag]) &&
      self.hasAdminId == otherMessage.hasAdminId &&
      (!self.hasAdminId || self.adminId == otherMessage.adminId) &&
      self.hasTimeCreated == otherMessage.hasTimeCreated &&
      (!self.hasTimeCreated || self.timeCreated == otherMessage.timeCreated) &&
      self.hasDisbanded == otherMessage.hasDisbanded &&
      (!self.hasDisbanded || self.disbanded == otherMessage.disbanded) &&
      self.hasWins == otherMessage.hasWins &&
      (!self.hasWins || self.wins == otherMessage.wins) &&
      self.hasLosses == otherMessage.hasLosses &&
      (!self.hasLosses || self.losses == otherMessage.losses) &&
      self.hasRank == otherMessage.hasRank &&
      (!self.hasRank || self.rank == otherMessage.rank) &&
      self.hasLogo == otherMessage.hasLogo &&
      (!self.hasLogo || self.logo == otherMessage.logo) &&
      self.hasBaseLogo == otherMessage.hasBaseLogo &&
      (!self.hasBaseLogo || self.baseLogo == otherMessage.baseLogo) &&
      self.hasBannerLogo == otherMessage.hasBannerLogo &&
      (!self.hasBannerLogo || self.bannerLogo == otherMessage.bannerLogo) &&
      self.hasSponsorLogo == otherMessage.hasSponsorLogo &&
      (!self.hasSponsorLogo || self.sponsorLogo == otherMessage.sponsorLogo) &&
      self.hasCountryCode == otherMessage.hasCountryCode &&
      (!self.hasCountryCode || [self.countryCode isEqual:otherMessage.countryCode]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasFullgamesplayed == otherMessage.hasFullgamesplayed &&
      (!self.hasFullgamesplayed || self.fullgamesplayed == otherMessage.fullgamesplayed) &&
      [self.leaguesArray isEqualToArray:otherMessage.leaguesArray] &&
      self.hasGamesplayed == otherMessage.hasGamesplayed &&
      (!self.hasGamesplayed || self.gamesplayed == otherMessage.gamesplayed) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgDOTATeamMember* element in self.membersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasTag) {
    hashCode = hashCode * 31 + [self.tag hash];
  }
  if (self.hasAdminId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.adminId] hash];
  }
  if (self.hasTimeCreated) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeCreated] hash];
  }
  if (self.hasDisbanded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.disbanded] hash];
  }
  if (self.hasWins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.wins] hash];
  }
  if (self.hasLosses) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.losses] hash];
  }
  if (self.hasRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rank] hash];
  }
  if (self.hasLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.logo] hash];
  }
  if (self.hasBaseLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.baseLogo] hash];
  }
  if (self.hasBannerLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.bannerLogo] hash];
  }
  if (self.hasSponsorLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sponsorLogo] hash];
  }
  if (self.hasCountryCode) {
    hashCode = hashCode * 31 + [self.countryCode hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasFullgamesplayed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.fullgamesplayed] hash];
  }
  for (NSNumber* value in self.leaguesArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasGamesplayed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gamesplayed] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATeam_Builder()
@property (retain) CMsgDOTATeam* _builderResult;
@end

@implementation CMsgDOTATeam_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeam alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeam_Builder*) clear {
  _builderResult = [[[CMsgDOTATeam alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeam_Builder*) clone {
  return [CMsgDOTATeam builderWithPrototype:_builderResult];
}
- (CMsgDOTATeam*) defaultInstance {
  return [CMsgDOTATeam defaultInstance];
}
- (CMsgDOTATeam*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeam*) buildPartial {
  CMsgDOTATeam* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeam_Builder*) mergeFrom:(CMsgDOTATeam*) other {
  if (other == [CMsgDOTATeam defaultInstance]) {
    return self;
  }
  if (other.membersArray.count > 0) {
    if (_builderResult.membersArray == nil) {
      _builderResult.membersArray = [[other.membersArray copyWithZone:[other.membersArray zone]] autorelease];
    } else {
      [_builderResult.membersArray appendArray:other.membersArray];
    }
  }
  if (other.hasTeamId) {
    [self setTeamId:other.teamId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.hasAdminId) {
    [self setAdminId:other.adminId];
  }
  if (other.hasTimeCreated) {
    [self setTimeCreated:other.timeCreated];
  }
  if (other.hasDisbanded) {
    [self setDisbanded:other.disbanded];
  }
  if (other.hasWins) {
    [self setWins:other.wins];
  }
  if (other.hasLosses) {
    [self setLosses:other.losses];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasLogo) {
    [self setLogo:other.logo];
  }
  if (other.hasBaseLogo) {
    [self setBaseLogo:other.baseLogo];
  }
  if (other.hasBannerLogo) {
    [self setBannerLogo:other.bannerLogo];
  }
  if (other.hasSponsorLogo) {
    [self setSponsorLogo:other.sponsorLogo];
  }
  if (other.hasCountryCode) {
    [self setCountryCode:other.countryCode];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasFullgamesplayed) {
    [self setFullgamesplayed:other.fullgamesplayed];
  }
  if (other.leaguesArray.count > 0) {
    if (_builderResult.leaguesArray == nil) {
      _builderResult.leaguesArray = [[other.leaguesArray copyWithZone:[other.leaguesArray zone]] autorelease];
    } else {
      [_builderResult.leaguesArray appendArray:other.leaguesArray];
    }
  }
  if (other.hasGamesplayed) {
    [self setGamesplayed:other.gamesplayed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTATeamMember_Builder* subBuilder = [CMsgDOTATeamMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMembers:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setTeamId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setTag:[input readString]];
        break;
      }
      case 40: {
        [self setAdminId:[input readUInt32]];
        break;
      }
      case 48: {
        [self setTimeCreated:[input readUInt32]];
        break;
      }
      case 56: {
        [self setDisbanded:[input readBool]];
        break;
      }
      case 64: {
        [self setWins:[input readUInt32]];
        break;
      }
      case 72: {
        [self setLosses:[input readUInt32]];
        break;
      }
      case 80: {
        [self setRank:[input readUInt32]];
        break;
      }
      case 88: {
        [self setLogo:[input readUInt64]];
        break;
      }
      case 96: {
        [self setBaseLogo:[input readUInt64]];
        break;
      }
      case 104: {
        [self setBannerLogo:[input readUInt64]];
        break;
      }
      case 112: {
        [self setSponsorLogo:[input readUInt64]];
        break;
      }
      case 122: {
        [self setCountryCode:[input readString]];
        break;
      }
      case 130: {
        [self setUrl:[input readString]];
        break;
      }
      case 136: {
        [self setFullgamesplayed:[input readUInt32]];
        break;
      }
      case 144: {
        [self addLeagues:[input readUInt32]];
        break;
      }
      case 152: {
        [self setGamesplayed:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)members {
  return _builderResult.membersArray;
}
- (CMsgDOTATeamMember*)membersAtIndex:(NSUInteger)index {
  return [_builderResult membersAtIndex:index];
}
- (CMsgDOTATeam_Builder *)addMembers:(CMsgDOTATeamMember*)value {
  if (_builderResult.membersArray == nil) {
    _builderResult.membersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.membersArray addObject:value];
  return self;
}
- (CMsgDOTATeam_Builder *)setMembersArray:(NSArray *)array {
  _builderResult.membersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTATeam_Builder *)setMembersValues:(const CMsgDOTATeamMember* *)values count:(NSUInteger)count {
  _builderResult.membersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTATeam_Builder *)clearMembers {
  _builderResult.membersArray = nil;
  return self;
}
- (BOOL) hasTeamId {
  return _builderResult.hasTeamId;
}
- (uint32_t) teamId {
  return _builderResult.teamId;
}
- (CMsgDOTATeam_Builder*) setTeamId:(uint32_t) value {
  _builderResult.hasTeamId = YES;
  _builderResult.teamId = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearTeamId {
  _builderResult.hasTeamId = NO;
  _builderResult.teamId = 0;
  return self;
}
- (BOOL) hasName {
  return _builderResult.hasName;
}
- (NSString*) name {
  return _builderResult.name;
}
- (CMsgDOTATeam_Builder*) setName:(NSString*) value {
  _builderResult.hasName = YES;
  _builderResult.name = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearName {
  _builderResult.hasName = NO;
  _builderResult.name = @"";
  return self;
}
- (BOOL) hasTag {
  return _builderResult.hasTag;
}
- (NSString*) tag {
  return _builderResult.tag;
}
- (CMsgDOTATeam_Builder*) setTag:(NSString*) value {
  _builderResult.hasTag = YES;
  _builderResult.tag = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearTag {
  _builderResult.hasTag = NO;
  _builderResult.tag = @"";
  return self;
}
- (BOOL) hasAdminId {
  return _builderResult.hasAdminId;
}
- (uint32_t) adminId {
  return _builderResult.adminId;
}
- (CMsgDOTATeam_Builder*) setAdminId:(uint32_t) value {
  _builderResult.hasAdminId = YES;
  _builderResult.adminId = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearAdminId {
  _builderResult.hasAdminId = NO;
  _builderResult.adminId = 0;
  return self;
}
- (BOOL) hasTimeCreated {
  return _builderResult.hasTimeCreated;
}
- (uint32_t) timeCreated {
  return _builderResult.timeCreated;
}
- (CMsgDOTATeam_Builder*) setTimeCreated:(uint32_t) value {
  _builderResult.hasTimeCreated = YES;
  _builderResult.timeCreated = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearTimeCreated {
  _builderResult.hasTimeCreated = NO;
  _builderResult.timeCreated = 0;
  return self;
}
- (BOOL) hasDisbanded {
  return _builderResult.hasDisbanded;
}
- (BOOL) disbanded {
  return _builderResult.disbanded;
}
- (CMsgDOTATeam_Builder*) setDisbanded:(BOOL) value {
  _builderResult.hasDisbanded = YES;
  _builderResult.disbanded = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearDisbanded {
  _builderResult.hasDisbanded = NO;
  _builderResult.disbanded = NO;
  return self;
}
- (BOOL) hasWins {
  return _builderResult.hasWins;
}
- (uint32_t) wins {
  return _builderResult.wins;
}
- (CMsgDOTATeam_Builder*) setWins:(uint32_t) value {
  _builderResult.hasWins = YES;
  _builderResult.wins = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearWins {
  _builderResult.hasWins = NO;
  _builderResult.wins = 0;
  return self;
}
- (BOOL) hasLosses {
  return _builderResult.hasLosses;
}
- (uint32_t) losses {
  return _builderResult.losses;
}
- (CMsgDOTATeam_Builder*) setLosses:(uint32_t) value {
  _builderResult.hasLosses = YES;
  _builderResult.losses = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearLosses {
  _builderResult.hasLosses = NO;
  _builderResult.losses = 0;
  return self;
}
- (BOOL) hasRank {
  return _builderResult.hasRank;
}
- (uint32_t) rank {
  return _builderResult.rank;
}
- (CMsgDOTATeam_Builder*) setRank:(uint32_t) value {
  _builderResult.hasRank = YES;
  _builderResult.rank = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearRank {
  _builderResult.hasRank = NO;
  _builderResult.rank = 0;
  return self;
}
- (BOOL) hasLogo {
  return _builderResult.hasLogo;
}
- (uint64_t) logo {
  return _builderResult.logo;
}
- (CMsgDOTATeam_Builder*) setLogo:(uint64_t) value {
  _builderResult.hasLogo = YES;
  _builderResult.logo = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearLogo {
  _builderResult.hasLogo = NO;
  _builderResult.logo = 0L;
  return self;
}
- (BOOL) hasBaseLogo {
  return _builderResult.hasBaseLogo;
}
- (uint64_t) baseLogo {
  return _builderResult.baseLogo;
}
- (CMsgDOTATeam_Builder*) setBaseLogo:(uint64_t) value {
  _builderResult.hasBaseLogo = YES;
  _builderResult.baseLogo = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearBaseLogo {
  _builderResult.hasBaseLogo = NO;
  _builderResult.baseLogo = 0L;
  return self;
}
- (BOOL) hasBannerLogo {
  return _builderResult.hasBannerLogo;
}
- (uint64_t) bannerLogo {
  return _builderResult.bannerLogo;
}
- (CMsgDOTATeam_Builder*) setBannerLogo:(uint64_t) value {
  _builderResult.hasBannerLogo = YES;
  _builderResult.bannerLogo = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearBannerLogo {
  _builderResult.hasBannerLogo = NO;
  _builderResult.bannerLogo = 0L;
  return self;
}
- (BOOL) hasSponsorLogo {
  return _builderResult.hasSponsorLogo;
}
- (uint64_t) sponsorLogo {
  return _builderResult.sponsorLogo;
}
- (CMsgDOTATeam_Builder*) setSponsorLogo:(uint64_t) value {
  _builderResult.hasSponsorLogo = YES;
  _builderResult.sponsorLogo = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearSponsorLogo {
  _builderResult.hasSponsorLogo = NO;
  _builderResult.sponsorLogo = 0L;
  return self;
}
- (BOOL) hasCountryCode {
  return _builderResult.hasCountryCode;
}
- (NSString*) countryCode {
  return _builderResult.countryCode;
}
- (CMsgDOTATeam_Builder*) setCountryCode:(NSString*) value {
  _builderResult.hasCountryCode = YES;
  _builderResult.countryCode = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearCountryCode {
  _builderResult.hasCountryCode = NO;
  _builderResult.countryCode = @"";
  return self;
}
- (BOOL) hasUrl {
  return _builderResult.hasUrl;
}
- (NSString*) url {
  return _builderResult.url;
}
- (CMsgDOTATeam_Builder*) setUrl:(NSString*) value {
  _builderResult.hasUrl = YES;
  _builderResult.url = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearUrl {
  _builderResult.hasUrl = NO;
  _builderResult.url = @"";
  return self;
}
- (BOOL) hasFullgamesplayed {
  return _builderResult.hasFullgamesplayed;
}
- (uint32_t) fullgamesplayed {
  return _builderResult.fullgamesplayed;
}
- (CMsgDOTATeam_Builder*) setFullgamesplayed:(uint32_t) value {
  _builderResult.hasFullgamesplayed = YES;
  _builderResult.fullgamesplayed = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearFullgamesplayed {
  _builderResult.hasFullgamesplayed = NO;
  _builderResult.fullgamesplayed = 0;
  return self;
}
- (PBAppendableArray *)leagues {
  return _builderResult.leaguesArray;
}
- (uint32_t)leaguesAtIndex:(NSUInteger)index {
  return [_builderResult leaguesAtIndex:index];
}
- (CMsgDOTATeam_Builder *)addLeagues:(uint32_t)value {
  if (_builderResult.leaguesArray == nil) {
    _builderResult.leaguesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.leaguesArray addUint32:value];
  return self;
}
- (CMsgDOTATeam_Builder *)setLeaguesArray:(NSArray *)array {
  _builderResult.leaguesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTATeam_Builder *)setLeaguesValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.leaguesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTATeam_Builder *)clearLeagues {
  _builderResult.leaguesArray = nil;
  return self;
}
- (BOOL) hasGamesplayed {
  return _builderResult.hasGamesplayed;
}
- (uint32_t) gamesplayed {
  return _builderResult.gamesplayed;
}
- (CMsgDOTATeam_Builder*) setGamesplayed:(uint32_t) value {
  _builderResult.hasGamesplayed = YES;
  _builderResult.gamesplayed = value;
  return self;
}
- (CMsgDOTATeam_Builder*) clearGamesplayed {
  _builderResult.hasGamesplayed = NO;
  _builderResult.gamesplayed = 0;
  return self;
}
@end

@interface CMsgDOTACreateTeam ()
@property (retain) NSString* name;
@property (retain) NSString* tag;
@property uint64_t logo;
@property uint64_t baseLogo;
@property uint64_t bannerLogo;
@property uint64_t sponsorLogo;
@property (retain) NSString* countryCode;
@property (retain) NSString* url;
@end

@implementation CMsgDOTACreateTeam

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) value_ {
  hasTag_ = !!value_;
}
@synthesize tag;
- (BOOL) hasLogo {
  return !!hasLogo_;
}
- (void) setHasLogo:(BOOL) value_ {
  hasLogo_ = !!value_;
}
@synthesize logo;
- (BOOL) hasBaseLogo {
  return !!hasBaseLogo_;
}
- (void) setHasBaseLogo:(BOOL) value_ {
  hasBaseLogo_ = !!value_;
}
@synthesize baseLogo;
- (BOOL) hasBannerLogo {
  return !!hasBannerLogo_;
}
- (void) setHasBannerLogo:(BOOL) value_ {
  hasBannerLogo_ = !!value_;
}
@synthesize bannerLogo;
- (BOOL) hasSponsorLogo {
  return !!hasSponsorLogo_;
}
- (void) setHasSponsorLogo:(BOOL) value_ {
  hasSponsorLogo_ = !!value_;
}
@synthesize sponsorLogo;
- (BOOL) hasCountryCode {
  return !!hasCountryCode_;
}
- (void) setHasCountryCode:(BOOL) value_ {
  hasCountryCode_ = !!value_;
}
@synthesize countryCode;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (void) dealloc {
  self.name = nil;
  self.tag = nil;
  self.countryCode = nil;
  self.url = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.tag = @"";
    self.logo = 0L;
    self.baseLogo = 0L;
    self.bannerLogo = 0L;
    self.sponsorLogo = 0L;
    self.countryCode = @"";
    self.url = @"";
  }
  return self;
}
static CMsgDOTACreateTeam* defaultCMsgDOTACreateTeamInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTACreateTeam class]) {
    defaultCMsgDOTACreateTeamInstance = [[CMsgDOTACreateTeam alloc] init];
  }
}
+ (CMsgDOTACreateTeam*) defaultInstance {
  return defaultCMsgDOTACreateTeamInstance;
}
- (CMsgDOTACreateTeam*) defaultInstance {
  return defaultCMsgDOTACreateTeamInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasTag) {
    [output writeString:2 value:self.tag];
  }
  if (self.hasLogo) {
    [output writeUInt64:3 value:self.logo];
  }
  if (self.hasBaseLogo) {
    [output writeUInt64:4 value:self.baseLogo];
  }
  if (self.hasBannerLogo) {
    [output writeUInt64:5 value:self.bannerLogo];
  }
  if (self.hasSponsorLogo) {
    [output writeUInt64:6 value:self.sponsorLogo];
  }
  if (self.hasCountryCode) {
    [output writeString:7 value:self.countryCode];
  }
  if (self.hasUrl) {
    [output writeString:8 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasTag) {
    size_ += computeStringSize(2, self.tag);
  }
  if (self.hasLogo) {
    size_ += computeUInt64Size(3, self.logo);
  }
  if (self.hasBaseLogo) {
    size_ += computeUInt64Size(4, self.baseLogo);
  }
  if (self.hasBannerLogo) {
    size_ += computeUInt64Size(5, self.bannerLogo);
  }
  if (self.hasSponsorLogo) {
    size_ += computeUInt64Size(6, self.sponsorLogo);
  }
  if (self.hasCountryCode) {
    size_ += computeStringSize(7, self.countryCode);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(8, self.url);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTACreateTeam*) parseFromData:(NSData*) data {
  return (CMsgDOTACreateTeam*)[[[CMsgDOTACreateTeam builder] mergeFromData:data] build];
}
+ (CMsgDOTACreateTeam*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTACreateTeam*)[[[CMsgDOTACreateTeam builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTACreateTeam*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTACreateTeam*)[[[CMsgDOTACreateTeam builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTACreateTeam*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTACreateTeam*)[[[CMsgDOTACreateTeam builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTACreateTeam*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTACreateTeam*)[[[CMsgDOTACreateTeam builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTACreateTeam*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTACreateTeam*)[[[CMsgDOTACreateTeam builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTACreateTeam_Builder*) builder {
  return [[[CMsgDOTACreateTeam_Builder alloc] init] autorelease];
}
+ (CMsgDOTACreateTeam_Builder*) builderWithPrototype:(CMsgDOTACreateTeam*) prototype {
  return [[CMsgDOTACreateTeam builder] mergeFrom:prototype];
}
- (CMsgDOTACreateTeam_Builder*) builder {
  return [CMsgDOTACreateTeam builder];
}
- (CMsgDOTACreateTeam_Builder*) toBuilder {
  return [CMsgDOTACreateTeam builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", self.tag];
  }
  if (self.hasLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logo", [NSNumber numberWithLongLong:self.logo]];
  }
  if (self.hasBaseLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseLogo", [NSNumber numberWithLongLong:self.baseLogo]];
  }
  if (self.hasBannerLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bannerLogo", [NSNumber numberWithLongLong:self.bannerLogo]];
  }
  if (self.hasSponsorLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sponsorLogo", [NSNumber numberWithLongLong:self.sponsorLogo]];
  }
  if (self.hasCountryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"countryCode", self.countryCode];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTACreateTeam class]]) {
    return NO;
  }
  CMsgDOTACreateTeam *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || [self.tag isEqual:otherMessage.tag]) &&
      self.hasLogo == otherMessage.hasLogo &&
      (!self.hasLogo || self.logo == otherMessage.logo) &&
      self.hasBaseLogo == otherMessage.hasBaseLogo &&
      (!self.hasBaseLogo || self.baseLogo == otherMessage.baseLogo) &&
      self.hasBannerLogo == otherMessage.hasBannerLogo &&
      (!self.hasBannerLogo || self.bannerLogo == otherMessage.bannerLogo) &&
      self.hasSponsorLogo == otherMessage.hasSponsorLogo &&
      (!self.hasSponsorLogo || self.sponsorLogo == otherMessage.sponsorLogo) &&
      self.hasCountryCode == otherMessage.hasCountryCode &&
      (!self.hasCountryCode || [self.countryCode isEqual:otherMessage.countryCode]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasTag) {
    hashCode = hashCode * 31 + [self.tag hash];
  }
  if (self.hasLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.logo] hash];
  }
  if (self.hasBaseLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.baseLogo] hash];
  }
  if (self.hasBannerLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.bannerLogo] hash];
  }
  if (self.hasSponsorLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sponsorLogo] hash];
  }
  if (self.hasCountryCode) {
    hashCode = hashCode * 31 + [self.countryCode hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTACreateTeam_Builder()
@property (retain) CMsgDOTACreateTeam* _builderResult;
@end

@implementation CMsgDOTACreateTeam_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTACreateTeam alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTACreateTeam_Builder*) clear {
  _builderResult = [[[CMsgDOTACreateTeam alloc] init] autorelease];
  return self;
}
- (CMsgDOTACreateTeam_Builder*) clone {
  return [CMsgDOTACreateTeam builderWithPrototype:_builderResult];
}
- (CMsgDOTACreateTeam*) defaultInstance {
  return [CMsgDOTACreateTeam defaultInstance];
}
- (CMsgDOTACreateTeam*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTACreateTeam*) buildPartial {
  CMsgDOTACreateTeam* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTACreateTeam_Builder*) mergeFrom:(CMsgDOTACreateTeam*) other {
  if (other == [CMsgDOTACreateTeam defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.hasLogo) {
    [self setLogo:other.logo];
  }
  if (other.hasBaseLogo) {
    [self setBaseLogo:other.baseLogo];
  }
  if (other.hasBannerLogo) {
    [self setBannerLogo:other.bannerLogo];
  }
  if (other.hasSponsorLogo) {
    [self setSponsorLogo:other.sponsorLogo];
  }
  if (other.hasCountryCode) {
    [self setCountryCode:other.countryCode];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTACreateTeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTACreateTeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setTag:[input readString]];
        break;
      }
      case 24: {
        [self setLogo:[input readUInt64]];
        break;
      }
      case 32: {
        [self setBaseLogo:[input readUInt64]];
        break;
      }
      case 40: {
        [self setBannerLogo:[input readUInt64]];
        break;
      }
      case 48: {
        [self setSponsorLogo:[input readUInt64]];
        break;
      }
      case 58: {
        [self setCountryCode:[input readString]];
        break;
      }
      case 66: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return _builderResult.hasName;
}
- (NSString*) name {
  return _builderResult.name;
}
- (CMsgDOTACreateTeam_Builder*) setName:(NSString*) value {
  _builderResult.hasName = YES;
  _builderResult.name = value;
  return self;
}
- (CMsgDOTACreateTeam_Builder*) clearName {
  _builderResult.hasName = NO;
  _builderResult.name = @"";
  return self;
}
- (BOOL) hasTag {
  return _builderResult.hasTag;
}
- (NSString*) tag {
  return _builderResult.tag;
}
- (CMsgDOTACreateTeam_Builder*) setTag:(NSString*) value {
  _builderResult.hasTag = YES;
  _builderResult.tag = value;
  return self;
}
- (CMsgDOTACreateTeam_Builder*) clearTag {
  _builderResult.hasTag = NO;
  _builderResult.tag = @"";
  return self;
}
- (BOOL) hasLogo {
  return _builderResult.hasLogo;
}
- (uint64_t) logo {
  return _builderResult.logo;
}
- (CMsgDOTACreateTeam_Builder*) setLogo:(uint64_t) value {
  _builderResult.hasLogo = YES;
  _builderResult.logo = value;
  return self;
}
- (CMsgDOTACreateTeam_Builder*) clearLogo {
  _builderResult.hasLogo = NO;
  _builderResult.logo = 0L;
  return self;
}
- (BOOL) hasBaseLogo {
  return _builderResult.hasBaseLogo;
}
- (uint64_t) baseLogo {
  return _builderResult.baseLogo;
}
- (CMsgDOTACreateTeam_Builder*) setBaseLogo:(uint64_t) value {
  _builderResult.hasBaseLogo = YES;
  _builderResult.baseLogo = value;
  return self;
}
- (CMsgDOTACreateTeam_Builder*) clearBaseLogo {
  _builderResult.hasBaseLogo = NO;
  _builderResult.baseLogo = 0L;
  return self;
}
- (BOOL) hasBannerLogo {
  return _builderResult.hasBannerLogo;
}
- (uint64_t) bannerLogo {
  return _builderResult.bannerLogo;
}
- (CMsgDOTACreateTeam_Builder*) setBannerLogo:(uint64_t) value {
  _builderResult.hasBannerLogo = YES;
  _builderResult.bannerLogo = value;
  return self;
}
- (CMsgDOTACreateTeam_Builder*) clearBannerLogo {
  _builderResult.hasBannerLogo = NO;
  _builderResult.bannerLogo = 0L;
  return self;
}
- (BOOL) hasSponsorLogo {
  return _builderResult.hasSponsorLogo;
}
- (uint64_t) sponsorLogo {
  return _builderResult.sponsorLogo;
}
- (CMsgDOTACreateTeam_Builder*) setSponsorLogo:(uint64_t) value {
  _builderResult.hasSponsorLogo = YES;
  _builderResult.sponsorLogo = value;
  return self;
}
- (CMsgDOTACreateTeam_Builder*) clearSponsorLogo {
  _builderResult.hasSponsorLogo = NO;
  _builderResult.sponsorLogo = 0L;
  return self;
}
- (BOOL) hasCountryCode {
  return _builderResult.hasCountryCode;
}
- (NSString*) countryCode {
  return _builderResult.countryCode;
}
- (CMsgDOTACreateTeam_Builder*) setCountryCode:(NSString*) value {
  _builderResult.hasCountryCode = YES;
  _builderResult.countryCode = value;
  return self;
}
- (CMsgDOTACreateTeam_Builder*) clearCountryCode {
  _builderResult.hasCountryCode = NO;
  _builderResult.countryCode = @"";
  return self;
}
- (BOOL) hasUrl {
  return _builderResult.hasUrl;
}
- (NSString*) url {
  return _builderResult.url;
}
- (CMsgDOTACreateTeam_Builder*) setUrl:(NSString*) value {
  _builderResult.hasUrl = YES;
  _builderResult.url = value;
  return self;
}
- (CMsgDOTACreateTeam_Builder*) clearUrl {
  _builderResult.hasUrl = NO;
  _builderResult.url = @"";
  return self;
}
@end

@interface CMsgDOTACreateTeamResponse ()
@property (retain) PBAppendableArray * resultsArray;
@end

@implementation CMsgDOTACreateTeamResponse

@synthesize resultsArray;
@dynamic results;
- (void) dealloc {
  self.resultsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTACreateTeamResponse* defaultCMsgDOTACreateTeamResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTACreateTeamResponse class]) {
    defaultCMsgDOTACreateTeamResponseInstance = [[CMsgDOTACreateTeamResponse alloc] init];
  }
}
+ (CMsgDOTACreateTeamResponse*) defaultInstance {
  return defaultCMsgDOTACreateTeamResponseInstance;
}
- (CMsgDOTACreateTeamResponse*) defaultInstance {
  return defaultCMsgDOTACreateTeamResponseInstance;
}
- (PBArray *)results {
  return resultsArray;
}
- (CMsgDOTACreateTeamResponse_Result)resultsAtIndex:(NSUInteger)index {
  return [resultsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger resultsArrayCount = self.resultsArray.count;
  const CMsgDOTACreateTeamResponse_Result *resultsArrayValues = (const CMsgDOTACreateTeamResponse_Result *)self.resultsArray.data;
  for (NSUInteger i = 0; i < resultsArrayCount; ++i) {
    [output writeEnum:1 value:resultsArrayValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.resultsArray.count;
    const CMsgDOTACreateTeamResponse_Result *values = (const CMsgDOTACreateTeamResponse_Result *)self.resultsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTACreateTeamResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTACreateTeamResponse*)[[[CMsgDOTACreateTeamResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTACreateTeamResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTACreateTeamResponse*)[[[CMsgDOTACreateTeamResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTACreateTeamResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTACreateTeamResponse*)[[[CMsgDOTACreateTeamResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTACreateTeamResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTACreateTeamResponse*)[[[CMsgDOTACreateTeamResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTACreateTeamResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTACreateTeamResponse*)[[[CMsgDOTACreateTeamResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTACreateTeamResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTACreateTeamResponse*)[[[CMsgDOTACreateTeamResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTACreateTeamResponse_Builder*) builder {
  return [[[CMsgDOTACreateTeamResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTACreateTeamResponse_Builder*) builderWithPrototype:(CMsgDOTACreateTeamResponse*) prototype {
  return [[CMsgDOTACreateTeamResponse builder] mergeFrom:prototype];
}
- (CMsgDOTACreateTeamResponse_Builder*) builder {
  return [CMsgDOTACreateTeamResponse builder];
}
- (CMsgDOTACreateTeamResponse_Builder*) toBuilder {
  return [CMsgDOTACreateTeamResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* element in self.resultsArray) {
    [output appendFormat:@"%@%@: %d\n", indent, @"results", element.intValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTACreateTeamResponse class]]) {
    return NO;
  }
  CMsgDOTACreateTeamResponse *otherMessage = other;
  return
      [self.resultsArray isEqualToArray:otherMessage.resultsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* element in self.resultsArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTACreateTeamResponse_ResultIsValidValue(CMsgDOTACreateTeamResponse_Result value) {
  switch (value) {
    case CMsgDOTACreateTeamResponse_ResultINVALID:
    case CMsgDOTACreateTeamResponse_ResultSUCCESS:
    case CMsgDOTACreateTeamResponse_ResultNAME_EMPTY:
    case CMsgDOTACreateTeamResponse_ResultNAME_BAD_CHARACTERS:
    case CMsgDOTACreateTeamResponse_ResultNAME_TAKEN:
    case CMsgDOTACreateTeamResponse_ResultNAME_TOO_LONG:
    case CMsgDOTACreateTeamResponse_ResultTAG_EMPTY:
    case CMsgDOTACreateTeamResponse_ResultTAG_BAD_CHARACTERS:
    case CMsgDOTACreateTeamResponse_ResultTAG_TAKEN:
    case CMsgDOTACreateTeamResponse_ResultTAG_TOO_LONG:
    case CMsgDOTACreateTeamResponse_ResultCREATOR_BUSY:
    case CMsgDOTACreateTeamResponse_ResultUNSPECIFIED_ERROR:
    case CMsgDOTACreateTeamResponse_ResultCREATOR_TEAM_LIMIT_REACHED:
    case CMsgDOTACreateTeamResponse_ResultNO_LOGO:
    case CMsgDOTACreateTeamResponse_ResultCREATOR_TEAM_CREATION_COOLDOWN:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTACreateTeamResponse_Builder()
@property (retain) CMsgDOTACreateTeamResponse* _builderResult;
@end

@implementation CMsgDOTACreateTeamResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTACreateTeamResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTACreateTeamResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTACreateTeamResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTACreateTeamResponse_Builder*) clone {
  return [CMsgDOTACreateTeamResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTACreateTeamResponse*) defaultInstance {
  return [CMsgDOTACreateTeamResponse defaultInstance];
}
- (CMsgDOTACreateTeamResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTACreateTeamResponse*) buildPartial {
  CMsgDOTACreateTeamResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTACreateTeamResponse_Builder*) mergeFrom:(CMsgDOTACreateTeamResponse*) other {
  if (other == [CMsgDOTACreateTeamResponse defaultInstance]) {
    return self;
  }
  if (other.resultsArray.count > 0) {
    if (_builderResult.resultsArray == nil) {
      _builderResult.resultsArray = [[other.resultsArray copyWithZone:[other.resultsArray zone]] autorelease];
    } else {
      [_builderResult.resultsArray appendArray:other.resultsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTACreateTeamResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTACreateTeamResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTACreateTeamResponse_ResultIsValidValue(value)) {
          [self addresults:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (PBAppendableArray *)results {
  return _builderResult.resultsArray;
}
- (CMsgDOTACreateTeamResponse_Result)resultsAtIndex:(NSUInteger)index {
  return [_builderResult resultsAtIndex:index];
}
- (CMsgDOTACreateTeamResponse_Builder *)addresults:(CMsgDOTACreateTeamResponse_Result)value {
  if (_builderResult.resultsArray == nil) {
    _builderResult.resultsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_builderResult.resultsArray addInt32:value];
  return self;
}
- (CMsgDOTACreateTeamResponse_Builder *)setresultsArray:(NSArray *)array {
  _builderResult.resultsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (CMsgDOTACreateTeamResponse_Builder *)setresultsValues:(const CMsgDOTACreateTeamResponse_Result *)values count:(NSUInteger)count {
  _builderResult.resultsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (CMsgDOTACreateTeamResponse_Builder *)clearresults {
  _builderResult.resultsArray = nil;
  return self;
}
@end

@interface CMsgDOTAEditTeamLogo ()
@property uint64_t logo;
@property uint64_t baseLogo;
@property uint64_t bannerLogo;
@property uint64_t sponsorLogo;
@end

@implementation CMsgDOTAEditTeamLogo

- (BOOL) hasLogo {
  return !!hasLogo_;
}
- (void) setHasLogo:(BOOL) value_ {
  hasLogo_ = !!value_;
}
@synthesize logo;
- (BOOL) hasBaseLogo {
  return !!hasBaseLogo_;
}
- (void) setHasBaseLogo:(BOOL) value_ {
  hasBaseLogo_ = !!value_;
}
@synthesize baseLogo;
- (BOOL) hasBannerLogo {
  return !!hasBannerLogo_;
}
- (void) setHasBannerLogo:(BOOL) value_ {
  hasBannerLogo_ = !!value_;
}
@synthesize bannerLogo;
- (BOOL) hasSponsorLogo {
  return !!hasSponsorLogo_;
}
- (void) setHasSponsorLogo:(BOOL) value_ {
  hasSponsorLogo_ = !!value_;
}
@synthesize sponsorLogo;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.logo = 0L;
    self.baseLogo = 0L;
    self.bannerLogo = 0L;
    self.sponsorLogo = 0L;
  }
  return self;
}
static CMsgDOTAEditTeamLogo* defaultCMsgDOTAEditTeamLogoInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAEditTeamLogo class]) {
    defaultCMsgDOTAEditTeamLogoInstance = [[CMsgDOTAEditTeamLogo alloc] init];
  }
}
+ (CMsgDOTAEditTeamLogo*) defaultInstance {
  return defaultCMsgDOTAEditTeamLogoInstance;
}
- (CMsgDOTAEditTeamLogo*) defaultInstance {
  return defaultCMsgDOTAEditTeamLogoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLogo) {
    [output writeUInt64:1 value:self.logo];
  }
  if (self.hasBaseLogo) {
    [output writeUInt64:2 value:self.baseLogo];
  }
  if (self.hasBannerLogo) {
    [output writeUInt64:3 value:self.bannerLogo];
  }
  if (self.hasSponsorLogo) {
    [output writeUInt64:4 value:self.sponsorLogo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLogo) {
    size_ += computeUInt64Size(1, self.logo);
  }
  if (self.hasBaseLogo) {
    size_ += computeUInt64Size(2, self.baseLogo);
  }
  if (self.hasBannerLogo) {
    size_ += computeUInt64Size(3, self.bannerLogo);
  }
  if (self.hasSponsorLogo) {
    size_ += computeUInt64Size(4, self.sponsorLogo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAEditTeamLogo*) parseFromData:(NSData*) data {
  return (CMsgDOTAEditTeamLogo*)[[[CMsgDOTAEditTeamLogo builder] mergeFromData:data] build];
}
+ (CMsgDOTAEditTeamLogo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamLogo*)[[[CMsgDOTAEditTeamLogo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamLogo*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAEditTeamLogo*)[[[CMsgDOTAEditTeamLogo builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAEditTeamLogo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamLogo*)[[[CMsgDOTAEditTeamLogo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamLogo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAEditTeamLogo*)[[[CMsgDOTAEditTeamLogo builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAEditTeamLogo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamLogo*)[[[CMsgDOTAEditTeamLogo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamLogo_Builder*) builder {
  return [[[CMsgDOTAEditTeamLogo_Builder alloc] init] autorelease];
}
+ (CMsgDOTAEditTeamLogo_Builder*) builderWithPrototype:(CMsgDOTAEditTeamLogo*) prototype {
  return [[CMsgDOTAEditTeamLogo builder] mergeFrom:prototype];
}
- (CMsgDOTAEditTeamLogo_Builder*) builder {
  return [CMsgDOTAEditTeamLogo builder];
}
- (CMsgDOTAEditTeamLogo_Builder*) toBuilder {
  return [CMsgDOTAEditTeamLogo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logo", [NSNumber numberWithLongLong:self.logo]];
  }
  if (self.hasBaseLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseLogo", [NSNumber numberWithLongLong:self.baseLogo]];
  }
  if (self.hasBannerLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bannerLogo", [NSNumber numberWithLongLong:self.bannerLogo]];
  }
  if (self.hasSponsorLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sponsorLogo", [NSNumber numberWithLongLong:self.sponsorLogo]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAEditTeamLogo class]]) {
    return NO;
  }
  CMsgDOTAEditTeamLogo *otherMessage = other;
  return
      self.hasLogo == otherMessage.hasLogo &&
      (!self.hasLogo || self.logo == otherMessage.logo) &&
      self.hasBaseLogo == otherMessage.hasBaseLogo &&
      (!self.hasBaseLogo || self.baseLogo == otherMessage.baseLogo) &&
      self.hasBannerLogo == otherMessage.hasBannerLogo &&
      (!self.hasBannerLogo || self.bannerLogo == otherMessage.bannerLogo) &&
      self.hasSponsorLogo == otherMessage.hasSponsorLogo &&
      (!self.hasSponsorLogo || self.sponsorLogo == otherMessage.sponsorLogo) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.logo] hash];
  }
  if (self.hasBaseLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.baseLogo] hash];
  }
  if (self.hasBannerLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.bannerLogo] hash];
  }
  if (self.hasSponsorLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sponsorLogo] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAEditTeamLogo_Builder()
@property (retain) CMsgDOTAEditTeamLogo* _builderResult;
@end

@implementation CMsgDOTAEditTeamLogo_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAEditTeamLogo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAEditTeamLogo_Builder*) clear {
  _builderResult = [[[CMsgDOTAEditTeamLogo alloc] init] autorelease];
  return self;
}
- (CMsgDOTAEditTeamLogo_Builder*) clone {
  return [CMsgDOTAEditTeamLogo builderWithPrototype:_builderResult];
}
- (CMsgDOTAEditTeamLogo*) defaultInstance {
  return [CMsgDOTAEditTeamLogo defaultInstance];
}
- (CMsgDOTAEditTeamLogo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAEditTeamLogo*) buildPartial {
  CMsgDOTAEditTeamLogo* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAEditTeamLogo_Builder*) mergeFrom:(CMsgDOTAEditTeamLogo*) other {
  if (other == [CMsgDOTAEditTeamLogo defaultInstance]) {
    return self;
  }
  if (other.hasLogo) {
    [self setLogo:other.logo];
  }
  if (other.hasBaseLogo) {
    [self setBaseLogo:other.baseLogo];
  }
  if (other.hasBannerLogo) {
    [self setBannerLogo:other.bannerLogo];
  }
  if (other.hasSponsorLogo) {
    [self setSponsorLogo:other.sponsorLogo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAEditTeamLogo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAEditTeamLogo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLogo:[input readUInt64]];
        break;
      }
      case 16: {
        [self setBaseLogo:[input readUInt64]];
        break;
      }
      case 24: {
        [self setBannerLogo:[input readUInt64]];
        break;
      }
      case 32: {
        [self setSponsorLogo:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasLogo {
  return _builderResult.hasLogo;
}
- (uint64_t) logo {
  return _builderResult.logo;
}
- (CMsgDOTAEditTeamLogo_Builder*) setLogo:(uint64_t) value {
  _builderResult.hasLogo = YES;
  _builderResult.logo = value;
  return self;
}
- (CMsgDOTAEditTeamLogo_Builder*) clearLogo {
  _builderResult.hasLogo = NO;
  _builderResult.logo = 0L;
  return self;
}
- (BOOL) hasBaseLogo {
  return _builderResult.hasBaseLogo;
}
- (uint64_t) baseLogo {
  return _builderResult.baseLogo;
}
- (CMsgDOTAEditTeamLogo_Builder*) setBaseLogo:(uint64_t) value {
  _builderResult.hasBaseLogo = YES;
  _builderResult.baseLogo = value;
  return self;
}
- (CMsgDOTAEditTeamLogo_Builder*) clearBaseLogo {
  _builderResult.hasBaseLogo = NO;
  _builderResult.baseLogo = 0L;
  return self;
}
- (BOOL) hasBannerLogo {
  return _builderResult.hasBannerLogo;
}
- (uint64_t) bannerLogo {
  return _builderResult.bannerLogo;
}
- (CMsgDOTAEditTeamLogo_Builder*) setBannerLogo:(uint64_t) value {
  _builderResult.hasBannerLogo = YES;
  _builderResult.bannerLogo = value;
  return self;
}
- (CMsgDOTAEditTeamLogo_Builder*) clearBannerLogo {
  _builderResult.hasBannerLogo = NO;
  _builderResult.bannerLogo = 0L;
  return self;
}
- (BOOL) hasSponsorLogo {
  return _builderResult.hasSponsorLogo;
}
- (uint64_t) sponsorLogo {
  return _builderResult.sponsorLogo;
}
- (CMsgDOTAEditTeamLogo_Builder*) setSponsorLogo:(uint64_t) value {
  _builderResult.hasSponsorLogo = YES;
  _builderResult.sponsorLogo = value;
  return self;
}
- (CMsgDOTAEditTeamLogo_Builder*) clearSponsorLogo {
  _builderResult.hasSponsorLogo = NO;
  _builderResult.sponsorLogo = 0L;
  return self;
}
@end

@interface CMsgDOTAEditTeamLogoResponse ()
@property (retain) PBAppendableArray * resultsArray;
@end

@implementation CMsgDOTAEditTeamLogoResponse

@synthesize resultsArray;
@dynamic results;
- (void) dealloc {
  self.resultsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAEditTeamLogoResponse* defaultCMsgDOTAEditTeamLogoResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAEditTeamLogoResponse class]) {
    defaultCMsgDOTAEditTeamLogoResponseInstance = [[CMsgDOTAEditTeamLogoResponse alloc] init];
  }
}
+ (CMsgDOTAEditTeamLogoResponse*) defaultInstance {
  return defaultCMsgDOTAEditTeamLogoResponseInstance;
}
- (CMsgDOTAEditTeamLogoResponse*) defaultInstance {
  return defaultCMsgDOTAEditTeamLogoResponseInstance;
}
- (PBArray *)results {
  return resultsArray;
}
- (CMsgDOTAEditTeamLogoResponse_Result)resultsAtIndex:(NSUInteger)index {
  return [resultsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger resultsArrayCount = self.resultsArray.count;
  const CMsgDOTAEditTeamLogoResponse_Result *resultsArrayValues = (const CMsgDOTAEditTeamLogoResponse_Result *)self.resultsArray.data;
  for (NSUInteger i = 0; i < resultsArrayCount; ++i) {
    [output writeEnum:1 value:resultsArrayValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.resultsArray.count;
    const CMsgDOTAEditTeamLogoResponse_Result *values = (const CMsgDOTAEditTeamLogoResponse_Result *)self.resultsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAEditTeamLogoResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAEditTeamLogoResponse*)[[[CMsgDOTAEditTeamLogoResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAEditTeamLogoResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamLogoResponse*)[[[CMsgDOTAEditTeamLogoResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamLogoResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAEditTeamLogoResponse*)[[[CMsgDOTAEditTeamLogoResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAEditTeamLogoResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamLogoResponse*)[[[CMsgDOTAEditTeamLogoResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamLogoResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAEditTeamLogoResponse*)[[[CMsgDOTAEditTeamLogoResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAEditTeamLogoResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamLogoResponse*)[[[CMsgDOTAEditTeamLogoResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamLogoResponse_Builder*) builder {
  return [[[CMsgDOTAEditTeamLogoResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAEditTeamLogoResponse_Builder*) builderWithPrototype:(CMsgDOTAEditTeamLogoResponse*) prototype {
  return [[CMsgDOTAEditTeamLogoResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAEditTeamLogoResponse_Builder*) builder {
  return [CMsgDOTAEditTeamLogoResponse builder];
}
- (CMsgDOTAEditTeamLogoResponse_Builder*) toBuilder {
  return [CMsgDOTAEditTeamLogoResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* element in self.resultsArray) {
    [output appendFormat:@"%@%@: %d\n", indent, @"results", element.intValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAEditTeamLogoResponse class]]) {
    return NO;
  }
  CMsgDOTAEditTeamLogoResponse *otherMessage = other;
  return
      [self.resultsArray isEqualToArray:otherMessage.resultsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* element in self.resultsArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTAEditTeamLogoResponse_ResultIsValidValue(CMsgDOTAEditTeamLogoResponse_Result value) {
  switch (value) {
    case CMsgDOTAEditTeamLogoResponse_ResultINVALID:
    case CMsgDOTAEditTeamLogoResponse_ResultSUCCESS:
    case CMsgDOTAEditTeamLogoResponse_ResultCREATOR_BUSY:
    case CMsgDOTAEditTeamLogoResponse_ResultUNSPECIFIED_ERROR:
    case CMsgDOTAEditTeamLogoResponse_ResultNO_LOGO:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTAEditTeamLogoResponse_Builder()
@property (retain) CMsgDOTAEditTeamLogoResponse* _builderResult;
@end

@implementation CMsgDOTAEditTeamLogoResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAEditTeamLogoResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAEditTeamLogoResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAEditTeamLogoResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAEditTeamLogoResponse_Builder*) clone {
  return [CMsgDOTAEditTeamLogoResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAEditTeamLogoResponse*) defaultInstance {
  return [CMsgDOTAEditTeamLogoResponse defaultInstance];
}
- (CMsgDOTAEditTeamLogoResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAEditTeamLogoResponse*) buildPartial {
  CMsgDOTAEditTeamLogoResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAEditTeamLogoResponse_Builder*) mergeFrom:(CMsgDOTAEditTeamLogoResponse*) other {
  if (other == [CMsgDOTAEditTeamLogoResponse defaultInstance]) {
    return self;
  }
  if (other.resultsArray.count > 0) {
    if (_builderResult.resultsArray == nil) {
      _builderResult.resultsArray = [[other.resultsArray copyWithZone:[other.resultsArray zone]] autorelease];
    } else {
      [_builderResult.resultsArray appendArray:other.resultsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAEditTeamLogoResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAEditTeamLogoResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTAEditTeamLogoResponse_ResultIsValidValue(value)) {
          [self addresults:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (PBAppendableArray *)results {
  return _builderResult.resultsArray;
}
- (CMsgDOTAEditTeamLogoResponse_Result)resultsAtIndex:(NSUInteger)index {
  return [_builderResult resultsAtIndex:index];
}
- (CMsgDOTAEditTeamLogoResponse_Builder *)addresults:(CMsgDOTAEditTeamLogoResponse_Result)value {
  if (_builderResult.resultsArray == nil) {
    _builderResult.resultsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_builderResult.resultsArray addInt32:value];
  return self;
}
- (CMsgDOTAEditTeamLogoResponse_Builder *)setresultsArray:(NSArray *)array {
  _builderResult.resultsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (CMsgDOTAEditTeamLogoResponse_Builder *)setresultsValues:(const CMsgDOTAEditTeamLogoResponse_Result *)values count:(NSUInteger)count {
  _builderResult.resultsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (CMsgDOTAEditTeamLogoResponse_Builder *)clearresults {
  _builderResult.resultsArray = nil;
  return self;
}
@end

@interface CMsgDOTAEditTeamDetails ()
@property (retain) NSString* countryCode;
@property (retain) NSString* url;
@end

@implementation CMsgDOTAEditTeamDetails

- (BOOL) hasCountryCode {
  return !!hasCountryCode_;
}
- (void) setHasCountryCode:(BOOL) value_ {
  hasCountryCode_ = !!value_;
}
@synthesize countryCode;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (void) dealloc {
  self.countryCode = nil;
  self.url = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.countryCode = @"";
    self.url = @"";
  }
  return self;
}
static CMsgDOTAEditTeamDetails* defaultCMsgDOTAEditTeamDetailsInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAEditTeamDetails class]) {
    defaultCMsgDOTAEditTeamDetailsInstance = [[CMsgDOTAEditTeamDetails alloc] init];
  }
}
+ (CMsgDOTAEditTeamDetails*) defaultInstance {
  return defaultCMsgDOTAEditTeamDetailsInstance;
}
- (CMsgDOTAEditTeamDetails*) defaultInstance {
  return defaultCMsgDOTAEditTeamDetailsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCountryCode) {
    [output writeString:1 value:self.countryCode];
  }
  if (self.hasUrl) {
    [output writeString:2 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCountryCode) {
    size_ += computeStringSize(1, self.countryCode);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(2, self.url);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAEditTeamDetails*) parseFromData:(NSData*) data {
  return (CMsgDOTAEditTeamDetails*)[[[CMsgDOTAEditTeamDetails builder] mergeFromData:data] build];
}
+ (CMsgDOTAEditTeamDetails*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamDetails*)[[[CMsgDOTAEditTeamDetails builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamDetails*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAEditTeamDetails*)[[[CMsgDOTAEditTeamDetails builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAEditTeamDetails*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamDetails*)[[[CMsgDOTAEditTeamDetails builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamDetails*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAEditTeamDetails*)[[[CMsgDOTAEditTeamDetails builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAEditTeamDetails*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamDetails*)[[[CMsgDOTAEditTeamDetails builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamDetails_Builder*) builder {
  return [[[CMsgDOTAEditTeamDetails_Builder alloc] init] autorelease];
}
+ (CMsgDOTAEditTeamDetails_Builder*) builderWithPrototype:(CMsgDOTAEditTeamDetails*) prototype {
  return [[CMsgDOTAEditTeamDetails builder] mergeFrom:prototype];
}
- (CMsgDOTAEditTeamDetails_Builder*) builder {
  return [CMsgDOTAEditTeamDetails builder];
}
- (CMsgDOTAEditTeamDetails_Builder*) toBuilder {
  return [CMsgDOTAEditTeamDetails builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCountryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"countryCode", self.countryCode];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAEditTeamDetails class]]) {
    return NO;
  }
  CMsgDOTAEditTeamDetails *otherMessage = other;
  return
      self.hasCountryCode == otherMessage.hasCountryCode &&
      (!self.hasCountryCode || [self.countryCode isEqual:otherMessage.countryCode]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasCountryCode) {
    hashCode = hashCode * 31 + [self.countryCode hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAEditTeamDetails_Builder()
@property (retain) CMsgDOTAEditTeamDetails* _builderResult;
@end

@implementation CMsgDOTAEditTeamDetails_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAEditTeamDetails alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAEditTeamDetails_Builder*) clear {
  _builderResult = [[[CMsgDOTAEditTeamDetails alloc] init] autorelease];
  return self;
}
- (CMsgDOTAEditTeamDetails_Builder*) clone {
  return [CMsgDOTAEditTeamDetails builderWithPrototype:_builderResult];
}
- (CMsgDOTAEditTeamDetails*) defaultInstance {
  return [CMsgDOTAEditTeamDetails defaultInstance];
}
- (CMsgDOTAEditTeamDetails*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAEditTeamDetails*) buildPartial {
  CMsgDOTAEditTeamDetails* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAEditTeamDetails_Builder*) mergeFrom:(CMsgDOTAEditTeamDetails*) other {
  if (other == [CMsgDOTAEditTeamDetails defaultInstance]) {
    return self;
  }
  if (other.hasCountryCode) {
    [self setCountryCode:other.countryCode];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAEditTeamDetails_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAEditTeamDetails_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCountryCode:[input readString]];
        break;
      }
      case 18: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCountryCode {
  return _builderResult.hasCountryCode;
}
- (NSString*) countryCode {
  return _builderResult.countryCode;
}
- (CMsgDOTAEditTeamDetails_Builder*) setCountryCode:(NSString*) value {
  _builderResult.hasCountryCode = YES;
  _builderResult.countryCode = value;
  return self;
}
- (CMsgDOTAEditTeamDetails_Builder*) clearCountryCode {
  _builderResult.hasCountryCode = NO;
  _builderResult.countryCode = @"";
  return self;
}
- (BOOL) hasUrl {
  return _builderResult.hasUrl;
}
- (NSString*) url {
  return _builderResult.url;
}
- (CMsgDOTAEditTeamDetails_Builder*) setUrl:(NSString*) value {
  _builderResult.hasUrl = YES;
  _builderResult.url = value;
  return self;
}
- (CMsgDOTAEditTeamDetails_Builder*) clearUrl {
  _builderResult.hasUrl = NO;
  _builderResult.url = @"";
  return self;
}
@end

@interface CMsgDOTAEditTeamDetailsResponse ()
@property (retain) PBAppendableArray * resultsArray;
@end

@implementation CMsgDOTAEditTeamDetailsResponse

@synthesize resultsArray;
@dynamic results;
- (void) dealloc {
  self.resultsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAEditTeamDetailsResponse* defaultCMsgDOTAEditTeamDetailsResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAEditTeamDetailsResponse class]) {
    defaultCMsgDOTAEditTeamDetailsResponseInstance = [[CMsgDOTAEditTeamDetailsResponse alloc] init];
  }
}
+ (CMsgDOTAEditTeamDetailsResponse*) defaultInstance {
  return defaultCMsgDOTAEditTeamDetailsResponseInstance;
}
- (CMsgDOTAEditTeamDetailsResponse*) defaultInstance {
  return defaultCMsgDOTAEditTeamDetailsResponseInstance;
}
- (PBArray *)results {
  return resultsArray;
}
- (CMsgDOTAEditTeamDetailsResponse_Result)resultsAtIndex:(NSUInteger)index {
  return [resultsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger resultsArrayCount = self.resultsArray.count;
  const CMsgDOTAEditTeamDetailsResponse_Result *resultsArrayValues = (const CMsgDOTAEditTeamDetailsResponse_Result *)self.resultsArray.data;
  for (NSUInteger i = 0; i < resultsArrayCount; ++i) {
    [output writeEnum:1 value:resultsArrayValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.resultsArray.count;
    const CMsgDOTAEditTeamDetailsResponse_Result *values = (const CMsgDOTAEditTeamDetailsResponse_Result *)self.resultsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAEditTeamDetailsResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAEditTeamDetailsResponse*)[[[CMsgDOTAEditTeamDetailsResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAEditTeamDetailsResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamDetailsResponse*)[[[CMsgDOTAEditTeamDetailsResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamDetailsResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAEditTeamDetailsResponse*)[[[CMsgDOTAEditTeamDetailsResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAEditTeamDetailsResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamDetailsResponse*)[[[CMsgDOTAEditTeamDetailsResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamDetailsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAEditTeamDetailsResponse*)[[[CMsgDOTAEditTeamDetailsResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAEditTeamDetailsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAEditTeamDetailsResponse*)[[[CMsgDOTAEditTeamDetailsResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAEditTeamDetailsResponse_Builder*) builder {
  return [[[CMsgDOTAEditTeamDetailsResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAEditTeamDetailsResponse_Builder*) builderWithPrototype:(CMsgDOTAEditTeamDetailsResponse*) prototype {
  return [[CMsgDOTAEditTeamDetailsResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAEditTeamDetailsResponse_Builder*) builder {
  return [CMsgDOTAEditTeamDetailsResponse builder];
}
- (CMsgDOTAEditTeamDetailsResponse_Builder*) toBuilder {
  return [CMsgDOTAEditTeamDetailsResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* element in self.resultsArray) {
    [output appendFormat:@"%@%@: %d\n", indent, @"results", element.intValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAEditTeamDetailsResponse class]]) {
    return NO;
  }
  CMsgDOTAEditTeamDetailsResponse *otherMessage = other;
  return
      [self.resultsArray isEqualToArray:otherMessage.resultsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* element in self.resultsArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTAEditTeamDetailsResponse_ResultIsValidValue(CMsgDOTAEditTeamDetailsResponse_Result value) {
  switch (value) {
    case CMsgDOTAEditTeamDetailsResponse_ResultINVALID:
    case CMsgDOTAEditTeamDetailsResponse_ResultSUCCESS:
    case CMsgDOTAEditTeamDetailsResponse_ResultCREATOR_BUSY:
    case CMsgDOTAEditTeamDetailsResponse_ResultUNSPECIFIED_ERROR:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTAEditTeamDetailsResponse_Builder()
@property (retain) CMsgDOTAEditTeamDetailsResponse* _builderResult;
@end

@implementation CMsgDOTAEditTeamDetailsResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAEditTeamDetailsResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAEditTeamDetailsResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAEditTeamDetailsResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAEditTeamDetailsResponse_Builder*) clone {
  return [CMsgDOTAEditTeamDetailsResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAEditTeamDetailsResponse*) defaultInstance {
  return [CMsgDOTAEditTeamDetailsResponse defaultInstance];
}
- (CMsgDOTAEditTeamDetailsResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAEditTeamDetailsResponse*) buildPartial {
  CMsgDOTAEditTeamDetailsResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAEditTeamDetailsResponse_Builder*) mergeFrom:(CMsgDOTAEditTeamDetailsResponse*) other {
  if (other == [CMsgDOTAEditTeamDetailsResponse defaultInstance]) {
    return self;
  }
  if (other.resultsArray.count > 0) {
    if (_builderResult.resultsArray == nil) {
      _builderResult.resultsArray = [[other.resultsArray copyWithZone:[other.resultsArray zone]] autorelease];
    } else {
      [_builderResult.resultsArray appendArray:other.resultsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAEditTeamDetailsResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAEditTeamDetailsResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTAEditTeamDetailsResponse_ResultIsValidValue(value)) {
          [self addresults:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (PBAppendableArray *)results {
  return _builderResult.resultsArray;
}
- (CMsgDOTAEditTeamDetailsResponse_Result)resultsAtIndex:(NSUInteger)index {
  return [_builderResult resultsAtIndex:index];
}
- (CMsgDOTAEditTeamDetailsResponse_Builder *)addresults:(CMsgDOTAEditTeamDetailsResponse_Result)value {
  if (_builderResult.resultsArray == nil) {
    _builderResult.resultsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_builderResult.resultsArray addInt32:value];
  return self;
}
- (CMsgDOTAEditTeamDetailsResponse_Builder *)setresultsArray:(NSArray *)array {
  _builderResult.resultsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (CMsgDOTAEditTeamDetailsResponse_Builder *)setresultsValues:(const CMsgDOTAEditTeamDetailsResponse_Result *)values count:(NSUInteger)count {
  _builderResult.resultsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (CMsgDOTAEditTeamDetailsResponse_Builder *)clearresults {
  _builderResult.resultsArray = nil;
  return self;
}
@end

@interface CMsgDOTADisbandTeam ()
@end

@implementation CMsgDOTADisbandTeam

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTADisbandTeam* defaultCMsgDOTADisbandTeamInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTADisbandTeam class]) {
    defaultCMsgDOTADisbandTeamInstance = [[CMsgDOTADisbandTeam alloc] init];
  }
}
+ (CMsgDOTADisbandTeam*) defaultInstance {
  return defaultCMsgDOTADisbandTeamInstance;
}
- (CMsgDOTADisbandTeam*) defaultInstance {
  return defaultCMsgDOTADisbandTeamInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTADisbandTeam*) parseFromData:(NSData*) data {
  return (CMsgDOTADisbandTeam*)[[[CMsgDOTADisbandTeam builder] mergeFromData:data] build];
}
+ (CMsgDOTADisbandTeam*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADisbandTeam*)[[[CMsgDOTADisbandTeam builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADisbandTeam*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTADisbandTeam*)[[[CMsgDOTADisbandTeam builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTADisbandTeam*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADisbandTeam*)[[[CMsgDOTADisbandTeam builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADisbandTeam*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTADisbandTeam*)[[[CMsgDOTADisbandTeam builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTADisbandTeam*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADisbandTeam*)[[[CMsgDOTADisbandTeam builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADisbandTeam_Builder*) builder {
  return [[[CMsgDOTADisbandTeam_Builder alloc] init] autorelease];
}
+ (CMsgDOTADisbandTeam_Builder*) builderWithPrototype:(CMsgDOTADisbandTeam*) prototype {
  return [[CMsgDOTADisbandTeam builder] mergeFrom:prototype];
}
- (CMsgDOTADisbandTeam_Builder*) builder {
  return [CMsgDOTADisbandTeam builder];
}
- (CMsgDOTADisbandTeam_Builder*) toBuilder {
  return [CMsgDOTADisbandTeam builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTADisbandTeam class]]) {
    return NO;
  }
  CMsgDOTADisbandTeam *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTADisbandTeam_Builder()
@property (retain) CMsgDOTADisbandTeam* _builderResult;
@end

@implementation CMsgDOTADisbandTeam_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTADisbandTeam alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTADisbandTeam_Builder*) clear {
  _builderResult = [[[CMsgDOTADisbandTeam alloc] init] autorelease];
  return self;
}
- (CMsgDOTADisbandTeam_Builder*) clone {
  return [CMsgDOTADisbandTeam builderWithPrototype:_builderResult];
}
- (CMsgDOTADisbandTeam*) defaultInstance {
  return [CMsgDOTADisbandTeam defaultInstance];
}
- (CMsgDOTADisbandTeam*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTADisbandTeam*) buildPartial {
  CMsgDOTADisbandTeam* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTADisbandTeam_Builder*) mergeFrom:(CMsgDOTADisbandTeam*) other {
  if (other == [CMsgDOTADisbandTeam defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTADisbandTeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTADisbandTeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTADisbandTeamResponse ()
@property CMsgDOTADisbandTeamResponse_Result result;
@property (retain) NSString* teamName;
@end

@implementation CMsgDOTADisbandTeamResponse

- (BOOL) hasresult {
  return !!hasresult_;
}
- (void) setHasresult:(BOOL) value_ {
  hasresult_ = !!value_;
}
@synthesize result;
- (BOOL) hasTeamName {
  return !!hasTeamName_;
}
- (void) setHasTeamName:(BOOL) value_ {
  hasTeamName_ = !!value_;
}
@synthesize teamName;
- (void) dealloc {
  self.teamName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = CMsgDOTADisbandTeamResponse_ResultSUCCESS;
    self.teamName = @"";
  }
  return self;
}
static CMsgDOTADisbandTeamResponse* defaultCMsgDOTADisbandTeamResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTADisbandTeamResponse class]) {
    defaultCMsgDOTADisbandTeamResponseInstance = [[CMsgDOTADisbandTeamResponse alloc] init];
  }
}
+ (CMsgDOTADisbandTeamResponse*) defaultInstance {
  return defaultCMsgDOTADisbandTeamResponseInstance;
}
- (CMsgDOTADisbandTeamResponse*) defaultInstance {
  return defaultCMsgDOTADisbandTeamResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasresult) {
    [output writeEnum:1 value:self.result];
  }
  if (self.hasTeamName) {
    [output writeString:2 value:self.teamName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasresult) {
    size_ += computeEnumSize(1, self.result);
  }
  if (self.hasTeamName) {
    size_ += computeStringSize(2, self.teamName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTADisbandTeamResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTADisbandTeamResponse*)[[[CMsgDOTADisbandTeamResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTADisbandTeamResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADisbandTeamResponse*)[[[CMsgDOTADisbandTeamResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADisbandTeamResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTADisbandTeamResponse*)[[[CMsgDOTADisbandTeamResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTADisbandTeamResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADisbandTeamResponse*)[[[CMsgDOTADisbandTeamResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADisbandTeamResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTADisbandTeamResponse*)[[[CMsgDOTADisbandTeamResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTADisbandTeamResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADisbandTeamResponse*)[[[CMsgDOTADisbandTeamResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADisbandTeamResponse_Builder*) builder {
  return [[[CMsgDOTADisbandTeamResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTADisbandTeamResponse_Builder*) builderWithPrototype:(CMsgDOTADisbandTeamResponse*) prototype {
  return [[CMsgDOTADisbandTeamResponse builder] mergeFrom:prototype];
}
- (CMsgDOTADisbandTeamResponse_Builder*) builder {
  return [CMsgDOTADisbandTeamResponse builder];
}
- (CMsgDOTADisbandTeamResponse_Builder*) toBuilder {
  return [CMsgDOTADisbandTeamResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasresult) {
    [output appendFormat:@"%@%@: %d\n", indent, @"result", self.result];
  }
  if (self.hasTeamName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamName", self.teamName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTADisbandTeamResponse class]]) {
    return NO;
  }
  CMsgDOTADisbandTeamResponse *otherMessage = other;
  return
      self.hasresult == otherMessage.hasresult &&
      (!self.hasresult || self.result == otherMessage.result) &&
      self.hasTeamName == otherMessage.hasTeamName &&
      (!self.hasTeamName || [self.teamName isEqual:otherMessage.teamName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasresult) {
    hashCode = hashCode * 31 + self.result;
  }
  if (self.hasTeamName) {
    hashCode = hashCode * 31 + [self.teamName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTADisbandTeamResponse_ResultIsValidValue(CMsgDOTADisbandTeamResponse_Result value) {
  switch (value) {
    case CMsgDOTADisbandTeamResponse_ResultSUCCESS:
    case CMsgDOTADisbandTeamResponse_ResultFAILURE:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTADisbandTeamResponse_Builder()
@property (retain) CMsgDOTADisbandTeamResponse* _builderResult;
@end

@implementation CMsgDOTADisbandTeamResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTADisbandTeamResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTADisbandTeamResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTADisbandTeamResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTADisbandTeamResponse_Builder*) clone {
  return [CMsgDOTADisbandTeamResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTADisbandTeamResponse*) defaultInstance {
  return [CMsgDOTADisbandTeamResponse defaultInstance];
}
- (CMsgDOTADisbandTeamResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTADisbandTeamResponse*) buildPartial {
  CMsgDOTADisbandTeamResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTADisbandTeamResponse_Builder*) mergeFrom:(CMsgDOTADisbandTeamResponse*) other {
  if (other == [CMsgDOTADisbandTeamResponse defaultInstance]) {
    return self;
  }
  if (other.hasresult) {
    [self setresult:other.result];
  }
  if (other.hasTeamName) {
    [self setTeamName:other.teamName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTADisbandTeamResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTADisbandTeamResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTADisbandTeamResponse_ResultIsValidValue(value)) {
          [self setresult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setTeamName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasresult {
  return _builderResult.hasresult;
}
- (CMsgDOTADisbandTeamResponse_Result) result {
  return _builderResult.result;
}
- (CMsgDOTADisbandTeamResponse_Builder*) setresult:(CMsgDOTADisbandTeamResponse_Result) value {
  _builderResult.hasresult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTADisbandTeamResponse_Builder*) clearresult {
  _builderResult.hasresult = NO;
  _builderResult.result = CMsgDOTADisbandTeamResponse_ResultSUCCESS;
  return self;
}
- (BOOL) hasTeamName {
  return _builderResult.hasTeamName;
}
- (NSString*) teamName {
  return _builderResult.teamName;
}
- (CMsgDOTADisbandTeamResponse_Builder*) setTeamName:(NSString*) value {
  _builderResult.hasTeamName = YES;
  _builderResult.teamName = value;
  return self;
}
- (CMsgDOTADisbandTeamResponse_Builder*) clearTeamName {
  _builderResult.hasTeamName = NO;
  _builderResult.teamName = @"";
  return self;
}
@end

@interface CMsgDOTARequestTeamData ()
@end

@implementation CMsgDOTARequestTeamData

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTARequestTeamData* defaultCMsgDOTARequestTeamDataInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestTeamData class]) {
    defaultCMsgDOTARequestTeamDataInstance = [[CMsgDOTARequestTeamData alloc] init];
  }
}
+ (CMsgDOTARequestTeamData*) defaultInstance {
  return defaultCMsgDOTARequestTeamDataInstance;
}
- (CMsgDOTARequestTeamData*) defaultInstance {
  return defaultCMsgDOTARequestTeamDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestTeamData*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestTeamData*)[[[CMsgDOTARequestTeamData builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestTeamData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestTeamData*)[[[CMsgDOTARequestTeamData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestTeamData*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestTeamData*)[[[CMsgDOTARequestTeamData builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestTeamData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestTeamData*)[[[CMsgDOTARequestTeamData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestTeamData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestTeamData*)[[[CMsgDOTARequestTeamData builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestTeamData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestTeamData*)[[[CMsgDOTARequestTeamData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestTeamData_Builder*) builder {
  return [[[CMsgDOTARequestTeamData_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestTeamData_Builder*) builderWithPrototype:(CMsgDOTARequestTeamData*) prototype {
  return [[CMsgDOTARequestTeamData builder] mergeFrom:prototype];
}
- (CMsgDOTARequestTeamData_Builder*) builder {
  return [CMsgDOTARequestTeamData builder];
}
- (CMsgDOTARequestTeamData_Builder*) toBuilder {
  return [CMsgDOTARequestTeamData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestTeamData class]]) {
    return NO;
  }
  CMsgDOTARequestTeamData *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestTeamData_Builder()
@property (retain) CMsgDOTARequestTeamData* _builderResult;
@end

@implementation CMsgDOTARequestTeamData_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestTeamData alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestTeamData_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestTeamData alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestTeamData_Builder*) clone {
  return [CMsgDOTARequestTeamData builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestTeamData*) defaultInstance {
  return [CMsgDOTARequestTeamData defaultInstance];
}
- (CMsgDOTARequestTeamData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestTeamData*) buildPartial {
  CMsgDOTARequestTeamData* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestTeamData_Builder*) mergeFrom:(CMsgDOTARequestTeamData*) other {
  if (other == [CMsgDOTARequestTeamData defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestTeamData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestTeamData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTARequestTeamDataResponse ()
@property CMsgDOTARequestTeamDataResponse_Result result;
@property (retain) CMsgDOTATeamData* data;
@end

@implementation CMsgDOTARequestTeamDataResponse

- (BOOL) hasresult {
  return !!hasresult_;
}
- (void) setHasresult:(BOOL) value_ {
  hasresult_ = !!value_;
}
@synthesize result;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) value_ {
  hasData_ = !!value_;
}
@synthesize data;
- (void) dealloc {
  self.data = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = CMsgDOTARequestTeamDataResponse_ResultSUCCESS;
    self.data = [CMsgDOTATeamData defaultInstance];
  }
  return self;
}
static CMsgDOTARequestTeamDataResponse* defaultCMsgDOTARequestTeamDataResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestTeamDataResponse class]) {
    defaultCMsgDOTARequestTeamDataResponseInstance = [[CMsgDOTARequestTeamDataResponse alloc] init];
  }
}
+ (CMsgDOTARequestTeamDataResponse*) defaultInstance {
  return defaultCMsgDOTARequestTeamDataResponseInstance;
}
- (CMsgDOTARequestTeamDataResponse*) defaultInstance {
  return defaultCMsgDOTARequestTeamDataResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasresult) {
    [output writeEnum:1 value:self.result];
  }
  if (self.hasData) {
    [output writeMessage:2 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasresult) {
    size_ += computeEnumSize(1, self.result);
  }
  if (self.hasData) {
    size_ += computeMessageSize(2, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestTeamDataResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestTeamDataResponse*)[[[CMsgDOTARequestTeamDataResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestTeamDataResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestTeamDataResponse*)[[[CMsgDOTARequestTeamDataResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestTeamDataResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestTeamDataResponse*)[[[CMsgDOTARequestTeamDataResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestTeamDataResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestTeamDataResponse*)[[[CMsgDOTARequestTeamDataResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestTeamDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestTeamDataResponse*)[[[CMsgDOTARequestTeamDataResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestTeamDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestTeamDataResponse*)[[[CMsgDOTARequestTeamDataResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestTeamDataResponse_Builder*) builder {
  return [[[CMsgDOTARequestTeamDataResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestTeamDataResponse_Builder*) builderWithPrototype:(CMsgDOTARequestTeamDataResponse*) prototype {
  return [[CMsgDOTARequestTeamDataResponse builder] mergeFrom:prototype];
}
- (CMsgDOTARequestTeamDataResponse_Builder*) builder {
  return [CMsgDOTARequestTeamDataResponse builder];
}
- (CMsgDOTARequestTeamDataResponse_Builder*) toBuilder {
  return [CMsgDOTARequestTeamDataResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasresult) {
    [output appendFormat:@"%@%@: %d\n", indent, @"result", self.result];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@ {\n", indent, @"data"];
    [self.data writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestTeamDataResponse class]]) {
    return NO;
  }
  CMsgDOTARequestTeamDataResponse *otherMessage = other;
  return
      self.hasresult == otherMessage.hasresult &&
      (!self.hasresult || self.result == otherMessage.result) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasresult) {
    hashCode = hashCode * 31 + self.result;
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTARequestTeamDataResponse_ResultIsValidValue(CMsgDOTARequestTeamDataResponse_Result value) {
  switch (value) {
    case CMsgDOTARequestTeamDataResponse_ResultSUCCESS:
    case CMsgDOTARequestTeamDataResponse_ResultFAILURE:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTARequestTeamDataResponse_Builder()
@property (retain) CMsgDOTARequestTeamDataResponse* _builderResult;
@end

@implementation CMsgDOTARequestTeamDataResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestTeamDataResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestTeamDataResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestTeamDataResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestTeamDataResponse_Builder*) clone {
  return [CMsgDOTARequestTeamDataResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestTeamDataResponse*) defaultInstance {
  return [CMsgDOTARequestTeamDataResponse defaultInstance];
}
- (CMsgDOTARequestTeamDataResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestTeamDataResponse*) buildPartial {
  CMsgDOTARequestTeamDataResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestTeamDataResponse_Builder*) mergeFrom:(CMsgDOTARequestTeamDataResponse*) other {
  if (other == [CMsgDOTARequestTeamDataResponse defaultInstance]) {
    return self;
  }
  if (other.hasresult) {
    [self setresult:other.result];
  }
  if (other.hasData) {
    [self mergeData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestTeamDataResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestTeamDataResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTARequestTeamDataResponse_ResultIsValidValue(value)) {
          [self setresult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        CMsgDOTATeamData_Builder* subBuilder = [CMsgDOTATeamData builder];
        if (self.hasData) {
          [subBuilder mergeFrom:self.data];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasresult {
  return _builderResult.hasresult;
}
- (CMsgDOTARequestTeamDataResponse_Result) result {
  return _builderResult.result;
}
- (CMsgDOTARequestTeamDataResponse_Builder*) setresult:(CMsgDOTARequestTeamDataResponse_Result) value {
  _builderResult.hasresult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTARequestTeamDataResponse_Builder*) clearresult {
  _builderResult.hasresult = NO;
  _builderResult.result = CMsgDOTARequestTeamDataResponse_ResultSUCCESS;
  return self;
}
- (BOOL) hasData {
  return _builderResult.hasData;
}
- (CMsgDOTATeamData*) data {
  return _builderResult.data;
}
- (CMsgDOTARequestTeamDataResponse_Builder*) setData:(CMsgDOTATeamData*) value {
  _builderResult.hasData = YES;
  _builderResult.data = value;
  return self;
}
- (CMsgDOTARequestTeamDataResponse_Builder*) setDataBuilder:(CMsgDOTATeamData_Builder*) builderForValue {
  return [self setData:[builderForValue build]];
}
- (CMsgDOTARequestTeamDataResponse_Builder*) mergeData:(CMsgDOTATeamData*) value {
  if (_builderResult.hasData &&
      _builderResult.data != [CMsgDOTATeamData defaultInstance]) {
    _builderResult.data =
      [[[CMsgDOTATeamData builderWithPrototype:_builderResult.data] mergeFrom:value] buildPartial];
  } else {
    _builderResult.data = value;
  }
  _builderResult.hasData = YES;
  return self;
}
- (CMsgDOTARequestTeamDataResponse_Builder*) clearData {
  _builderResult.hasData = NO;
  _builderResult.data = [CMsgDOTATeamData defaultInstance];
  return self;
}
@end

@interface CMsgDOTATeamData ()
@property BOOL onTeam;
@property (retain) CMsgDOTATeam* team;
@end

@implementation CMsgDOTATeamData

- (BOOL) hasOnTeam {
  return !!hasOnTeam_;
}
- (void) setHasOnTeam:(BOOL) value_ {
  hasOnTeam_ = !!value_;
}
- (BOOL) onTeam {
  return !!onTeam_;
}
- (void) setOnTeam:(BOOL) value_ {
  onTeam_ = !!value_;
}
- (BOOL) hasTeam {
  return !!hasTeam_;
}
- (void) setHasTeam:(BOOL) value_ {
  hasTeam_ = !!value_;
}
@synthesize team;
- (void) dealloc {
  self.team = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.onTeam = NO;
    self.team = [CMsgDOTATeam defaultInstance];
  }
  return self;
}
static CMsgDOTATeamData* defaultCMsgDOTATeamDataInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeamData class]) {
    defaultCMsgDOTATeamDataInstance = [[CMsgDOTATeamData alloc] init];
  }
}
+ (CMsgDOTATeamData*) defaultInstance {
  return defaultCMsgDOTATeamDataInstance;
}
- (CMsgDOTATeamData*) defaultInstance {
  return defaultCMsgDOTATeamDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOnTeam) {
    [output writeBool:1 value:self.onTeam];
  }
  if (self.hasTeam) {
    [output writeMessage:2 value:self.team];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOnTeam) {
    size_ += computeBoolSize(1, self.onTeam);
  }
  if (self.hasTeam) {
    size_ += computeMessageSize(2, self.team);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeamData*) parseFromData:(NSData*) data {
  return (CMsgDOTATeamData*)[[[CMsgDOTATeamData builder] mergeFromData:data] build];
}
+ (CMsgDOTATeamData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamData*)[[[CMsgDOTATeamData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamData*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeamData*)[[[CMsgDOTATeamData builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeamData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamData*)[[[CMsgDOTATeamData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeamData*)[[[CMsgDOTATeamData builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeamData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamData*)[[[CMsgDOTATeamData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamData_Builder*) builder {
  return [[[CMsgDOTATeamData_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeamData_Builder*) builderWithPrototype:(CMsgDOTATeamData*) prototype {
  return [[CMsgDOTATeamData builder] mergeFrom:prototype];
}
- (CMsgDOTATeamData_Builder*) builder {
  return [CMsgDOTATeamData builder];
}
- (CMsgDOTATeamData_Builder*) toBuilder {
  return [CMsgDOTATeamData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOnTeam) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onTeam", [NSNumber numberWithBool:self.onTeam]];
  }
  if (self.hasTeam) {
    [output appendFormat:@"%@%@ {\n", indent, @"team"];
    [self.team writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeamData class]]) {
    return NO;
  }
  CMsgDOTATeamData *otherMessage = other;
  return
      self.hasOnTeam == otherMessage.hasOnTeam &&
      (!self.hasOnTeam || self.onTeam == otherMessage.onTeam) &&
      self.hasTeam == otherMessage.hasTeam &&
      (!self.hasTeam || [self.team isEqual:otherMessage.team]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasOnTeam) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.onTeam] hash];
  }
  if (self.hasTeam) {
    hashCode = hashCode * 31 + [self.team hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATeamData_Builder()
@property (retain) CMsgDOTATeamData* _builderResult;
@end

@implementation CMsgDOTATeamData_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeamData alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeamData_Builder*) clear {
  _builderResult = [[[CMsgDOTATeamData alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeamData_Builder*) clone {
  return [CMsgDOTATeamData builderWithPrototype:_builderResult];
}
- (CMsgDOTATeamData*) defaultInstance {
  return [CMsgDOTATeamData defaultInstance];
}
- (CMsgDOTATeamData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeamData*) buildPartial {
  CMsgDOTATeamData* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeamData_Builder*) mergeFrom:(CMsgDOTATeamData*) other {
  if (other == [CMsgDOTATeamData defaultInstance]) {
    return self;
  }
  if (other.hasOnTeam) {
    [self setOnTeam:other.onTeam];
  }
  if (other.hasTeam) {
    [self mergeTeam:other.team];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeamData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeamData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOnTeam:[input readBool]];
        break;
      }
      case 18: {
        CMsgDOTATeam_Builder* subBuilder = [CMsgDOTATeam builder];
        if (self.hasTeam) {
          [subBuilder mergeFrom:self.team];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTeam:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOnTeam {
  return _builderResult.hasOnTeam;
}
- (BOOL) onTeam {
  return _builderResult.onTeam;
}
- (CMsgDOTATeamData_Builder*) setOnTeam:(BOOL) value {
  _builderResult.hasOnTeam = YES;
  _builderResult.onTeam = value;
  return self;
}
- (CMsgDOTATeamData_Builder*) clearOnTeam {
  _builderResult.hasOnTeam = NO;
  _builderResult.onTeam = NO;
  return self;
}
- (BOOL) hasTeam {
  return _builderResult.hasTeam;
}
- (CMsgDOTATeam*) team {
  return _builderResult.team;
}
- (CMsgDOTATeamData_Builder*) setTeam:(CMsgDOTATeam*) value {
  _builderResult.hasTeam = YES;
  _builderResult.team = value;
  return self;
}
- (CMsgDOTATeamData_Builder*) setTeamBuilder:(CMsgDOTATeam_Builder*) builderForValue {
  return [self setTeam:[builderForValue build]];
}
- (CMsgDOTATeamData_Builder*) mergeTeam:(CMsgDOTATeam*) value {
  if (_builderResult.hasTeam &&
      _builderResult.team != [CMsgDOTATeam defaultInstance]) {
    _builderResult.team =
      [[[CMsgDOTATeam builderWithPrototype:_builderResult.team] mergeFrom:value] buildPartial];
  } else {
    _builderResult.team = value;
  }
  _builderResult.hasTeam = YES;
  return self;
}
- (CMsgDOTATeamData_Builder*) clearTeam {
  _builderResult.hasTeam = NO;
  _builderResult.team = [CMsgDOTATeam defaultInstance];
  return self;
}
@end

@interface CMsgDOTATeamProfileRequest ()
@property uint32_t teamId;
@end

@implementation CMsgDOTATeamProfileRequest

- (BOOL) hasTeamId {
  return !!hasTeamId_;
}
- (void) setHasTeamId:(BOOL) value_ {
  hasTeamId_ = !!value_;
}
@synthesize teamId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.teamId = 0;
  }
  return self;
}
static CMsgDOTATeamProfileRequest* defaultCMsgDOTATeamProfileRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeamProfileRequest class]) {
    defaultCMsgDOTATeamProfileRequestInstance = [[CMsgDOTATeamProfileRequest alloc] init];
  }
}
+ (CMsgDOTATeamProfileRequest*) defaultInstance {
  return defaultCMsgDOTATeamProfileRequestInstance;
}
- (CMsgDOTATeamProfileRequest*) defaultInstance {
  return defaultCMsgDOTATeamProfileRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTeamId) {
    [output writeUInt32:1 value:self.teamId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTeamId) {
    size_ += computeUInt32Size(1, self.teamId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeamProfileRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTATeamProfileRequest*)[[[CMsgDOTATeamProfileRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTATeamProfileRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamProfileRequest*)[[[CMsgDOTATeamProfileRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamProfileRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeamProfileRequest*)[[[CMsgDOTATeamProfileRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeamProfileRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamProfileRequest*)[[[CMsgDOTATeamProfileRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamProfileRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeamProfileRequest*)[[[CMsgDOTATeamProfileRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeamProfileRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamProfileRequest*)[[[CMsgDOTATeamProfileRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamProfileRequest_Builder*) builder {
  return [[[CMsgDOTATeamProfileRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeamProfileRequest_Builder*) builderWithPrototype:(CMsgDOTATeamProfileRequest*) prototype {
  return [[CMsgDOTATeamProfileRequest builder] mergeFrom:prototype];
}
- (CMsgDOTATeamProfileRequest_Builder*) builder {
  return [CMsgDOTATeamProfileRequest builder];
}
- (CMsgDOTATeamProfileRequest_Builder*) toBuilder {
  return [CMsgDOTATeamProfileRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamId", [NSNumber numberWithInt:self.teamId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeamProfileRequest class]]) {
    return NO;
  }
  CMsgDOTATeamProfileRequest *otherMessage = other;
  return
      self.hasTeamId == otherMessage.hasTeamId &&
      (!self.hasTeamId || self.teamId == otherMessage.teamId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATeamProfileRequest_Builder()
@property (retain) CMsgDOTATeamProfileRequest* _builderResult;
@end

@implementation CMsgDOTATeamProfileRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeamProfileRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeamProfileRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTATeamProfileRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeamProfileRequest_Builder*) clone {
  return [CMsgDOTATeamProfileRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTATeamProfileRequest*) defaultInstance {
  return [CMsgDOTATeamProfileRequest defaultInstance];
}
- (CMsgDOTATeamProfileRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeamProfileRequest*) buildPartial {
  CMsgDOTATeamProfileRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeamProfileRequest_Builder*) mergeFrom:(CMsgDOTATeamProfileRequest*) other {
  if (other == [CMsgDOTATeamProfileRequest defaultInstance]) {
    return self;
  }
  if (other.hasTeamId) {
    [self setTeamId:other.teamId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeamProfileRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeamProfileRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTeamId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTeamId {
  return _builderResult.hasTeamId;
}
- (uint32_t) teamId {
  return _builderResult.teamId;
}
- (CMsgDOTATeamProfileRequest_Builder*) setTeamId:(uint32_t) value {
  _builderResult.hasTeamId = YES;
  _builderResult.teamId = value;
  return self;
}
- (CMsgDOTATeamProfileRequest_Builder*) clearTeamId {
  _builderResult.hasTeamId = NO;
  _builderResult.teamId = 0;
  return self;
}
@end

@interface CMsgDOTATeamProfileResponse ()
@property uint32_t eresult;
@property (retain) CMsgDOTATeam* team;
@end

@implementation CMsgDOTATeamProfileResponse

- (BOOL) hasEresult {
  return !!hasEresult_;
}
- (void) setHasEresult:(BOOL) value_ {
  hasEresult_ = !!value_;
}
@synthesize eresult;
- (BOOL) hasTeam {
  return !!hasTeam_;
}
- (void) setHasTeam:(BOOL) value_ {
  hasTeam_ = !!value_;
}
@synthesize team;
- (void) dealloc {
  self.team = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.eresult = 0;
    self.team = [CMsgDOTATeam defaultInstance];
  }
  return self;
}
static CMsgDOTATeamProfileResponse* defaultCMsgDOTATeamProfileResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeamProfileResponse class]) {
    defaultCMsgDOTATeamProfileResponseInstance = [[CMsgDOTATeamProfileResponse alloc] init];
  }
}
+ (CMsgDOTATeamProfileResponse*) defaultInstance {
  return defaultCMsgDOTATeamProfileResponseInstance;
}
- (CMsgDOTATeamProfileResponse*) defaultInstance {
  return defaultCMsgDOTATeamProfileResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEresult) {
    [output writeUInt32:1 value:self.eresult];
  }
  if (self.hasTeam) {
    [output writeMessage:2 value:self.team];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEresult) {
    size_ += computeUInt32Size(1, self.eresult);
  }
  if (self.hasTeam) {
    size_ += computeMessageSize(2, self.team);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeamProfileResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTATeamProfileResponse*)[[[CMsgDOTATeamProfileResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTATeamProfileResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamProfileResponse*)[[[CMsgDOTATeamProfileResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamProfileResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeamProfileResponse*)[[[CMsgDOTATeamProfileResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeamProfileResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamProfileResponse*)[[[CMsgDOTATeamProfileResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamProfileResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeamProfileResponse*)[[[CMsgDOTATeamProfileResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeamProfileResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamProfileResponse*)[[[CMsgDOTATeamProfileResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamProfileResponse_Builder*) builder {
  return [[[CMsgDOTATeamProfileResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeamProfileResponse_Builder*) builderWithPrototype:(CMsgDOTATeamProfileResponse*) prototype {
  return [[CMsgDOTATeamProfileResponse builder] mergeFrom:prototype];
}
- (CMsgDOTATeamProfileResponse_Builder*) builder {
  return [CMsgDOTATeamProfileResponse builder];
}
- (CMsgDOTATeamProfileResponse_Builder*) toBuilder {
  return [CMsgDOTATeamProfileResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEresult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eresult", [NSNumber numberWithInt:self.eresult]];
  }
  if (self.hasTeam) {
    [output appendFormat:@"%@%@ {\n", indent, @"team"];
    [self.team writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeamProfileResponse class]]) {
    return NO;
  }
  CMsgDOTATeamProfileResponse *otherMessage = other;
  return
      self.hasEresult == otherMessage.hasEresult &&
      (!self.hasEresult || self.eresult == otherMessage.eresult) &&
      self.hasTeam == otherMessage.hasTeam &&
      (!self.hasTeam || [self.team isEqual:otherMessage.team]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasEresult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eresult] hash];
  }
  if (self.hasTeam) {
    hashCode = hashCode * 31 + [self.team hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATeamProfileResponse_Builder()
@property (retain) CMsgDOTATeamProfileResponse* _builderResult;
@end

@implementation CMsgDOTATeamProfileResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeamProfileResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeamProfileResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTATeamProfileResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeamProfileResponse_Builder*) clone {
  return [CMsgDOTATeamProfileResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTATeamProfileResponse*) defaultInstance {
  return [CMsgDOTATeamProfileResponse defaultInstance];
}
- (CMsgDOTATeamProfileResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeamProfileResponse*) buildPartial {
  CMsgDOTATeamProfileResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeamProfileResponse_Builder*) mergeFrom:(CMsgDOTATeamProfileResponse*) other {
  if (other == [CMsgDOTATeamProfileResponse defaultInstance]) {
    return self;
  }
  if (other.hasEresult) {
    [self setEresult:other.eresult];
  }
  if (other.hasTeam) {
    [self mergeTeam:other.team];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeamProfileResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeamProfileResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEresult:[input readUInt32]];
        break;
      }
      case 18: {
        CMsgDOTATeam_Builder* subBuilder = [CMsgDOTATeam builder];
        if (self.hasTeam) {
          [subBuilder mergeFrom:self.team];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTeam:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasEresult {
  return _builderResult.hasEresult;
}
- (uint32_t) eresult {
  return _builderResult.eresult;
}
- (CMsgDOTATeamProfileResponse_Builder*) setEresult:(uint32_t) value {
  _builderResult.hasEresult = YES;
  _builderResult.eresult = value;
  return self;
}
- (CMsgDOTATeamProfileResponse_Builder*) clearEresult {
  _builderResult.hasEresult = NO;
  _builderResult.eresult = 0;
  return self;
}
- (BOOL) hasTeam {
  return _builderResult.hasTeam;
}
- (CMsgDOTATeam*) team {
  return _builderResult.team;
}
- (CMsgDOTATeamProfileResponse_Builder*) setTeam:(CMsgDOTATeam*) value {
  _builderResult.hasTeam = YES;
  _builderResult.team = value;
  return self;
}
- (CMsgDOTATeamProfileResponse_Builder*) setTeamBuilder:(CMsgDOTATeam_Builder*) builderForValue {
  return [self setTeam:[builderForValue build]];
}
- (CMsgDOTATeamProfileResponse_Builder*) mergeTeam:(CMsgDOTATeam*) value {
  if (_builderResult.hasTeam &&
      _builderResult.team != [CMsgDOTATeam defaultInstance]) {
    _builderResult.team =
      [[[CMsgDOTATeam builderWithPrototype:_builderResult.team] mergeFrom:value] buildPartial];
  } else {
    _builderResult.team = value;
  }
  _builderResult.hasTeam = YES;
  return self;
}
- (CMsgDOTATeamProfileResponse_Builder*) clearTeam {
  _builderResult.hasTeam = NO;
  _builderResult.team = [CMsgDOTATeam defaultInstance];
  return self;
}
@end

@interface CMsgDOTAProTeamListRequest ()
@end

@implementation CMsgDOTAProTeamListRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAProTeamListRequest* defaultCMsgDOTAProTeamListRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAProTeamListRequest class]) {
    defaultCMsgDOTAProTeamListRequestInstance = [[CMsgDOTAProTeamListRequest alloc] init];
  }
}
+ (CMsgDOTAProTeamListRequest*) defaultInstance {
  return defaultCMsgDOTAProTeamListRequestInstance;
}
- (CMsgDOTAProTeamListRequest*) defaultInstance {
  return defaultCMsgDOTAProTeamListRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAProTeamListRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTAProTeamListRequest*)[[[CMsgDOTAProTeamListRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTAProTeamListRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProTeamListRequest*)[[[CMsgDOTAProTeamListRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProTeamListRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAProTeamListRequest*)[[[CMsgDOTAProTeamListRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAProTeamListRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProTeamListRequest*)[[[CMsgDOTAProTeamListRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProTeamListRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAProTeamListRequest*)[[[CMsgDOTAProTeamListRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAProTeamListRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProTeamListRequest*)[[[CMsgDOTAProTeamListRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProTeamListRequest_Builder*) builder {
  return [[[CMsgDOTAProTeamListRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTAProTeamListRequest_Builder*) builderWithPrototype:(CMsgDOTAProTeamListRequest*) prototype {
  return [[CMsgDOTAProTeamListRequest builder] mergeFrom:prototype];
}
- (CMsgDOTAProTeamListRequest_Builder*) builder {
  return [CMsgDOTAProTeamListRequest builder];
}
- (CMsgDOTAProTeamListRequest_Builder*) toBuilder {
  return [CMsgDOTAProTeamListRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAProTeamListRequest class]]) {
    return NO;
  }
  CMsgDOTAProTeamListRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAProTeamListRequest_Builder()
@property (retain) CMsgDOTAProTeamListRequest* _builderResult;
@end

@implementation CMsgDOTAProTeamListRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAProTeamListRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAProTeamListRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTAProTeamListRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTAProTeamListRequest_Builder*) clone {
  return [CMsgDOTAProTeamListRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTAProTeamListRequest*) defaultInstance {
  return [CMsgDOTAProTeamListRequest defaultInstance];
}
- (CMsgDOTAProTeamListRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAProTeamListRequest*) buildPartial {
  CMsgDOTAProTeamListRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAProTeamListRequest_Builder*) mergeFrom:(CMsgDOTAProTeamListRequest*) other {
  if (other == [CMsgDOTAProTeamListRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAProTeamListRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAProTeamListRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTAProTeamListResponse ()
@property (retain) PBAppendableArray * teamsArray;
@property uint32_t eresult;
@end

@implementation CMsgDOTAProTeamListResponse

@synthesize teamsArray;
@dynamic teams;
- (BOOL) hasEresult {
  return !!hasEresult_;
}
- (void) setHasEresult:(BOOL) value_ {
  hasEresult_ = !!value_;
}
@synthesize eresult;
- (void) dealloc {
  self.teamsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.eresult = 0;
  }
  return self;
}
static CMsgDOTAProTeamListResponse* defaultCMsgDOTAProTeamListResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAProTeamListResponse class]) {
    defaultCMsgDOTAProTeamListResponseInstance = [[CMsgDOTAProTeamListResponse alloc] init];
  }
}
+ (CMsgDOTAProTeamListResponse*) defaultInstance {
  return defaultCMsgDOTAProTeamListResponseInstance;
}
- (CMsgDOTAProTeamListResponse*) defaultInstance {
  return defaultCMsgDOTAProTeamListResponseInstance;
}
- (PBArray *)teams {
  return teamsArray;
}
- (CMsgDOTAProTeamListResponse_TeamEntry*)teamsAtIndex:(NSUInteger)index {
  return [teamsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgDOTAProTeamListResponse_TeamEntry *element in self.teamsArray) {
    [output writeMessage:1 value:element];
  }
  if (self.hasEresult) {
    [output writeUInt32:2 value:self.eresult];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgDOTAProTeamListResponse_TeamEntry *element in self.teamsArray) {
    size_ += computeMessageSize(1, element);
  }
  if (self.hasEresult) {
    size_ += computeUInt32Size(2, self.eresult);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAProTeamListResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAProTeamListResponse*)[[[CMsgDOTAProTeamListResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAProTeamListResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProTeamListResponse*)[[[CMsgDOTAProTeamListResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProTeamListResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAProTeamListResponse*)[[[CMsgDOTAProTeamListResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAProTeamListResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProTeamListResponse*)[[[CMsgDOTAProTeamListResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProTeamListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAProTeamListResponse*)[[[CMsgDOTAProTeamListResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAProTeamListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProTeamListResponse*)[[[CMsgDOTAProTeamListResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProTeamListResponse_Builder*) builder {
  return [[[CMsgDOTAProTeamListResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAProTeamListResponse_Builder*) builderWithPrototype:(CMsgDOTAProTeamListResponse*) prototype {
  return [[CMsgDOTAProTeamListResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAProTeamListResponse_Builder*) builder {
  return [CMsgDOTAProTeamListResponse builder];
}
- (CMsgDOTAProTeamListResponse_Builder*) toBuilder {
  return [CMsgDOTAProTeamListResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgDOTAProTeamListResponse_TeamEntry* element in self.teamsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"teams"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasEresult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eresult", [NSNumber numberWithInt:self.eresult]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAProTeamListResponse class]]) {
    return NO;
  }
  CMsgDOTAProTeamListResponse *otherMessage = other;
  return
      [self.teamsArray isEqualToArray:otherMessage.teamsArray] &&
      self.hasEresult == otherMessage.hasEresult &&
      (!self.hasEresult || self.eresult == otherMessage.eresult) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgDOTAProTeamListResponse_TeamEntry* element in self.teamsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasEresult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eresult] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAProTeamListResponse_TeamEntry ()
@property uint32_t teamId;
@property (retain) NSString* tag;
@property uint32_t timeCreated;
@property uint64_t logo;
@property (retain) NSString* countryCode;
@end

@implementation CMsgDOTAProTeamListResponse_TeamEntry

- (BOOL) hasTeamId {
  return !!hasTeamId_;
}
- (void) setHasTeamId:(BOOL) value_ {
  hasTeamId_ = !!value_;
}
@synthesize teamId;
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) value_ {
  hasTag_ = !!value_;
}
@synthesize tag;
- (BOOL) hasTimeCreated {
  return !!hasTimeCreated_;
}
- (void) setHasTimeCreated:(BOOL) value_ {
  hasTimeCreated_ = !!value_;
}
@synthesize timeCreated;
- (BOOL) hasLogo {
  return !!hasLogo_;
}
- (void) setHasLogo:(BOOL) value_ {
  hasLogo_ = !!value_;
}
@synthesize logo;
- (BOOL) hasCountryCode {
  return !!hasCountryCode_;
}
- (void) setHasCountryCode:(BOOL) value_ {
  hasCountryCode_ = !!value_;
}
@synthesize countryCode;
- (void) dealloc {
  self.tag = nil;
  self.countryCode = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.teamId = 0;
    self.tag = @"";
    self.timeCreated = 0;
    self.logo = 0L;
    self.countryCode = @"";
  }
  return self;
}
static CMsgDOTAProTeamListResponse_TeamEntry* defaultCMsgDOTAProTeamListResponse_TeamEntryInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAProTeamListResponse_TeamEntry class]) {
    defaultCMsgDOTAProTeamListResponse_TeamEntryInstance = [[CMsgDOTAProTeamListResponse_TeamEntry alloc] init];
  }
}
+ (CMsgDOTAProTeamListResponse_TeamEntry*) defaultInstance {
  return defaultCMsgDOTAProTeamListResponse_TeamEntryInstance;
}
- (CMsgDOTAProTeamListResponse_TeamEntry*) defaultInstance {
  return defaultCMsgDOTAProTeamListResponse_TeamEntryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTeamId) {
    [output writeUInt32:1 value:self.teamId];
  }
  if (self.hasTag) {
    [output writeString:2 value:self.tag];
  }
  if (self.hasTimeCreated) {
    [output writeUInt32:3 value:self.timeCreated];
  }
  if (self.hasLogo) {
    [output writeUInt64:4 value:self.logo];
  }
  if (self.hasCountryCode) {
    [output writeString:5 value:self.countryCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTeamId) {
    size_ += computeUInt32Size(1, self.teamId);
  }
  if (self.hasTag) {
    size_ += computeStringSize(2, self.tag);
  }
  if (self.hasTimeCreated) {
    size_ += computeUInt32Size(3, self.timeCreated);
  }
  if (self.hasLogo) {
    size_ += computeUInt64Size(4, self.logo);
  }
  if (self.hasCountryCode) {
    size_ += computeStringSize(5, self.countryCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAProTeamListResponse_TeamEntry*) parseFromData:(NSData*) data {
  return (CMsgDOTAProTeamListResponse_TeamEntry*)[[[CMsgDOTAProTeamListResponse_TeamEntry builder] mergeFromData:data] build];
}
+ (CMsgDOTAProTeamListResponse_TeamEntry*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProTeamListResponse_TeamEntry*)[[[CMsgDOTAProTeamListResponse_TeamEntry builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProTeamListResponse_TeamEntry*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAProTeamListResponse_TeamEntry*)[[[CMsgDOTAProTeamListResponse_TeamEntry builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAProTeamListResponse_TeamEntry*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProTeamListResponse_TeamEntry*)[[[CMsgDOTAProTeamListResponse_TeamEntry builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProTeamListResponse_TeamEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAProTeamListResponse_TeamEntry*)[[[CMsgDOTAProTeamListResponse_TeamEntry builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAProTeamListResponse_TeamEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProTeamListResponse_TeamEntry*)[[[CMsgDOTAProTeamListResponse_TeamEntry builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) builder {
  return [[[CMsgDOTAProTeamListResponse_TeamEntry_Builder alloc] init] autorelease];
}
+ (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) builderWithPrototype:(CMsgDOTAProTeamListResponse_TeamEntry*) prototype {
  return [[CMsgDOTAProTeamListResponse_TeamEntry builder] mergeFrom:prototype];
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) builder {
  return [CMsgDOTAProTeamListResponse_TeamEntry builder];
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) toBuilder {
  return [CMsgDOTAProTeamListResponse_TeamEntry builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamId", [NSNumber numberWithInt:self.teamId]];
  }
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", self.tag];
  }
  if (self.hasTimeCreated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeCreated", [NSNumber numberWithInt:self.timeCreated]];
  }
  if (self.hasLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logo", [NSNumber numberWithLongLong:self.logo]];
  }
  if (self.hasCountryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"countryCode", self.countryCode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAProTeamListResponse_TeamEntry class]]) {
    return NO;
  }
  CMsgDOTAProTeamListResponse_TeamEntry *otherMessage = other;
  return
      self.hasTeamId == otherMessage.hasTeamId &&
      (!self.hasTeamId || self.teamId == otherMessage.teamId) &&
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || [self.tag isEqual:otherMessage.tag]) &&
      self.hasTimeCreated == otherMessage.hasTimeCreated &&
      (!self.hasTimeCreated || self.timeCreated == otherMessage.timeCreated) &&
      self.hasLogo == otherMessage.hasLogo &&
      (!self.hasLogo || self.logo == otherMessage.logo) &&
      self.hasCountryCode == otherMessage.hasCountryCode &&
      (!self.hasCountryCode || [self.countryCode isEqual:otherMessage.countryCode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamId] hash];
  }
  if (self.hasTag) {
    hashCode = hashCode * 31 + [self.tag hash];
  }
  if (self.hasTimeCreated) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeCreated] hash];
  }
  if (self.hasLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.logo] hash];
  }
  if (self.hasCountryCode) {
    hashCode = hashCode * 31 + [self.countryCode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAProTeamListResponse_TeamEntry_Builder()
@property (retain) CMsgDOTAProTeamListResponse_TeamEntry* _builderResult;
@end

@implementation CMsgDOTAProTeamListResponse_TeamEntry_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAProTeamListResponse_TeamEntry alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) clear {
  _builderResult = [[[CMsgDOTAProTeamListResponse_TeamEntry alloc] init] autorelease];
  return self;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) clone {
  return [CMsgDOTAProTeamListResponse_TeamEntry builderWithPrototype:_builderResult];
}
- (CMsgDOTAProTeamListResponse_TeamEntry*) defaultInstance {
  return [CMsgDOTAProTeamListResponse_TeamEntry defaultInstance];
}
- (CMsgDOTAProTeamListResponse_TeamEntry*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAProTeamListResponse_TeamEntry*) buildPartial {
  CMsgDOTAProTeamListResponse_TeamEntry* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) mergeFrom:(CMsgDOTAProTeamListResponse_TeamEntry*) other {
  if (other == [CMsgDOTAProTeamListResponse_TeamEntry defaultInstance]) {
    return self;
  }
  if (other.hasTeamId) {
    [self setTeamId:other.teamId];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.hasTimeCreated) {
    [self setTimeCreated:other.timeCreated];
  }
  if (other.hasLogo) {
    [self setLogo:other.logo];
  }
  if (other.hasCountryCode) {
    [self setCountryCode:other.countryCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTeamId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setTag:[input readString]];
        break;
      }
      case 24: {
        [self setTimeCreated:[input readUInt32]];
        break;
      }
      case 32: {
        [self setLogo:[input readUInt64]];
        break;
      }
      case 42: {
        [self setCountryCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTeamId {
  return _builderResult.hasTeamId;
}
- (uint32_t) teamId {
  return _builderResult.teamId;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) setTeamId:(uint32_t) value {
  _builderResult.hasTeamId = YES;
  _builderResult.teamId = value;
  return self;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) clearTeamId {
  _builderResult.hasTeamId = NO;
  _builderResult.teamId = 0;
  return self;
}
- (BOOL) hasTag {
  return _builderResult.hasTag;
}
- (NSString*) tag {
  return _builderResult.tag;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) setTag:(NSString*) value {
  _builderResult.hasTag = YES;
  _builderResult.tag = value;
  return self;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) clearTag {
  _builderResult.hasTag = NO;
  _builderResult.tag = @"";
  return self;
}
- (BOOL) hasTimeCreated {
  return _builderResult.hasTimeCreated;
}
- (uint32_t) timeCreated {
  return _builderResult.timeCreated;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) setTimeCreated:(uint32_t) value {
  _builderResult.hasTimeCreated = YES;
  _builderResult.timeCreated = value;
  return self;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) clearTimeCreated {
  _builderResult.hasTimeCreated = NO;
  _builderResult.timeCreated = 0;
  return self;
}
- (BOOL) hasLogo {
  return _builderResult.hasLogo;
}
- (uint64_t) logo {
  return _builderResult.logo;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) setLogo:(uint64_t) value {
  _builderResult.hasLogo = YES;
  _builderResult.logo = value;
  return self;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) clearLogo {
  _builderResult.hasLogo = NO;
  _builderResult.logo = 0L;
  return self;
}
- (BOOL) hasCountryCode {
  return _builderResult.hasCountryCode;
}
- (NSString*) countryCode {
  return _builderResult.countryCode;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) setCountryCode:(NSString*) value {
  _builderResult.hasCountryCode = YES;
  _builderResult.countryCode = value;
  return self;
}
- (CMsgDOTAProTeamListResponse_TeamEntry_Builder*) clearCountryCode {
  _builderResult.hasCountryCode = NO;
  _builderResult.countryCode = @"";
  return self;
}
@end

@interface CMsgDOTAProTeamListResponse_Builder()
@property (retain) CMsgDOTAProTeamListResponse* _builderResult;
@end

@implementation CMsgDOTAProTeamListResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAProTeamListResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAProTeamListResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAProTeamListResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAProTeamListResponse_Builder*) clone {
  return [CMsgDOTAProTeamListResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAProTeamListResponse*) defaultInstance {
  return [CMsgDOTAProTeamListResponse defaultInstance];
}
- (CMsgDOTAProTeamListResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAProTeamListResponse*) buildPartial {
  CMsgDOTAProTeamListResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAProTeamListResponse_Builder*) mergeFrom:(CMsgDOTAProTeamListResponse*) other {
  if (other == [CMsgDOTAProTeamListResponse defaultInstance]) {
    return self;
  }
  if (other.teamsArray.count > 0) {
    if (_builderResult.teamsArray == nil) {
      _builderResult.teamsArray = [[other.teamsArray copyWithZone:[other.teamsArray zone]] autorelease];
    } else {
      [_builderResult.teamsArray appendArray:other.teamsArray];
    }
  }
  if (other.hasEresult) {
    [self setEresult:other.eresult];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAProTeamListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAProTeamListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTAProTeamListResponse_TeamEntry_Builder* subBuilder = [CMsgDOTAProTeamListResponse_TeamEntry builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTeams:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setEresult:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)teams {
  return _builderResult.teamsArray;
}
- (CMsgDOTAProTeamListResponse_TeamEntry*)teamsAtIndex:(NSUInteger)index {
  return [_builderResult teamsAtIndex:index];
}
- (CMsgDOTAProTeamListResponse_Builder *)addTeams:(CMsgDOTAProTeamListResponse_TeamEntry*)value {
  if (_builderResult.teamsArray == nil) {
    _builderResult.teamsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.teamsArray addObject:value];
  return self;
}
- (CMsgDOTAProTeamListResponse_Builder *)setTeamsArray:(NSArray *)array {
  _builderResult.teamsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProTeamListResponse_Builder *)setTeamsValues:(const CMsgDOTAProTeamListResponse_TeamEntry* *)values count:(NSUInteger)count {
  _builderResult.teamsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProTeamListResponse_Builder *)clearTeams {
  _builderResult.teamsArray = nil;
  return self;
}
- (BOOL) hasEresult {
  return _builderResult.hasEresult;
}
- (uint32_t) eresult {
  return _builderResult.eresult;
}
- (CMsgDOTAProTeamListResponse_Builder*) setEresult:(uint32_t) value {
  _builderResult.hasEresult = YES;
  _builderResult.eresult = value;
  return self;
}
- (CMsgDOTAProTeamListResponse_Builder*) clearEresult {
  _builderResult.hasEresult = NO;
  _builderResult.eresult = 0;
  return self;
}
@end

@interface CMsgDOTAInitiateTeamInvite ()
@property uint32_t accountId;
@end

@implementation CMsgDOTAInitiateTeamInvite

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
  }
  return self;
}
static CMsgDOTAInitiateTeamInvite* defaultCMsgDOTAInitiateTeamInviteInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAInitiateTeamInvite class]) {
    defaultCMsgDOTAInitiateTeamInviteInstance = [[CMsgDOTAInitiateTeamInvite alloc] init];
  }
}
+ (CMsgDOTAInitiateTeamInvite*) defaultInstance {
  return defaultCMsgDOTAInitiateTeamInviteInstance;
}
- (CMsgDOTAInitiateTeamInvite*) defaultInstance {
  return defaultCMsgDOTAInitiateTeamInviteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAInitiateTeamInvite*) parseFromData:(NSData*) data {
  return (CMsgDOTAInitiateTeamInvite*)[[[CMsgDOTAInitiateTeamInvite builder] mergeFromData:data] build];
}
+ (CMsgDOTAInitiateTeamInvite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAInitiateTeamInvite*)[[[CMsgDOTAInitiateTeamInvite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAInitiateTeamInvite*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAInitiateTeamInvite*)[[[CMsgDOTAInitiateTeamInvite builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAInitiateTeamInvite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAInitiateTeamInvite*)[[[CMsgDOTAInitiateTeamInvite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAInitiateTeamInvite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAInitiateTeamInvite*)[[[CMsgDOTAInitiateTeamInvite builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAInitiateTeamInvite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAInitiateTeamInvite*)[[[CMsgDOTAInitiateTeamInvite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAInitiateTeamInvite_Builder*) builder {
  return [[[CMsgDOTAInitiateTeamInvite_Builder alloc] init] autorelease];
}
+ (CMsgDOTAInitiateTeamInvite_Builder*) builderWithPrototype:(CMsgDOTAInitiateTeamInvite*) prototype {
  return [[CMsgDOTAInitiateTeamInvite builder] mergeFrom:prototype];
}
- (CMsgDOTAInitiateTeamInvite_Builder*) builder {
  return [CMsgDOTAInitiateTeamInvite builder];
}
- (CMsgDOTAInitiateTeamInvite_Builder*) toBuilder {
  return [CMsgDOTAInitiateTeamInvite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAInitiateTeamInvite class]]) {
    return NO;
  }
  CMsgDOTAInitiateTeamInvite *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAInitiateTeamInvite_Builder()
@property (retain) CMsgDOTAInitiateTeamInvite* _builderResult;
@end

@implementation CMsgDOTAInitiateTeamInvite_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAInitiateTeamInvite alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAInitiateTeamInvite_Builder*) clear {
  _builderResult = [[[CMsgDOTAInitiateTeamInvite alloc] init] autorelease];
  return self;
}
- (CMsgDOTAInitiateTeamInvite_Builder*) clone {
  return [CMsgDOTAInitiateTeamInvite builderWithPrototype:_builderResult];
}
- (CMsgDOTAInitiateTeamInvite*) defaultInstance {
  return [CMsgDOTAInitiateTeamInvite defaultInstance];
}
- (CMsgDOTAInitiateTeamInvite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAInitiateTeamInvite*) buildPartial {
  CMsgDOTAInitiateTeamInvite* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAInitiateTeamInvite_Builder*) mergeFrom:(CMsgDOTAInitiateTeamInvite*) other {
  if (other == [CMsgDOTAInitiateTeamInvite defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAInitiateTeamInvite_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAInitiateTeamInvite_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTAInitiateTeamInvite_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTAInitiateTeamInvite_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
@end

@interface CMsgDOTAInitiateTeamInviteResponse ()
@property CMsgDOTAInitiateTeamInviteResponse_Result result;
@property (retain) NSString* inviteeName;
@end

@implementation CMsgDOTAInitiateTeamInviteResponse

- (BOOL) hasresult {
  return !!hasresult_;
}
- (void) setHasresult:(BOOL) value_ {
  hasresult_ = !!value_;
}
@synthesize result;
- (BOOL) hasInviteeName {
  return !!hasInviteeName_;
}
- (void) setHasInviteeName:(BOOL) value_ {
  hasInviteeName_ = !!value_;
}
@synthesize inviteeName;
- (void) dealloc {
  self.inviteeName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = CMsgDOTAInitiateTeamInviteResponse_ResultSUCCESS;
    self.inviteeName = @"";
  }
  return self;
}
static CMsgDOTAInitiateTeamInviteResponse* defaultCMsgDOTAInitiateTeamInviteResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAInitiateTeamInviteResponse class]) {
    defaultCMsgDOTAInitiateTeamInviteResponseInstance = [[CMsgDOTAInitiateTeamInviteResponse alloc] init];
  }
}
+ (CMsgDOTAInitiateTeamInviteResponse*) defaultInstance {
  return defaultCMsgDOTAInitiateTeamInviteResponseInstance;
}
- (CMsgDOTAInitiateTeamInviteResponse*) defaultInstance {
  return defaultCMsgDOTAInitiateTeamInviteResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasresult) {
    [output writeEnum:1 value:self.result];
  }
  if (self.hasInviteeName) {
    [output writeString:2 value:self.inviteeName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasresult) {
    size_ += computeEnumSize(1, self.result);
  }
  if (self.hasInviteeName) {
    size_ += computeStringSize(2, self.inviteeName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAInitiateTeamInviteResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAInitiateTeamInviteResponse*)[[[CMsgDOTAInitiateTeamInviteResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAInitiateTeamInviteResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAInitiateTeamInviteResponse*)[[[CMsgDOTAInitiateTeamInviteResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAInitiateTeamInviteResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAInitiateTeamInviteResponse*)[[[CMsgDOTAInitiateTeamInviteResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAInitiateTeamInviteResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAInitiateTeamInviteResponse*)[[[CMsgDOTAInitiateTeamInviteResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAInitiateTeamInviteResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAInitiateTeamInviteResponse*)[[[CMsgDOTAInitiateTeamInviteResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAInitiateTeamInviteResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAInitiateTeamInviteResponse*)[[[CMsgDOTAInitiateTeamInviteResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAInitiateTeamInviteResponse_Builder*) builder {
  return [[[CMsgDOTAInitiateTeamInviteResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAInitiateTeamInviteResponse_Builder*) builderWithPrototype:(CMsgDOTAInitiateTeamInviteResponse*) prototype {
  return [[CMsgDOTAInitiateTeamInviteResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) builder {
  return [CMsgDOTAInitiateTeamInviteResponse builder];
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) toBuilder {
  return [CMsgDOTAInitiateTeamInviteResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasresult) {
    [output appendFormat:@"%@%@: %d\n", indent, @"result", self.result];
  }
  if (self.hasInviteeName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inviteeName", self.inviteeName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAInitiateTeamInviteResponse class]]) {
    return NO;
  }
  CMsgDOTAInitiateTeamInviteResponse *otherMessage = other;
  return
      self.hasresult == otherMessage.hasresult &&
      (!self.hasresult || self.result == otherMessage.result) &&
      self.hasInviteeName == otherMessage.hasInviteeName &&
      (!self.hasInviteeName || [self.inviteeName isEqual:otherMessage.inviteeName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasresult) {
    hashCode = hashCode * 31 + self.result;
  }
  if (self.hasInviteeName) {
    hashCode = hashCode * 31 + [self.inviteeName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTAInitiateTeamInviteResponse_ResultIsValidValue(CMsgDOTAInitiateTeamInviteResponse_Result value) {
  switch (value) {
    case CMsgDOTAInitiateTeamInviteResponse_ResultSUCCESS:
    case CMsgDOTAInitiateTeamInviteResponse_ResultMEMBER_LIMIT:
    case CMsgDOTAInitiateTeamInviteResponse_ResultINVITEE_NOT_AVAILABLE:
    case CMsgDOTAInitiateTeamInviteResponse_ResultINVITEE_BUSY:
    case CMsgDOTAInitiateTeamInviteResponse_ResultINVITEE_ALREADY_ON_A_TEAM:
    case CMsgDOTAInitiateTeamInviteResponse_ResultUNSPECIFIED_ERROR:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTAInitiateTeamInviteResponse_Builder()
@property (retain) CMsgDOTAInitiateTeamInviteResponse* _builderResult;
@end

@implementation CMsgDOTAInitiateTeamInviteResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAInitiateTeamInviteResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAInitiateTeamInviteResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) clone {
  return [CMsgDOTAInitiateTeamInviteResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAInitiateTeamInviteResponse*) defaultInstance {
  return [CMsgDOTAInitiateTeamInviteResponse defaultInstance];
}
- (CMsgDOTAInitiateTeamInviteResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAInitiateTeamInviteResponse*) buildPartial {
  CMsgDOTAInitiateTeamInviteResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) mergeFrom:(CMsgDOTAInitiateTeamInviteResponse*) other {
  if (other == [CMsgDOTAInitiateTeamInviteResponse defaultInstance]) {
    return self;
  }
  if (other.hasresult) {
    [self setresult:other.result];
  }
  if (other.hasInviteeName) {
    [self setInviteeName:other.inviteeName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTAInitiateTeamInviteResponse_ResultIsValidValue(value)) {
          [self setresult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setInviteeName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasresult {
  return _builderResult.hasresult;
}
- (CMsgDOTAInitiateTeamInviteResponse_Result) result {
  return _builderResult.result;
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) setresult:(CMsgDOTAInitiateTeamInviteResponse_Result) value {
  _builderResult.hasresult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) clearresult {
  _builderResult.hasresult = NO;
  _builderResult.result = CMsgDOTAInitiateTeamInviteResponse_ResultSUCCESS;
  return self;
}
- (BOOL) hasInviteeName {
  return _builderResult.hasInviteeName;
}
- (NSString*) inviteeName {
  return _builderResult.inviteeName;
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) setInviteeName:(NSString*) value {
  _builderResult.hasInviteeName = YES;
  _builderResult.inviteeName = value;
  return self;
}
- (CMsgDOTAInitiateTeamInviteResponse_Builder*) clearInviteeName {
  _builderResult.hasInviteeName = NO;
  _builderResult.inviteeName = @"";
  return self;
}
@end

@interface CMsgDOTATeamInvite ()
@property uint32_t inviterAccountId;
@property (retain) NSString* teamName;
@property (retain) NSString* teamTag;
@property uint64_t logo;
@end

@implementation CMsgDOTATeamInvite

- (BOOL) hasInviterAccountId {
  return !!hasInviterAccountId_;
}
- (void) setHasInviterAccountId:(BOOL) value_ {
  hasInviterAccountId_ = !!value_;
}
@synthesize inviterAccountId;
- (BOOL) hasTeamName {
  return !!hasTeamName_;
}
- (void) setHasTeamName:(BOOL) value_ {
  hasTeamName_ = !!value_;
}
@synthesize teamName;
- (BOOL) hasTeamTag {
  return !!hasTeamTag_;
}
- (void) setHasTeamTag:(BOOL) value_ {
  hasTeamTag_ = !!value_;
}
@synthesize teamTag;
- (BOOL) hasLogo {
  return !!hasLogo_;
}
- (void) setHasLogo:(BOOL) value_ {
  hasLogo_ = !!value_;
}
@synthesize logo;
- (void) dealloc {
  self.teamName = nil;
  self.teamTag = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.inviterAccountId = 0;
    self.teamName = @"";
    self.teamTag = @"";
    self.logo = 0L;
  }
  return self;
}
static CMsgDOTATeamInvite* defaultCMsgDOTATeamInviteInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeamInvite class]) {
    defaultCMsgDOTATeamInviteInstance = [[CMsgDOTATeamInvite alloc] init];
  }
}
+ (CMsgDOTATeamInvite*) defaultInstance {
  return defaultCMsgDOTATeamInviteInstance;
}
- (CMsgDOTATeamInvite*) defaultInstance {
  return defaultCMsgDOTATeamInviteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInviterAccountId) {
    [output writeUInt32:1 value:self.inviterAccountId];
  }
  if (self.hasTeamName) {
    [output writeString:2 value:self.teamName];
  }
  if (self.hasTeamTag) {
    [output writeString:3 value:self.teamTag];
  }
  if (self.hasLogo) {
    [output writeUInt64:4 value:self.logo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInviterAccountId) {
    size_ += computeUInt32Size(1, self.inviterAccountId);
  }
  if (self.hasTeamName) {
    size_ += computeStringSize(2, self.teamName);
  }
  if (self.hasTeamTag) {
    size_ += computeStringSize(3, self.teamTag);
  }
  if (self.hasLogo) {
    size_ += computeUInt64Size(4, self.logo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeamInvite*) parseFromData:(NSData*) data {
  return (CMsgDOTATeamInvite*)[[[CMsgDOTATeamInvite builder] mergeFromData:data] build];
}
+ (CMsgDOTATeamInvite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInvite*)[[[CMsgDOTATeamInvite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInvite*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeamInvite*)[[[CMsgDOTATeamInvite builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeamInvite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInvite*)[[[CMsgDOTATeamInvite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInvite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeamInvite*)[[[CMsgDOTATeamInvite builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeamInvite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInvite*)[[[CMsgDOTATeamInvite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInvite_Builder*) builder {
  return [[[CMsgDOTATeamInvite_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeamInvite_Builder*) builderWithPrototype:(CMsgDOTATeamInvite*) prototype {
  return [[CMsgDOTATeamInvite builder] mergeFrom:prototype];
}
- (CMsgDOTATeamInvite_Builder*) builder {
  return [CMsgDOTATeamInvite builder];
}
- (CMsgDOTATeamInvite_Builder*) toBuilder {
  return [CMsgDOTATeamInvite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInviterAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inviterAccountId", [NSNumber numberWithInt:self.inviterAccountId]];
  }
  if (self.hasTeamName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamName", self.teamName];
  }
  if (self.hasTeamTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamTag", self.teamTag];
  }
  if (self.hasLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"logo", [NSNumber numberWithLongLong:self.logo]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeamInvite class]]) {
    return NO;
  }
  CMsgDOTATeamInvite *otherMessage = other;
  return
      self.hasInviterAccountId == otherMessage.hasInviterAccountId &&
      (!self.hasInviterAccountId || self.inviterAccountId == otherMessage.inviterAccountId) &&
      self.hasTeamName == otherMessage.hasTeamName &&
      (!self.hasTeamName || [self.teamName isEqual:otherMessage.teamName]) &&
      self.hasTeamTag == otherMessage.hasTeamTag &&
      (!self.hasTeamTag || [self.teamTag isEqual:otherMessage.teamTag]) &&
      self.hasLogo == otherMessage.hasLogo &&
      (!self.hasLogo || self.logo == otherMessage.logo) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasInviterAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inviterAccountId] hash];
  }
  if (self.hasTeamName) {
    hashCode = hashCode * 31 + [self.teamName hash];
  }
  if (self.hasTeamTag) {
    hashCode = hashCode * 31 + [self.teamTag hash];
  }
  if (self.hasLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.logo] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATeamInvite_Builder()
@property (retain) CMsgDOTATeamInvite* _builderResult;
@end

@implementation CMsgDOTATeamInvite_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeamInvite alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeamInvite_Builder*) clear {
  _builderResult = [[[CMsgDOTATeamInvite alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeamInvite_Builder*) clone {
  return [CMsgDOTATeamInvite builderWithPrototype:_builderResult];
}
- (CMsgDOTATeamInvite*) defaultInstance {
  return [CMsgDOTATeamInvite defaultInstance];
}
- (CMsgDOTATeamInvite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeamInvite*) buildPartial {
  CMsgDOTATeamInvite* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeamInvite_Builder*) mergeFrom:(CMsgDOTATeamInvite*) other {
  if (other == [CMsgDOTATeamInvite defaultInstance]) {
    return self;
  }
  if (other.hasInviterAccountId) {
    [self setInviterAccountId:other.inviterAccountId];
  }
  if (other.hasTeamName) {
    [self setTeamName:other.teamName];
  }
  if (other.hasTeamTag) {
    [self setTeamTag:other.teamTag];
  }
  if (other.hasLogo) {
    [self setLogo:other.logo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeamInvite_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeamInvite_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInviterAccountId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setTeamName:[input readString]];
        break;
      }
      case 26: {
        [self setTeamTag:[input readString]];
        break;
      }
      case 32: {
        [self setLogo:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasInviterAccountId {
  return _builderResult.hasInviterAccountId;
}
- (uint32_t) inviterAccountId {
  return _builderResult.inviterAccountId;
}
- (CMsgDOTATeamInvite_Builder*) setInviterAccountId:(uint32_t) value {
  _builderResult.hasInviterAccountId = YES;
  _builderResult.inviterAccountId = value;
  return self;
}
- (CMsgDOTATeamInvite_Builder*) clearInviterAccountId {
  _builderResult.hasInviterAccountId = NO;
  _builderResult.inviterAccountId = 0;
  return self;
}
- (BOOL) hasTeamName {
  return _builderResult.hasTeamName;
}
- (NSString*) teamName {
  return _builderResult.teamName;
}
- (CMsgDOTATeamInvite_Builder*) setTeamName:(NSString*) value {
  _builderResult.hasTeamName = YES;
  _builderResult.teamName = value;
  return self;
}
- (CMsgDOTATeamInvite_Builder*) clearTeamName {
  _builderResult.hasTeamName = NO;
  _builderResult.teamName = @"";
  return self;
}
- (BOOL) hasTeamTag {
  return _builderResult.hasTeamTag;
}
- (NSString*) teamTag {
  return _builderResult.teamTag;
}
- (CMsgDOTATeamInvite_Builder*) setTeamTag:(NSString*) value {
  _builderResult.hasTeamTag = YES;
  _builderResult.teamTag = value;
  return self;
}
- (CMsgDOTATeamInvite_Builder*) clearTeamTag {
  _builderResult.hasTeamTag = NO;
  _builderResult.teamTag = @"";
  return self;
}
- (BOOL) hasLogo {
  return _builderResult.hasLogo;
}
- (uint64_t) logo {
  return _builderResult.logo;
}
- (CMsgDOTATeamInvite_Builder*) setLogo:(uint64_t) value {
  _builderResult.hasLogo = YES;
  _builderResult.logo = value;
  return self;
}
- (CMsgDOTATeamInvite_Builder*) clearLogo {
  _builderResult.hasLogo = NO;
  _builderResult.logo = 0L;
  return self;
}
@end

@interface CMsgDOTATeamInviteReply ()
@property CMsgDOTATeamInviteReply_Reply reply;
@end

@implementation CMsgDOTATeamInviteReply

- (BOOL) hasreply {
  return !!hasreply_;
}
- (void) setHasreply:(BOOL) value_ {
  hasreply_ = !!value_;
}
@synthesize reply;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.reply = CMsgDOTATeamInviteReply_ReplyJOIN;
  }
  return self;
}
static CMsgDOTATeamInviteReply* defaultCMsgDOTATeamInviteReplyInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeamInviteReply class]) {
    defaultCMsgDOTATeamInviteReplyInstance = [[CMsgDOTATeamInviteReply alloc] init];
  }
}
+ (CMsgDOTATeamInviteReply*) defaultInstance {
  return defaultCMsgDOTATeamInviteReplyInstance;
}
- (CMsgDOTATeamInviteReply*) defaultInstance {
  return defaultCMsgDOTATeamInviteReplyInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasreply) {
    [output writeEnum:1 value:self.reply];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasreply) {
    size_ += computeEnumSize(1, self.reply);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeamInviteReply*) parseFromData:(NSData*) data {
  return (CMsgDOTATeamInviteReply*)[[[CMsgDOTATeamInviteReply builder] mergeFromData:data] build];
}
+ (CMsgDOTATeamInviteReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInviteReply*)[[[CMsgDOTATeamInviteReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInviteReply*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeamInviteReply*)[[[CMsgDOTATeamInviteReply builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeamInviteReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInviteReply*)[[[CMsgDOTATeamInviteReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInviteReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeamInviteReply*)[[[CMsgDOTATeamInviteReply builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeamInviteReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInviteReply*)[[[CMsgDOTATeamInviteReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInviteReply_Builder*) builder {
  return [[[CMsgDOTATeamInviteReply_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeamInviteReply_Builder*) builderWithPrototype:(CMsgDOTATeamInviteReply*) prototype {
  return [[CMsgDOTATeamInviteReply builder] mergeFrom:prototype];
}
- (CMsgDOTATeamInviteReply_Builder*) builder {
  return [CMsgDOTATeamInviteReply builder];
}
- (CMsgDOTATeamInviteReply_Builder*) toBuilder {
  return [CMsgDOTATeamInviteReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasreply) {
    [output appendFormat:@"%@%@: %d\n", indent, @"reply", self.reply];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeamInviteReply class]]) {
    return NO;
  }
  CMsgDOTATeamInviteReply *otherMessage = other;
  return
      self.hasreply == otherMessage.hasreply &&
      (!self.hasreply || self.reply == otherMessage.reply) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasreply) {
    hashCode = hashCode * 31 + self.reply;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTATeamInviteReply_ReplyIsValidValue(CMsgDOTATeamInviteReply_Reply value) {
  switch (value) {
    case CMsgDOTATeamInviteReply_ReplyJOIN:
    case CMsgDOTATeamInviteReply_ReplyREJECT:
    case CMsgDOTATeamInviteReply_ReplyTIMEOUT:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTATeamInviteReply_Builder()
@property (retain) CMsgDOTATeamInviteReply* _builderResult;
@end

@implementation CMsgDOTATeamInviteReply_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeamInviteReply alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeamInviteReply_Builder*) clear {
  _builderResult = [[[CMsgDOTATeamInviteReply alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeamInviteReply_Builder*) clone {
  return [CMsgDOTATeamInviteReply builderWithPrototype:_builderResult];
}
- (CMsgDOTATeamInviteReply*) defaultInstance {
  return [CMsgDOTATeamInviteReply defaultInstance];
}
- (CMsgDOTATeamInviteReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeamInviteReply*) buildPartial {
  CMsgDOTATeamInviteReply* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeamInviteReply_Builder*) mergeFrom:(CMsgDOTATeamInviteReply*) other {
  if (other == [CMsgDOTATeamInviteReply defaultInstance]) {
    return self;
  }
  if (other.hasreply) {
    [self setreply:other.reply];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeamInviteReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeamInviteReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTATeamInviteReply_ReplyIsValidValue(value)) {
          [self setreply:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasreply {
  return _builderResult.hasreply;
}
- (CMsgDOTATeamInviteReply_Reply) reply {
  return _builderResult.reply;
}
- (CMsgDOTATeamInviteReply_Builder*) setreply:(CMsgDOTATeamInviteReply_Reply) value {
  _builderResult.hasreply = YES;
  _builderResult.reply = value;
  return self;
}
- (CMsgDOTATeamInviteReply_Builder*) clearreply {
  _builderResult.hasreply = NO;
  _builderResult.reply = CMsgDOTATeamInviteReply_ReplyJOIN;
  return self;
}
@end

@interface CMsgDOTATeamInviteReplyResponse ()
@property CMsgDOTATeamInviteReplyResponse_Result result;
@property (retain) NSString* teamName;
@end

@implementation CMsgDOTATeamInviteReplyResponse

- (BOOL) hasresult {
  return !!hasresult_;
}
- (void) setHasresult:(BOOL) value_ {
  hasresult_ = !!value_;
}
@synthesize result;
- (BOOL) hasTeamName {
  return !!hasTeamName_;
}
- (void) setHasTeamName:(BOOL) value_ {
  hasTeamName_ = !!value_;
}
@synthesize teamName;
- (void) dealloc {
  self.teamName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = CMsgDOTATeamInviteReplyResponse_ResultSUCCESS;
    self.teamName = @"";
  }
  return self;
}
static CMsgDOTATeamInviteReplyResponse* defaultCMsgDOTATeamInviteReplyResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeamInviteReplyResponse class]) {
    defaultCMsgDOTATeamInviteReplyResponseInstance = [[CMsgDOTATeamInviteReplyResponse alloc] init];
  }
}
+ (CMsgDOTATeamInviteReplyResponse*) defaultInstance {
  return defaultCMsgDOTATeamInviteReplyResponseInstance;
}
- (CMsgDOTATeamInviteReplyResponse*) defaultInstance {
  return defaultCMsgDOTATeamInviteReplyResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasresult) {
    [output writeEnum:1 value:self.result];
  }
  if (self.hasTeamName) {
    [output writeString:2 value:self.teamName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasresult) {
    size_ += computeEnumSize(1, self.result);
  }
  if (self.hasTeamName) {
    size_ += computeStringSize(2, self.teamName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeamInviteReplyResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTATeamInviteReplyResponse*)[[[CMsgDOTATeamInviteReplyResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTATeamInviteReplyResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInviteReplyResponse*)[[[CMsgDOTATeamInviteReplyResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInviteReplyResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeamInviteReplyResponse*)[[[CMsgDOTATeamInviteReplyResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeamInviteReplyResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInviteReplyResponse*)[[[CMsgDOTATeamInviteReplyResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInviteReplyResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeamInviteReplyResponse*)[[[CMsgDOTATeamInviteReplyResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeamInviteReplyResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInviteReplyResponse*)[[[CMsgDOTATeamInviteReplyResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInviteReplyResponse_Builder*) builder {
  return [[[CMsgDOTATeamInviteReplyResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeamInviteReplyResponse_Builder*) builderWithPrototype:(CMsgDOTATeamInviteReplyResponse*) prototype {
  return [[CMsgDOTATeamInviteReplyResponse builder] mergeFrom:prototype];
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) builder {
  return [CMsgDOTATeamInviteReplyResponse builder];
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) toBuilder {
  return [CMsgDOTATeamInviteReplyResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasresult) {
    [output appendFormat:@"%@%@: %d\n", indent, @"result", self.result];
  }
  if (self.hasTeamName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamName", self.teamName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeamInviteReplyResponse class]]) {
    return NO;
  }
  CMsgDOTATeamInviteReplyResponse *otherMessage = other;
  return
      self.hasresult == otherMessage.hasresult &&
      (!self.hasresult || self.result == otherMessage.result) &&
      self.hasTeamName == otherMessage.hasTeamName &&
      (!self.hasTeamName || [self.teamName isEqual:otherMessage.teamName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasresult) {
    hashCode = hashCode * 31 + self.result;
  }
  if (self.hasTeamName) {
    hashCode = hashCode * 31 + [self.teamName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTATeamInviteReplyResponse_ResultIsValidValue(CMsgDOTATeamInviteReplyResponse_Result value) {
  switch (value) {
    case CMsgDOTATeamInviteReplyResponse_ResultSUCCESS:
    case CMsgDOTATeamInviteReplyResponse_ResultFAILURE:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTATeamInviteReplyResponse_Builder()
@property (retain) CMsgDOTATeamInviteReplyResponse* _builderResult;
@end

@implementation CMsgDOTATeamInviteReplyResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeamInviteReplyResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTATeamInviteReplyResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) clone {
  return [CMsgDOTATeamInviteReplyResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTATeamInviteReplyResponse*) defaultInstance {
  return [CMsgDOTATeamInviteReplyResponse defaultInstance];
}
- (CMsgDOTATeamInviteReplyResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeamInviteReplyResponse*) buildPartial {
  CMsgDOTATeamInviteReplyResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) mergeFrom:(CMsgDOTATeamInviteReplyResponse*) other {
  if (other == [CMsgDOTATeamInviteReplyResponse defaultInstance]) {
    return self;
  }
  if (other.hasresult) {
    [self setresult:other.result];
  }
  if (other.hasTeamName) {
    [self setTeamName:other.teamName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTATeamInviteReplyResponse_ResultIsValidValue(value)) {
          [self setresult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setTeamName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasresult {
  return _builderResult.hasresult;
}
- (CMsgDOTATeamInviteReplyResponse_Result) result {
  return _builderResult.result;
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) setresult:(CMsgDOTATeamInviteReplyResponse_Result) value {
  _builderResult.hasresult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) clearresult {
  _builderResult.hasresult = NO;
  _builderResult.result = CMsgDOTATeamInviteReplyResponse_ResultSUCCESS;
  return self;
}
- (BOOL) hasTeamName {
  return _builderResult.hasTeamName;
}
- (NSString*) teamName {
  return _builderResult.teamName;
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) setTeamName:(NSString*) value {
  _builderResult.hasTeamName = YES;
  _builderResult.teamName = value;
  return self;
}
- (CMsgDOTATeamInviteReplyResponse_Builder*) clearTeamName {
  _builderResult.hasTeamName = NO;
  _builderResult.teamName = @"";
  return self;
}
@end

@interface CMsgDOTATeamInviteComplete ()
@property CMsgDOTATeamInviteComplete_Result result;
@property (retain) NSString* inviteeName;
@end

@implementation CMsgDOTATeamInviteComplete

- (BOOL) hasresult {
  return !!hasresult_;
}
- (void) setHasresult:(BOOL) value_ {
  hasresult_ = !!value_;
}
@synthesize result;
- (BOOL) hasInviteeName {
  return !!hasInviteeName_;
}
- (void) setHasInviteeName:(BOOL) value_ {
  hasInviteeName_ = !!value_;
}
@synthesize inviteeName;
- (void) dealloc {
  self.inviteeName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = CMsgDOTATeamInviteComplete_ResultJOINED;
    self.inviteeName = @"";
  }
  return self;
}
static CMsgDOTATeamInviteComplete* defaultCMsgDOTATeamInviteCompleteInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATeamInviteComplete class]) {
    defaultCMsgDOTATeamInviteCompleteInstance = [[CMsgDOTATeamInviteComplete alloc] init];
  }
}
+ (CMsgDOTATeamInviteComplete*) defaultInstance {
  return defaultCMsgDOTATeamInviteCompleteInstance;
}
- (CMsgDOTATeamInviteComplete*) defaultInstance {
  return defaultCMsgDOTATeamInviteCompleteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasresult) {
    [output writeEnum:1 value:self.result];
  }
  if (self.hasInviteeName) {
    [output writeString:2 value:self.inviteeName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasresult) {
    size_ += computeEnumSize(1, self.result);
  }
  if (self.hasInviteeName) {
    size_ += computeStringSize(2, self.inviteeName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATeamInviteComplete*) parseFromData:(NSData*) data {
  return (CMsgDOTATeamInviteComplete*)[[[CMsgDOTATeamInviteComplete builder] mergeFromData:data] build];
}
+ (CMsgDOTATeamInviteComplete*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInviteComplete*)[[[CMsgDOTATeamInviteComplete builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInviteComplete*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATeamInviteComplete*)[[[CMsgDOTATeamInviteComplete builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATeamInviteComplete*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInviteComplete*)[[[CMsgDOTATeamInviteComplete builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInviteComplete*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATeamInviteComplete*)[[[CMsgDOTATeamInviteComplete builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATeamInviteComplete*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATeamInviteComplete*)[[[CMsgDOTATeamInviteComplete builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATeamInviteComplete_Builder*) builder {
  return [[[CMsgDOTATeamInviteComplete_Builder alloc] init] autorelease];
}
+ (CMsgDOTATeamInviteComplete_Builder*) builderWithPrototype:(CMsgDOTATeamInviteComplete*) prototype {
  return [[CMsgDOTATeamInviteComplete builder] mergeFrom:prototype];
}
- (CMsgDOTATeamInviteComplete_Builder*) builder {
  return [CMsgDOTATeamInviteComplete builder];
}
- (CMsgDOTATeamInviteComplete_Builder*) toBuilder {
  return [CMsgDOTATeamInviteComplete builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasresult) {
    [output appendFormat:@"%@%@: %d\n", indent, @"result", self.result];
  }
  if (self.hasInviteeName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inviteeName", self.inviteeName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATeamInviteComplete class]]) {
    return NO;
  }
  CMsgDOTATeamInviteComplete *otherMessage = other;
  return
      self.hasresult == otherMessage.hasresult &&
      (!self.hasresult || self.result == otherMessage.result) &&
      self.hasInviteeName == otherMessage.hasInviteeName &&
      (!self.hasInviteeName || [self.inviteeName isEqual:otherMessage.inviteeName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasresult) {
    hashCode = hashCode * 31 + self.result;
  }
  if (self.hasInviteeName) {
    hashCode = hashCode * 31 + [self.inviteeName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTATeamInviteComplete_ResultIsValidValue(CMsgDOTATeamInviteComplete_Result value) {
  switch (value) {
    case CMsgDOTATeamInviteComplete_ResultJOINED:
    case CMsgDOTATeamInviteComplete_ResultREJECTION:
    case CMsgDOTATeamInviteComplete_ResultTIMEOUT:
    case CMsgDOTATeamInviteComplete_ResultUNSPECIFIED_ERROR:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTATeamInviteComplete_Builder()
@property (retain) CMsgDOTATeamInviteComplete* _builderResult;
@end

@implementation CMsgDOTATeamInviteComplete_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATeamInviteComplete alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATeamInviteComplete_Builder*) clear {
  _builderResult = [[[CMsgDOTATeamInviteComplete alloc] init] autorelease];
  return self;
}
- (CMsgDOTATeamInviteComplete_Builder*) clone {
  return [CMsgDOTATeamInviteComplete builderWithPrototype:_builderResult];
}
- (CMsgDOTATeamInviteComplete*) defaultInstance {
  return [CMsgDOTATeamInviteComplete defaultInstance];
}
- (CMsgDOTATeamInviteComplete*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATeamInviteComplete*) buildPartial {
  CMsgDOTATeamInviteComplete* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATeamInviteComplete_Builder*) mergeFrom:(CMsgDOTATeamInviteComplete*) other {
  if (other == [CMsgDOTATeamInviteComplete defaultInstance]) {
    return self;
  }
  if (other.hasresult) {
    [self setresult:other.result];
  }
  if (other.hasInviteeName) {
    [self setInviteeName:other.inviteeName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATeamInviteComplete_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATeamInviteComplete_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTATeamInviteComplete_ResultIsValidValue(value)) {
          [self setresult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setInviteeName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasresult {
  return _builderResult.hasresult;
}
- (CMsgDOTATeamInviteComplete_Result) result {
  return _builderResult.result;
}
- (CMsgDOTATeamInviteComplete_Builder*) setresult:(CMsgDOTATeamInviteComplete_Result) value {
  _builderResult.hasresult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTATeamInviteComplete_Builder*) clearresult {
  _builderResult.hasresult = NO;
  _builderResult.result = CMsgDOTATeamInviteComplete_ResultJOINED;
  return self;
}
- (BOOL) hasInviteeName {
  return _builderResult.hasInviteeName;
}
- (NSString*) inviteeName {
  return _builderResult.inviteeName;
}
- (CMsgDOTATeamInviteComplete_Builder*) setInviteeName:(NSString*) value {
  _builderResult.hasInviteeName = YES;
  _builderResult.inviteeName = value;
  return self;
}
- (CMsgDOTATeamInviteComplete_Builder*) clearInviteeName {
  _builderResult.hasInviteeName = NO;
  _builderResult.inviteeName = @"";
  return self;
}
@end

@interface CMsgDOTAKickTeamMember ()
@property uint32_t accountId;
@end

@implementation CMsgDOTAKickTeamMember

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
  }
  return self;
}
static CMsgDOTAKickTeamMember* defaultCMsgDOTAKickTeamMemberInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAKickTeamMember class]) {
    defaultCMsgDOTAKickTeamMemberInstance = [[CMsgDOTAKickTeamMember alloc] init];
  }
}
+ (CMsgDOTAKickTeamMember*) defaultInstance {
  return defaultCMsgDOTAKickTeamMemberInstance;
}
- (CMsgDOTAKickTeamMember*) defaultInstance {
  return defaultCMsgDOTAKickTeamMemberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAKickTeamMember*) parseFromData:(NSData*) data {
  return (CMsgDOTAKickTeamMember*)[[[CMsgDOTAKickTeamMember builder] mergeFromData:data] build];
}
+ (CMsgDOTAKickTeamMember*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAKickTeamMember*)[[[CMsgDOTAKickTeamMember builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAKickTeamMember*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAKickTeamMember*)[[[CMsgDOTAKickTeamMember builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAKickTeamMember*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAKickTeamMember*)[[[CMsgDOTAKickTeamMember builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAKickTeamMember*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAKickTeamMember*)[[[CMsgDOTAKickTeamMember builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAKickTeamMember*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAKickTeamMember*)[[[CMsgDOTAKickTeamMember builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAKickTeamMember_Builder*) builder {
  return [[[CMsgDOTAKickTeamMember_Builder alloc] init] autorelease];
}
+ (CMsgDOTAKickTeamMember_Builder*) builderWithPrototype:(CMsgDOTAKickTeamMember*) prototype {
  return [[CMsgDOTAKickTeamMember builder] mergeFrom:prototype];
}
- (CMsgDOTAKickTeamMember_Builder*) builder {
  return [CMsgDOTAKickTeamMember builder];
}
- (CMsgDOTAKickTeamMember_Builder*) toBuilder {
  return [CMsgDOTAKickTeamMember builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAKickTeamMember class]]) {
    return NO;
  }
  CMsgDOTAKickTeamMember *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAKickTeamMember_Builder()
@property (retain) CMsgDOTAKickTeamMember* _builderResult;
@end

@implementation CMsgDOTAKickTeamMember_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAKickTeamMember alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAKickTeamMember_Builder*) clear {
  _builderResult = [[[CMsgDOTAKickTeamMember alloc] init] autorelease];
  return self;
}
- (CMsgDOTAKickTeamMember_Builder*) clone {
  return [CMsgDOTAKickTeamMember builderWithPrototype:_builderResult];
}
- (CMsgDOTAKickTeamMember*) defaultInstance {
  return [CMsgDOTAKickTeamMember defaultInstance];
}
- (CMsgDOTAKickTeamMember*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAKickTeamMember*) buildPartial {
  CMsgDOTAKickTeamMember* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAKickTeamMember_Builder*) mergeFrom:(CMsgDOTAKickTeamMember*) other {
  if (other == [CMsgDOTAKickTeamMember defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAKickTeamMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAKickTeamMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTAKickTeamMember_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTAKickTeamMember_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
@end

@interface CMsgDOTAKickTeamMemberResponse ()
@property CMsgDOTAKickTeamMemberResponse_Result result;
@end

@implementation CMsgDOTAKickTeamMemberResponse

- (BOOL) hasresult {
  return !!hasresult_;
}
- (void) setHasresult:(BOOL) value_ {
  hasresult_ = !!value_;
}
@synthesize result;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = CMsgDOTAKickTeamMemberResponse_ResultSUCCESS;
  }
  return self;
}
static CMsgDOTAKickTeamMemberResponse* defaultCMsgDOTAKickTeamMemberResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAKickTeamMemberResponse class]) {
    defaultCMsgDOTAKickTeamMemberResponseInstance = [[CMsgDOTAKickTeamMemberResponse alloc] init];
  }
}
+ (CMsgDOTAKickTeamMemberResponse*) defaultInstance {
  return defaultCMsgDOTAKickTeamMemberResponseInstance;
}
- (CMsgDOTAKickTeamMemberResponse*) defaultInstance {
  return defaultCMsgDOTAKickTeamMemberResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasresult) {
    [output writeEnum:1 value:self.result];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasresult) {
    size_ += computeEnumSize(1, self.result);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAKickTeamMemberResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAKickTeamMemberResponse*)[[[CMsgDOTAKickTeamMemberResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAKickTeamMemberResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAKickTeamMemberResponse*)[[[CMsgDOTAKickTeamMemberResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAKickTeamMemberResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAKickTeamMemberResponse*)[[[CMsgDOTAKickTeamMemberResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAKickTeamMemberResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAKickTeamMemberResponse*)[[[CMsgDOTAKickTeamMemberResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAKickTeamMemberResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAKickTeamMemberResponse*)[[[CMsgDOTAKickTeamMemberResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAKickTeamMemberResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAKickTeamMemberResponse*)[[[CMsgDOTAKickTeamMemberResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAKickTeamMemberResponse_Builder*) builder {
  return [[[CMsgDOTAKickTeamMemberResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAKickTeamMemberResponse_Builder*) builderWithPrototype:(CMsgDOTAKickTeamMemberResponse*) prototype {
  return [[CMsgDOTAKickTeamMemberResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAKickTeamMemberResponse_Builder*) builder {
  return [CMsgDOTAKickTeamMemberResponse builder];
}
- (CMsgDOTAKickTeamMemberResponse_Builder*) toBuilder {
  return [CMsgDOTAKickTeamMemberResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasresult) {
    [output appendFormat:@"%@%@: %d\n", indent, @"result", self.result];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAKickTeamMemberResponse class]]) {
    return NO;
  }
  CMsgDOTAKickTeamMemberResponse *otherMessage = other;
  return
      self.hasresult == otherMessage.hasresult &&
      (!self.hasresult || self.result == otherMessage.result) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasresult) {
    hashCode = hashCode * 31 + self.result;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTAKickTeamMemberResponse_ResultIsValidValue(CMsgDOTAKickTeamMemberResponse_Result value) {
  switch (value) {
    case CMsgDOTAKickTeamMemberResponse_ResultSUCCESS:
    case CMsgDOTAKickTeamMemberResponse_ResultFAILURE:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTAKickTeamMemberResponse_Builder()
@property (retain) CMsgDOTAKickTeamMemberResponse* _builderResult;
@end

@implementation CMsgDOTAKickTeamMemberResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAKickTeamMemberResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAKickTeamMemberResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAKickTeamMemberResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAKickTeamMemberResponse_Builder*) clone {
  return [CMsgDOTAKickTeamMemberResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAKickTeamMemberResponse*) defaultInstance {
  return [CMsgDOTAKickTeamMemberResponse defaultInstance];
}
- (CMsgDOTAKickTeamMemberResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAKickTeamMemberResponse*) buildPartial {
  CMsgDOTAKickTeamMemberResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAKickTeamMemberResponse_Builder*) mergeFrom:(CMsgDOTAKickTeamMemberResponse*) other {
  if (other == [CMsgDOTAKickTeamMemberResponse defaultInstance]) {
    return self;
  }
  if (other.hasresult) {
    [self setresult:other.result];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAKickTeamMemberResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAKickTeamMemberResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTAKickTeamMemberResponse_ResultIsValidValue(value)) {
          [self setresult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasresult {
  return _builderResult.hasresult;
}
- (CMsgDOTAKickTeamMemberResponse_Result) result {
  return _builderResult.result;
}
- (CMsgDOTAKickTeamMemberResponse_Builder*) setresult:(CMsgDOTAKickTeamMemberResponse_Result) value {
  _builderResult.hasresult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTAKickTeamMemberResponse_Builder*) clearresult {
  _builderResult.hasresult = NO;
  _builderResult.result = CMsgDOTAKickTeamMemberResponse_ResultSUCCESS;
  return self;
}
@end

@interface CMsgDOTATransferTeamAdmin ()
@property uint32_t newAdminAccountId;
@end

@implementation CMsgDOTATransferTeamAdmin

- (BOOL) hasNewAdminAccountId {
  return !!hasNewAdminAccountId_;
}
- (void) setHasNewAdminAccountId:(BOOL) value_ {
  hasNewAdminAccountId_ = !!value_;
}
@synthesize newAdminAccountId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.newAdminAccountId = 0;
  }
  return self;
}
static CMsgDOTATransferTeamAdmin* defaultCMsgDOTATransferTeamAdminInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTATransferTeamAdmin class]) {
    defaultCMsgDOTATransferTeamAdminInstance = [[CMsgDOTATransferTeamAdmin alloc] init];
  }
}
+ (CMsgDOTATransferTeamAdmin*) defaultInstance {
  return defaultCMsgDOTATransferTeamAdminInstance;
}
- (CMsgDOTATransferTeamAdmin*) defaultInstance {
  return defaultCMsgDOTATransferTeamAdminInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNewAdminAccountId) {
    [output writeUInt32:1 value:self.newAdminAccountId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNewAdminAccountId) {
    size_ += computeUInt32Size(1, self.newAdminAccountId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTATransferTeamAdmin*) parseFromData:(NSData*) data {
  return (CMsgDOTATransferTeamAdmin*)[[[CMsgDOTATransferTeamAdmin builder] mergeFromData:data] build];
}
+ (CMsgDOTATransferTeamAdmin*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATransferTeamAdmin*)[[[CMsgDOTATransferTeamAdmin builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATransferTeamAdmin*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTATransferTeamAdmin*)[[[CMsgDOTATransferTeamAdmin builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTATransferTeamAdmin*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATransferTeamAdmin*)[[[CMsgDOTATransferTeamAdmin builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATransferTeamAdmin*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTATransferTeamAdmin*)[[[CMsgDOTATransferTeamAdmin builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTATransferTeamAdmin*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTATransferTeamAdmin*)[[[CMsgDOTATransferTeamAdmin builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTATransferTeamAdmin_Builder*) builder {
  return [[[CMsgDOTATransferTeamAdmin_Builder alloc] init] autorelease];
}
+ (CMsgDOTATransferTeamAdmin_Builder*) builderWithPrototype:(CMsgDOTATransferTeamAdmin*) prototype {
  return [[CMsgDOTATransferTeamAdmin builder] mergeFrom:prototype];
}
- (CMsgDOTATransferTeamAdmin_Builder*) builder {
  return [CMsgDOTATransferTeamAdmin builder];
}
- (CMsgDOTATransferTeamAdmin_Builder*) toBuilder {
  return [CMsgDOTATransferTeamAdmin builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNewAdminAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newAdminAccountId", [NSNumber numberWithInt:self.newAdminAccountId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTATransferTeamAdmin class]]) {
    return NO;
  }
  CMsgDOTATransferTeamAdmin *otherMessage = other;
  return
      self.hasNewAdminAccountId == otherMessage.hasNewAdminAccountId &&
      (!self.hasNewAdminAccountId || self.newAdminAccountId == otherMessage.newAdminAccountId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasNewAdminAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.newAdminAccountId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTATransferTeamAdmin_Builder()
@property (retain) CMsgDOTATransferTeamAdmin* _builderResult;
@end

@implementation CMsgDOTATransferTeamAdmin_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTATransferTeamAdmin alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTATransferTeamAdmin_Builder*) clear {
  _builderResult = [[[CMsgDOTATransferTeamAdmin alloc] init] autorelease];
  return self;
}
- (CMsgDOTATransferTeamAdmin_Builder*) clone {
  return [CMsgDOTATransferTeamAdmin builderWithPrototype:_builderResult];
}
- (CMsgDOTATransferTeamAdmin*) defaultInstance {
  return [CMsgDOTATransferTeamAdmin defaultInstance];
}
- (CMsgDOTATransferTeamAdmin*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTATransferTeamAdmin*) buildPartial {
  CMsgDOTATransferTeamAdmin* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTATransferTeamAdmin_Builder*) mergeFrom:(CMsgDOTATransferTeamAdmin*) other {
  if (other == [CMsgDOTATransferTeamAdmin defaultInstance]) {
    return self;
  }
  if (other.hasNewAdminAccountId) {
    [self setNewAdminAccountId:other.newAdminAccountId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTATransferTeamAdmin_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTATransferTeamAdmin_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNewAdminAccountId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasNewAdminAccountId {
  return _builderResult.hasNewAdminAccountId;
}
- (uint32_t) newAdminAccountId {
  return _builderResult.newAdminAccountId;
}
- (CMsgDOTATransferTeamAdmin_Builder*) setNewAdminAccountId:(uint32_t) value {
  _builderResult.hasNewAdminAccountId = YES;
  _builderResult.newAdminAccountId = value;
  return self;
}
- (CMsgDOTATransferTeamAdmin_Builder*) clearNewAdminAccountId {
  _builderResult.hasNewAdminAccountId = NO;
  _builderResult.newAdminAccountId = 0;
  return self;
}
@end

@interface CMsgDOTALeaveTeam ()
@end

@implementation CMsgDOTALeaveTeam

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTALeaveTeam* defaultCMsgDOTALeaveTeamInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTALeaveTeam class]) {
    defaultCMsgDOTALeaveTeamInstance = [[CMsgDOTALeaveTeam alloc] init];
  }
}
+ (CMsgDOTALeaveTeam*) defaultInstance {
  return defaultCMsgDOTALeaveTeamInstance;
}
- (CMsgDOTALeaveTeam*) defaultInstance {
  return defaultCMsgDOTALeaveTeamInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTALeaveTeam*) parseFromData:(NSData*) data {
  return (CMsgDOTALeaveTeam*)[[[CMsgDOTALeaveTeam builder] mergeFromData:data] build];
}
+ (CMsgDOTALeaveTeam*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALeaveTeam*)[[[CMsgDOTALeaveTeam builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALeaveTeam*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTALeaveTeam*)[[[CMsgDOTALeaveTeam builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTALeaveTeam*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALeaveTeam*)[[[CMsgDOTALeaveTeam builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALeaveTeam*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTALeaveTeam*)[[[CMsgDOTALeaveTeam builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTALeaveTeam*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALeaveTeam*)[[[CMsgDOTALeaveTeam builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALeaveTeam_Builder*) builder {
  return [[[CMsgDOTALeaveTeam_Builder alloc] init] autorelease];
}
+ (CMsgDOTALeaveTeam_Builder*) builderWithPrototype:(CMsgDOTALeaveTeam*) prototype {
  return [[CMsgDOTALeaveTeam builder] mergeFrom:prototype];
}
- (CMsgDOTALeaveTeam_Builder*) builder {
  return [CMsgDOTALeaveTeam builder];
}
- (CMsgDOTALeaveTeam_Builder*) toBuilder {
  return [CMsgDOTALeaveTeam builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTALeaveTeam class]]) {
    return NO;
  }
  CMsgDOTALeaveTeam *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTALeaveTeam_Builder()
@property (retain) CMsgDOTALeaveTeam* _builderResult;
@end

@implementation CMsgDOTALeaveTeam_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTALeaveTeam alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTALeaveTeam_Builder*) clear {
  _builderResult = [[[CMsgDOTALeaveTeam alloc] init] autorelease];
  return self;
}
- (CMsgDOTALeaveTeam_Builder*) clone {
  return [CMsgDOTALeaveTeam builderWithPrototype:_builderResult];
}
- (CMsgDOTALeaveTeam*) defaultInstance {
  return [CMsgDOTALeaveTeam defaultInstance];
}
- (CMsgDOTALeaveTeam*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTALeaveTeam*) buildPartial {
  CMsgDOTALeaveTeam* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTALeaveTeam_Builder*) mergeFrom:(CMsgDOTALeaveTeam*) other {
  if (other == [CMsgDOTALeaveTeam defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTALeaveTeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTALeaveTeam_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTALeaveTeamResponse ()
@property CMsgDOTALeaveTeamResponse_Result result;
@property (retain) NSString* teamName;
@end

@implementation CMsgDOTALeaveTeamResponse

- (BOOL) hasresult {
  return !!hasresult_;
}
- (void) setHasresult:(BOOL) value_ {
  hasresult_ = !!value_;
}
@synthesize result;
- (BOOL) hasTeamName {
  return !!hasTeamName_;
}
- (void) setHasTeamName:(BOOL) value_ {
  hasTeamName_ = !!value_;
}
@synthesize teamName;
- (void) dealloc {
  self.teamName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = CMsgDOTALeaveTeamResponse_ResultSUCCESS;
    self.teamName = @"";
  }
  return self;
}
static CMsgDOTALeaveTeamResponse* defaultCMsgDOTALeaveTeamResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTALeaveTeamResponse class]) {
    defaultCMsgDOTALeaveTeamResponseInstance = [[CMsgDOTALeaveTeamResponse alloc] init];
  }
}
+ (CMsgDOTALeaveTeamResponse*) defaultInstance {
  return defaultCMsgDOTALeaveTeamResponseInstance;
}
- (CMsgDOTALeaveTeamResponse*) defaultInstance {
  return defaultCMsgDOTALeaveTeamResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasresult) {
    [output writeEnum:1 value:self.result];
  }
  if (self.hasTeamName) {
    [output writeString:2 value:self.teamName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasresult) {
    size_ += computeEnumSize(1, self.result);
  }
  if (self.hasTeamName) {
    size_ += computeStringSize(2, self.teamName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTALeaveTeamResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTALeaveTeamResponse*)[[[CMsgDOTALeaveTeamResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTALeaveTeamResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALeaveTeamResponse*)[[[CMsgDOTALeaveTeamResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALeaveTeamResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTALeaveTeamResponse*)[[[CMsgDOTALeaveTeamResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTALeaveTeamResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALeaveTeamResponse*)[[[CMsgDOTALeaveTeamResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALeaveTeamResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTALeaveTeamResponse*)[[[CMsgDOTALeaveTeamResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTALeaveTeamResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALeaveTeamResponse*)[[[CMsgDOTALeaveTeamResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALeaveTeamResponse_Builder*) builder {
  return [[[CMsgDOTALeaveTeamResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTALeaveTeamResponse_Builder*) builderWithPrototype:(CMsgDOTALeaveTeamResponse*) prototype {
  return [[CMsgDOTALeaveTeamResponse builder] mergeFrom:prototype];
}
- (CMsgDOTALeaveTeamResponse_Builder*) builder {
  return [CMsgDOTALeaveTeamResponse builder];
}
- (CMsgDOTALeaveTeamResponse_Builder*) toBuilder {
  return [CMsgDOTALeaveTeamResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasresult) {
    [output appendFormat:@"%@%@: %d\n", indent, @"result", self.result];
  }
  if (self.hasTeamName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamName", self.teamName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTALeaveTeamResponse class]]) {
    return NO;
  }
  CMsgDOTALeaveTeamResponse *otherMessage = other;
  return
      self.hasresult == otherMessage.hasresult &&
      (!self.hasresult || self.result == otherMessage.result) &&
      self.hasTeamName == otherMessage.hasTeamName &&
      (!self.hasTeamName || [self.teamName isEqual:otherMessage.teamName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasresult) {
    hashCode = hashCode * 31 + self.result;
  }
  if (self.hasTeamName) {
    hashCode = hashCode * 31 + [self.teamName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTALeaveTeamResponse_ResultIsValidValue(CMsgDOTALeaveTeamResponse_Result value) {
  switch (value) {
    case CMsgDOTALeaveTeamResponse_ResultSUCCESS:
    case CMsgDOTALeaveTeamResponse_ResultFAILURE:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTALeaveTeamResponse_Builder()
@property (retain) CMsgDOTALeaveTeamResponse* _builderResult;
@end

@implementation CMsgDOTALeaveTeamResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTALeaveTeamResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTALeaveTeamResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTALeaveTeamResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTALeaveTeamResponse_Builder*) clone {
  return [CMsgDOTALeaveTeamResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTALeaveTeamResponse*) defaultInstance {
  return [CMsgDOTALeaveTeamResponse defaultInstance];
}
- (CMsgDOTALeaveTeamResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTALeaveTeamResponse*) buildPartial {
  CMsgDOTALeaveTeamResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTALeaveTeamResponse_Builder*) mergeFrom:(CMsgDOTALeaveTeamResponse*) other {
  if (other == [CMsgDOTALeaveTeamResponse defaultInstance]) {
    return self;
  }
  if (other.hasresult) {
    [self setresult:other.result];
  }
  if (other.hasTeamName) {
    [self setTeamName:other.teamName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTALeaveTeamResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTALeaveTeamResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgDOTALeaveTeamResponse_ResultIsValidValue(value)) {
          [self setresult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setTeamName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasresult {
  return _builderResult.hasresult;
}
- (CMsgDOTALeaveTeamResponse_Result) result {
  return _builderResult.result;
}
- (CMsgDOTALeaveTeamResponse_Builder*) setresult:(CMsgDOTALeaveTeamResponse_Result) value {
  _builderResult.hasresult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTALeaveTeamResponse_Builder*) clearresult {
  _builderResult.hasresult = NO;
  _builderResult.result = CMsgDOTALeaveTeamResponse_ResultSUCCESS;
  return self;
}
- (BOOL) hasTeamName {
  return _builderResult.hasTeamName;
}
- (NSString*) teamName {
  return _builderResult.teamName;
}
- (CMsgDOTALeaveTeamResponse_Builder*) setTeamName:(NSString*) value {
  _builderResult.hasTeamName = YES;
  _builderResult.teamName = value;
  return self;
}
- (CMsgDOTALeaveTeamResponse_Builder*) clearTeamName {
  _builderResult.hasTeamName = NO;
  _builderResult.teamName = @"";
  return self;
}
@end

@interface CMsgDOTASuggestTeamMatchmaking ()
@property (retain) NSString* teammateName;
@end

@implementation CMsgDOTASuggestTeamMatchmaking

- (BOOL) hasTeammateName {
  return !!hasTeammateName_;
}
- (void) setHasTeammateName:(BOOL) value_ {
  hasTeammateName_ = !!value_;
}
@synthesize teammateName;
- (void) dealloc {
  self.teammateName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.teammateName = @"";
  }
  return self;
}
static CMsgDOTASuggestTeamMatchmaking* defaultCMsgDOTASuggestTeamMatchmakingInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTASuggestTeamMatchmaking class]) {
    defaultCMsgDOTASuggestTeamMatchmakingInstance = [[CMsgDOTASuggestTeamMatchmaking alloc] init];
  }
}
+ (CMsgDOTASuggestTeamMatchmaking*) defaultInstance {
  return defaultCMsgDOTASuggestTeamMatchmakingInstance;
}
- (CMsgDOTASuggestTeamMatchmaking*) defaultInstance {
  return defaultCMsgDOTASuggestTeamMatchmakingInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTeammateName) {
    [output writeString:1 value:self.teammateName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTeammateName) {
    size_ += computeStringSize(1, self.teammateName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTASuggestTeamMatchmaking*) parseFromData:(NSData*) data {
  return (CMsgDOTASuggestTeamMatchmaking*)[[[CMsgDOTASuggestTeamMatchmaking builder] mergeFromData:data] build];
}
+ (CMsgDOTASuggestTeamMatchmaking*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASuggestTeamMatchmaking*)[[[CMsgDOTASuggestTeamMatchmaking builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASuggestTeamMatchmaking*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTASuggestTeamMatchmaking*)[[[CMsgDOTASuggestTeamMatchmaking builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTASuggestTeamMatchmaking*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASuggestTeamMatchmaking*)[[[CMsgDOTASuggestTeamMatchmaking builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASuggestTeamMatchmaking*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTASuggestTeamMatchmaking*)[[[CMsgDOTASuggestTeamMatchmaking builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTASuggestTeamMatchmaking*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASuggestTeamMatchmaking*)[[[CMsgDOTASuggestTeamMatchmaking builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASuggestTeamMatchmaking_Builder*) builder {
  return [[[CMsgDOTASuggestTeamMatchmaking_Builder alloc] init] autorelease];
}
+ (CMsgDOTASuggestTeamMatchmaking_Builder*) builderWithPrototype:(CMsgDOTASuggestTeamMatchmaking*) prototype {
  return [[CMsgDOTASuggestTeamMatchmaking builder] mergeFrom:prototype];
}
- (CMsgDOTASuggestTeamMatchmaking_Builder*) builder {
  return [CMsgDOTASuggestTeamMatchmaking builder];
}
- (CMsgDOTASuggestTeamMatchmaking_Builder*) toBuilder {
  return [CMsgDOTASuggestTeamMatchmaking builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTeammateName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teammateName", self.teammateName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTASuggestTeamMatchmaking class]]) {
    return NO;
  }
  CMsgDOTASuggestTeamMatchmaking *otherMessage = other;
  return
      self.hasTeammateName == otherMessage.hasTeammateName &&
      (!self.hasTeammateName || [self.teammateName isEqual:otherMessage.teammateName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTeammateName) {
    hashCode = hashCode * 31 + [self.teammateName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTASuggestTeamMatchmaking_Builder()
@property (retain) CMsgDOTASuggestTeamMatchmaking* _builderResult;
@end

@implementation CMsgDOTASuggestTeamMatchmaking_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTASuggestTeamMatchmaking alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTASuggestTeamMatchmaking_Builder*) clear {
  _builderResult = [[[CMsgDOTASuggestTeamMatchmaking alloc] init] autorelease];
  return self;
}
- (CMsgDOTASuggestTeamMatchmaking_Builder*) clone {
  return [CMsgDOTASuggestTeamMatchmaking builderWithPrototype:_builderResult];
}
- (CMsgDOTASuggestTeamMatchmaking*) defaultInstance {
  return [CMsgDOTASuggestTeamMatchmaking defaultInstance];
}
- (CMsgDOTASuggestTeamMatchmaking*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTASuggestTeamMatchmaking*) buildPartial {
  CMsgDOTASuggestTeamMatchmaking* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTASuggestTeamMatchmaking_Builder*) mergeFrom:(CMsgDOTASuggestTeamMatchmaking*) other {
  if (other == [CMsgDOTASuggestTeamMatchmaking defaultInstance]) {
    return self;
  }
  if (other.hasTeammateName) {
    [self setTeammateName:other.teammateName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTASuggestTeamMatchmaking_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTASuggestTeamMatchmaking_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTeammateName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTeammateName {
  return _builderResult.hasTeammateName;
}
- (NSString*) teammateName {
  return _builderResult.teammateName;
}
- (CMsgDOTASuggestTeamMatchmaking_Builder*) setTeammateName:(NSString*) value {
  _builderResult.hasTeammateName = YES;
  _builderResult.teammateName = value;
  return self;
}
- (CMsgDOTASuggestTeamMatchmaking_Builder*) clearTeammateName {
  _builderResult.hasTeammateName = NO;
  _builderResult.teammateName = @"";
  return self;
}
@end

@interface CMsgDOTABetaParticipationRequest ()
@end

@implementation CMsgDOTABetaParticipationRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTABetaParticipationRequest* defaultCMsgDOTABetaParticipationRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTABetaParticipationRequest class]) {
    defaultCMsgDOTABetaParticipationRequestInstance = [[CMsgDOTABetaParticipationRequest alloc] init];
  }
}
+ (CMsgDOTABetaParticipationRequest*) defaultInstance {
  return defaultCMsgDOTABetaParticipationRequestInstance;
}
- (CMsgDOTABetaParticipationRequest*) defaultInstance {
  return defaultCMsgDOTABetaParticipationRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTABetaParticipationRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTABetaParticipationRequest*)[[[CMsgDOTABetaParticipationRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTABetaParticipationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTABetaParticipationRequest*)[[[CMsgDOTABetaParticipationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTABetaParticipationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTABetaParticipationRequest*)[[[CMsgDOTABetaParticipationRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTABetaParticipationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTABetaParticipationRequest*)[[[CMsgDOTABetaParticipationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTABetaParticipationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTABetaParticipationRequest*)[[[CMsgDOTABetaParticipationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTABetaParticipationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTABetaParticipationRequest*)[[[CMsgDOTABetaParticipationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTABetaParticipationRequest_Builder*) builder {
  return [[[CMsgDOTABetaParticipationRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTABetaParticipationRequest_Builder*) builderWithPrototype:(CMsgDOTABetaParticipationRequest*) prototype {
  return [[CMsgDOTABetaParticipationRequest builder] mergeFrom:prototype];
}
- (CMsgDOTABetaParticipationRequest_Builder*) builder {
  return [CMsgDOTABetaParticipationRequest builder];
}
- (CMsgDOTABetaParticipationRequest_Builder*) toBuilder {
  return [CMsgDOTABetaParticipationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTABetaParticipationRequest class]]) {
    return NO;
  }
  CMsgDOTABetaParticipationRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTABetaParticipationRequest_Builder()
@property (retain) CMsgDOTABetaParticipationRequest* _builderResult;
@end

@implementation CMsgDOTABetaParticipationRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTABetaParticipationRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTABetaParticipationRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTABetaParticipationRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTABetaParticipationRequest_Builder*) clone {
  return [CMsgDOTABetaParticipationRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTABetaParticipationRequest*) defaultInstance {
  return [CMsgDOTABetaParticipationRequest defaultInstance];
}
- (CMsgDOTABetaParticipationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTABetaParticipationRequest*) buildPartial {
  CMsgDOTABetaParticipationRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTABetaParticipationRequest_Builder*) mergeFrom:(CMsgDOTABetaParticipationRequest*) other {
  if (other == [CMsgDOTABetaParticipationRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTABetaParticipationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTABetaParticipationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTABetaParticipation ()
@property uint32_t accessRights;
@property uint32_t betaJoinTime;
@end

@implementation CMsgDOTABetaParticipation

- (BOOL) hasAccessRights {
  return !!hasAccessRights_;
}
- (void) setHasAccessRights:(BOOL) value_ {
  hasAccessRights_ = !!value_;
}
@synthesize accessRights;
- (BOOL) hasBetaJoinTime {
  return !!hasBetaJoinTime_;
}
- (void) setHasBetaJoinTime:(BOOL) value_ {
  hasBetaJoinTime_ = !!value_;
}
@synthesize betaJoinTime;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accessRights = 0;
    self.betaJoinTime = 0;
  }
  return self;
}
static CMsgDOTABetaParticipation* defaultCMsgDOTABetaParticipationInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTABetaParticipation class]) {
    defaultCMsgDOTABetaParticipationInstance = [[CMsgDOTABetaParticipation alloc] init];
  }
}
+ (CMsgDOTABetaParticipation*) defaultInstance {
  return defaultCMsgDOTABetaParticipationInstance;
}
- (CMsgDOTABetaParticipation*) defaultInstance {
  return defaultCMsgDOTABetaParticipationInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccessRights) {
    [output writeUInt32:1 value:self.accessRights];
  }
  if (self.hasBetaJoinTime) {
    [output writeFixed32:2 value:self.betaJoinTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccessRights) {
    size_ += computeUInt32Size(1, self.accessRights);
  }
  if (self.hasBetaJoinTime) {
    size_ += computeFixed32Size(2, self.betaJoinTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTABetaParticipation*) parseFromData:(NSData*) data {
  return (CMsgDOTABetaParticipation*)[[[CMsgDOTABetaParticipation builder] mergeFromData:data] build];
}
+ (CMsgDOTABetaParticipation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTABetaParticipation*)[[[CMsgDOTABetaParticipation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTABetaParticipation*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTABetaParticipation*)[[[CMsgDOTABetaParticipation builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTABetaParticipation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTABetaParticipation*)[[[CMsgDOTABetaParticipation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTABetaParticipation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTABetaParticipation*)[[[CMsgDOTABetaParticipation builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTABetaParticipation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTABetaParticipation*)[[[CMsgDOTABetaParticipation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTABetaParticipation_Builder*) builder {
  return [[[CMsgDOTABetaParticipation_Builder alloc] init] autorelease];
}
+ (CMsgDOTABetaParticipation_Builder*) builderWithPrototype:(CMsgDOTABetaParticipation*) prototype {
  return [[CMsgDOTABetaParticipation builder] mergeFrom:prototype];
}
- (CMsgDOTABetaParticipation_Builder*) builder {
  return [CMsgDOTABetaParticipation builder];
}
- (CMsgDOTABetaParticipation_Builder*) toBuilder {
  return [CMsgDOTABetaParticipation builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccessRights) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accessRights", [NSNumber numberWithInt:self.accessRights]];
  }
  if (self.hasBetaJoinTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"betaJoinTime", [NSNumber numberWithInt:self.betaJoinTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTABetaParticipation class]]) {
    return NO;
  }
  CMsgDOTABetaParticipation *otherMessage = other;
  return
      self.hasAccessRights == otherMessage.hasAccessRights &&
      (!self.hasAccessRights || self.accessRights == otherMessage.accessRights) &&
      self.hasBetaJoinTime == otherMessage.hasBetaJoinTime &&
      (!self.hasBetaJoinTime || self.betaJoinTime == otherMessage.betaJoinTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccessRights) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accessRights] hash];
  }
  if (self.hasBetaJoinTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.betaJoinTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTABetaParticipation_Builder()
@property (retain) CMsgDOTABetaParticipation* _builderResult;
@end

@implementation CMsgDOTABetaParticipation_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTABetaParticipation alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTABetaParticipation_Builder*) clear {
  _builderResult = [[[CMsgDOTABetaParticipation alloc] init] autorelease];
  return self;
}
- (CMsgDOTABetaParticipation_Builder*) clone {
  return [CMsgDOTABetaParticipation builderWithPrototype:_builderResult];
}
- (CMsgDOTABetaParticipation*) defaultInstance {
  return [CMsgDOTABetaParticipation defaultInstance];
}
- (CMsgDOTABetaParticipation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTABetaParticipation*) buildPartial {
  CMsgDOTABetaParticipation* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTABetaParticipation_Builder*) mergeFrom:(CMsgDOTABetaParticipation*) other {
  if (other == [CMsgDOTABetaParticipation defaultInstance]) {
    return self;
  }
  if (other.hasAccessRights) {
    [self setAccessRights:other.accessRights];
  }
  if (other.hasBetaJoinTime) {
    [self setBetaJoinTime:other.betaJoinTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTABetaParticipation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTABetaParticipation_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccessRights:[input readUInt32]];
        break;
      }
      case 21: {
        [self setBetaJoinTime:[input readFixed32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccessRights {
  return _builderResult.hasAccessRights;
}
- (uint32_t) accessRights {
  return _builderResult.accessRights;
}
- (CMsgDOTABetaParticipation_Builder*) setAccessRights:(uint32_t) value {
  _builderResult.hasAccessRights = YES;
  _builderResult.accessRights = value;
  return self;
}
- (CMsgDOTABetaParticipation_Builder*) clearAccessRights {
  _builderResult.hasAccessRights = NO;
  _builderResult.accessRights = 0;
  return self;
}
- (BOOL) hasBetaJoinTime {
  return _builderResult.hasBetaJoinTime;
}
- (uint32_t) betaJoinTime {
  return _builderResult.betaJoinTime;
}
- (CMsgDOTABetaParticipation_Builder*) setBetaJoinTime:(uint32_t) value {
  _builderResult.hasBetaJoinTime = YES;
  _builderResult.betaJoinTime = value;
  return self;
}
- (CMsgDOTABetaParticipation_Builder*) clearBetaJoinTime {
  _builderResult.hasBetaJoinTime = NO;
  _builderResult.betaJoinTime = 0;
  return self;
}
@end

@interface CMsgDOTAGenericResult ()
@property uint32_t eresult;
@end

@implementation CMsgDOTAGenericResult

- (BOOL) hasEresult {
  return !!hasEresult_;
}
- (void) setHasEresult:(BOOL) value_ {
  hasEresult_ = !!value_;
}
@synthesize eresult;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.eresult = 2;
  }
  return self;
}
static CMsgDOTAGenericResult* defaultCMsgDOTAGenericResultInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAGenericResult class]) {
    defaultCMsgDOTAGenericResultInstance = [[CMsgDOTAGenericResult alloc] init];
  }
}
+ (CMsgDOTAGenericResult*) defaultInstance {
  return defaultCMsgDOTAGenericResultInstance;
}
- (CMsgDOTAGenericResult*) defaultInstance {
  return defaultCMsgDOTAGenericResultInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEresult) {
    [output writeUInt32:1 value:self.eresult];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEresult) {
    size_ += computeUInt32Size(1, self.eresult);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAGenericResult*) parseFromData:(NSData*) data {
  return (CMsgDOTAGenericResult*)[[[CMsgDOTAGenericResult builder] mergeFromData:data] build];
}
+ (CMsgDOTAGenericResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGenericResult*)[[[CMsgDOTAGenericResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGenericResult*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAGenericResult*)[[[CMsgDOTAGenericResult builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAGenericResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGenericResult*)[[[CMsgDOTAGenericResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGenericResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAGenericResult*)[[[CMsgDOTAGenericResult builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAGenericResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGenericResult*)[[[CMsgDOTAGenericResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGenericResult_Builder*) builder {
  return [[[CMsgDOTAGenericResult_Builder alloc] init] autorelease];
}
+ (CMsgDOTAGenericResult_Builder*) builderWithPrototype:(CMsgDOTAGenericResult*) prototype {
  return [[CMsgDOTAGenericResult builder] mergeFrom:prototype];
}
- (CMsgDOTAGenericResult_Builder*) builder {
  return [CMsgDOTAGenericResult builder];
}
- (CMsgDOTAGenericResult_Builder*) toBuilder {
  return [CMsgDOTAGenericResult builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEresult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eresult", [NSNumber numberWithInt:self.eresult]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAGenericResult class]]) {
    return NO;
  }
  CMsgDOTAGenericResult *otherMessage = other;
  return
      self.hasEresult == otherMessage.hasEresult &&
      (!self.hasEresult || self.eresult == otherMessage.eresult) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasEresult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eresult] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAGenericResult_Builder()
@property (retain) CMsgDOTAGenericResult* _builderResult;
@end

@implementation CMsgDOTAGenericResult_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAGenericResult alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAGenericResult_Builder*) clear {
  _builderResult = [[[CMsgDOTAGenericResult alloc] init] autorelease];
  return self;
}
- (CMsgDOTAGenericResult_Builder*) clone {
  return [CMsgDOTAGenericResult builderWithPrototype:_builderResult];
}
- (CMsgDOTAGenericResult*) defaultInstance {
  return [CMsgDOTAGenericResult defaultInstance];
}
- (CMsgDOTAGenericResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAGenericResult*) buildPartial {
  CMsgDOTAGenericResult* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAGenericResult_Builder*) mergeFrom:(CMsgDOTAGenericResult*) other {
  if (other == [CMsgDOTAGenericResult defaultInstance]) {
    return self;
  }
  if (other.hasEresult) {
    [self setEresult:other.eresult];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAGenericResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAGenericResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEresult:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasEresult {
  return _builderResult.hasEresult;
}
- (uint32_t) eresult {
  return _builderResult.eresult;
}
- (CMsgDOTAGenericResult_Builder*) setEresult:(uint32_t) value {
  _builderResult.hasEresult = YES;
  _builderResult.eresult = value;
  return self;
}
- (CMsgDOTAGenericResult_Builder*) clearEresult {
  _builderResult.hasEresult = NO;
  _builderResult.eresult = 2;
  return self;
}
@end

@interface CMsgDOTABroadcastNotification ()
@property (retain) NSString* message;
@end

@implementation CMsgDOTABroadcastNotification

- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value_ {
  hasMessage_ = !!value_;
}
@synthesize message;
- (void) dealloc {
  self.message = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.message = @"";
  }
  return self;
}
static CMsgDOTABroadcastNotification* defaultCMsgDOTABroadcastNotificationInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTABroadcastNotification class]) {
    defaultCMsgDOTABroadcastNotificationInstance = [[CMsgDOTABroadcastNotification alloc] init];
  }
}
+ (CMsgDOTABroadcastNotification*) defaultInstance {
  return defaultCMsgDOTABroadcastNotificationInstance;
}
- (CMsgDOTABroadcastNotification*) defaultInstance {
  return defaultCMsgDOTABroadcastNotificationInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMessage) {
    [output writeString:1 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMessage) {
    size_ += computeStringSize(1, self.message);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTABroadcastNotification*) parseFromData:(NSData*) data {
  return (CMsgDOTABroadcastNotification*)[[[CMsgDOTABroadcastNotification builder] mergeFromData:data] build];
}
+ (CMsgDOTABroadcastNotification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTABroadcastNotification*)[[[CMsgDOTABroadcastNotification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTABroadcastNotification*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTABroadcastNotification*)[[[CMsgDOTABroadcastNotification builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTABroadcastNotification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTABroadcastNotification*)[[[CMsgDOTABroadcastNotification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTABroadcastNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTABroadcastNotification*)[[[CMsgDOTABroadcastNotification builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTABroadcastNotification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTABroadcastNotification*)[[[CMsgDOTABroadcastNotification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTABroadcastNotification_Builder*) builder {
  return [[[CMsgDOTABroadcastNotification_Builder alloc] init] autorelease];
}
+ (CMsgDOTABroadcastNotification_Builder*) builderWithPrototype:(CMsgDOTABroadcastNotification*) prototype {
  return [[CMsgDOTABroadcastNotification builder] mergeFrom:prototype];
}
- (CMsgDOTABroadcastNotification_Builder*) builder {
  return [CMsgDOTABroadcastNotification builder];
}
- (CMsgDOTABroadcastNotification_Builder*) toBuilder {
  return [CMsgDOTABroadcastNotification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTABroadcastNotification class]]) {
    return NO;
  }
  CMsgDOTABroadcastNotification *otherMessage = other;
  return
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTABroadcastNotification_Builder()
@property (retain) CMsgDOTABroadcastNotification* _builderResult;
@end

@implementation CMsgDOTABroadcastNotification_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTABroadcastNotification alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTABroadcastNotification_Builder*) clear {
  _builderResult = [[[CMsgDOTABroadcastNotification alloc] init] autorelease];
  return self;
}
- (CMsgDOTABroadcastNotification_Builder*) clone {
  return [CMsgDOTABroadcastNotification builderWithPrototype:_builderResult];
}
- (CMsgDOTABroadcastNotification*) defaultInstance {
  return [CMsgDOTABroadcastNotification defaultInstance];
}
- (CMsgDOTABroadcastNotification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTABroadcastNotification*) buildPartial {
  CMsgDOTABroadcastNotification* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTABroadcastNotification_Builder*) mergeFrom:(CMsgDOTABroadcastNotification*) other {
  if (other == [CMsgDOTABroadcastNotification defaultInstance]) {
    return self;
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTABroadcastNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTABroadcastNotification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMessage {
  return _builderResult.hasMessage;
}
- (NSString*) message {
  return _builderResult.message;
}
- (CMsgDOTABroadcastNotification_Builder*) setMessage:(NSString*) value {
  _builderResult.hasMessage = YES;
  _builderResult.message = value;
  return self;
}
- (CMsgDOTABroadcastNotification_Builder*) clearMessage {
  _builderResult.hasMessage = NO;
  _builderResult.message = @"";
  return self;
}
@end

@interface CMsgDOTALiveScoreboardUpdate ()
@property uint32_t tournamentId;
@property uint32_t tournamentGameId;
@property Float32 duration;
@property int32_t hltvDelay;
@property (retain) CMsgDOTALiveScoreboardUpdate_Team* teamGood;
@property (retain) CMsgDOTALiveScoreboardUpdate_Team* teamBad;
@property uint32_t roshanRespawnTimer;
@end

@implementation CMsgDOTALiveScoreboardUpdate

- (BOOL) hasTournamentId {
  return !!hasTournamentId_;
}
- (void) setHasTournamentId:(BOOL) value_ {
  hasTournamentId_ = !!value_;
}
@synthesize tournamentId;
- (BOOL) hasTournamentGameId {
  return !!hasTournamentGameId_;
}
- (void) setHasTournamentGameId:(BOOL) value_ {
  hasTournamentGameId_ = !!value_;
}
@synthesize tournamentGameId;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value_ {
  hasDuration_ = !!value_;
}
@synthesize duration;
- (BOOL) hasHltvDelay {
  return !!hasHltvDelay_;
}
- (void) setHasHltvDelay:(BOOL) value_ {
  hasHltvDelay_ = !!value_;
}
@synthesize hltvDelay;
- (BOOL) hasTeamGood {
  return !!hasTeamGood_;
}
- (void) setHasTeamGood:(BOOL) value_ {
  hasTeamGood_ = !!value_;
}
@synthesize teamGood;
- (BOOL) hasTeamBad {
  return !!hasTeamBad_;
}
- (void) setHasTeamBad:(BOOL) value_ {
  hasTeamBad_ = !!value_;
}
@synthesize teamBad;
- (BOOL) hasRoshanRespawnTimer {
  return !!hasRoshanRespawnTimer_;
}
- (void) setHasRoshanRespawnTimer:(BOOL) value_ {
  hasRoshanRespawnTimer_ = !!value_;
}
@synthesize roshanRespawnTimer;
- (void) dealloc {
  self.teamGood = nil;
  self.teamBad = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.tournamentId = 0;
    self.tournamentGameId = 0;
    self.duration = 0;
    self.hltvDelay = 0;
    self.teamGood = [CMsgDOTALiveScoreboardUpdate_Team defaultInstance];
    self.teamBad = [CMsgDOTALiveScoreboardUpdate_Team defaultInstance];
    self.roshanRespawnTimer = 0;
  }
  return self;
}
static CMsgDOTALiveScoreboardUpdate* defaultCMsgDOTALiveScoreboardUpdateInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTALiveScoreboardUpdate class]) {
    defaultCMsgDOTALiveScoreboardUpdateInstance = [[CMsgDOTALiveScoreboardUpdate alloc] init];
  }
}
+ (CMsgDOTALiveScoreboardUpdate*) defaultInstance {
  return defaultCMsgDOTALiveScoreboardUpdateInstance;
}
- (CMsgDOTALiveScoreboardUpdate*) defaultInstance {
  return defaultCMsgDOTALiveScoreboardUpdateInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTournamentId) {
    [output writeUInt32:1 value:self.tournamentId];
  }
  if (self.hasTournamentGameId) {
    [output writeUInt32:2 value:self.tournamentGameId];
  }
  if (self.hasDuration) {
    [output writeFloat:3 value:self.duration];
  }
  if (self.hasHltvDelay) {
    [output writeInt32:4 value:self.hltvDelay];
  }
  if (self.hasTeamGood) {
    [output writeMessage:5 value:self.teamGood];
  }
  if (self.hasTeamBad) {
    [output writeMessage:6 value:self.teamBad];
  }
  if (self.hasRoshanRespawnTimer) {
    [output writeUInt32:7 value:self.roshanRespawnTimer];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTournamentId) {
    size_ += computeUInt32Size(1, self.tournamentId);
  }
  if (self.hasTournamentGameId) {
    size_ += computeUInt32Size(2, self.tournamentGameId);
  }
  if (self.hasDuration) {
    size_ += computeFloatSize(3, self.duration);
  }
  if (self.hasHltvDelay) {
    size_ += computeInt32Size(4, self.hltvDelay);
  }
  if (self.hasTeamGood) {
    size_ += computeMessageSize(5, self.teamGood);
  }
  if (self.hasTeamBad) {
    size_ += computeMessageSize(6, self.teamBad);
  }
  if (self.hasRoshanRespawnTimer) {
    size_ += computeUInt32Size(7, self.roshanRespawnTimer);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTALiveScoreboardUpdate*) parseFromData:(NSData*) data {
  return (CMsgDOTALiveScoreboardUpdate*)[[[CMsgDOTALiveScoreboardUpdate builder] mergeFromData:data] build];
}
+ (CMsgDOTALiveScoreboardUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALiveScoreboardUpdate*)[[[CMsgDOTALiveScoreboardUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALiveScoreboardUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTALiveScoreboardUpdate*)[[[CMsgDOTALiveScoreboardUpdate builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTALiveScoreboardUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALiveScoreboardUpdate*)[[[CMsgDOTALiveScoreboardUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALiveScoreboardUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTALiveScoreboardUpdate*)[[[CMsgDOTALiveScoreboardUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTALiveScoreboardUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALiveScoreboardUpdate*)[[[CMsgDOTALiveScoreboardUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Builder*) builder {
  return [[[CMsgDOTALiveScoreboardUpdate_Builder alloc] init] autorelease];
}
+ (CMsgDOTALiveScoreboardUpdate_Builder*) builderWithPrototype:(CMsgDOTALiveScoreboardUpdate*) prototype {
  return [[CMsgDOTALiveScoreboardUpdate builder] mergeFrom:prototype];
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) builder {
  return [CMsgDOTALiveScoreboardUpdate builder];
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) toBuilder {
  return [CMsgDOTALiveScoreboardUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTournamentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentId", [NSNumber numberWithInt:self.tournamentId]];
  }
  if (self.hasTournamentGameId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentGameId", [NSNumber numberWithInt:self.tournamentGameId]];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithFloat:self.duration]];
  }
  if (self.hasHltvDelay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hltvDelay", [NSNumber numberWithInt:self.hltvDelay]];
  }
  if (self.hasTeamGood) {
    [output appendFormat:@"%@%@ {\n", indent, @"teamGood"];
    [self.teamGood writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTeamBad) {
    [output appendFormat:@"%@%@ {\n", indent, @"teamBad"];
    [self.teamBad writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRoshanRespawnTimer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roshanRespawnTimer", [NSNumber numberWithInt:self.roshanRespawnTimer]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTALiveScoreboardUpdate class]]) {
    return NO;
  }
  CMsgDOTALiveScoreboardUpdate *otherMessage = other;
  return
      self.hasTournamentId == otherMessage.hasTournamentId &&
      (!self.hasTournamentId || self.tournamentId == otherMessage.tournamentId) &&
      self.hasTournamentGameId == otherMessage.hasTournamentGameId &&
      (!self.hasTournamentGameId || self.tournamentGameId == otherMessage.tournamentGameId) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      self.hasHltvDelay == otherMessage.hasHltvDelay &&
      (!self.hasHltvDelay || self.hltvDelay == otherMessage.hltvDelay) &&
      self.hasTeamGood == otherMessage.hasTeamGood &&
      (!self.hasTeamGood || [self.teamGood isEqual:otherMessage.teamGood]) &&
      self.hasTeamBad == otherMessage.hasTeamBad &&
      (!self.hasTeamBad || [self.teamBad isEqual:otherMessage.teamBad]) &&
      self.hasRoshanRespawnTimer == otherMessage.hasRoshanRespawnTimer &&
      (!self.hasRoshanRespawnTimer || self.roshanRespawnTimer == otherMessage.roshanRespawnTimer) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTournamentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentId] hash];
  }
  if (self.hasTournamentGameId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tournamentGameId] hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.duration] hash];
  }
  if (self.hasHltvDelay) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.hltvDelay] hash];
  }
  if (self.hasTeamGood) {
    hashCode = hashCode * 31 + [self.teamGood hash];
  }
  if (self.hasTeamBad) {
    hashCode = hashCode * 31 + [self.teamBad hash];
  }
  if (self.hasRoshanRespawnTimer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.roshanRespawnTimer] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTALiveScoreboardUpdate_Team ()
@property (retain) PBAppendableArray * playersArray;
@property uint32_t score;
@end

@implementation CMsgDOTALiveScoreboardUpdate_Team

@synthesize playersArray;
@dynamic players;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) value_ {
  hasScore_ = !!value_;
}
@synthesize score;
- (void) dealloc {
  self.playersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.score = 0;
  }
  return self;
}
static CMsgDOTALiveScoreboardUpdate_Team* defaultCMsgDOTALiveScoreboardUpdate_TeamInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTALiveScoreboardUpdate_Team class]) {
    defaultCMsgDOTALiveScoreboardUpdate_TeamInstance = [[CMsgDOTALiveScoreboardUpdate_Team alloc] init];
  }
}
+ (CMsgDOTALiveScoreboardUpdate_Team*) defaultInstance {
  return defaultCMsgDOTALiveScoreboardUpdate_TeamInstance;
}
- (CMsgDOTALiveScoreboardUpdate_Team*) defaultInstance {
  return defaultCMsgDOTALiveScoreboardUpdate_TeamInstance;
}
- (PBArray *)players {
  return playersArray;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player*)playersAtIndex:(NSUInteger)index {
  return [playersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgDOTALiveScoreboardUpdate_Team_Player *element in self.playersArray) {
    [output writeMessage:1 value:element];
  }
  if (self.hasScore) {
    [output writeUInt32:2 value:self.score];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgDOTALiveScoreboardUpdate_Team_Player *element in self.playersArray) {
    size_ += computeMessageSize(1, element);
  }
  if (self.hasScore) {
    size_ += computeUInt32Size(2, self.score);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTALiveScoreboardUpdate_Team*) parseFromData:(NSData*) data {
  return (CMsgDOTALiveScoreboardUpdate_Team*)[[[CMsgDOTALiveScoreboardUpdate_Team builder] mergeFromData:data] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALiveScoreboardUpdate_Team*)[[[CMsgDOTALiveScoreboardUpdate_Team builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTALiveScoreboardUpdate_Team*)[[[CMsgDOTALiveScoreboardUpdate_Team builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALiveScoreboardUpdate_Team*)[[[CMsgDOTALiveScoreboardUpdate_Team builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTALiveScoreboardUpdate_Team*)[[[CMsgDOTALiveScoreboardUpdate_Team builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALiveScoreboardUpdate_Team*)[[[CMsgDOTALiveScoreboardUpdate_Team builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Builder*) builder {
  return [[[CMsgDOTALiveScoreboardUpdate_Team_Builder alloc] init] autorelease];
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Builder*) builderWithPrototype:(CMsgDOTALiveScoreboardUpdate_Team*) prototype {
  return [[CMsgDOTALiveScoreboardUpdate_Team builder] mergeFrom:prototype];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder*) builder {
  return [CMsgDOTALiveScoreboardUpdate_Team builder];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder*) toBuilder {
  return [CMsgDOTALiveScoreboardUpdate_Team builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgDOTALiveScoreboardUpdate_Team_Player* element in self.playersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"players"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithInt:self.score]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTALiveScoreboardUpdate_Team class]]) {
    return NO;
  }
  CMsgDOTALiveScoreboardUpdate_Team *otherMessage = other;
  return
      [self.playersArray isEqualToArray:otherMessage.playersArray] &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgDOTALiveScoreboardUpdate_Team_Player* element in self.playersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.score] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTALiveScoreboardUpdate_Team_Player ()
@property uint32_t playerSlot;
@property (retain) NSString* playerName;
@property (retain) NSString* heroName;
@property uint32_t heroId;
@property uint32_t kills;
@property uint32_t deaths;
@property uint32_t assists;
@property uint32_t lastHits;
@property uint32_t denies;
@property uint32_t gold;
@property uint32_t level;
@property Float32 goldPerMin;
@property Float32 xpPerMin;
@property CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState ultimate_state;
@property Float32 ultimateCooldown;
@property uint32_t item0;
@property uint32_t item1;
@property uint32_t item2;
@property uint32_t item3;
@property uint32_t item4;
@property uint32_t item5;
@property uint32_t respawnTimer;
@end

@implementation CMsgDOTALiveScoreboardUpdate_Team_Player

- (BOOL) hasPlayerSlot {
  return !!hasPlayerSlot_;
}
- (void) setHasPlayerSlot:(BOOL) value_ {
  hasPlayerSlot_ = !!value_;
}
@synthesize playerSlot;
- (BOOL) hasPlayerName {
  return !!hasPlayerName_;
}
- (void) setHasPlayerName:(BOOL) value_ {
  hasPlayerName_ = !!value_;
}
@synthesize playerName;
- (BOOL) hasHeroName {
  return !!hasHeroName_;
}
- (void) setHasHeroName:(BOOL) value_ {
  hasHeroName_ = !!value_;
}
@synthesize heroName;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (BOOL) hasKills {
  return !!hasKills_;
}
- (void) setHasKills:(BOOL) value_ {
  hasKills_ = !!value_;
}
@synthesize kills;
- (BOOL) hasDeaths {
  return !!hasDeaths_;
}
- (void) setHasDeaths:(BOOL) value_ {
  hasDeaths_ = !!value_;
}
@synthesize deaths;
- (BOOL) hasAssists {
  return !!hasAssists_;
}
- (void) setHasAssists:(BOOL) value_ {
  hasAssists_ = !!value_;
}
@synthesize assists;
- (BOOL) hasLastHits {
  return !!hasLastHits_;
}
- (void) setHasLastHits:(BOOL) value_ {
  hasLastHits_ = !!value_;
}
@synthesize lastHits;
- (BOOL) hasDenies {
  return !!hasDenies_;
}
- (void) setHasDenies:(BOOL) value_ {
  hasDenies_ = !!value_;
}
@synthesize denies;
- (BOOL) hasGold {
  return !!hasGold_;
}
- (void) setHasGold:(BOOL) value_ {
  hasGold_ = !!value_;
}
@synthesize gold;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasGoldPerMin {
  return !!hasGoldPerMin_;
}
- (void) setHasGoldPerMin:(BOOL) value_ {
  hasGoldPerMin_ = !!value_;
}
@synthesize goldPerMin;
- (BOOL) hasXpPerMin {
  return !!hasXpPerMin_;
}
- (void) setHasXpPerMin:(BOOL) value_ {
  hasXpPerMin_ = !!value_;
}
@synthesize xpPerMin;
- (BOOL) hasultimate_state {
  return !!hasultimate_state_;
}
- (void) setHasultimate_state:(BOOL) value_ {
  hasultimate_state_ = !!value_;
}
@synthesize ultimate_state;
- (BOOL) hasUltimateCooldown {
  return !!hasUltimateCooldown_;
}
- (void) setHasUltimateCooldown:(BOOL) value_ {
  hasUltimateCooldown_ = !!value_;
}
@synthesize ultimateCooldown;
- (BOOL) hasItem0 {
  return !!hasItem0_;
}
- (void) setHasItem0:(BOOL) value_ {
  hasItem0_ = !!value_;
}
@synthesize item0;
- (BOOL) hasItem1 {
  return !!hasItem1_;
}
- (void) setHasItem1:(BOOL) value_ {
  hasItem1_ = !!value_;
}
@synthesize item1;
- (BOOL) hasItem2 {
  return !!hasItem2_;
}
- (void) setHasItem2:(BOOL) value_ {
  hasItem2_ = !!value_;
}
@synthesize item2;
- (BOOL) hasItem3 {
  return !!hasItem3_;
}
- (void) setHasItem3:(BOOL) value_ {
  hasItem3_ = !!value_;
}
@synthesize item3;
- (BOOL) hasItem4 {
  return !!hasItem4_;
}
- (void) setHasItem4:(BOOL) value_ {
  hasItem4_ = !!value_;
}
@synthesize item4;
- (BOOL) hasItem5 {
  return !!hasItem5_;
}
- (void) setHasItem5:(BOOL) value_ {
  hasItem5_ = !!value_;
}
@synthesize item5;
- (BOOL) hasRespawnTimer {
  return !!hasRespawnTimer_;
}
- (void) setHasRespawnTimer:(BOOL) value_ {
  hasRespawnTimer_ = !!value_;
}
@synthesize respawnTimer;
- (void) dealloc {
  self.playerName = nil;
  self.heroName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.playerSlot = 0;
    self.playerName = @"";
    self.heroName = @"";
    self.heroId = 0;
    self.kills = 0;
    self.deaths = 0;
    self.assists = 0;
    self.lastHits = 0;
    self.denies = 0;
    self.gold = 0;
    self.level = 0;
    self.goldPerMin = 0;
    self.xpPerMin = 0;
    self.ultimate_state = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStatek_EDOTAUltimateStateNotLearned;
    self.ultimateCooldown = 0;
    self.item0 = 0;
    self.item1 = 0;
    self.item2 = 0;
    self.item3 = 0;
    self.item4 = 0;
    self.item5 = 0;
    self.respawnTimer = 0;
  }
  return self;
}
static CMsgDOTALiveScoreboardUpdate_Team_Player* defaultCMsgDOTALiveScoreboardUpdate_Team_PlayerInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTALiveScoreboardUpdate_Team_Player class]) {
    defaultCMsgDOTALiveScoreboardUpdate_Team_PlayerInstance = [[CMsgDOTALiveScoreboardUpdate_Team_Player alloc] init];
  }
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Player*) defaultInstance {
  return defaultCMsgDOTALiveScoreboardUpdate_Team_PlayerInstance;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player*) defaultInstance {
  return defaultCMsgDOTALiveScoreboardUpdate_Team_PlayerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPlayerSlot) {
    [output writeUInt32:1 value:self.playerSlot];
  }
  if (self.hasPlayerName) {
    [output writeString:2 value:self.playerName];
  }
  if (self.hasHeroName) {
    [output writeString:3 value:self.heroName];
  }
  if (self.hasHeroId) {
    [output writeUInt32:4 value:self.heroId];
  }
  if (self.hasKills) {
    [output writeUInt32:5 value:self.kills];
  }
  if (self.hasDeaths) {
    [output writeUInt32:6 value:self.deaths];
  }
  if (self.hasAssists) {
    [output writeUInt32:7 value:self.assists];
  }
  if (self.hasLastHits) {
    [output writeUInt32:8 value:self.lastHits];
  }
  if (self.hasDenies) {
    [output writeUInt32:9 value:self.denies];
  }
  if (self.hasGold) {
    [output writeUInt32:10 value:self.gold];
  }
  if (self.hasLevel) {
    [output writeUInt32:11 value:self.level];
  }
  if (self.hasGoldPerMin) {
    [output writeFloat:12 value:self.goldPerMin];
  }
  if (self.hasXpPerMin) {
    [output writeFloat:13 value:self.xpPerMin];
  }
  if (self.hasultimate_state) {
    [output writeEnum:14 value:self.ultimate_state];
  }
  if (self.hasUltimateCooldown) {
    [output writeFloat:15 value:self.ultimateCooldown];
  }
  if (self.hasItem0) {
    [output writeUInt32:16 value:self.item0];
  }
  if (self.hasItem1) {
    [output writeUInt32:17 value:self.item1];
  }
  if (self.hasItem2) {
    [output writeUInt32:18 value:self.item2];
  }
  if (self.hasItem3) {
    [output writeUInt32:19 value:self.item3];
  }
  if (self.hasItem4) {
    [output writeUInt32:20 value:self.item4];
  }
  if (self.hasItem5) {
    [output writeUInt32:21 value:self.item5];
  }
  if (self.hasRespawnTimer) {
    [output writeUInt32:22 value:self.respawnTimer];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPlayerSlot) {
    size_ += computeUInt32Size(1, self.playerSlot);
  }
  if (self.hasPlayerName) {
    size_ += computeStringSize(2, self.playerName);
  }
  if (self.hasHeroName) {
    size_ += computeStringSize(3, self.heroName);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(4, self.heroId);
  }
  if (self.hasKills) {
    size_ += computeUInt32Size(5, self.kills);
  }
  if (self.hasDeaths) {
    size_ += computeUInt32Size(6, self.deaths);
  }
  if (self.hasAssists) {
    size_ += computeUInt32Size(7, self.assists);
  }
  if (self.hasLastHits) {
    size_ += computeUInt32Size(8, self.lastHits);
  }
  if (self.hasDenies) {
    size_ += computeUInt32Size(9, self.denies);
  }
  if (self.hasGold) {
    size_ += computeUInt32Size(10, self.gold);
  }
  if (self.hasLevel) {
    size_ += computeUInt32Size(11, self.level);
  }
  if (self.hasGoldPerMin) {
    size_ += computeFloatSize(12, self.goldPerMin);
  }
  if (self.hasXpPerMin) {
    size_ += computeFloatSize(13, self.xpPerMin);
  }
  if (self.hasultimate_state) {
    size_ += computeEnumSize(14, self.ultimate_state);
  }
  if (self.hasUltimateCooldown) {
    size_ += computeFloatSize(15, self.ultimateCooldown);
  }
  if (self.hasItem0) {
    size_ += computeUInt32Size(16, self.item0);
  }
  if (self.hasItem1) {
    size_ += computeUInt32Size(17, self.item1);
  }
  if (self.hasItem2) {
    size_ += computeUInt32Size(18, self.item2);
  }
  if (self.hasItem3) {
    size_ += computeUInt32Size(19, self.item3);
  }
  if (self.hasItem4) {
    size_ += computeUInt32Size(20, self.item4);
  }
  if (self.hasItem5) {
    size_ += computeUInt32Size(21, self.item5);
  }
  if (self.hasRespawnTimer) {
    size_ += computeUInt32Size(22, self.respawnTimer);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Player*) parseFromData:(NSData*) data {
  return (CMsgDOTALiveScoreboardUpdate_Team_Player*)[[[CMsgDOTALiveScoreboardUpdate_Team_Player builder] mergeFromData:data] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Player*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALiveScoreboardUpdate_Team_Player*)[[[CMsgDOTALiveScoreboardUpdate_Team_Player builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Player*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTALiveScoreboardUpdate_Team_Player*)[[[CMsgDOTALiveScoreboardUpdate_Team_Player builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Player*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALiveScoreboardUpdate_Team_Player*)[[[CMsgDOTALiveScoreboardUpdate_Team_Player builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTALiveScoreboardUpdate_Team_Player*)[[[CMsgDOTALiveScoreboardUpdate_Team_Player builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALiveScoreboardUpdate_Team_Player*)[[[CMsgDOTALiveScoreboardUpdate_Team_Player builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) builder {
  return [[[CMsgDOTALiveScoreboardUpdate_Team_Player_Builder alloc] init] autorelease];
}
+ (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) builderWithPrototype:(CMsgDOTALiveScoreboardUpdate_Team_Player*) prototype {
  return [[CMsgDOTALiveScoreboardUpdate_Team_Player builder] mergeFrom:prototype];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) builder {
  return [CMsgDOTALiveScoreboardUpdate_Team_Player builder];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) toBuilder {
  return [CMsgDOTALiveScoreboardUpdate_Team_Player builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPlayerSlot) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerSlot", [NSNumber numberWithInt:self.playerSlot]];
  }
  if (self.hasPlayerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerName", self.playerName];
  }
  if (self.hasHeroName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroName", self.heroName];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  if (self.hasKills) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kills", [NSNumber numberWithInt:self.kills]];
  }
  if (self.hasDeaths) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deaths", [NSNumber numberWithInt:self.deaths]];
  }
  if (self.hasAssists) {
    [output appendFormat:@"%@%@: %@\n", indent, @"assists", [NSNumber numberWithInt:self.assists]];
  }
  if (self.hasLastHits) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastHits", [NSNumber numberWithInt:self.lastHits]];
  }
  if (self.hasDenies) {
    [output appendFormat:@"%@%@: %@\n", indent, @"denies", [NSNumber numberWithInt:self.denies]];
  }
  if (self.hasGold) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gold", [NSNumber numberWithInt:self.gold]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInt:self.level]];
  }
  if (self.hasGoldPerMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goldPerMin", [NSNumber numberWithFloat:self.goldPerMin]];
  }
  if (self.hasXpPerMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xpPerMin", [NSNumber numberWithFloat:self.xpPerMin]];
  }
  if (self.hasultimate_state) {
    [output appendFormat:@"%@%@: %d\n", indent, @"ultimate_state", self.ultimate_state];
  }
  if (self.hasUltimateCooldown) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ultimateCooldown", [NSNumber numberWithFloat:self.ultimateCooldown]];
  }
  if (self.hasItem0) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item0", [NSNumber numberWithInt:self.item0]];
  }
  if (self.hasItem1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item1", [NSNumber numberWithInt:self.item1]];
  }
  if (self.hasItem2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item2", [NSNumber numberWithInt:self.item2]];
  }
  if (self.hasItem3) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item3", [NSNumber numberWithInt:self.item3]];
  }
  if (self.hasItem4) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item4", [NSNumber numberWithInt:self.item4]];
  }
  if (self.hasItem5) {
    [output appendFormat:@"%@%@: %@\n", indent, @"item5", [NSNumber numberWithInt:self.item5]];
  }
  if (self.hasRespawnTimer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"respawnTimer", [NSNumber numberWithInt:self.respawnTimer]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTALiveScoreboardUpdate_Team_Player class]]) {
    return NO;
  }
  CMsgDOTALiveScoreboardUpdate_Team_Player *otherMessage = other;
  return
      self.hasPlayerSlot == otherMessage.hasPlayerSlot &&
      (!self.hasPlayerSlot || self.playerSlot == otherMessage.playerSlot) &&
      self.hasPlayerName == otherMessage.hasPlayerName &&
      (!self.hasPlayerName || [self.playerName isEqual:otherMessage.playerName]) &&
      self.hasHeroName == otherMessage.hasHeroName &&
      (!self.hasHeroName || [self.heroName isEqual:otherMessage.heroName]) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      self.hasKills == otherMessage.hasKills &&
      (!self.hasKills || self.kills == otherMessage.kills) &&
      self.hasDeaths == otherMessage.hasDeaths &&
      (!self.hasDeaths || self.deaths == otherMessage.deaths) &&
      self.hasAssists == otherMessage.hasAssists &&
      (!self.hasAssists || self.assists == otherMessage.assists) &&
      self.hasLastHits == otherMessage.hasLastHits &&
      (!self.hasLastHits || self.lastHits == otherMessage.lastHits) &&
      self.hasDenies == otherMessage.hasDenies &&
      (!self.hasDenies || self.denies == otherMessage.denies) &&
      self.hasGold == otherMessage.hasGold &&
      (!self.hasGold || self.gold == otherMessage.gold) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasGoldPerMin == otherMessage.hasGoldPerMin &&
      (!self.hasGoldPerMin || self.goldPerMin == otherMessage.goldPerMin) &&
      self.hasXpPerMin == otherMessage.hasXpPerMin &&
      (!self.hasXpPerMin || self.xpPerMin == otherMessage.xpPerMin) &&
      self.hasultimate_state == otherMessage.hasultimate_state &&
      (!self.hasultimate_state || self.ultimate_state == otherMessage.ultimate_state) &&
      self.hasUltimateCooldown == otherMessage.hasUltimateCooldown &&
      (!self.hasUltimateCooldown || self.ultimateCooldown == otherMessage.ultimateCooldown) &&
      self.hasItem0 == otherMessage.hasItem0 &&
      (!self.hasItem0 || self.item0 == otherMessage.item0) &&
      self.hasItem1 == otherMessage.hasItem1 &&
      (!self.hasItem1 || self.item1 == otherMessage.item1) &&
      self.hasItem2 == otherMessage.hasItem2 &&
      (!self.hasItem2 || self.item2 == otherMessage.item2) &&
      self.hasItem3 == otherMessage.hasItem3 &&
      (!self.hasItem3 || self.item3 == otherMessage.item3) &&
      self.hasItem4 == otherMessage.hasItem4 &&
      (!self.hasItem4 || self.item4 == otherMessage.item4) &&
      self.hasItem5 == otherMessage.hasItem5 &&
      (!self.hasItem5 || self.item5 == otherMessage.item5) &&
      self.hasRespawnTimer == otherMessage.hasRespawnTimer &&
      (!self.hasRespawnTimer || self.respawnTimer == otherMessage.respawnTimer) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPlayerSlot) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.playerSlot] hash];
  }
  if (self.hasPlayerName) {
    hashCode = hashCode * 31 + [self.playerName hash];
  }
  if (self.hasHeroName) {
    hashCode = hashCode * 31 + [self.heroName hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  if (self.hasKills) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.kills] hash];
  }
  if (self.hasDeaths) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.deaths] hash];
  }
  if (self.hasAssists) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.assists] hash];
  }
  if (self.hasLastHits) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lastHits] hash];
  }
  if (self.hasDenies) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.denies] hash];
  }
  if (self.hasGold) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gold] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.level] hash];
  }
  if (self.hasGoldPerMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.goldPerMin] hash];
  }
  if (self.hasXpPerMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.xpPerMin] hash];
  }
  if (self.hasultimate_state) {
    hashCode = hashCode * 31 + self.ultimate_state;
  }
  if (self.hasUltimateCooldown) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.ultimateCooldown] hash];
  }
  if (self.hasItem0) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item0] hash];
  }
  if (self.hasItem1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item1] hash];
  }
  if (self.hasItem2) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item2] hash];
  }
  if (self.hasItem3) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item3] hash];
  }
  if (self.hasItem4) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item4] hash];
  }
  if (self.hasItem5) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.item5] hash];
  }
  if (self.hasRespawnTimer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.respawnTimer] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStateIsValidValue(CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value) {
  switch (value) {
    case CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStatek_EDOTAUltimateStateNotLearned:
    case CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStatek_EDOTAUltimateStateCooldown:
    case CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStatek_EDOTAUltimateStateNeedsMana:
    case CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStatek_EDOTAUltimateStateReady:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTALiveScoreboardUpdate_Team_Player_Builder()
@property (retain) CMsgDOTALiveScoreboardUpdate_Team_Player* _builderResult;
@end

@implementation CMsgDOTALiveScoreboardUpdate_Team_Player_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTALiveScoreboardUpdate_Team_Player alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clear {
  _builderResult = [[[CMsgDOTALiveScoreboardUpdate_Team_Player alloc] init] autorelease];
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clone {
  return [CMsgDOTALiveScoreboardUpdate_Team_Player builderWithPrototype:_builderResult];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player*) defaultInstance {
  return [CMsgDOTALiveScoreboardUpdate_Team_Player defaultInstance];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player*) buildPartial {
  CMsgDOTALiveScoreboardUpdate_Team_Player* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) mergeFrom:(CMsgDOTALiveScoreboardUpdate_Team_Player*) other {
  if (other == [CMsgDOTALiveScoreboardUpdate_Team_Player defaultInstance]) {
    return self;
  }
  if (other.hasPlayerSlot) {
    [self setPlayerSlot:other.playerSlot];
  }
  if (other.hasPlayerName) {
    [self setPlayerName:other.playerName];
  }
  if (other.hasHeroName) {
    [self setHeroName:other.heroName];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.hasKills) {
    [self setKills:other.kills];
  }
  if (other.hasDeaths) {
    [self setDeaths:other.deaths];
  }
  if (other.hasAssists) {
    [self setAssists:other.assists];
  }
  if (other.hasLastHits) {
    [self setLastHits:other.lastHits];
  }
  if (other.hasDenies) {
    [self setDenies:other.denies];
  }
  if (other.hasGold) {
    [self setGold:other.gold];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasGoldPerMin) {
    [self setGoldPerMin:other.goldPerMin];
  }
  if (other.hasXpPerMin) {
    [self setXpPerMin:other.xpPerMin];
  }
  if (other.hasultimate_state) {
    [self setultimate_state:other.ultimate_state];
  }
  if (other.hasUltimateCooldown) {
    [self setUltimateCooldown:other.ultimateCooldown];
  }
  if (other.hasItem0) {
    [self setItem0:other.item0];
  }
  if (other.hasItem1) {
    [self setItem1:other.item1];
  }
  if (other.hasItem2) {
    [self setItem2:other.item2];
  }
  if (other.hasItem3) {
    [self setItem3:other.item3];
  }
  if (other.hasItem4) {
    [self setItem4:other.item4];
  }
  if (other.hasItem5) {
    [self setItem5:other.item5];
  }
  if (other.hasRespawnTimer) {
    [self setRespawnTimer:other.respawnTimer];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPlayerSlot:[input readUInt32]];
        break;
      }
      case 18: {
        [self setPlayerName:[input readString]];
        break;
      }
      case 26: {
        [self setHeroName:[input readString]];
        break;
      }
      case 32: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 40: {
        [self setKills:[input readUInt32]];
        break;
      }
      case 48: {
        [self setDeaths:[input readUInt32]];
        break;
      }
      case 56: {
        [self setAssists:[input readUInt32]];
        break;
      }
      case 64: {
        [self setLastHits:[input readUInt32]];
        break;
      }
      case 72: {
        [self setDenies:[input readUInt32]];
        break;
      }
      case 80: {
        [self setGold:[input readUInt32]];
        break;
      }
      case 88: {
        [self setLevel:[input readUInt32]];
        break;
      }
      case 101: {
        [self setGoldPerMin:[input readFloat]];
        break;
      }
      case 109: {
        [self setXpPerMin:[input readFloat]];
        break;
      }
      case 112: {
        int32_t value = [input readEnum];
        if (CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStateIsValidValue(value)) {
          [self setultimate_state:value];
        } else {
          [unknownFields mergeVarintField:14 value:value];
        }
        break;
      }
      case 125: {
        [self setUltimateCooldown:[input readFloat]];
        break;
      }
      case 128: {
        [self setItem0:[input readUInt32]];
        break;
      }
      case 136: {
        [self setItem1:[input readUInt32]];
        break;
      }
      case 144: {
        [self setItem2:[input readUInt32]];
        break;
      }
      case 152: {
        [self setItem3:[input readUInt32]];
        break;
      }
      case 160: {
        [self setItem4:[input readUInt32]];
        break;
      }
      case 168: {
        [self setItem5:[input readUInt32]];
        break;
      }
      case 176: {
        [self setRespawnTimer:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPlayerSlot {
  return _builderResult.hasPlayerSlot;
}
- (uint32_t) playerSlot {
  return _builderResult.playerSlot;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setPlayerSlot:(uint32_t) value {
  _builderResult.hasPlayerSlot = YES;
  _builderResult.playerSlot = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearPlayerSlot {
  _builderResult.hasPlayerSlot = NO;
  _builderResult.playerSlot = 0;
  return self;
}
- (BOOL) hasPlayerName {
  return _builderResult.hasPlayerName;
}
- (NSString*) playerName {
  return _builderResult.playerName;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setPlayerName:(NSString*) value {
  _builderResult.hasPlayerName = YES;
  _builderResult.playerName = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearPlayerName {
  _builderResult.hasPlayerName = NO;
  _builderResult.playerName = @"";
  return self;
}
- (BOOL) hasHeroName {
  return _builderResult.hasHeroName;
}
- (NSString*) heroName {
  return _builderResult.heroName;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setHeroName:(NSString*) value {
  _builderResult.hasHeroName = YES;
  _builderResult.heroName = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearHeroName {
  _builderResult.hasHeroName = NO;
  _builderResult.heroName = @"";
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (BOOL) hasKills {
  return _builderResult.hasKills;
}
- (uint32_t) kills {
  return _builderResult.kills;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setKills:(uint32_t) value {
  _builderResult.hasKills = YES;
  _builderResult.kills = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearKills {
  _builderResult.hasKills = NO;
  _builderResult.kills = 0;
  return self;
}
- (BOOL) hasDeaths {
  return _builderResult.hasDeaths;
}
- (uint32_t) deaths {
  return _builderResult.deaths;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setDeaths:(uint32_t) value {
  _builderResult.hasDeaths = YES;
  _builderResult.deaths = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearDeaths {
  _builderResult.hasDeaths = NO;
  _builderResult.deaths = 0;
  return self;
}
- (BOOL) hasAssists {
  return _builderResult.hasAssists;
}
- (uint32_t) assists {
  return _builderResult.assists;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setAssists:(uint32_t) value {
  _builderResult.hasAssists = YES;
  _builderResult.assists = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearAssists {
  _builderResult.hasAssists = NO;
  _builderResult.assists = 0;
  return self;
}
- (BOOL) hasLastHits {
  return _builderResult.hasLastHits;
}
- (uint32_t) lastHits {
  return _builderResult.lastHits;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setLastHits:(uint32_t) value {
  _builderResult.hasLastHits = YES;
  _builderResult.lastHits = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearLastHits {
  _builderResult.hasLastHits = NO;
  _builderResult.lastHits = 0;
  return self;
}
- (BOOL) hasDenies {
  return _builderResult.hasDenies;
}
- (uint32_t) denies {
  return _builderResult.denies;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setDenies:(uint32_t) value {
  _builderResult.hasDenies = YES;
  _builderResult.denies = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearDenies {
  _builderResult.hasDenies = NO;
  _builderResult.denies = 0;
  return self;
}
- (BOOL) hasGold {
  return _builderResult.hasGold;
}
- (uint32_t) gold {
  return _builderResult.gold;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setGold:(uint32_t) value {
  _builderResult.hasGold = YES;
  _builderResult.gold = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearGold {
  _builderResult.hasGold = NO;
  _builderResult.gold = 0;
  return self;
}
- (BOOL) hasLevel {
  return _builderResult.hasLevel;
}
- (uint32_t) level {
  return _builderResult.level;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setLevel:(uint32_t) value {
  _builderResult.hasLevel = YES;
  _builderResult.level = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearLevel {
  _builderResult.hasLevel = NO;
  _builderResult.level = 0;
  return self;
}
- (BOOL) hasGoldPerMin {
  return _builderResult.hasGoldPerMin;
}
- (Float32) goldPerMin {
  return _builderResult.goldPerMin;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setGoldPerMin:(Float32) value {
  _builderResult.hasGoldPerMin = YES;
  _builderResult.goldPerMin = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearGoldPerMin {
  _builderResult.hasGoldPerMin = NO;
  _builderResult.goldPerMin = 0;
  return self;
}
- (BOOL) hasXpPerMin {
  return _builderResult.hasXpPerMin;
}
- (Float32) xpPerMin {
  return _builderResult.xpPerMin;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setXpPerMin:(Float32) value {
  _builderResult.hasXpPerMin = YES;
  _builderResult.xpPerMin = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearXpPerMin {
  _builderResult.hasXpPerMin = NO;
  _builderResult.xpPerMin = 0;
  return self;
}
- (BOOL) hasultimate_state {
  return _builderResult.hasultimate_state;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) ultimate_state {
  return _builderResult.ultimate_state;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setultimate_state:(CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState) value {
  _builderResult.hasultimate_state = YES;
  _builderResult.ultimate_state = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearultimate_state {
  _builderResult.hasultimate_state = NO;
  _builderResult.ultimate_state = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStatek_EDOTAUltimateStateNotLearned;
  return self;
}
- (BOOL) hasUltimateCooldown {
  return _builderResult.hasUltimateCooldown;
}
- (Float32) ultimateCooldown {
  return _builderResult.ultimateCooldown;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setUltimateCooldown:(Float32) value {
  _builderResult.hasUltimateCooldown = YES;
  _builderResult.ultimateCooldown = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearUltimateCooldown {
  _builderResult.hasUltimateCooldown = NO;
  _builderResult.ultimateCooldown = 0;
  return self;
}
- (BOOL) hasItem0 {
  return _builderResult.hasItem0;
}
- (uint32_t) item0 {
  return _builderResult.item0;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setItem0:(uint32_t) value {
  _builderResult.hasItem0 = YES;
  _builderResult.item0 = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearItem0 {
  _builderResult.hasItem0 = NO;
  _builderResult.item0 = 0;
  return self;
}
- (BOOL) hasItem1 {
  return _builderResult.hasItem1;
}
- (uint32_t) item1 {
  return _builderResult.item1;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setItem1:(uint32_t) value {
  _builderResult.hasItem1 = YES;
  _builderResult.item1 = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearItem1 {
  _builderResult.hasItem1 = NO;
  _builderResult.item1 = 0;
  return self;
}
- (BOOL) hasItem2 {
  return _builderResult.hasItem2;
}
- (uint32_t) item2 {
  return _builderResult.item2;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setItem2:(uint32_t) value {
  _builderResult.hasItem2 = YES;
  _builderResult.item2 = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearItem2 {
  _builderResult.hasItem2 = NO;
  _builderResult.item2 = 0;
  return self;
}
- (BOOL) hasItem3 {
  return _builderResult.hasItem3;
}
- (uint32_t) item3 {
  return _builderResult.item3;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setItem3:(uint32_t) value {
  _builderResult.hasItem3 = YES;
  _builderResult.item3 = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearItem3 {
  _builderResult.hasItem3 = NO;
  _builderResult.item3 = 0;
  return self;
}
- (BOOL) hasItem4 {
  return _builderResult.hasItem4;
}
- (uint32_t) item4 {
  return _builderResult.item4;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setItem4:(uint32_t) value {
  _builderResult.hasItem4 = YES;
  _builderResult.item4 = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearItem4 {
  _builderResult.hasItem4 = NO;
  _builderResult.item4 = 0;
  return self;
}
- (BOOL) hasItem5 {
  return _builderResult.hasItem5;
}
- (uint32_t) item5 {
  return _builderResult.item5;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setItem5:(uint32_t) value {
  _builderResult.hasItem5 = YES;
  _builderResult.item5 = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearItem5 {
  _builderResult.hasItem5 = NO;
  _builderResult.item5 = 0;
  return self;
}
- (BOOL) hasRespawnTimer {
  return _builderResult.hasRespawnTimer;
}
- (uint32_t) respawnTimer {
  return _builderResult.respawnTimer;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) setRespawnTimer:(uint32_t) value {
  _builderResult.hasRespawnTimer = YES;
  _builderResult.respawnTimer = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player_Builder*) clearRespawnTimer {
  _builderResult.hasRespawnTimer = NO;
  _builderResult.respawnTimer = 0;
  return self;
}
@end

@interface CMsgDOTALiveScoreboardUpdate_Team_Builder()
@property (retain) CMsgDOTALiveScoreboardUpdate_Team* _builderResult;
@end

@implementation CMsgDOTALiveScoreboardUpdate_Team_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTALiveScoreboardUpdate_Team alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder*) clear {
  _builderResult = [[[CMsgDOTALiveScoreboardUpdate_Team alloc] init] autorelease];
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder*) clone {
  return [CMsgDOTALiveScoreboardUpdate_Team builderWithPrototype:_builderResult];
}
- (CMsgDOTALiveScoreboardUpdate_Team*) defaultInstance {
  return [CMsgDOTALiveScoreboardUpdate_Team defaultInstance];
}
- (CMsgDOTALiveScoreboardUpdate_Team*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTALiveScoreboardUpdate_Team*) buildPartial {
  CMsgDOTALiveScoreboardUpdate_Team* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder*) mergeFrom:(CMsgDOTALiveScoreboardUpdate_Team*) other {
  if (other == [CMsgDOTALiveScoreboardUpdate_Team defaultInstance]) {
    return self;
  }
  if (other.playersArray.count > 0) {
    if (_builderResult.playersArray == nil) {
      _builderResult.playersArray = [[other.playersArray copyWithZone:[other.playersArray zone]] autorelease];
    } else {
      [_builderResult.playersArray appendArray:other.playersArray];
    }
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTALiveScoreboardUpdate_Team_Player_Builder* subBuilder = [CMsgDOTALiveScoreboardUpdate_Team_Player builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlayers:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setScore:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)players {
  return _builderResult.playersArray;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Player*)playersAtIndex:(NSUInteger)index {
  return [_builderResult playersAtIndex:index];
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder *)addPlayers:(CMsgDOTALiveScoreboardUpdate_Team_Player*)value {
  if (_builderResult.playersArray == nil) {
    _builderResult.playersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.playersArray addObject:value];
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder *)setPlayersArray:(NSArray *)array {
  _builderResult.playersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder *)setPlayersValues:(const CMsgDOTALiveScoreboardUpdate_Team_Player* *)values count:(NSUInteger)count {
  _builderResult.playersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder *)clearPlayers {
  _builderResult.playersArray = nil;
  return self;
}
- (BOOL) hasScore {
  return _builderResult.hasScore;
}
- (uint32_t) score {
  return _builderResult.score;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder*) setScore:(uint32_t) value {
  _builderResult.hasScore = YES;
  _builderResult.score = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Team_Builder*) clearScore {
  _builderResult.hasScore = NO;
  _builderResult.score = 0;
  return self;
}
@end

@interface CMsgDOTALiveScoreboardUpdate_Builder()
@property (retain) CMsgDOTALiveScoreboardUpdate* _builderResult;
@end

@implementation CMsgDOTALiveScoreboardUpdate_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTALiveScoreboardUpdate alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) clear {
  _builderResult = [[[CMsgDOTALiveScoreboardUpdate alloc] init] autorelease];
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) clone {
  return [CMsgDOTALiveScoreboardUpdate builderWithPrototype:_builderResult];
}
- (CMsgDOTALiveScoreboardUpdate*) defaultInstance {
  return [CMsgDOTALiveScoreboardUpdate defaultInstance];
}
- (CMsgDOTALiveScoreboardUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTALiveScoreboardUpdate*) buildPartial {
  CMsgDOTALiveScoreboardUpdate* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) mergeFrom:(CMsgDOTALiveScoreboardUpdate*) other {
  if (other == [CMsgDOTALiveScoreboardUpdate defaultInstance]) {
    return self;
  }
  if (other.hasTournamentId) {
    [self setTournamentId:other.tournamentId];
  }
  if (other.hasTournamentGameId) {
    [self setTournamentGameId:other.tournamentGameId];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasHltvDelay) {
    [self setHltvDelay:other.hltvDelay];
  }
  if (other.hasTeamGood) {
    [self mergeTeamGood:other.teamGood];
  }
  if (other.hasTeamBad) {
    [self mergeTeamBad:other.teamBad];
  }
  if (other.hasRoshanRespawnTimer) {
    [self setRoshanRespawnTimer:other.roshanRespawnTimer];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTournamentId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setTournamentGameId:[input readUInt32]];
        break;
      }
      case 29: {
        [self setDuration:[input readFloat]];
        break;
      }
      case 32: {
        [self setHltvDelay:[input readInt32]];
        break;
      }
      case 42: {
        CMsgDOTALiveScoreboardUpdate_Team_Builder* subBuilder = [CMsgDOTALiveScoreboardUpdate_Team builder];
        if (self.hasTeamGood) {
          [subBuilder mergeFrom:self.teamGood];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTeamGood:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        CMsgDOTALiveScoreboardUpdate_Team_Builder* subBuilder = [CMsgDOTALiveScoreboardUpdate_Team builder];
        if (self.hasTeamBad) {
          [subBuilder mergeFrom:self.teamBad];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTeamBad:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setRoshanRespawnTimer:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTournamentId {
  return _builderResult.hasTournamentId;
}
- (uint32_t) tournamentId {
  return _builderResult.tournamentId;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) setTournamentId:(uint32_t) value {
  _builderResult.hasTournamentId = YES;
  _builderResult.tournamentId = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) clearTournamentId {
  _builderResult.hasTournamentId = NO;
  _builderResult.tournamentId = 0;
  return self;
}
- (BOOL) hasTournamentGameId {
  return _builderResult.hasTournamentGameId;
}
- (uint32_t) tournamentGameId {
  return _builderResult.tournamentGameId;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) setTournamentGameId:(uint32_t) value {
  _builderResult.hasTournamentGameId = YES;
  _builderResult.tournamentGameId = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) clearTournamentGameId {
  _builderResult.hasTournamentGameId = NO;
  _builderResult.tournamentGameId = 0;
  return self;
}
- (BOOL) hasDuration {
  return _builderResult.hasDuration;
}
- (Float32) duration {
  return _builderResult.duration;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) setDuration:(Float32) value {
  _builderResult.hasDuration = YES;
  _builderResult.duration = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) clearDuration {
  _builderResult.hasDuration = NO;
  _builderResult.duration = 0;
  return self;
}
- (BOOL) hasHltvDelay {
  return _builderResult.hasHltvDelay;
}
- (int32_t) hltvDelay {
  return _builderResult.hltvDelay;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) setHltvDelay:(int32_t) value {
  _builderResult.hasHltvDelay = YES;
  _builderResult.hltvDelay = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) clearHltvDelay {
  _builderResult.hasHltvDelay = NO;
  _builderResult.hltvDelay = 0;
  return self;
}
- (BOOL) hasTeamGood {
  return _builderResult.hasTeamGood;
}
- (CMsgDOTALiveScoreboardUpdate_Team*) teamGood {
  return _builderResult.teamGood;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) setTeamGood:(CMsgDOTALiveScoreboardUpdate_Team*) value {
  _builderResult.hasTeamGood = YES;
  _builderResult.teamGood = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) setTeamGoodBuilder:(CMsgDOTALiveScoreboardUpdate_Team_Builder*) builderForValue {
  return [self setTeamGood:[builderForValue build]];
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) mergeTeamGood:(CMsgDOTALiveScoreboardUpdate_Team*) value {
  if (_builderResult.hasTeamGood &&
      _builderResult.teamGood != [CMsgDOTALiveScoreboardUpdate_Team defaultInstance]) {
    _builderResult.teamGood =
      [[[CMsgDOTALiveScoreboardUpdate_Team builderWithPrototype:_builderResult.teamGood] mergeFrom:value] buildPartial];
  } else {
    _builderResult.teamGood = value;
  }
  _builderResult.hasTeamGood = YES;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) clearTeamGood {
  _builderResult.hasTeamGood = NO;
  _builderResult.teamGood = [CMsgDOTALiveScoreboardUpdate_Team defaultInstance];
  return self;
}
- (BOOL) hasTeamBad {
  return _builderResult.hasTeamBad;
}
- (CMsgDOTALiveScoreboardUpdate_Team*) teamBad {
  return _builderResult.teamBad;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) setTeamBad:(CMsgDOTALiveScoreboardUpdate_Team*) value {
  _builderResult.hasTeamBad = YES;
  _builderResult.teamBad = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) setTeamBadBuilder:(CMsgDOTALiveScoreboardUpdate_Team_Builder*) builderForValue {
  return [self setTeamBad:[builderForValue build]];
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) mergeTeamBad:(CMsgDOTALiveScoreboardUpdate_Team*) value {
  if (_builderResult.hasTeamBad &&
      _builderResult.teamBad != [CMsgDOTALiveScoreboardUpdate_Team defaultInstance]) {
    _builderResult.teamBad =
      [[[CMsgDOTALiveScoreboardUpdate_Team builderWithPrototype:_builderResult.teamBad] mergeFrom:value] buildPartial];
  } else {
    _builderResult.teamBad = value;
  }
  _builderResult.hasTeamBad = YES;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) clearTeamBad {
  _builderResult.hasTeamBad = NO;
  _builderResult.teamBad = [CMsgDOTALiveScoreboardUpdate_Team defaultInstance];
  return self;
}
- (BOOL) hasRoshanRespawnTimer {
  return _builderResult.hasRoshanRespawnTimer;
}
- (uint32_t) roshanRespawnTimer {
  return _builderResult.roshanRespawnTimer;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) setRoshanRespawnTimer:(uint32_t) value {
  _builderResult.hasRoshanRespawnTimer = YES;
  _builderResult.roshanRespawnTimer = value;
  return self;
}
- (CMsgDOTALiveScoreboardUpdate_Builder*) clearRoshanRespawnTimer {
  _builderResult.hasRoshanRespawnTimer = NO;
  _builderResult.roshanRespawnTimer = 0;
  return self;
}
@end

@interface CMsgDOTAJoinChatChannel ()
@property (retain) NSString* personaName;
@property (retain) NSString* channelName;
@property (retain) NSString* password;
@property DOTAChatChannelType_t channel_type;
@end

@implementation CMsgDOTAJoinChatChannel

- (BOOL) hasPersonaName {
  return !!hasPersonaName_;
}
- (void) setHasPersonaName:(BOOL) value_ {
  hasPersonaName_ = !!value_;
}
@synthesize personaName;
- (BOOL) hasChannelName {
  return !!hasChannelName_;
}
- (void) setHasChannelName:(BOOL) value_ {
  hasChannelName_ = !!value_;
}
@synthesize channelName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value_ {
  hasPassword_ = !!value_;
}
@synthesize password;
- (BOOL) haschannel_type {
  return !!haschannel_type_;
}
- (void) setHaschannel_type:(BOOL) value_ {
  haschannel_type_ = !!value_;
}
@synthesize channel_type;
- (void) dealloc {
  self.personaName = nil;
  self.channelName = nil;
  self.password = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.personaName = @"";
    self.channelName = @"";
    self.password = @"";
    self.channel_type = DOTAChatChannelType_tDOTAChannelType_Regional;
  }
  return self;
}
static CMsgDOTAJoinChatChannel* defaultCMsgDOTAJoinChatChannelInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAJoinChatChannel class]) {
    defaultCMsgDOTAJoinChatChannelInstance = [[CMsgDOTAJoinChatChannel alloc] init];
  }
}
+ (CMsgDOTAJoinChatChannel*) defaultInstance {
  return defaultCMsgDOTAJoinChatChannelInstance;
}
- (CMsgDOTAJoinChatChannel*) defaultInstance {
  return defaultCMsgDOTAJoinChatChannelInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPersonaName) {
    [output writeString:1 value:self.personaName];
  }
  if (self.hasChannelName) {
    [output writeString:2 value:self.channelName];
  }
  if (self.hasPassword) {
    [output writeString:3 value:self.password];
  }
  if (self.haschannel_type) {
    [output writeEnum:4 value:self.channel_type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPersonaName) {
    size_ += computeStringSize(1, self.personaName);
  }
  if (self.hasChannelName) {
    size_ += computeStringSize(2, self.channelName);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(3, self.password);
  }
  if (self.haschannel_type) {
    size_ += computeEnumSize(4, self.channel_type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAJoinChatChannel*) parseFromData:(NSData*) data {
  return (CMsgDOTAJoinChatChannel*)[[[CMsgDOTAJoinChatChannel builder] mergeFromData:data] build];
}
+ (CMsgDOTAJoinChatChannel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAJoinChatChannel*)[[[CMsgDOTAJoinChatChannel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAJoinChatChannel*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAJoinChatChannel*)[[[CMsgDOTAJoinChatChannel builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAJoinChatChannel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAJoinChatChannel*)[[[CMsgDOTAJoinChatChannel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAJoinChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAJoinChatChannel*)[[[CMsgDOTAJoinChatChannel builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAJoinChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAJoinChatChannel*)[[[CMsgDOTAJoinChatChannel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAJoinChatChannel_Builder*) builder {
  return [[[CMsgDOTAJoinChatChannel_Builder alloc] init] autorelease];
}
+ (CMsgDOTAJoinChatChannel_Builder*) builderWithPrototype:(CMsgDOTAJoinChatChannel*) prototype {
  return [[CMsgDOTAJoinChatChannel builder] mergeFrom:prototype];
}
- (CMsgDOTAJoinChatChannel_Builder*) builder {
  return [CMsgDOTAJoinChatChannel builder];
}
- (CMsgDOTAJoinChatChannel_Builder*) toBuilder {
  return [CMsgDOTAJoinChatChannel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPersonaName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"personaName", self.personaName];
  }
  if (self.hasChannelName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelName", self.channelName];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.haschannel_type) {
    [output appendFormat:@"%@%@: %d\n", indent, @"channel_type", self.channel_type];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAJoinChatChannel class]]) {
    return NO;
  }
  CMsgDOTAJoinChatChannel *otherMessage = other;
  return
      self.hasPersonaName == otherMessage.hasPersonaName &&
      (!self.hasPersonaName || [self.personaName isEqual:otherMessage.personaName]) &&
      self.hasChannelName == otherMessage.hasChannelName &&
      (!self.hasChannelName || [self.channelName isEqual:otherMessage.channelName]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.haschannel_type == otherMessage.haschannel_type &&
      (!self.haschannel_type || self.channel_type == otherMessage.channel_type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPersonaName) {
    hashCode = hashCode * 31 + [self.personaName hash];
  }
  if (self.hasChannelName) {
    hashCode = hashCode * 31 + [self.channelName hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.haschannel_type) {
    hashCode = hashCode * 31 + self.channel_type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAJoinChatChannel_Builder()
@property (retain) CMsgDOTAJoinChatChannel* _builderResult;
@end

@implementation CMsgDOTAJoinChatChannel_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAJoinChatChannel alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAJoinChatChannel_Builder*) clear {
  _builderResult = [[[CMsgDOTAJoinChatChannel alloc] init] autorelease];
  return self;
}
- (CMsgDOTAJoinChatChannel_Builder*) clone {
  return [CMsgDOTAJoinChatChannel builderWithPrototype:_builderResult];
}
- (CMsgDOTAJoinChatChannel*) defaultInstance {
  return [CMsgDOTAJoinChatChannel defaultInstance];
}
- (CMsgDOTAJoinChatChannel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAJoinChatChannel*) buildPartial {
  CMsgDOTAJoinChatChannel* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAJoinChatChannel_Builder*) mergeFrom:(CMsgDOTAJoinChatChannel*) other {
  if (other == [CMsgDOTAJoinChatChannel defaultInstance]) {
    return self;
  }
  if (other.hasPersonaName) {
    [self setPersonaName:other.personaName];
  }
  if (other.hasChannelName) {
    [self setChannelName:other.channelName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.haschannel_type) {
    [self setchannel_type:other.channel_type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAJoinChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAJoinChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPersonaName:[input readString]];
        break;
      }
      case 18: {
        [self setChannelName:[input readString]];
        break;
      }
      case 26: {
        [self setPassword:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (DOTAChatChannelType_tIsValidValue(value)) {
          [self setchannel_type:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasPersonaName {
  return _builderResult.hasPersonaName;
}
- (NSString*) personaName {
  return _builderResult.personaName;
}
- (CMsgDOTAJoinChatChannel_Builder*) setPersonaName:(NSString*) value {
  _builderResult.hasPersonaName = YES;
  _builderResult.personaName = value;
  return self;
}
- (CMsgDOTAJoinChatChannel_Builder*) clearPersonaName {
  _builderResult.hasPersonaName = NO;
  _builderResult.personaName = @"";
  return self;
}
- (BOOL) hasChannelName {
  return _builderResult.hasChannelName;
}
- (NSString*) channelName {
  return _builderResult.channelName;
}
- (CMsgDOTAJoinChatChannel_Builder*) setChannelName:(NSString*) value {
  _builderResult.hasChannelName = YES;
  _builderResult.channelName = value;
  return self;
}
- (CMsgDOTAJoinChatChannel_Builder*) clearChannelName {
  _builderResult.hasChannelName = NO;
  _builderResult.channelName = @"";
  return self;
}
- (BOOL) hasPassword {
  return _builderResult.hasPassword;
}
- (NSString*) password {
  return _builderResult.password;
}
- (CMsgDOTAJoinChatChannel_Builder*) setPassword:(NSString*) value {
  _builderResult.hasPassword = YES;
  _builderResult.password = value;
  return self;
}
- (CMsgDOTAJoinChatChannel_Builder*) clearPassword {
  _builderResult.hasPassword = NO;
  _builderResult.password = @"";
  return self;
}
- (BOOL) haschannel_type {
  return _builderResult.haschannel_type;
}
- (DOTAChatChannelType_t) channel_type {
  return _builderResult.channel_type;
}
- (CMsgDOTAJoinChatChannel_Builder*) setchannel_type:(DOTAChatChannelType_t) value {
  _builderResult.haschannel_type = YES;
  _builderResult.channel_type = value;
  return self;
}
- (CMsgDOTAJoinChatChannel_Builder*) clearchannel_type {
  _builderResult.haschannel_type = NO;
  _builderResult.channel_type = DOTAChatChannelType_tDOTAChannelType_Regional;
  return self;
}
@end

@interface CMsgDOTALeaveChatChannel ()
@property (retain) NSString* channelName;
@end

@implementation CMsgDOTALeaveChatChannel

- (BOOL) hasChannelName {
  return !!hasChannelName_;
}
- (void) setHasChannelName:(BOOL) value_ {
  hasChannelName_ = !!value_;
}
@synthesize channelName;
- (void) dealloc {
  self.channelName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelName = @"";
  }
  return self;
}
static CMsgDOTALeaveChatChannel* defaultCMsgDOTALeaveChatChannelInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTALeaveChatChannel class]) {
    defaultCMsgDOTALeaveChatChannelInstance = [[CMsgDOTALeaveChatChannel alloc] init];
  }
}
+ (CMsgDOTALeaveChatChannel*) defaultInstance {
  return defaultCMsgDOTALeaveChatChannelInstance;
}
- (CMsgDOTALeaveChatChannel*) defaultInstance {
  return defaultCMsgDOTALeaveChatChannelInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelName) {
    [output writeString:1 value:self.channelName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelName) {
    size_ += computeStringSize(1, self.channelName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTALeaveChatChannel*) parseFromData:(NSData*) data {
  return (CMsgDOTALeaveChatChannel*)[[[CMsgDOTALeaveChatChannel builder] mergeFromData:data] build];
}
+ (CMsgDOTALeaveChatChannel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALeaveChatChannel*)[[[CMsgDOTALeaveChatChannel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALeaveChatChannel*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTALeaveChatChannel*)[[[CMsgDOTALeaveChatChannel builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTALeaveChatChannel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALeaveChatChannel*)[[[CMsgDOTALeaveChatChannel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALeaveChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTALeaveChatChannel*)[[[CMsgDOTALeaveChatChannel builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTALeaveChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTALeaveChatChannel*)[[[CMsgDOTALeaveChatChannel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTALeaveChatChannel_Builder*) builder {
  return [[[CMsgDOTALeaveChatChannel_Builder alloc] init] autorelease];
}
+ (CMsgDOTALeaveChatChannel_Builder*) builderWithPrototype:(CMsgDOTALeaveChatChannel*) prototype {
  return [[CMsgDOTALeaveChatChannel builder] mergeFrom:prototype];
}
- (CMsgDOTALeaveChatChannel_Builder*) builder {
  return [CMsgDOTALeaveChatChannel builder];
}
- (CMsgDOTALeaveChatChannel_Builder*) toBuilder {
  return [CMsgDOTALeaveChatChannel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelName", self.channelName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTALeaveChatChannel class]]) {
    return NO;
  }
  CMsgDOTALeaveChatChannel *otherMessage = other;
  return
      self.hasChannelName == otherMessage.hasChannelName &&
      (!self.hasChannelName || [self.channelName isEqual:otherMessage.channelName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelName) {
    hashCode = hashCode * 31 + [self.channelName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTALeaveChatChannel_Builder()
@property (retain) CMsgDOTALeaveChatChannel* _builderResult;
@end

@implementation CMsgDOTALeaveChatChannel_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTALeaveChatChannel alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTALeaveChatChannel_Builder*) clear {
  _builderResult = [[[CMsgDOTALeaveChatChannel alloc] init] autorelease];
  return self;
}
- (CMsgDOTALeaveChatChannel_Builder*) clone {
  return [CMsgDOTALeaveChatChannel builderWithPrototype:_builderResult];
}
- (CMsgDOTALeaveChatChannel*) defaultInstance {
  return [CMsgDOTALeaveChatChannel defaultInstance];
}
- (CMsgDOTALeaveChatChannel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTALeaveChatChannel*) buildPartial {
  CMsgDOTALeaveChatChannel* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTALeaveChatChannel_Builder*) mergeFrom:(CMsgDOTALeaveChatChannel*) other {
  if (other == [CMsgDOTALeaveChatChannel defaultInstance]) {
    return self;
  }
  if (other.hasChannelName) {
    [self setChannelName:other.channelName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTALeaveChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTALeaveChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setChannelName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelName {
  return _builderResult.hasChannelName;
}
- (NSString*) channelName {
  return _builderResult.channelName;
}
- (CMsgDOTALeaveChatChannel_Builder*) setChannelName:(NSString*) value {
  _builderResult.hasChannelName = YES;
  _builderResult.channelName = value;
  return self;
}
- (CMsgDOTALeaveChatChannel_Builder*) clearChannelName {
  _builderResult.hasChannelName = NO;
  _builderResult.channelName = @"";
  return self;
}
@end

@interface CMsgDOTAChatMessage ()
@property uint32_t accountId;
@property (retain) NSString* channelName;
@property (retain) NSString* personaName;
@property (retain) NSString* text;
@property uint32_t timestamp;
@property uint32_t suggestInviteAccountId;
@property (retain) NSString* suggestInviteName;
@end

@implementation CMsgDOTAChatMessage

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasChannelName {
  return !!hasChannelName_;
}
- (void) setHasChannelName:(BOOL) value_ {
  hasChannelName_ = !!value_;
}
@synthesize channelName;
- (BOOL) hasPersonaName {
  return !!hasPersonaName_;
}
- (void) setHasPersonaName:(BOOL) value_ {
  hasPersonaName_ = !!value_;
}
@synthesize personaName;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value_ {
  hasText_ = !!value_;
}
@synthesize text;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value_ {
  hasTimestamp_ = !!value_;
}
@synthesize timestamp;
- (BOOL) hasSuggestInviteAccountId {
  return !!hasSuggestInviteAccountId_;
}
- (void) setHasSuggestInviteAccountId:(BOOL) value_ {
  hasSuggestInviteAccountId_ = !!value_;
}
@synthesize suggestInviteAccountId;
- (BOOL) hasSuggestInviteName {
  return !!hasSuggestInviteName_;
}
- (void) setHasSuggestInviteName:(BOOL) value_ {
  hasSuggestInviteName_ = !!value_;
}
@synthesize suggestInviteName;
- (void) dealloc {
  self.channelName = nil;
  self.personaName = nil;
  self.text = nil;
  self.suggestInviteName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.channelName = @"";
    self.personaName = @"";
    self.text = @"";
    self.timestamp = 0;
    self.suggestInviteAccountId = 0;
    self.suggestInviteName = @"";
  }
  return self;
}
static CMsgDOTAChatMessage* defaultCMsgDOTAChatMessageInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAChatMessage class]) {
    defaultCMsgDOTAChatMessageInstance = [[CMsgDOTAChatMessage alloc] init];
  }
}
+ (CMsgDOTAChatMessage*) defaultInstance {
  return defaultCMsgDOTAChatMessageInstance;
}
- (CMsgDOTAChatMessage*) defaultInstance {
  return defaultCMsgDOTAChatMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasChannelName) {
    [output writeString:2 value:self.channelName];
  }
  if (self.hasPersonaName) {
    [output writeString:3 value:self.personaName];
  }
  if (self.hasText) {
    [output writeString:4 value:self.text];
  }
  if (self.hasTimestamp) {
    [output writeUInt32:5 value:self.timestamp];
  }
  if (self.hasSuggestInviteAccountId) {
    [output writeUInt32:6 value:self.suggestInviteAccountId];
  }
  if (self.hasSuggestInviteName) {
    [output writeString:7 value:self.suggestInviteName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasChannelName) {
    size_ += computeStringSize(2, self.channelName);
  }
  if (self.hasPersonaName) {
    size_ += computeStringSize(3, self.personaName);
  }
  if (self.hasText) {
    size_ += computeStringSize(4, self.text);
  }
  if (self.hasTimestamp) {
    size_ += computeUInt32Size(5, self.timestamp);
  }
  if (self.hasSuggestInviteAccountId) {
    size_ += computeUInt32Size(6, self.suggestInviteAccountId);
  }
  if (self.hasSuggestInviteName) {
    size_ += computeStringSize(7, self.suggestInviteName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAChatMessage*) parseFromData:(NSData*) data {
  return (CMsgDOTAChatMessage*)[[[CMsgDOTAChatMessage builder] mergeFromData:data] build];
}
+ (CMsgDOTAChatMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAChatMessage*)[[[CMsgDOTAChatMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAChatMessage*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAChatMessage*)[[[CMsgDOTAChatMessage builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAChatMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAChatMessage*)[[[CMsgDOTAChatMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAChatMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAChatMessage*)[[[CMsgDOTAChatMessage builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAChatMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAChatMessage*)[[[CMsgDOTAChatMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAChatMessage_Builder*) builder {
  return [[[CMsgDOTAChatMessage_Builder alloc] init] autorelease];
}
+ (CMsgDOTAChatMessage_Builder*) builderWithPrototype:(CMsgDOTAChatMessage*) prototype {
  return [[CMsgDOTAChatMessage builder] mergeFrom:prototype];
}
- (CMsgDOTAChatMessage_Builder*) builder {
  return [CMsgDOTAChatMessage builder];
}
- (CMsgDOTAChatMessage_Builder*) toBuilder {
  return [CMsgDOTAChatMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasChannelName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelName", self.channelName];
  }
  if (self.hasPersonaName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"personaName", self.personaName];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithInt:self.timestamp]];
  }
  if (self.hasSuggestInviteAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"suggestInviteAccountId", [NSNumber numberWithInt:self.suggestInviteAccountId]];
  }
  if (self.hasSuggestInviteName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"suggestInviteName", self.suggestInviteName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAChatMessage class]]) {
    return NO;
  }
  CMsgDOTAChatMessage *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasChannelName == otherMessage.hasChannelName &&
      (!self.hasChannelName || [self.channelName isEqual:otherMessage.channelName]) &&
      self.hasPersonaName == otherMessage.hasPersonaName &&
      (!self.hasPersonaName || [self.personaName isEqual:otherMessage.personaName]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasSuggestInviteAccountId == otherMessage.hasSuggestInviteAccountId &&
      (!self.hasSuggestInviteAccountId || self.suggestInviteAccountId == otherMessage.suggestInviteAccountId) &&
      self.hasSuggestInviteName == otherMessage.hasSuggestInviteName &&
      (!self.hasSuggestInviteName || [self.suggestInviteName isEqual:otherMessage.suggestInviteName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasChannelName) {
    hashCode = hashCode * 31 + [self.channelName hash];
  }
  if (self.hasPersonaName) {
    hashCode = hashCode * 31 + [self.personaName hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timestamp] hash];
  }
  if (self.hasSuggestInviteAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.suggestInviteAccountId] hash];
  }
  if (self.hasSuggestInviteName) {
    hashCode = hashCode * 31 + [self.suggestInviteName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAChatMessage_Builder()
@property (retain) CMsgDOTAChatMessage* _builderResult;
@end

@implementation CMsgDOTAChatMessage_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAChatMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAChatMessage_Builder*) clear {
  _builderResult = [[[CMsgDOTAChatMessage alloc] init] autorelease];
  return self;
}
- (CMsgDOTAChatMessage_Builder*) clone {
  return [CMsgDOTAChatMessage builderWithPrototype:_builderResult];
}
- (CMsgDOTAChatMessage*) defaultInstance {
  return [CMsgDOTAChatMessage defaultInstance];
}
- (CMsgDOTAChatMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAChatMessage*) buildPartial {
  CMsgDOTAChatMessage* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAChatMessage_Builder*) mergeFrom:(CMsgDOTAChatMessage*) other {
  if (other == [CMsgDOTAChatMessage defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasChannelName) {
    [self setChannelName:other.channelName];
  }
  if (other.hasPersonaName) {
    [self setPersonaName:other.personaName];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasSuggestInviteAccountId) {
    [self setSuggestInviteAccountId:other.suggestInviteAccountId];
  }
  if (other.hasSuggestInviteName) {
    [self setSuggestInviteName:other.suggestInviteName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAChatMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAChatMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setChannelName:[input readString]];
        break;
      }
      case 26: {
        [self setPersonaName:[input readString]];
        break;
      }
      case 34: {
        [self setText:[input readString]];
        break;
      }
      case 40: {
        [self setTimestamp:[input readUInt32]];
        break;
      }
      case 48: {
        [self setSuggestInviteAccountId:[input readUInt32]];
        break;
      }
      case 58: {
        [self setSuggestInviteName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTAChatMessage_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTAChatMessage_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasChannelName {
  return _builderResult.hasChannelName;
}
- (NSString*) channelName {
  return _builderResult.channelName;
}
- (CMsgDOTAChatMessage_Builder*) setChannelName:(NSString*) value {
  _builderResult.hasChannelName = YES;
  _builderResult.channelName = value;
  return self;
}
- (CMsgDOTAChatMessage_Builder*) clearChannelName {
  _builderResult.hasChannelName = NO;
  _builderResult.channelName = @"";
  return self;
}
- (BOOL) hasPersonaName {
  return _builderResult.hasPersonaName;
}
- (NSString*) personaName {
  return _builderResult.personaName;
}
- (CMsgDOTAChatMessage_Builder*) setPersonaName:(NSString*) value {
  _builderResult.hasPersonaName = YES;
  _builderResult.personaName = value;
  return self;
}
- (CMsgDOTAChatMessage_Builder*) clearPersonaName {
  _builderResult.hasPersonaName = NO;
  _builderResult.personaName = @"";
  return self;
}
- (BOOL) hasText {
  return _builderResult.hasText;
}
- (NSString*) text {
  return _builderResult.text;
}
- (CMsgDOTAChatMessage_Builder*) setText:(NSString*) value {
  _builderResult.hasText = YES;
  _builderResult.text = value;
  return self;
}
- (CMsgDOTAChatMessage_Builder*) clearText {
  _builderResult.hasText = NO;
  _builderResult.text = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return _builderResult.hasTimestamp;
}
- (uint32_t) timestamp {
  return _builderResult.timestamp;
}
- (CMsgDOTAChatMessage_Builder*) setTimestamp:(uint32_t) value {
  _builderResult.hasTimestamp = YES;
  _builderResult.timestamp = value;
  return self;
}
- (CMsgDOTAChatMessage_Builder*) clearTimestamp {
  _builderResult.hasTimestamp = NO;
  _builderResult.timestamp = 0;
  return self;
}
- (BOOL) hasSuggestInviteAccountId {
  return _builderResult.hasSuggestInviteAccountId;
}
- (uint32_t) suggestInviteAccountId {
  return _builderResult.suggestInviteAccountId;
}
- (CMsgDOTAChatMessage_Builder*) setSuggestInviteAccountId:(uint32_t) value {
  _builderResult.hasSuggestInviteAccountId = YES;
  _builderResult.suggestInviteAccountId = value;
  return self;
}
- (CMsgDOTAChatMessage_Builder*) clearSuggestInviteAccountId {
  _builderResult.hasSuggestInviteAccountId = NO;
  _builderResult.suggestInviteAccountId = 0;
  return self;
}
- (BOOL) hasSuggestInviteName {
  return _builderResult.hasSuggestInviteName;
}
- (NSString*) suggestInviteName {
  return _builderResult.suggestInviteName;
}
- (CMsgDOTAChatMessage_Builder*) setSuggestInviteName:(NSString*) value {
  _builderResult.hasSuggestInviteName = YES;
  _builderResult.suggestInviteName = value;
  return self;
}
- (CMsgDOTAChatMessage_Builder*) clearSuggestInviteName {
  _builderResult.hasSuggestInviteName = NO;
  _builderResult.suggestInviteName = @"";
  return self;
}
@end

@interface CMsgDOTASetChatChannelVerbosity ()
@property (retain) PBAppendableArray * verbositiesArray;
@end

@implementation CMsgDOTASetChatChannelVerbosity

@synthesize verbositiesArray;
@dynamic verbosities;
- (void) dealloc {
  self.verbositiesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTASetChatChannelVerbosity* defaultCMsgDOTASetChatChannelVerbosityInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTASetChatChannelVerbosity class]) {
    defaultCMsgDOTASetChatChannelVerbosityInstance = [[CMsgDOTASetChatChannelVerbosity alloc] init];
  }
}
+ (CMsgDOTASetChatChannelVerbosity*) defaultInstance {
  return defaultCMsgDOTASetChatChannelVerbosityInstance;
}
- (CMsgDOTASetChatChannelVerbosity*) defaultInstance {
  return defaultCMsgDOTASetChatChannelVerbosityInstance;
}
- (PBArray *)verbosities {
  return verbositiesArray;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*)verbositiesAtIndex:(NSUInteger)index {
  return [verbositiesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity *element in self.verbositiesArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity *element in self.verbositiesArray) {
    size_ += computeMessageSize(1, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTASetChatChannelVerbosity*) parseFromData:(NSData*) data {
  return (CMsgDOTASetChatChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity builder] mergeFromData:data] build];
}
+ (CMsgDOTASetChatChannelVerbosity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASetChatChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASetChatChannelVerbosity*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTASetChatChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTASetChatChannelVerbosity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASetChatChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASetChatChannelVerbosity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTASetChatChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTASetChatChannelVerbosity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASetChatChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASetChatChannelVerbosity_Builder*) builder {
  return [[[CMsgDOTASetChatChannelVerbosity_Builder alloc] init] autorelease];
}
+ (CMsgDOTASetChatChannelVerbosity_Builder*) builderWithPrototype:(CMsgDOTASetChatChannelVerbosity*) prototype {
  return [[CMsgDOTASetChatChannelVerbosity builder] mergeFrom:prototype];
}
- (CMsgDOTASetChatChannelVerbosity_Builder*) builder {
  return [CMsgDOTASetChatChannelVerbosity builder];
}
- (CMsgDOTASetChatChannelVerbosity_Builder*) toBuilder {
  return [CMsgDOTASetChatChannelVerbosity builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* element in self.verbositiesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"verbosities"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTASetChatChannelVerbosity class]]) {
    return NO;
  }
  CMsgDOTASetChatChannelVerbosity *otherMessage = other;
  return
      [self.verbositiesArray isEqualToArray:otherMessage.verbositiesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* element in self.verbositiesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_tIsValidValue(CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_t value) {
  switch (value) {
    case CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_tDOTAChannel_AllVerbose:
    case CMsgDOTASetChatChannelVerbosity_DOTAChatChannelSuppressNotificationsFlags_tDOTAChannelIgnore_OthersJoined:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgDOTASetChatChannelVerbosity_ChannelVerbosity ()
@property uint64_t channelId;
@property uint32_t suppressionFlags;
@end

@implementation CMsgDOTASetChatChannelVerbosity_ChannelVerbosity

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value_ {
  hasChannelId_ = !!value_;
}
@synthesize channelId;
- (BOOL) hasSuppressionFlags {
  return !!hasSuppressionFlags_;
}
- (void) setHasSuppressionFlags:(BOOL) value_ {
  hasSuppressionFlags_ = !!value_;
}
@synthesize suppressionFlags;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelId = 0L;
    self.suppressionFlags = 0;
  }
  return self;
}
static CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* defaultCMsgDOTASetChatChannelVerbosity_ChannelVerbosityInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTASetChatChannelVerbosity_ChannelVerbosity class]) {
    defaultCMsgDOTASetChatChannelVerbosity_ChannelVerbosityInstance = [[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity alloc] init];
  }
}
+ (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) defaultInstance {
  return defaultCMsgDOTASetChatChannelVerbosity_ChannelVerbosityInstance;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) defaultInstance {
  return defaultCMsgDOTASetChatChannelVerbosity_ChannelVerbosityInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeFixed64:1 value:self.channelId];
  }
  if (self.hasSuppressionFlags) {
    [output writeUInt32:2 value:self.suppressionFlags];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelId) {
    size_ += computeFixed64Size(1, self.channelId);
  }
  if (self.hasSuppressionFlags) {
    size_ += computeUInt32Size(2, self.suppressionFlags);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) parseFromData:(NSData*) data {
  return (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builder] mergeFromData:data] build];
}
+ (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*)[[[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) builder {
  return [[[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder alloc] init] autorelease];
}
+ (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) builderWithPrototype:(CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) prototype {
  return [[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builder] mergeFrom:prototype];
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) builder {
  return [CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builder];
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) toBuilder {
  return [CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithLongLong:self.channelId]];
  }
  if (self.hasSuppressionFlags) {
    [output appendFormat:@"%@%@: %@\n", indent, @"suppressionFlags", [NSNumber numberWithInt:self.suppressionFlags]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity class]]) {
    return NO;
  }
  CMsgDOTASetChatChannelVerbosity_ChannelVerbosity *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasSuppressionFlags == otherMessage.hasSuppressionFlags &&
      (!self.hasSuppressionFlags || self.suppressionFlags == otherMessage.suppressionFlags) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.channelId] hash];
  }
  if (self.hasSuppressionFlags) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.suppressionFlags] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder()
@property (retain) CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* _builderResult;
@end

@implementation CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) clear {
  _builderResult = [[[CMsgDOTASetChatChannelVerbosity_ChannelVerbosity alloc] init] autorelease];
  return self;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) clone {
  return [CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builderWithPrototype:_builderResult];
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) defaultInstance {
  return [CMsgDOTASetChatChannelVerbosity_ChannelVerbosity defaultInstance];
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) buildPartial {
  CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) mergeFrom:(CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*) other {
  if (other == [CMsgDOTASetChatChannelVerbosity_ChannelVerbosity defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasSuppressionFlags) {
    [self setSuppressionFlags:other.suppressionFlags];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setChannelId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setSuppressionFlags:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return _builderResult.hasChannelId;
}
- (uint64_t) channelId {
  return _builderResult.channelId;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) setChannelId:(uint64_t) value {
  _builderResult.hasChannelId = YES;
  _builderResult.channelId = value;
  return self;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) clearChannelId {
  _builderResult.hasChannelId = NO;
  _builderResult.channelId = 0L;
  return self;
}
- (BOOL) hasSuppressionFlags {
  return _builderResult.hasSuppressionFlags;
}
- (uint32_t) suppressionFlags {
  return _builderResult.suppressionFlags;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) setSuppressionFlags:(uint32_t) value {
  _builderResult.hasSuppressionFlags = YES;
  _builderResult.suppressionFlags = value;
  return self;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder*) clearSuppressionFlags {
  _builderResult.hasSuppressionFlags = NO;
  _builderResult.suppressionFlags = 0;
  return self;
}
@end

@interface CMsgDOTASetChatChannelVerbosity_Builder()
@property (retain) CMsgDOTASetChatChannelVerbosity* _builderResult;
@end

@implementation CMsgDOTASetChatChannelVerbosity_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTASetChatChannelVerbosity alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTASetChatChannelVerbosity_Builder*) clear {
  _builderResult = [[[CMsgDOTASetChatChannelVerbosity alloc] init] autorelease];
  return self;
}
- (CMsgDOTASetChatChannelVerbosity_Builder*) clone {
  return [CMsgDOTASetChatChannelVerbosity builderWithPrototype:_builderResult];
}
- (CMsgDOTASetChatChannelVerbosity*) defaultInstance {
  return [CMsgDOTASetChatChannelVerbosity defaultInstance];
}
- (CMsgDOTASetChatChannelVerbosity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTASetChatChannelVerbosity*) buildPartial {
  CMsgDOTASetChatChannelVerbosity* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTASetChatChannelVerbosity_Builder*) mergeFrom:(CMsgDOTASetChatChannelVerbosity*) other {
  if (other == [CMsgDOTASetChatChannelVerbosity defaultInstance]) {
    return self;
  }
  if (other.verbositiesArray.count > 0) {
    if (_builderResult.verbositiesArray == nil) {
      _builderResult.verbositiesArray = [[other.verbositiesArray copyWithZone:[other.verbositiesArray zone]] autorelease];
    } else {
      [_builderResult.verbositiesArray appendArray:other.verbositiesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTASetChatChannelVerbosity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTASetChatChannelVerbosity_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTASetChatChannelVerbosity_ChannelVerbosity_Builder* subBuilder = [CMsgDOTASetChatChannelVerbosity_ChannelVerbosity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addVerbosities:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)verbosities {
  return _builderResult.verbositiesArray;
}
- (CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*)verbositiesAtIndex:(NSUInteger)index {
  return [_builderResult verbositiesAtIndex:index];
}
- (CMsgDOTASetChatChannelVerbosity_Builder *)addVerbosities:(CMsgDOTASetChatChannelVerbosity_ChannelVerbosity*)value {
  if (_builderResult.verbositiesArray == nil) {
    _builderResult.verbositiesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.verbositiesArray addObject:value];
  return self;
}
- (CMsgDOTASetChatChannelVerbosity_Builder *)setVerbositiesArray:(NSArray *)array {
  _builderResult.verbositiesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTASetChatChannelVerbosity_Builder *)setVerbositiesValues:(const CMsgDOTASetChatChannelVerbosity_ChannelVerbosity* *)values count:(NSUInteger)count {
  _builderResult.verbositiesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTASetChatChannelVerbosity_Builder *)clearVerbosities {
  _builderResult.verbositiesArray = nil;
  return self;
}
@end

@interface CMsgDOTAChatMember ()
@property uint64_t steamId;
@property (retain) NSString* personaName;
@end

@implementation CMsgDOTAChatMember

- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (BOOL) hasPersonaName {
  return !!hasPersonaName_;
}
- (void) setHasPersonaName:(BOOL) value_ {
  hasPersonaName_ = !!value_;
}
@synthesize personaName;
- (void) dealloc {
  self.personaName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.steamId = 0L;
    self.personaName = @"";
  }
  return self;
}
static CMsgDOTAChatMember* defaultCMsgDOTAChatMemberInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAChatMember class]) {
    defaultCMsgDOTAChatMemberInstance = [[CMsgDOTAChatMember alloc] init];
  }
}
+ (CMsgDOTAChatMember*) defaultInstance {
  return defaultCMsgDOTAChatMemberInstance;
}
- (CMsgDOTAChatMember*) defaultInstance {
  return defaultCMsgDOTAChatMemberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSteamId) {
    [output writeFixed64:1 value:self.steamId];
  }
  if (self.hasPersonaName) {
    [output writeString:2 value:self.personaName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSteamId) {
    size_ += computeFixed64Size(1, self.steamId);
  }
  if (self.hasPersonaName) {
    size_ += computeStringSize(2, self.personaName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAChatMember*) parseFromData:(NSData*) data {
  return (CMsgDOTAChatMember*)[[[CMsgDOTAChatMember builder] mergeFromData:data] build];
}
+ (CMsgDOTAChatMember*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAChatMember*)[[[CMsgDOTAChatMember builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAChatMember*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAChatMember*)[[[CMsgDOTAChatMember builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAChatMember*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAChatMember*)[[[CMsgDOTAChatMember builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAChatMember*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAChatMember*)[[[CMsgDOTAChatMember builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAChatMember*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAChatMember*)[[[CMsgDOTAChatMember builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAChatMember_Builder*) builder {
  return [[[CMsgDOTAChatMember_Builder alloc] init] autorelease];
}
+ (CMsgDOTAChatMember_Builder*) builderWithPrototype:(CMsgDOTAChatMember*) prototype {
  return [[CMsgDOTAChatMember builder] mergeFrom:prototype];
}
- (CMsgDOTAChatMember_Builder*) builder {
  return [CMsgDOTAChatMember builder];
}
- (CMsgDOTAChatMember_Builder*) toBuilder {
  return [CMsgDOTAChatMember builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  if (self.hasPersonaName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"personaName", self.personaName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAChatMember class]]) {
    return NO;
  }
  CMsgDOTAChatMember *otherMessage = other;
  return
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      self.hasPersonaName == otherMessage.hasPersonaName &&
      (!self.hasPersonaName || [self.personaName isEqual:otherMessage.personaName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  if (self.hasPersonaName) {
    hashCode = hashCode * 31 + [self.personaName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAChatMember_Builder()
@property (retain) CMsgDOTAChatMember* _builderResult;
@end

@implementation CMsgDOTAChatMember_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAChatMember alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAChatMember_Builder*) clear {
  _builderResult = [[[CMsgDOTAChatMember alloc] init] autorelease];
  return self;
}
- (CMsgDOTAChatMember_Builder*) clone {
  return [CMsgDOTAChatMember builderWithPrototype:_builderResult];
}
- (CMsgDOTAChatMember*) defaultInstance {
  return [CMsgDOTAChatMember defaultInstance];
}
- (CMsgDOTAChatMember*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAChatMember*) buildPartial {
  CMsgDOTAChatMember* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAChatMember_Builder*) mergeFrom:(CMsgDOTAChatMember*) other {
  if (other == [CMsgDOTAChatMember defaultInstance]) {
    return self;
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  if (other.hasPersonaName) {
    [self setPersonaName:other.personaName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAChatMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAChatMember_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSteamId:[input readFixed64]];
        break;
      }
      case 18: {
        [self setPersonaName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgDOTAChatMember_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgDOTAChatMember_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
- (BOOL) hasPersonaName {
  return _builderResult.hasPersonaName;
}
- (NSString*) personaName {
  return _builderResult.personaName;
}
- (CMsgDOTAChatMember_Builder*) setPersonaName:(NSString*) value {
  _builderResult.hasPersonaName = YES;
  _builderResult.personaName = value;
  return self;
}
- (CMsgDOTAChatMember_Builder*) clearPersonaName {
  _builderResult.hasPersonaName = NO;
  _builderResult.personaName = @"";
  return self;
}
@end

@interface CMsgDOTAJoinChatChannelResponse ()
@property uint32_t response;
@property (retain) NSString* channelName;
@property uint64_t channelId;
@property uint32_t maxMembers;
@property (retain) PBAppendableArray * membersArray;
@end

@implementation CMsgDOTAJoinChatChannelResponse

- (BOOL) hasResponse {
  return !!hasResponse_;
}
- (void) setHasResponse:(BOOL) value_ {
  hasResponse_ = !!value_;
}
@synthesize response;
- (BOOL) hasChannelName {
  return !!hasChannelName_;
}
- (void) setHasChannelName:(BOOL) value_ {
  hasChannelName_ = !!value_;
}
@synthesize channelName;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value_ {
  hasChannelId_ = !!value_;
}
@synthesize channelId;
- (BOOL) hasMaxMembers {
  return !!hasMaxMembers_;
}
- (void) setHasMaxMembers:(BOOL) value_ {
  hasMaxMembers_ = !!value_;
}
@synthesize maxMembers;
@synthesize membersArray;
@dynamic members;
- (void) dealloc {
  self.channelName = nil;
  self.membersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.response = 0;
    self.channelName = @"";
    self.channelId = 0L;
    self.maxMembers = 0;
  }
  return self;
}
static CMsgDOTAJoinChatChannelResponse* defaultCMsgDOTAJoinChatChannelResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAJoinChatChannelResponse class]) {
    defaultCMsgDOTAJoinChatChannelResponseInstance = [[CMsgDOTAJoinChatChannelResponse alloc] init];
  }
}
+ (CMsgDOTAJoinChatChannelResponse*) defaultInstance {
  return defaultCMsgDOTAJoinChatChannelResponseInstance;
}
- (CMsgDOTAJoinChatChannelResponse*) defaultInstance {
  return defaultCMsgDOTAJoinChatChannelResponseInstance;
}
- (PBArray *)members {
  return membersArray;
}
- (CMsgDOTAChatMember*)membersAtIndex:(NSUInteger)index {
  return [membersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResponse) {
    [output writeUInt32:1 value:self.response];
  }
  if (self.hasChannelName) {
    [output writeString:2 value:self.channelName];
  }
  if (self.hasChannelId) {
    [output writeFixed64:3 value:self.channelId];
  }
  if (self.hasMaxMembers) {
    [output writeUInt32:4 value:self.maxMembers];
  }
  for (CMsgDOTAChatMember *element in self.membersArray) {
    [output writeMessage:5 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResponse) {
    size_ += computeUInt32Size(1, self.response);
  }
  if (self.hasChannelName) {
    size_ += computeStringSize(2, self.channelName);
  }
  if (self.hasChannelId) {
    size_ += computeFixed64Size(3, self.channelId);
  }
  if (self.hasMaxMembers) {
    size_ += computeUInt32Size(4, self.maxMembers);
  }
  for (CMsgDOTAChatMember *element in self.membersArray) {
    size_ += computeMessageSize(5, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAJoinChatChannelResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAJoinChatChannelResponse*)[[[CMsgDOTAJoinChatChannelResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAJoinChatChannelResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAJoinChatChannelResponse*)[[[CMsgDOTAJoinChatChannelResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAJoinChatChannelResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAJoinChatChannelResponse*)[[[CMsgDOTAJoinChatChannelResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAJoinChatChannelResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAJoinChatChannelResponse*)[[[CMsgDOTAJoinChatChannelResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAJoinChatChannelResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAJoinChatChannelResponse*)[[[CMsgDOTAJoinChatChannelResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAJoinChatChannelResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAJoinChatChannelResponse*)[[[CMsgDOTAJoinChatChannelResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAJoinChatChannelResponse_Builder*) builder {
  return [[[CMsgDOTAJoinChatChannelResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAJoinChatChannelResponse_Builder*) builderWithPrototype:(CMsgDOTAJoinChatChannelResponse*) prototype {
  return [[CMsgDOTAJoinChatChannelResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) builder {
  return [CMsgDOTAJoinChatChannelResponse builder];
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) toBuilder {
  return [CMsgDOTAJoinChatChannelResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResponse) {
    [output appendFormat:@"%@%@: %@\n", indent, @"response", [NSNumber numberWithInt:self.response]];
  }
  if (self.hasChannelName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelName", self.channelName];
  }
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithLongLong:self.channelId]];
  }
  if (self.hasMaxMembers) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxMembers", [NSNumber numberWithInt:self.maxMembers]];
  }
  for (CMsgDOTAChatMember* element in self.membersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"members"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAJoinChatChannelResponse class]]) {
    return NO;
  }
  CMsgDOTAJoinChatChannelResponse *otherMessage = other;
  return
      self.hasResponse == otherMessage.hasResponse &&
      (!self.hasResponse || self.response == otherMessage.response) &&
      self.hasChannelName == otherMessage.hasChannelName &&
      (!self.hasChannelName || [self.channelName isEqual:otherMessage.channelName]) &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasMaxMembers == otherMessage.hasMaxMembers &&
      (!self.hasMaxMembers || self.maxMembers == otherMessage.maxMembers) &&
      [self.membersArray isEqualToArray:otherMessage.membersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasResponse) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.response] hash];
  }
  if (self.hasChannelName) {
    hashCode = hashCode * 31 + [self.channelName hash];
  }
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.channelId] hash];
  }
  if (self.hasMaxMembers) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.maxMembers] hash];
  }
  for (CMsgDOTAChatMember* element in self.membersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAJoinChatChannelResponse_Builder()
@property (retain) CMsgDOTAJoinChatChannelResponse* _builderResult;
@end

@implementation CMsgDOTAJoinChatChannelResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAJoinChatChannelResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAJoinChatChannelResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) clone {
  return [CMsgDOTAJoinChatChannelResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAJoinChatChannelResponse*) defaultInstance {
  return [CMsgDOTAJoinChatChannelResponse defaultInstance];
}
- (CMsgDOTAJoinChatChannelResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAJoinChatChannelResponse*) buildPartial {
  CMsgDOTAJoinChatChannelResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) mergeFrom:(CMsgDOTAJoinChatChannelResponse*) other {
  if (other == [CMsgDOTAJoinChatChannelResponse defaultInstance]) {
    return self;
  }
  if (other.hasResponse) {
    [self setResponse:other.response];
  }
  if (other.hasChannelName) {
    [self setChannelName:other.channelName];
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasMaxMembers) {
    [self setMaxMembers:other.maxMembers];
  }
  if (other.membersArray.count > 0) {
    if (_builderResult.membersArray == nil) {
      _builderResult.membersArray = [[other.membersArray copyWithZone:[other.membersArray zone]] autorelease];
    } else {
      [_builderResult.membersArray appendArray:other.membersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResponse:[input readUInt32]];
        break;
      }
      case 18: {
        [self setChannelName:[input readString]];
        break;
      }
      case 25: {
        [self setChannelId:[input readFixed64]];
        break;
      }
      case 32: {
        [self setMaxMembers:[input readUInt32]];
        break;
      }
      case 42: {
        CMsgDOTAChatMember_Builder* subBuilder = [CMsgDOTAChatMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMembers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasResponse {
  return _builderResult.hasResponse;
}
- (uint32_t) response {
  return _builderResult.response;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) setResponse:(uint32_t) value {
  _builderResult.hasResponse = YES;
  _builderResult.response = value;
  return self;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) clearResponse {
  _builderResult.hasResponse = NO;
  _builderResult.response = 0;
  return self;
}
- (BOOL) hasChannelName {
  return _builderResult.hasChannelName;
}
- (NSString*) channelName {
  return _builderResult.channelName;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) setChannelName:(NSString*) value {
  _builderResult.hasChannelName = YES;
  _builderResult.channelName = value;
  return self;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) clearChannelName {
  _builderResult.hasChannelName = NO;
  _builderResult.channelName = @"";
  return self;
}
- (BOOL) hasChannelId {
  return _builderResult.hasChannelId;
}
- (uint64_t) channelId {
  return _builderResult.channelId;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) setChannelId:(uint64_t) value {
  _builderResult.hasChannelId = YES;
  _builderResult.channelId = value;
  return self;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) clearChannelId {
  _builderResult.hasChannelId = NO;
  _builderResult.channelId = 0L;
  return self;
}
- (BOOL) hasMaxMembers {
  return _builderResult.hasMaxMembers;
}
- (uint32_t) maxMembers {
  return _builderResult.maxMembers;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) setMaxMembers:(uint32_t) value {
  _builderResult.hasMaxMembers = YES;
  _builderResult.maxMembers = value;
  return self;
}
- (CMsgDOTAJoinChatChannelResponse_Builder*) clearMaxMembers {
  _builderResult.hasMaxMembers = NO;
  _builderResult.maxMembers = 0;
  return self;
}
- (PBAppendableArray *)members {
  return _builderResult.membersArray;
}
- (CMsgDOTAChatMember*)membersAtIndex:(NSUInteger)index {
  return [_builderResult membersAtIndex:index];
}
- (CMsgDOTAJoinChatChannelResponse_Builder *)addMembers:(CMsgDOTAChatMember*)value {
  if (_builderResult.membersArray == nil) {
    _builderResult.membersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.membersArray addObject:value];
  return self;
}
- (CMsgDOTAJoinChatChannelResponse_Builder *)setMembersArray:(NSArray *)array {
  _builderResult.membersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAJoinChatChannelResponse_Builder *)setMembersValues:(const CMsgDOTAChatMember* *)values count:(NSUInteger)count {
  _builderResult.membersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAJoinChatChannelResponse_Builder *)clearMembers {
  _builderResult.membersArray = nil;
  return self;
}
@end

@interface CMsgDOTAChatChannelFullUpdate ()
@property uint64_t channelId;
@property (retain) PBAppendableArray * membersArray;
@end

@implementation CMsgDOTAChatChannelFullUpdate

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value_ {
  hasChannelId_ = !!value_;
}
@synthesize channelId;
@synthesize membersArray;
@dynamic members;
- (void) dealloc {
  self.membersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelId = 0L;
  }
  return self;
}
static CMsgDOTAChatChannelFullUpdate* defaultCMsgDOTAChatChannelFullUpdateInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAChatChannelFullUpdate class]) {
    defaultCMsgDOTAChatChannelFullUpdateInstance = [[CMsgDOTAChatChannelFullUpdate alloc] init];
  }
}
+ (CMsgDOTAChatChannelFullUpdate*) defaultInstance {
  return defaultCMsgDOTAChatChannelFullUpdateInstance;
}
- (CMsgDOTAChatChannelFullUpdate*) defaultInstance {
  return defaultCMsgDOTAChatChannelFullUpdateInstance;
}
- (PBArray *)members {
  return membersArray;
}
- (CMsgDOTAChatMember*)membersAtIndex:(NSUInteger)index {
  return [membersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeFixed64:1 value:self.channelId];
  }
  for (CMsgDOTAChatMember *element in self.membersArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelId) {
    size_ += computeFixed64Size(1, self.channelId);
  }
  for (CMsgDOTAChatMember *element in self.membersArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAChatChannelFullUpdate*) parseFromData:(NSData*) data {
  return (CMsgDOTAChatChannelFullUpdate*)[[[CMsgDOTAChatChannelFullUpdate builder] mergeFromData:data] build];
}
+ (CMsgDOTAChatChannelFullUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAChatChannelFullUpdate*)[[[CMsgDOTAChatChannelFullUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAChatChannelFullUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAChatChannelFullUpdate*)[[[CMsgDOTAChatChannelFullUpdate builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAChatChannelFullUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAChatChannelFullUpdate*)[[[CMsgDOTAChatChannelFullUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAChatChannelFullUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAChatChannelFullUpdate*)[[[CMsgDOTAChatChannelFullUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAChatChannelFullUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAChatChannelFullUpdate*)[[[CMsgDOTAChatChannelFullUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAChatChannelFullUpdate_Builder*) builder {
  return [[[CMsgDOTAChatChannelFullUpdate_Builder alloc] init] autorelease];
}
+ (CMsgDOTAChatChannelFullUpdate_Builder*) builderWithPrototype:(CMsgDOTAChatChannelFullUpdate*) prototype {
  return [[CMsgDOTAChatChannelFullUpdate builder] mergeFrom:prototype];
}
- (CMsgDOTAChatChannelFullUpdate_Builder*) builder {
  return [CMsgDOTAChatChannelFullUpdate builder];
}
- (CMsgDOTAChatChannelFullUpdate_Builder*) toBuilder {
  return [CMsgDOTAChatChannelFullUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithLongLong:self.channelId]];
  }
  for (CMsgDOTAChatMember* element in self.membersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"members"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAChatChannelFullUpdate class]]) {
    return NO;
  }
  CMsgDOTAChatChannelFullUpdate *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      [self.membersArray isEqualToArray:otherMessage.membersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.channelId] hash];
  }
  for (CMsgDOTAChatMember* element in self.membersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAChatChannelFullUpdate_Builder()
@property (retain) CMsgDOTAChatChannelFullUpdate* _builderResult;
@end

@implementation CMsgDOTAChatChannelFullUpdate_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAChatChannelFullUpdate alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAChatChannelFullUpdate_Builder*) clear {
  _builderResult = [[[CMsgDOTAChatChannelFullUpdate alloc] init] autorelease];
  return self;
}
- (CMsgDOTAChatChannelFullUpdate_Builder*) clone {
  return [CMsgDOTAChatChannelFullUpdate builderWithPrototype:_builderResult];
}
- (CMsgDOTAChatChannelFullUpdate*) defaultInstance {
  return [CMsgDOTAChatChannelFullUpdate defaultInstance];
}
- (CMsgDOTAChatChannelFullUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAChatChannelFullUpdate*) buildPartial {
  CMsgDOTAChatChannelFullUpdate* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAChatChannelFullUpdate_Builder*) mergeFrom:(CMsgDOTAChatChannelFullUpdate*) other {
  if (other == [CMsgDOTAChatChannelFullUpdate defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.membersArray.count > 0) {
    if (_builderResult.membersArray == nil) {
      _builderResult.membersArray = [[other.membersArray copyWithZone:[other.membersArray zone]] autorelease];
    } else {
      [_builderResult.membersArray appendArray:other.membersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAChatChannelFullUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAChatChannelFullUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setChannelId:[input readFixed64]];
        break;
      }
      case 18: {
        CMsgDOTAChatMember_Builder* subBuilder = [CMsgDOTAChatMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMembers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return _builderResult.hasChannelId;
}
- (uint64_t) channelId {
  return _builderResult.channelId;
}
- (CMsgDOTAChatChannelFullUpdate_Builder*) setChannelId:(uint64_t) value {
  _builderResult.hasChannelId = YES;
  _builderResult.channelId = value;
  return self;
}
- (CMsgDOTAChatChannelFullUpdate_Builder*) clearChannelId {
  _builderResult.hasChannelId = NO;
  _builderResult.channelId = 0L;
  return self;
}
- (PBAppendableArray *)members {
  return _builderResult.membersArray;
}
- (CMsgDOTAChatMember*)membersAtIndex:(NSUInteger)index {
  return [_builderResult membersAtIndex:index];
}
- (CMsgDOTAChatChannelFullUpdate_Builder *)addMembers:(CMsgDOTAChatMember*)value {
  if (_builderResult.membersArray == nil) {
    _builderResult.membersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.membersArray addObject:value];
  return self;
}
- (CMsgDOTAChatChannelFullUpdate_Builder *)setMembersArray:(NSArray *)array {
  _builderResult.membersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAChatChannelFullUpdate_Builder *)setMembersValues:(const CMsgDOTAChatMember* *)values count:(NSUInteger)count {
  _builderResult.membersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAChatChannelFullUpdate_Builder *)clearMembers {
  _builderResult.membersArray = nil;
  return self;
}
@end

@interface CMsgDOTAOtherJoinedChatChannel ()
@property uint64_t channelId;
@property (retain) NSString* personaName;
@property uint64_t steamId;
@end

@implementation CMsgDOTAOtherJoinedChatChannel

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value_ {
  hasChannelId_ = !!value_;
}
@synthesize channelId;
- (BOOL) hasPersonaName {
  return !!hasPersonaName_;
}
- (void) setHasPersonaName:(BOOL) value_ {
  hasPersonaName_ = !!value_;
}
@synthesize personaName;
- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (void) dealloc {
  self.personaName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelId = 0L;
    self.personaName = @"";
    self.steamId = 0L;
  }
  return self;
}
static CMsgDOTAOtherJoinedChatChannel* defaultCMsgDOTAOtherJoinedChatChannelInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAOtherJoinedChatChannel class]) {
    defaultCMsgDOTAOtherJoinedChatChannelInstance = [[CMsgDOTAOtherJoinedChatChannel alloc] init];
  }
}
+ (CMsgDOTAOtherJoinedChatChannel*) defaultInstance {
  return defaultCMsgDOTAOtherJoinedChatChannelInstance;
}
- (CMsgDOTAOtherJoinedChatChannel*) defaultInstance {
  return defaultCMsgDOTAOtherJoinedChatChannelInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeFixed64:1 value:self.channelId];
  }
  if (self.hasPersonaName) {
    [output writeString:2 value:self.personaName];
  }
  if (self.hasSteamId) {
    [output writeFixed64:3 value:self.steamId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelId) {
    size_ += computeFixed64Size(1, self.channelId);
  }
  if (self.hasPersonaName) {
    size_ += computeStringSize(2, self.personaName);
  }
  if (self.hasSteamId) {
    size_ += computeFixed64Size(3, self.steamId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAOtherJoinedChatChannel*) parseFromData:(NSData*) data {
  return (CMsgDOTAOtherJoinedChatChannel*)[[[CMsgDOTAOtherJoinedChatChannel builder] mergeFromData:data] build];
}
+ (CMsgDOTAOtherJoinedChatChannel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAOtherJoinedChatChannel*)[[[CMsgDOTAOtherJoinedChatChannel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAOtherJoinedChatChannel*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAOtherJoinedChatChannel*)[[[CMsgDOTAOtherJoinedChatChannel builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAOtherJoinedChatChannel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAOtherJoinedChatChannel*)[[[CMsgDOTAOtherJoinedChatChannel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAOtherJoinedChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAOtherJoinedChatChannel*)[[[CMsgDOTAOtherJoinedChatChannel builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAOtherJoinedChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAOtherJoinedChatChannel*)[[[CMsgDOTAOtherJoinedChatChannel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAOtherJoinedChatChannel_Builder*) builder {
  return [[[CMsgDOTAOtherJoinedChatChannel_Builder alloc] init] autorelease];
}
+ (CMsgDOTAOtherJoinedChatChannel_Builder*) builderWithPrototype:(CMsgDOTAOtherJoinedChatChannel*) prototype {
  return [[CMsgDOTAOtherJoinedChatChannel builder] mergeFrom:prototype];
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) builder {
  return [CMsgDOTAOtherJoinedChatChannel builder];
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) toBuilder {
  return [CMsgDOTAOtherJoinedChatChannel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithLongLong:self.channelId]];
  }
  if (self.hasPersonaName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"personaName", self.personaName];
  }
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAOtherJoinedChatChannel class]]) {
    return NO;
  }
  CMsgDOTAOtherJoinedChatChannel *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasPersonaName == otherMessage.hasPersonaName &&
      (!self.hasPersonaName || [self.personaName isEqual:otherMessage.personaName]) &&
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.channelId] hash];
  }
  if (self.hasPersonaName) {
    hashCode = hashCode * 31 + [self.personaName hash];
  }
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAOtherJoinedChatChannel_Builder()
@property (retain) CMsgDOTAOtherJoinedChatChannel* _builderResult;
@end

@implementation CMsgDOTAOtherJoinedChatChannel_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAOtherJoinedChatChannel alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) clear {
  _builderResult = [[[CMsgDOTAOtherJoinedChatChannel alloc] init] autorelease];
  return self;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) clone {
  return [CMsgDOTAOtherJoinedChatChannel builderWithPrototype:_builderResult];
}
- (CMsgDOTAOtherJoinedChatChannel*) defaultInstance {
  return [CMsgDOTAOtherJoinedChatChannel defaultInstance];
}
- (CMsgDOTAOtherJoinedChatChannel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAOtherJoinedChatChannel*) buildPartial {
  CMsgDOTAOtherJoinedChatChannel* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) mergeFrom:(CMsgDOTAOtherJoinedChatChannel*) other {
  if (other == [CMsgDOTAOtherJoinedChatChannel defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasPersonaName) {
    [self setPersonaName:other.personaName];
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setChannelId:[input readFixed64]];
        break;
      }
      case 18: {
        [self setPersonaName:[input readString]];
        break;
      }
      case 25: {
        [self setSteamId:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return _builderResult.hasChannelId;
}
- (uint64_t) channelId {
  return _builderResult.channelId;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) setChannelId:(uint64_t) value {
  _builderResult.hasChannelId = YES;
  _builderResult.channelId = value;
  return self;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) clearChannelId {
  _builderResult.hasChannelId = NO;
  _builderResult.channelId = 0L;
  return self;
}
- (BOOL) hasPersonaName {
  return _builderResult.hasPersonaName;
}
- (NSString*) personaName {
  return _builderResult.personaName;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) setPersonaName:(NSString*) value {
  _builderResult.hasPersonaName = YES;
  _builderResult.personaName = value;
  return self;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) clearPersonaName {
  _builderResult.hasPersonaName = NO;
  _builderResult.personaName = @"";
  return self;
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgDOTAOtherJoinedChatChannel_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
@end

@interface CMsgDOTAOtherLeftChatChannel ()
@property uint64_t channelId;
@property uint64_t steamId;
@end

@implementation CMsgDOTAOtherLeftChatChannel

- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value_ {
  hasChannelId_ = !!value_;
}
@synthesize channelId;
- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelId = 0L;
    self.steamId = 0L;
  }
  return self;
}
static CMsgDOTAOtherLeftChatChannel* defaultCMsgDOTAOtherLeftChatChannelInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAOtherLeftChatChannel class]) {
    defaultCMsgDOTAOtherLeftChatChannelInstance = [[CMsgDOTAOtherLeftChatChannel alloc] init];
  }
}
+ (CMsgDOTAOtherLeftChatChannel*) defaultInstance {
  return defaultCMsgDOTAOtherLeftChatChannelInstance;
}
- (CMsgDOTAOtherLeftChatChannel*) defaultInstance {
  return defaultCMsgDOTAOtherLeftChatChannelInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelId) {
    [output writeFixed64:1 value:self.channelId];
  }
  if (self.hasSteamId) {
    [output writeFixed64:2 value:self.steamId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelId) {
    size_ += computeFixed64Size(1, self.channelId);
  }
  if (self.hasSteamId) {
    size_ += computeFixed64Size(2, self.steamId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAOtherLeftChatChannel*) parseFromData:(NSData*) data {
  return (CMsgDOTAOtherLeftChatChannel*)[[[CMsgDOTAOtherLeftChatChannel builder] mergeFromData:data] build];
}
+ (CMsgDOTAOtherLeftChatChannel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAOtherLeftChatChannel*)[[[CMsgDOTAOtherLeftChatChannel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAOtherLeftChatChannel*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAOtherLeftChatChannel*)[[[CMsgDOTAOtherLeftChatChannel builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAOtherLeftChatChannel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAOtherLeftChatChannel*)[[[CMsgDOTAOtherLeftChatChannel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAOtherLeftChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAOtherLeftChatChannel*)[[[CMsgDOTAOtherLeftChatChannel builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAOtherLeftChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAOtherLeftChatChannel*)[[[CMsgDOTAOtherLeftChatChannel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAOtherLeftChatChannel_Builder*) builder {
  return [[[CMsgDOTAOtherLeftChatChannel_Builder alloc] init] autorelease];
}
+ (CMsgDOTAOtherLeftChatChannel_Builder*) builderWithPrototype:(CMsgDOTAOtherLeftChatChannel*) prototype {
  return [[CMsgDOTAOtherLeftChatChannel builder] mergeFrom:prototype];
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) builder {
  return [CMsgDOTAOtherLeftChatChannel builder];
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) toBuilder {
  return [CMsgDOTAOtherLeftChatChannel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithLongLong:self.channelId]];
  }
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAOtherLeftChatChannel class]]) {
    return NO;
  }
  CMsgDOTAOtherLeftChatChannel *otherMessage = other;
  return
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.channelId] hash];
  }
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAOtherLeftChatChannel_Builder()
@property (retain) CMsgDOTAOtherLeftChatChannel* _builderResult;
@end

@implementation CMsgDOTAOtherLeftChatChannel_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAOtherLeftChatChannel alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) clear {
  _builderResult = [[[CMsgDOTAOtherLeftChatChannel alloc] init] autorelease];
  return self;
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) clone {
  return [CMsgDOTAOtherLeftChatChannel builderWithPrototype:_builderResult];
}
- (CMsgDOTAOtherLeftChatChannel*) defaultInstance {
  return [CMsgDOTAOtherLeftChatChannel defaultInstance];
}
- (CMsgDOTAOtherLeftChatChannel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAOtherLeftChatChannel*) buildPartial {
  CMsgDOTAOtherLeftChatChannel* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) mergeFrom:(CMsgDOTAOtherLeftChatChannel*) other {
  if (other == [CMsgDOTAOtherLeftChatChannel defaultInstance]) {
    return self;
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setChannelId:[input readFixed64]];
        break;
      }
      case 17: {
        [self setSteamId:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelId {
  return _builderResult.hasChannelId;
}
- (uint64_t) channelId {
  return _builderResult.channelId;
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) setChannelId:(uint64_t) value {
  _builderResult.hasChannelId = YES;
  _builderResult.channelId = value;
  return self;
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) clearChannelId {
  _builderResult.hasChannelId = NO;
  _builderResult.channelId = 0L;
  return self;
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgDOTAOtherLeftChatChannel_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
@end

@interface CMsgDOTARequestDefaultChatChannel ()
@end

@implementation CMsgDOTARequestDefaultChatChannel

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTARequestDefaultChatChannel* defaultCMsgDOTARequestDefaultChatChannelInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestDefaultChatChannel class]) {
    defaultCMsgDOTARequestDefaultChatChannelInstance = [[CMsgDOTARequestDefaultChatChannel alloc] init];
  }
}
+ (CMsgDOTARequestDefaultChatChannel*) defaultInstance {
  return defaultCMsgDOTARequestDefaultChatChannelInstance;
}
- (CMsgDOTARequestDefaultChatChannel*) defaultInstance {
  return defaultCMsgDOTARequestDefaultChatChannelInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestDefaultChatChannel*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestDefaultChatChannel*)[[[CMsgDOTARequestDefaultChatChannel builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestDefaultChatChannel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestDefaultChatChannel*)[[[CMsgDOTARequestDefaultChatChannel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestDefaultChatChannel*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestDefaultChatChannel*)[[[CMsgDOTARequestDefaultChatChannel builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestDefaultChatChannel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestDefaultChatChannel*)[[[CMsgDOTARequestDefaultChatChannel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestDefaultChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestDefaultChatChannel*)[[[CMsgDOTARequestDefaultChatChannel builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestDefaultChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestDefaultChatChannel*)[[[CMsgDOTARequestDefaultChatChannel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestDefaultChatChannel_Builder*) builder {
  return [[[CMsgDOTARequestDefaultChatChannel_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestDefaultChatChannel_Builder*) builderWithPrototype:(CMsgDOTARequestDefaultChatChannel*) prototype {
  return [[CMsgDOTARequestDefaultChatChannel builder] mergeFrom:prototype];
}
- (CMsgDOTARequestDefaultChatChannel_Builder*) builder {
  return [CMsgDOTARequestDefaultChatChannel builder];
}
- (CMsgDOTARequestDefaultChatChannel_Builder*) toBuilder {
  return [CMsgDOTARequestDefaultChatChannel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestDefaultChatChannel class]]) {
    return NO;
  }
  CMsgDOTARequestDefaultChatChannel *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestDefaultChatChannel_Builder()
@property (retain) CMsgDOTARequestDefaultChatChannel* _builderResult;
@end

@implementation CMsgDOTARequestDefaultChatChannel_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestDefaultChatChannel alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestDefaultChatChannel_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestDefaultChatChannel alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestDefaultChatChannel_Builder*) clone {
  return [CMsgDOTARequestDefaultChatChannel builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestDefaultChatChannel*) defaultInstance {
  return [CMsgDOTARequestDefaultChatChannel defaultInstance];
}
- (CMsgDOTARequestDefaultChatChannel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestDefaultChatChannel*) buildPartial {
  CMsgDOTARequestDefaultChatChannel* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestDefaultChatChannel_Builder*) mergeFrom:(CMsgDOTARequestDefaultChatChannel*) other {
  if (other == [CMsgDOTARequestDefaultChatChannel defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestDefaultChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestDefaultChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTARequestDefaultChatChannelResponse ()
@property (retain) NSString* channelName;
@property uint64_t channelId;
@end

@implementation CMsgDOTARequestDefaultChatChannelResponse

- (BOOL) hasChannelName {
  return !!hasChannelName_;
}
- (void) setHasChannelName:(BOOL) value_ {
  hasChannelName_ = !!value_;
}
@synthesize channelName;
- (BOOL) hasChannelId {
  return !!hasChannelId_;
}
- (void) setHasChannelId:(BOOL) value_ {
  hasChannelId_ = !!value_;
}
@synthesize channelId;
- (void) dealloc {
  self.channelName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelName = @"";
    self.channelId = 0L;
  }
  return self;
}
static CMsgDOTARequestDefaultChatChannelResponse* defaultCMsgDOTARequestDefaultChatChannelResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestDefaultChatChannelResponse class]) {
    defaultCMsgDOTARequestDefaultChatChannelResponseInstance = [[CMsgDOTARequestDefaultChatChannelResponse alloc] init];
  }
}
+ (CMsgDOTARequestDefaultChatChannelResponse*) defaultInstance {
  return defaultCMsgDOTARequestDefaultChatChannelResponseInstance;
}
- (CMsgDOTARequestDefaultChatChannelResponse*) defaultInstance {
  return defaultCMsgDOTARequestDefaultChatChannelResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelName) {
    [output writeString:1 value:self.channelName];
  }
  if (self.hasChannelId) {
    [output writeFixed64:2 value:self.channelId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelName) {
    size_ += computeStringSize(1, self.channelName);
  }
  if (self.hasChannelId) {
    size_ += computeFixed64Size(2, self.channelId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestDefaultChatChannelResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestDefaultChatChannelResponse*)[[[CMsgDOTARequestDefaultChatChannelResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestDefaultChatChannelResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestDefaultChatChannelResponse*)[[[CMsgDOTARequestDefaultChatChannelResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestDefaultChatChannelResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestDefaultChatChannelResponse*)[[[CMsgDOTARequestDefaultChatChannelResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestDefaultChatChannelResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestDefaultChatChannelResponse*)[[[CMsgDOTARequestDefaultChatChannelResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestDefaultChatChannelResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestDefaultChatChannelResponse*)[[[CMsgDOTARequestDefaultChatChannelResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestDefaultChatChannelResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestDefaultChatChannelResponse*)[[[CMsgDOTARequestDefaultChatChannelResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestDefaultChatChannelResponse_Builder*) builder {
  return [[[CMsgDOTARequestDefaultChatChannelResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestDefaultChatChannelResponse_Builder*) builderWithPrototype:(CMsgDOTARequestDefaultChatChannelResponse*) prototype {
  return [[CMsgDOTARequestDefaultChatChannelResponse builder] mergeFrom:prototype];
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) builder {
  return [CMsgDOTARequestDefaultChatChannelResponse builder];
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) toBuilder {
  return [CMsgDOTARequestDefaultChatChannelResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelName", self.channelName];
  }
  if (self.hasChannelId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelId", [NSNumber numberWithLongLong:self.channelId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestDefaultChatChannelResponse class]]) {
    return NO;
  }
  CMsgDOTARequestDefaultChatChannelResponse *otherMessage = other;
  return
      self.hasChannelName == otherMessage.hasChannelName &&
      (!self.hasChannelName || [self.channelName isEqual:otherMessage.channelName]) &&
      self.hasChannelId == otherMessage.hasChannelId &&
      (!self.hasChannelId || self.channelId == otherMessage.channelId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelName) {
    hashCode = hashCode * 31 + [self.channelName hash];
  }
  if (self.hasChannelId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.channelId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestDefaultChatChannelResponse_Builder()
@property (retain) CMsgDOTARequestDefaultChatChannelResponse* _builderResult;
@end

@implementation CMsgDOTARequestDefaultChatChannelResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestDefaultChatChannelResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestDefaultChatChannelResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) clone {
  return [CMsgDOTARequestDefaultChatChannelResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestDefaultChatChannelResponse*) defaultInstance {
  return [CMsgDOTARequestDefaultChatChannelResponse defaultInstance];
}
- (CMsgDOTARequestDefaultChatChannelResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestDefaultChatChannelResponse*) buildPartial {
  CMsgDOTARequestDefaultChatChannelResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) mergeFrom:(CMsgDOTARequestDefaultChatChannelResponse*) other {
  if (other == [CMsgDOTARequestDefaultChatChannelResponse defaultInstance]) {
    return self;
  }
  if (other.hasChannelName) {
    [self setChannelName:other.channelName];
  }
  if (other.hasChannelId) {
    [self setChannelId:other.channelId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setChannelName:[input readString]];
        break;
      }
      case 17: {
        [self setChannelId:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasChannelName {
  return _builderResult.hasChannelName;
}
- (NSString*) channelName {
  return _builderResult.channelName;
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) setChannelName:(NSString*) value {
  _builderResult.hasChannelName = YES;
  _builderResult.channelName = value;
  return self;
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) clearChannelName {
  _builderResult.hasChannelName = NO;
  _builderResult.channelName = @"";
  return self;
}
- (BOOL) hasChannelId {
  return _builderResult.hasChannelId;
}
- (uint64_t) channelId {
  return _builderResult.channelId;
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) setChannelId:(uint64_t) value {
  _builderResult.hasChannelId = YES;
  _builderResult.channelId = value;
  return self;
}
- (CMsgDOTARequestDefaultChatChannelResponse_Builder*) clearChannelId {
  _builderResult.hasChannelId = NO;
  _builderResult.channelId = 0L;
  return self;
}
@end

@interface CMsgDOTARequestChatChannelList ()
@end

@implementation CMsgDOTARequestChatChannelList

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTARequestChatChannelList* defaultCMsgDOTARequestChatChannelListInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestChatChannelList class]) {
    defaultCMsgDOTARequestChatChannelListInstance = [[CMsgDOTARequestChatChannelList alloc] init];
  }
}
+ (CMsgDOTARequestChatChannelList*) defaultInstance {
  return defaultCMsgDOTARequestChatChannelListInstance;
}
- (CMsgDOTARequestChatChannelList*) defaultInstance {
  return defaultCMsgDOTARequestChatChannelListInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestChatChannelList*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestChatChannelList*)[[[CMsgDOTARequestChatChannelList builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestChatChannelList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestChatChannelList*)[[[CMsgDOTARequestChatChannelList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestChatChannelList*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestChatChannelList*)[[[CMsgDOTARequestChatChannelList builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestChatChannelList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestChatChannelList*)[[[CMsgDOTARequestChatChannelList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestChatChannelList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestChatChannelList*)[[[CMsgDOTARequestChatChannelList builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestChatChannelList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestChatChannelList*)[[[CMsgDOTARequestChatChannelList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestChatChannelList_Builder*) builder {
  return [[[CMsgDOTARequestChatChannelList_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestChatChannelList_Builder*) builderWithPrototype:(CMsgDOTARequestChatChannelList*) prototype {
  return [[CMsgDOTARequestChatChannelList builder] mergeFrom:prototype];
}
- (CMsgDOTARequestChatChannelList_Builder*) builder {
  return [CMsgDOTARequestChatChannelList builder];
}
- (CMsgDOTARequestChatChannelList_Builder*) toBuilder {
  return [CMsgDOTARequestChatChannelList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestChatChannelList class]]) {
    return NO;
  }
  CMsgDOTARequestChatChannelList *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestChatChannelList_Builder()
@property (retain) CMsgDOTARequestChatChannelList* _builderResult;
@end

@implementation CMsgDOTARequestChatChannelList_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestChatChannelList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestChatChannelList_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestChatChannelList alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestChatChannelList_Builder*) clone {
  return [CMsgDOTARequestChatChannelList builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestChatChannelList*) defaultInstance {
  return [CMsgDOTARequestChatChannelList defaultInstance];
}
- (CMsgDOTARequestChatChannelList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestChatChannelList*) buildPartial {
  CMsgDOTARequestChatChannelList* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestChatChannelList_Builder*) mergeFrom:(CMsgDOTARequestChatChannelList*) other {
  if (other == [CMsgDOTARequestChatChannelList defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestChatChannelList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestChatChannelList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTARequestChatChannelListResponse ()
@property (retain) PBAppendableArray * channelsArray;
@end

@implementation CMsgDOTARequestChatChannelListResponse

@synthesize channelsArray;
@dynamic channels;
- (void) dealloc {
  self.channelsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTARequestChatChannelListResponse* defaultCMsgDOTARequestChatChannelListResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestChatChannelListResponse class]) {
    defaultCMsgDOTARequestChatChannelListResponseInstance = [[CMsgDOTARequestChatChannelListResponse alloc] init];
  }
}
+ (CMsgDOTARequestChatChannelListResponse*) defaultInstance {
  return defaultCMsgDOTARequestChatChannelListResponseInstance;
}
- (CMsgDOTARequestChatChannelListResponse*) defaultInstance {
  return defaultCMsgDOTARequestChatChannelListResponseInstance;
}
- (PBArray *)channels {
  return channelsArray;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel*)channelsAtIndex:(NSUInteger)index {
  return [channelsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgDOTARequestChatChannelListResponse_ChatChannel *element in self.channelsArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgDOTARequestChatChannelListResponse_ChatChannel *element in self.channelsArray) {
    size_ += computeMessageSize(1, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestChatChannelListResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestChatChannelListResponse*)[[[CMsgDOTARequestChatChannelListResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestChatChannelListResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestChatChannelListResponse*)[[[CMsgDOTARequestChatChannelListResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestChatChannelListResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestChatChannelListResponse*)[[[CMsgDOTARequestChatChannelListResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestChatChannelListResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestChatChannelListResponse*)[[[CMsgDOTARequestChatChannelListResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestChatChannelListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestChatChannelListResponse*)[[[CMsgDOTARequestChatChannelListResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestChatChannelListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestChatChannelListResponse*)[[[CMsgDOTARequestChatChannelListResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestChatChannelListResponse_Builder*) builder {
  return [[[CMsgDOTARequestChatChannelListResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestChatChannelListResponse_Builder*) builderWithPrototype:(CMsgDOTARequestChatChannelListResponse*) prototype {
  return [[CMsgDOTARequestChatChannelListResponse builder] mergeFrom:prototype];
}
- (CMsgDOTARequestChatChannelListResponse_Builder*) builder {
  return [CMsgDOTARequestChatChannelListResponse builder];
}
- (CMsgDOTARequestChatChannelListResponse_Builder*) toBuilder {
  return [CMsgDOTARequestChatChannelListResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgDOTARequestChatChannelListResponse_ChatChannel* element in self.channelsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"channels"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestChatChannelListResponse class]]) {
    return NO;
  }
  CMsgDOTARequestChatChannelListResponse *otherMessage = other;
  return
      [self.channelsArray isEqualToArray:otherMessage.channelsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgDOTARequestChatChannelListResponse_ChatChannel* element in self.channelsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestChatChannelListResponse_ChatChannel ()
@property (retain) NSString* channelName;
@property uint32_t numMembers;
@property DOTAChatChannelType_t channel_type;
@end

@implementation CMsgDOTARequestChatChannelListResponse_ChatChannel

- (BOOL) hasChannelName {
  return !!hasChannelName_;
}
- (void) setHasChannelName:(BOOL) value_ {
  hasChannelName_ = !!value_;
}
@synthesize channelName;
- (BOOL) hasNumMembers {
  return !!hasNumMembers_;
}
- (void) setHasNumMembers:(BOOL) value_ {
  hasNumMembers_ = !!value_;
}
@synthesize numMembers;
- (BOOL) haschannel_type {
  return !!haschannel_type_;
}
- (void) setHaschannel_type:(BOOL) value_ {
  haschannel_type_ = !!value_;
}
@synthesize channel_type;
- (void) dealloc {
  self.channelName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.channelName = @"";
    self.numMembers = 0;
    self.channel_type = DOTAChatChannelType_tDOTAChannelType_Regional;
  }
  return self;
}
static CMsgDOTARequestChatChannelListResponse_ChatChannel* defaultCMsgDOTARequestChatChannelListResponse_ChatChannelInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestChatChannelListResponse_ChatChannel class]) {
    defaultCMsgDOTARequestChatChannelListResponse_ChatChannelInstance = [[CMsgDOTARequestChatChannelListResponse_ChatChannel alloc] init];
  }
}
+ (CMsgDOTARequestChatChannelListResponse_ChatChannel*) defaultInstance {
  return defaultCMsgDOTARequestChatChannelListResponse_ChatChannelInstance;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel*) defaultInstance {
  return defaultCMsgDOTARequestChatChannelListResponse_ChatChannelInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChannelName) {
    [output writeString:1 value:self.channelName];
  }
  if (self.hasNumMembers) {
    [output writeUInt32:2 value:self.numMembers];
  }
  if (self.haschannel_type) {
    [output writeEnum:3 value:self.channel_type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChannelName) {
    size_ += computeStringSize(1, self.channelName);
  }
  if (self.hasNumMembers) {
    size_ += computeUInt32Size(2, self.numMembers);
  }
  if (self.haschannel_type) {
    size_ += computeEnumSize(3, self.channel_type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestChatChannelListResponse_ChatChannel*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestChatChannelListResponse_ChatChannel*)[[[CMsgDOTARequestChatChannelListResponse_ChatChannel builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestChatChannelListResponse_ChatChannel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestChatChannelListResponse_ChatChannel*)[[[CMsgDOTARequestChatChannelListResponse_ChatChannel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestChatChannelListResponse_ChatChannel*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestChatChannelListResponse_ChatChannel*)[[[CMsgDOTARequestChatChannelListResponse_ChatChannel builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestChatChannelListResponse_ChatChannel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestChatChannelListResponse_ChatChannel*)[[[CMsgDOTARequestChatChannelListResponse_ChatChannel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestChatChannelListResponse_ChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestChatChannelListResponse_ChatChannel*)[[[CMsgDOTARequestChatChannelListResponse_ChatChannel builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestChatChannelListResponse_ChatChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestChatChannelListResponse_ChatChannel*)[[[CMsgDOTARequestChatChannelListResponse_ChatChannel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) builder {
  return [[[CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) builderWithPrototype:(CMsgDOTARequestChatChannelListResponse_ChatChannel*) prototype {
  return [[CMsgDOTARequestChatChannelListResponse_ChatChannel builder] mergeFrom:prototype];
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) builder {
  return [CMsgDOTARequestChatChannelListResponse_ChatChannel builder];
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) toBuilder {
  return [CMsgDOTARequestChatChannelListResponse_ChatChannel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChannelName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelName", self.channelName];
  }
  if (self.hasNumMembers) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numMembers", [NSNumber numberWithInt:self.numMembers]];
  }
  if (self.haschannel_type) {
    [output appendFormat:@"%@%@: %d\n", indent, @"channel_type", self.channel_type];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestChatChannelListResponse_ChatChannel class]]) {
    return NO;
  }
  CMsgDOTARequestChatChannelListResponse_ChatChannel *otherMessage = other;
  return
      self.hasChannelName == otherMessage.hasChannelName &&
      (!self.hasChannelName || [self.channelName isEqual:otherMessage.channelName]) &&
      self.hasNumMembers == otherMessage.hasNumMembers &&
      (!self.hasNumMembers || self.numMembers == otherMessage.numMembers) &&
      self.haschannel_type == otherMessage.haschannel_type &&
      (!self.haschannel_type || self.channel_type == otherMessage.channel_type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasChannelName) {
    hashCode = hashCode * 31 + [self.channelName hash];
  }
  if (self.hasNumMembers) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numMembers] hash];
  }
  if (self.haschannel_type) {
    hashCode = hashCode * 31 + self.channel_type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder()
@property (retain) CMsgDOTARequestChatChannelListResponse_ChatChannel* _builderResult;
@end

@implementation CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestChatChannelListResponse_ChatChannel alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestChatChannelListResponse_ChatChannel alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) clone {
  return [CMsgDOTARequestChatChannelListResponse_ChatChannel builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel*) defaultInstance {
  return [CMsgDOTARequestChatChannelListResponse_ChatChannel defaultInstance];
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel*) buildPartial {
  CMsgDOTARequestChatChannelListResponse_ChatChannel* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) mergeFrom:(CMsgDOTARequestChatChannelListResponse_ChatChannel*) other {
  if (other == [CMsgDOTARequestChatChannelListResponse_ChatChannel defaultInstance]) {
    return self;
  }
  if (other.hasChannelName) {
    [self setChannelName:other.channelName];
  }
  if (other.hasNumMembers) {
    [self setNumMembers:other.numMembers];
  }
  if (other.haschannel_type) {
    [self setchannel_type:other.channel_type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setChannelName:[input readString]];
        break;
      }
      case 16: {
        [self setNumMembers:[input readUInt32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (DOTAChatChannelType_tIsValidValue(value)) {
          [self setchannel_type:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasChannelName {
  return _builderResult.hasChannelName;
}
- (NSString*) channelName {
  return _builderResult.channelName;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) setChannelName:(NSString*) value {
  _builderResult.hasChannelName = YES;
  _builderResult.channelName = value;
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) clearChannelName {
  _builderResult.hasChannelName = NO;
  _builderResult.channelName = @"";
  return self;
}
- (BOOL) hasNumMembers {
  return _builderResult.hasNumMembers;
}
- (uint32_t) numMembers {
  return _builderResult.numMembers;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) setNumMembers:(uint32_t) value {
  _builderResult.hasNumMembers = YES;
  _builderResult.numMembers = value;
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) clearNumMembers {
  _builderResult.hasNumMembers = NO;
  _builderResult.numMembers = 0;
  return self;
}
- (BOOL) haschannel_type {
  return _builderResult.haschannel_type;
}
- (DOTAChatChannelType_t) channel_type {
  return _builderResult.channel_type;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) setchannel_type:(DOTAChatChannelType_t) value {
  _builderResult.haschannel_type = YES;
  _builderResult.channel_type = value;
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder*) clearchannel_type {
  _builderResult.haschannel_type = NO;
  _builderResult.channel_type = DOTAChatChannelType_tDOTAChannelType_Regional;
  return self;
}
@end

@interface CMsgDOTARequestChatChannelListResponse_Builder()
@property (retain) CMsgDOTARequestChatChannelListResponse* _builderResult;
@end

@implementation CMsgDOTARequestChatChannelListResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestChatChannelListResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestChatChannelListResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestChatChannelListResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_Builder*) clone {
  return [CMsgDOTARequestChatChannelListResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestChatChannelListResponse*) defaultInstance {
  return [CMsgDOTARequestChatChannelListResponse defaultInstance];
}
- (CMsgDOTARequestChatChannelListResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestChatChannelListResponse*) buildPartial {
  CMsgDOTARequestChatChannelListResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestChatChannelListResponse_Builder*) mergeFrom:(CMsgDOTARequestChatChannelListResponse*) other {
  if (other == [CMsgDOTARequestChatChannelListResponse defaultInstance]) {
    return self;
  }
  if (other.channelsArray.count > 0) {
    if (_builderResult.channelsArray == nil) {
      _builderResult.channelsArray = [[other.channelsArray copyWithZone:[other.channelsArray zone]] autorelease];
    } else {
      [_builderResult.channelsArray appendArray:other.channelsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestChatChannelListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTARequestChatChannelListResponse_ChatChannel_Builder* subBuilder = [CMsgDOTARequestChatChannelListResponse_ChatChannel builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addChannels:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)channels {
  return _builderResult.channelsArray;
}
- (CMsgDOTARequestChatChannelListResponse_ChatChannel*)channelsAtIndex:(NSUInteger)index {
  return [_builderResult channelsAtIndex:index];
}
- (CMsgDOTARequestChatChannelListResponse_Builder *)addChannels:(CMsgDOTARequestChatChannelListResponse_ChatChannel*)value {
  if (_builderResult.channelsArray == nil) {
    _builderResult.channelsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.channelsArray addObject:value];
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_Builder *)setChannelsArray:(NSArray *)array {
  _builderResult.channelsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_Builder *)setChannelsValues:(const CMsgDOTARequestChatChannelListResponse_ChatChannel* *)values count:(NSUInteger)count {
  _builderResult.channelsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestChatChannelListResponse_Builder *)clearChannels {
  _builderResult.channelsArray = nil;
  return self;
}
@end

@interface CMsgDOTAPlayerReports ()
@property (retain) PBAppendableArray * reportsArray;
@end

@implementation CMsgDOTAPlayerReports

@synthesize reportsArray;
@dynamic reports;
- (void) dealloc {
  self.reportsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAPlayerReports* defaultCMsgDOTAPlayerReportsInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAPlayerReports class]) {
    defaultCMsgDOTAPlayerReportsInstance = [[CMsgDOTAPlayerReports alloc] init];
  }
}
+ (CMsgDOTAPlayerReports*) defaultInstance {
  return defaultCMsgDOTAPlayerReportsInstance;
}
- (CMsgDOTAPlayerReports*) defaultInstance {
  return defaultCMsgDOTAPlayerReportsInstance;
}
- (PBArray *)reports {
  return reportsArray;
}
- (CMsgDOTAPlayerReports_PlayerReport*)reportsAtIndex:(NSUInteger)index {
  return [reportsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgDOTAPlayerReports_PlayerReport *element in self.reportsArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgDOTAPlayerReports_PlayerReport *element in self.reportsArray) {
    size_ += computeMessageSize(1, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAPlayerReports*) parseFromData:(NSData*) data {
  return (CMsgDOTAPlayerReports*)[[[CMsgDOTAPlayerReports builder] mergeFromData:data] build];
}
+ (CMsgDOTAPlayerReports*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerReports*)[[[CMsgDOTAPlayerReports builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerReports*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAPlayerReports*)[[[CMsgDOTAPlayerReports builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAPlayerReports*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerReports*)[[[CMsgDOTAPlayerReports builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerReports*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAPlayerReports*)[[[CMsgDOTAPlayerReports builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAPlayerReports*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerReports*)[[[CMsgDOTAPlayerReports builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerReports_Builder*) builder {
  return [[[CMsgDOTAPlayerReports_Builder alloc] init] autorelease];
}
+ (CMsgDOTAPlayerReports_Builder*) builderWithPrototype:(CMsgDOTAPlayerReports*) prototype {
  return [[CMsgDOTAPlayerReports builder] mergeFrom:prototype];
}
- (CMsgDOTAPlayerReports_Builder*) builder {
  return [CMsgDOTAPlayerReports builder];
}
- (CMsgDOTAPlayerReports_Builder*) toBuilder {
  return [CMsgDOTAPlayerReports builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgDOTAPlayerReports_PlayerReport* element in self.reportsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"reports"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAPlayerReports class]]) {
    return NO;
  }
  CMsgDOTAPlayerReports *otherMessage = other;
  return
      [self.reportsArray isEqualToArray:otherMessage.reportsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgDOTAPlayerReports_PlayerReport* element in self.reportsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAPlayerReports_PlayerReport ()
@property uint32_t reportId;
@property uint32_t reporterAccountId;
@property uint32_t targetAccountId;
@property uint32_t reportFlags;
@property uint32_t matchId;
@property uint32_t date;
@property (retain) NSString* comment;
@end

@implementation CMsgDOTAPlayerReports_PlayerReport

- (BOOL) hasReportId {
  return !!hasReportId_;
}
- (void) setHasReportId:(BOOL) value_ {
  hasReportId_ = !!value_;
}
@synthesize reportId;
- (BOOL) hasReporterAccountId {
  return !!hasReporterAccountId_;
}
- (void) setHasReporterAccountId:(BOOL) value_ {
  hasReporterAccountId_ = !!value_;
}
@synthesize reporterAccountId;
- (BOOL) hasTargetAccountId {
  return !!hasTargetAccountId_;
}
- (void) setHasTargetAccountId:(BOOL) value_ {
  hasTargetAccountId_ = !!value_;
}
@synthesize targetAccountId;
- (BOOL) hasReportFlags {
  return !!hasReportFlags_;
}
- (void) setHasReportFlags:(BOOL) value_ {
  hasReportFlags_ = !!value_;
}
@synthesize reportFlags;
- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value_ {
  hasDate_ = !!value_;
}
@synthesize date;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (void) dealloc {
  self.comment = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.reportId = 0;
    self.reporterAccountId = 0;
    self.targetAccountId = 0;
    self.reportFlags = 0;
    self.matchId = 0;
    self.date = 0;
    self.comment = @"";
  }
  return self;
}
static CMsgDOTAPlayerReports_PlayerReport* defaultCMsgDOTAPlayerReports_PlayerReportInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAPlayerReports_PlayerReport class]) {
    defaultCMsgDOTAPlayerReports_PlayerReportInstance = [[CMsgDOTAPlayerReports_PlayerReport alloc] init];
  }
}
+ (CMsgDOTAPlayerReports_PlayerReport*) defaultInstance {
  return defaultCMsgDOTAPlayerReports_PlayerReportInstance;
}
- (CMsgDOTAPlayerReports_PlayerReport*) defaultInstance {
  return defaultCMsgDOTAPlayerReports_PlayerReportInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReportId) {
    [output writeUInt32:1 value:self.reportId];
  }
  if (self.hasReporterAccountId) {
    [output writeUInt32:2 value:self.reporterAccountId];
  }
  if (self.hasTargetAccountId) {
    [output writeUInt32:3 value:self.targetAccountId];
  }
  if (self.hasReportFlags) {
    [output writeUInt32:4 value:self.reportFlags];
  }
  if (self.hasMatchId) {
    [output writeUInt32:5 value:self.matchId];
  }
  if (self.hasDate) {
    [output writeFixed32:6 value:self.date];
  }
  if (self.hasComment) {
    [output writeString:7 value:self.comment];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReportId) {
    size_ += computeUInt32Size(1, self.reportId);
  }
  if (self.hasReporterAccountId) {
    size_ += computeUInt32Size(2, self.reporterAccountId);
  }
  if (self.hasTargetAccountId) {
    size_ += computeUInt32Size(3, self.targetAccountId);
  }
  if (self.hasReportFlags) {
    size_ += computeUInt32Size(4, self.reportFlags);
  }
  if (self.hasMatchId) {
    size_ += computeUInt32Size(5, self.matchId);
  }
  if (self.hasDate) {
    size_ += computeFixed32Size(6, self.date);
  }
  if (self.hasComment) {
    size_ += computeStringSize(7, self.comment);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAPlayerReports_PlayerReport*) parseFromData:(NSData*) data {
  return (CMsgDOTAPlayerReports_PlayerReport*)[[[CMsgDOTAPlayerReports_PlayerReport builder] mergeFromData:data] build];
}
+ (CMsgDOTAPlayerReports_PlayerReport*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerReports_PlayerReport*)[[[CMsgDOTAPlayerReports_PlayerReport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerReports_PlayerReport*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAPlayerReports_PlayerReport*)[[[CMsgDOTAPlayerReports_PlayerReport builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAPlayerReports_PlayerReport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerReports_PlayerReport*)[[[CMsgDOTAPlayerReports_PlayerReport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerReports_PlayerReport*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAPlayerReports_PlayerReport*)[[[CMsgDOTAPlayerReports_PlayerReport builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAPlayerReports_PlayerReport*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerReports_PlayerReport*)[[[CMsgDOTAPlayerReports_PlayerReport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerReports_PlayerReport_Builder*) builder {
  return [[[CMsgDOTAPlayerReports_PlayerReport_Builder alloc] init] autorelease];
}
+ (CMsgDOTAPlayerReports_PlayerReport_Builder*) builderWithPrototype:(CMsgDOTAPlayerReports_PlayerReport*) prototype {
  return [[CMsgDOTAPlayerReports_PlayerReport builder] mergeFrom:prototype];
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) builder {
  return [CMsgDOTAPlayerReports_PlayerReport builder];
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) toBuilder {
  return [CMsgDOTAPlayerReports_PlayerReport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reportId", [NSNumber numberWithInt:self.reportId]];
  }
  if (self.hasReporterAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reporterAccountId", [NSNumber numberWithInt:self.reporterAccountId]];
  }
  if (self.hasTargetAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetAccountId", [NSNumber numberWithInt:self.targetAccountId]];
  }
  if (self.hasReportFlags) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reportFlags", [NSNumber numberWithInt:self.reportFlags]];
  }
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAPlayerReports_PlayerReport class]]) {
    return NO;
  }
  CMsgDOTAPlayerReports_PlayerReport *otherMessage = other;
  return
      self.hasReportId == otherMessage.hasReportId &&
      (!self.hasReportId || self.reportId == otherMessage.reportId) &&
      self.hasReporterAccountId == otherMessage.hasReporterAccountId &&
      (!self.hasReporterAccountId || self.reporterAccountId == otherMessage.reporterAccountId) &&
      self.hasTargetAccountId == otherMessage.hasTargetAccountId &&
      (!self.hasTargetAccountId || self.targetAccountId == otherMessage.targetAccountId) &&
      self.hasReportFlags == otherMessage.hasReportFlags &&
      (!self.hasReportFlags || self.reportFlags == otherMessage.reportFlags) &&
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasReportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reportId] hash];
  }
  if (self.hasReporterAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reporterAccountId] hash];
  }
  if (self.hasTargetAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.targetAccountId] hash];
  }
  if (self.hasReportFlags) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reportFlags] hash];
  }
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAPlayerReports_PlayerReport_Builder()
@property (retain) CMsgDOTAPlayerReports_PlayerReport* _builderResult;
@end

@implementation CMsgDOTAPlayerReports_PlayerReport_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAPlayerReports_PlayerReport alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) clear {
  _builderResult = [[[CMsgDOTAPlayerReports_PlayerReport alloc] init] autorelease];
  return self;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) clone {
  return [CMsgDOTAPlayerReports_PlayerReport builderWithPrototype:_builderResult];
}
- (CMsgDOTAPlayerReports_PlayerReport*) defaultInstance {
  return [CMsgDOTAPlayerReports_PlayerReport defaultInstance];
}
- (CMsgDOTAPlayerReports_PlayerReport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAPlayerReports_PlayerReport*) buildPartial {
  CMsgDOTAPlayerReports_PlayerReport* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) mergeFrom:(CMsgDOTAPlayerReports_PlayerReport*) other {
  if (other == [CMsgDOTAPlayerReports_PlayerReport defaultInstance]) {
    return self;
  }
  if (other.hasReportId) {
    [self setReportId:other.reportId];
  }
  if (other.hasReporterAccountId) {
    [self setReporterAccountId:other.reporterAccountId];
  }
  if (other.hasTargetAccountId) {
    [self setTargetAccountId:other.targetAccountId];
  }
  if (other.hasReportFlags) {
    [self setReportFlags:other.reportFlags];
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setReportId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setReporterAccountId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTargetAccountId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setReportFlags:[input readUInt32]];
        break;
      }
      case 40: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 53: {
        [self setDate:[input readFixed32]];
        break;
      }
      case 58: {
        [self setComment:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasReportId {
  return _builderResult.hasReportId;
}
- (uint32_t) reportId {
  return _builderResult.reportId;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) setReportId:(uint32_t) value {
  _builderResult.hasReportId = YES;
  _builderResult.reportId = value;
  return self;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) clearReportId {
  _builderResult.hasReportId = NO;
  _builderResult.reportId = 0;
  return self;
}
- (BOOL) hasReporterAccountId {
  return _builderResult.hasReporterAccountId;
}
- (uint32_t) reporterAccountId {
  return _builderResult.reporterAccountId;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) setReporterAccountId:(uint32_t) value {
  _builderResult.hasReporterAccountId = YES;
  _builderResult.reporterAccountId = value;
  return self;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) clearReporterAccountId {
  _builderResult.hasReporterAccountId = NO;
  _builderResult.reporterAccountId = 0;
  return self;
}
- (BOOL) hasTargetAccountId {
  return _builderResult.hasTargetAccountId;
}
- (uint32_t) targetAccountId {
  return _builderResult.targetAccountId;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) setTargetAccountId:(uint32_t) value {
  _builderResult.hasTargetAccountId = YES;
  _builderResult.targetAccountId = value;
  return self;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) clearTargetAccountId {
  _builderResult.hasTargetAccountId = NO;
  _builderResult.targetAccountId = 0;
  return self;
}
- (BOOL) hasReportFlags {
  return _builderResult.hasReportFlags;
}
- (uint32_t) reportFlags {
  return _builderResult.reportFlags;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) setReportFlags:(uint32_t) value {
  _builderResult.hasReportFlags = YES;
  _builderResult.reportFlags = value;
  return self;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) clearReportFlags {
  _builderResult.hasReportFlags = NO;
  _builderResult.reportFlags = 0;
  return self;
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (BOOL) hasDate {
  return _builderResult.hasDate;
}
- (uint32_t) date {
  return _builderResult.date;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) setDate:(uint32_t) value {
  _builderResult.hasDate = YES;
  _builderResult.date = value;
  return self;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) clearDate {
  _builderResult.hasDate = NO;
  _builderResult.date = 0;
  return self;
}
- (BOOL) hasComment {
  return _builderResult.hasComment;
}
- (NSString*) comment {
  return _builderResult.comment;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) setComment:(NSString*) value {
  _builderResult.hasComment = YES;
  _builderResult.comment = value;
  return self;
}
- (CMsgDOTAPlayerReports_PlayerReport_Builder*) clearComment {
  _builderResult.hasComment = NO;
  _builderResult.comment = @"";
  return self;
}
@end

@interface CMsgDOTAPlayerReports_Builder()
@property (retain) CMsgDOTAPlayerReports* _builderResult;
@end

@implementation CMsgDOTAPlayerReports_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAPlayerReports alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAPlayerReports_Builder*) clear {
  _builderResult = [[[CMsgDOTAPlayerReports alloc] init] autorelease];
  return self;
}
- (CMsgDOTAPlayerReports_Builder*) clone {
  return [CMsgDOTAPlayerReports builderWithPrototype:_builderResult];
}
- (CMsgDOTAPlayerReports*) defaultInstance {
  return [CMsgDOTAPlayerReports defaultInstance];
}
- (CMsgDOTAPlayerReports*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAPlayerReports*) buildPartial {
  CMsgDOTAPlayerReports* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAPlayerReports_Builder*) mergeFrom:(CMsgDOTAPlayerReports*) other {
  if (other == [CMsgDOTAPlayerReports defaultInstance]) {
    return self;
  }
  if (other.reportsArray.count > 0) {
    if (_builderResult.reportsArray == nil) {
      _builderResult.reportsArray = [[other.reportsArray copyWithZone:[other.reportsArray zone]] autorelease];
    } else {
      [_builderResult.reportsArray appendArray:other.reportsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAPlayerReports_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAPlayerReports_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTAPlayerReports_PlayerReport_Builder* subBuilder = [CMsgDOTAPlayerReports_PlayerReport builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReports:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)reports {
  return _builderResult.reportsArray;
}
- (CMsgDOTAPlayerReports_PlayerReport*)reportsAtIndex:(NSUInteger)index {
  return [_builderResult reportsAtIndex:index];
}
- (CMsgDOTAPlayerReports_Builder *)addReports:(CMsgDOTAPlayerReports_PlayerReport*)value {
  if (_builderResult.reportsArray == nil) {
    _builderResult.reportsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.reportsArray addObject:value];
  return self;
}
- (CMsgDOTAPlayerReports_Builder *)setReportsArray:(NSArray *)array {
  _builderResult.reportsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAPlayerReports_Builder *)setReportsValues:(const CMsgDOTAPlayerReports_PlayerReport* *)values count:(NSUInteger)count {
  _builderResult.reportsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAPlayerReports_Builder *)clearReports {
  _builderResult.reportsArray = nil;
  return self;
}
@end

@interface CMsgDOTAReportsRemainingRequest ()
@end

@implementation CMsgDOTAReportsRemainingRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAReportsRemainingRequest* defaultCMsgDOTAReportsRemainingRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAReportsRemainingRequest class]) {
    defaultCMsgDOTAReportsRemainingRequestInstance = [[CMsgDOTAReportsRemainingRequest alloc] init];
  }
}
+ (CMsgDOTAReportsRemainingRequest*) defaultInstance {
  return defaultCMsgDOTAReportsRemainingRequestInstance;
}
- (CMsgDOTAReportsRemainingRequest*) defaultInstance {
  return defaultCMsgDOTAReportsRemainingRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAReportsRemainingRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTAReportsRemainingRequest*)[[[CMsgDOTAReportsRemainingRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTAReportsRemainingRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportsRemainingRequest*)[[[CMsgDOTAReportsRemainingRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportsRemainingRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAReportsRemainingRequest*)[[[CMsgDOTAReportsRemainingRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAReportsRemainingRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportsRemainingRequest*)[[[CMsgDOTAReportsRemainingRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportsRemainingRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAReportsRemainingRequest*)[[[CMsgDOTAReportsRemainingRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAReportsRemainingRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportsRemainingRequest*)[[[CMsgDOTAReportsRemainingRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportsRemainingRequest_Builder*) builder {
  return [[[CMsgDOTAReportsRemainingRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTAReportsRemainingRequest_Builder*) builderWithPrototype:(CMsgDOTAReportsRemainingRequest*) prototype {
  return [[CMsgDOTAReportsRemainingRequest builder] mergeFrom:prototype];
}
- (CMsgDOTAReportsRemainingRequest_Builder*) builder {
  return [CMsgDOTAReportsRemainingRequest builder];
}
- (CMsgDOTAReportsRemainingRequest_Builder*) toBuilder {
  return [CMsgDOTAReportsRemainingRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAReportsRemainingRequest class]]) {
    return NO;
  }
  CMsgDOTAReportsRemainingRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAReportsRemainingRequest_Builder()
@property (retain) CMsgDOTAReportsRemainingRequest* _builderResult;
@end

@implementation CMsgDOTAReportsRemainingRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAReportsRemainingRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAReportsRemainingRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTAReportsRemainingRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTAReportsRemainingRequest_Builder*) clone {
  return [CMsgDOTAReportsRemainingRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTAReportsRemainingRequest*) defaultInstance {
  return [CMsgDOTAReportsRemainingRequest defaultInstance];
}
- (CMsgDOTAReportsRemainingRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAReportsRemainingRequest*) buildPartial {
  CMsgDOTAReportsRemainingRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAReportsRemainingRequest_Builder*) mergeFrom:(CMsgDOTAReportsRemainingRequest*) other {
  if (other == [CMsgDOTAReportsRemainingRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAReportsRemainingRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAReportsRemainingRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTAReportsRemainingResponse ()
@property uint32_t numPositiveReportsRemaining;
@property uint32_t numNegativeReportsRemaining;
@property uint32_t numPositiveReportsTotal;
@property uint32_t numNegativeReportsTotal;
@end

@implementation CMsgDOTAReportsRemainingResponse

- (BOOL) hasNumPositiveReportsRemaining {
  return !!hasNumPositiveReportsRemaining_;
}
- (void) setHasNumPositiveReportsRemaining:(BOOL) value_ {
  hasNumPositiveReportsRemaining_ = !!value_;
}
@synthesize numPositiveReportsRemaining;
- (BOOL) hasNumNegativeReportsRemaining {
  return !!hasNumNegativeReportsRemaining_;
}
- (void) setHasNumNegativeReportsRemaining:(BOOL) value_ {
  hasNumNegativeReportsRemaining_ = !!value_;
}
@synthesize numNegativeReportsRemaining;
- (BOOL) hasNumPositiveReportsTotal {
  return !!hasNumPositiveReportsTotal_;
}
- (void) setHasNumPositiveReportsTotal:(BOOL) value_ {
  hasNumPositiveReportsTotal_ = !!value_;
}
@synthesize numPositiveReportsTotal;
- (BOOL) hasNumNegativeReportsTotal {
  return !!hasNumNegativeReportsTotal_;
}
- (void) setHasNumNegativeReportsTotal:(BOOL) value_ {
  hasNumNegativeReportsTotal_ = !!value_;
}
@synthesize numNegativeReportsTotal;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.numPositiveReportsRemaining = 0;
    self.numNegativeReportsRemaining = 0;
    self.numPositiveReportsTotal = 0;
    self.numNegativeReportsTotal = 0;
  }
  return self;
}
static CMsgDOTAReportsRemainingResponse* defaultCMsgDOTAReportsRemainingResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAReportsRemainingResponse class]) {
    defaultCMsgDOTAReportsRemainingResponseInstance = [[CMsgDOTAReportsRemainingResponse alloc] init];
  }
}
+ (CMsgDOTAReportsRemainingResponse*) defaultInstance {
  return defaultCMsgDOTAReportsRemainingResponseInstance;
}
- (CMsgDOTAReportsRemainingResponse*) defaultInstance {
  return defaultCMsgDOTAReportsRemainingResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNumPositiveReportsRemaining) {
    [output writeUInt32:1 value:self.numPositiveReportsRemaining];
  }
  if (self.hasNumNegativeReportsRemaining) {
    [output writeUInt32:2 value:self.numNegativeReportsRemaining];
  }
  if (self.hasNumPositiveReportsTotal) {
    [output writeUInt32:3 value:self.numPositiveReportsTotal];
  }
  if (self.hasNumNegativeReportsTotal) {
    [output writeUInt32:4 value:self.numNegativeReportsTotal];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNumPositiveReportsRemaining) {
    size_ += computeUInt32Size(1, self.numPositiveReportsRemaining);
  }
  if (self.hasNumNegativeReportsRemaining) {
    size_ += computeUInt32Size(2, self.numNegativeReportsRemaining);
  }
  if (self.hasNumPositiveReportsTotal) {
    size_ += computeUInt32Size(3, self.numPositiveReportsTotal);
  }
  if (self.hasNumNegativeReportsTotal) {
    size_ += computeUInt32Size(4, self.numNegativeReportsTotal);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAReportsRemainingResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAReportsRemainingResponse*)[[[CMsgDOTAReportsRemainingResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAReportsRemainingResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportsRemainingResponse*)[[[CMsgDOTAReportsRemainingResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportsRemainingResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAReportsRemainingResponse*)[[[CMsgDOTAReportsRemainingResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAReportsRemainingResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportsRemainingResponse*)[[[CMsgDOTAReportsRemainingResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportsRemainingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAReportsRemainingResponse*)[[[CMsgDOTAReportsRemainingResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAReportsRemainingResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportsRemainingResponse*)[[[CMsgDOTAReportsRemainingResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportsRemainingResponse_Builder*) builder {
  return [[[CMsgDOTAReportsRemainingResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAReportsRemainingResponse_Builder*) builderWithPrototype:(CMsgDOTAReportsRemainingResponse*) prototype {
  return [[CMsgDOTAReportsRemainingResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAReportsRemainingResponse_Builder*) builder {
  return [CMsgDOTAReportsRemainingResponse builder];
}
- (CMsgDOTAReportsRemainingResponse_Builder*) toBuilder {
  return [CMsgDOTAReportsRemainingResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNumPositiveReportsRemaining) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numPositiveReportsRemaining", [NSNumber numberWithInt:self.numPositiveReportsRemaining]];
  }
  if (self.hasNumNegativeReportsRemaining) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numNegativeReportsRemaining", [NSNumber numberWithInt:self.numNegativeReportsRemaining]];
  }
  if (self.hasNumPositiveReportsTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numPositiveReportsTotal", [NSNumber numberWithInt:self.numPositiveReportsTotal]];
  }
  if (self.hasNumNegativeReportsTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numNegativeReportsTotal", [NSNumber numberWithInt:self.numNegativeReportsTotal]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAReportsRemainingResponse class]]) {
    return NO;
  }
  CMsgDOTAReportsRemainingResponse *otherMessage = other;
  return
      self.hasNumPositiveReportsRemaining == otherMessage.hasNumPositiveReportsRemaining &&
      (!self.hasNumPositiveReportsRemaining || self.numPositiveReportsRemaining == otherMessage.numPositiveReportsRemaining) &&
      self.hasNumNegativeReportsRemaining == otherMessage.hasNumNegativeReportsRemaining &&
      (!self.hasNumNegativeReportsRemaining || self.numNegativeReportsRemaining == otherMessage.numNegativeReportsRemaining) &&
      self.hasNumPositiveReportsTotal == otherMessage.hasNumPositiveReportsTotal &&
      (!self.hasNumPositiveReportsTotal || self.numPositiveReportsTotal == otherMessage.numPositiveReportsTotal) &&
      self.hasNumNegativeReportsTotal == otherMessage.hasNumNegativeReportsTotal &&
      (!self.hasNumNegativeReportsTotal || self.numNegativeReportsTotal == otherMessage.numNegativeReportsTotal) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasNumPositiveReportsRemaining) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numPositiveReportsRemaining] hash];
  }
  if (self.hasNumNegativeReportsRemaining) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numNegativeReportsRemaining] hash];
  }
  if (self.hasNumPositiveReportsTotal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numPositiveReportsTotal] hash];
  }
  if (self.hasNumNegativeReportsTotal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numNegativeReportsTotal] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAReportsRemainingResponse_Builder()
@property (retain) CMsgDOTAReportsRemainingResponse* _builderResult;
@end

@implementation CMsgDOTAReportsRemainingResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAReportsRemainingResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAReportsRemainingResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) clone {
  return [CMsgDOTAReportsRemainingResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAReportsRemainingResponse*) defaultInstance {
  return [CMsgDOTAReportsRemainingResponse defaultInstance];
}
- (CMsgDOTAReportsRemainingResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAReportsRemainingResponse*) buildPartial {
  CMsgDOTAReportsRemainingResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) mergeFrom:(CMsgDOTAReportsRemainingResponse*) other {
  if (other == [CMsgDOTAReportsRemainingResponse defaultInstance]) {
    return self;
  }
  if (other.hasNumPositiveReportsRemaining) {
    [self setNumPositiveReportsRemaining:other.numPositiveReportsRemaining];
  }
  if (other.hasNumNegativeReportsRemaining) {
    [self setNumNegativeReportsRemaining:other.numNegativeReportsRemaining];
  }
  if (other.hasNumPositiveReportsTotal) {
    [self setNumPositiveReportsTotal:other.numPositiveReportsTotal];
  }
  if (other.hasNumNegativeReportsTotal) {
    [self setNumNegativeReportsTotal:other.numNegativeReportsTotal];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAReportsRemainingResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNumPositiveReportsRemaining:[input readUInt32]];
        break;
      }
      case 16: {
        [self setNumNegativeReportsRemaining:[input readUInt32]];
        break;
      }
      case 24: {
        [self setNumPositiveReportsTotal:[input readUInt32]];
        break;
      }
      case 32: {
        [self setNumNegativeReportsTotal:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasNumPositiveReportsRemaining {
  return _builderResult.hasNumPositiveReportsRemaining;
}
- (uint32_t) numPositiveReportsRemaining {
  return _builderResult.numPositiveReportsRemaining;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) setNumPositiveReportsRemaining:(uint32_t) value {
  _builderResult.hasNumPositiveReportsRemaining = YES;
  _builderResult.numPositiveReportsRemaining = value;
  return self;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) clearNumPositiveReportsRemaining {
  _builderResult.hasNumPositiveReportsRemaining = NO;
  _builderResult.numPositiveReportsRemaining = 0;
  return self;
}
- (BOOL) hasNumNegativeReportsRemaining {
  return _builderResult.hasNumNegativeReportsRemaining;
}
- (uint32_t) numNegativeReportsRemaining {
  return _builderResult.numNegativeReportsRemaining;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) setNumNegativeReportsRemaining:(uint32_t) value {
  _builderResult.hasNumNegativeReportsRemaining = YES;
  _builderResult.numNegativeReportsRemaining = value;
  return self;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) clearNumNegativeReportsRemaining {
  _builderResult.hasNumNegativeReportsRemaining = NO;
  _builderResult.numNegativeReportsRemaining = 0;
  return self;
}
- (BOOL) hasNumPositiveReportsTotal {
  return _builderResult.hasNumPositiveReportsTotal;
}
- (uint32_t) numPositiveReportsTotal {
  return _builderResult.numPositiveReportsTotal;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) setNumPositiveReportsTotal:(uint32_t) value {
  _builderResult.hasNumPositiveReportsTotal = YES;
  _builderResult.numPositiveReportsTotal = value;
  return self;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) clearNumPositiveReportsTotal {
  _builderResult.hasNumPositiveReportsTotal = NO;
  _builderResult.numPositiveReportsTotal = 0;
  return self;
}
- (BOOL) hasNumNegativeReportsTotal {
  return _builderResult.hasNumNegativeReportsTotal;
}
- (uint32_t) numNegativeReportsTotal {
  return _builderResult.numNegativeReportsTotal;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) setNumNegativeReportsTotal:(uint32_t) value {
  _builderResult.hasNumNegativeReportsTotal = YES;
  _builderResult.numNegativeReportsTotal = value;
  return self;
}
- (CMsgDOTAReportsRemainingResponse_Builder*) clearNumNegativeReportsTotal {
  _builderResult.hasNumNegativeReportsTotal = NO;
  _builderResult.numNegativeReportsTotal = 0;
  return self;
}
@end

@interface CMsgDOTASubmitPlayerReport ()
@property uint32_t targetAccountId;
@property uint32_t reportFlags;
@property (retain) NSString* comment;
@end

@implementation CMsgDOTASubmitPlayerReport

- (BOOL) hasTargetAccountId {
  return !!hasTargetAccountId_;
}
- (void) setHasTargetAccountId:(BOOL) value_ {
  hasTargetAccountId_ = !!value_;
}
@synthesize targetAccountId;
- (BOOL) hasReportFlags {
  return !!hasReportFlags_;
}
- (void) setHasReportFlags:(BOOL) value_ {
  hasReportFlags_ = !!value_;
}
@synthesize reportFlags;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (void) dealloc {
  self.comment = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.targetAccountId = 0;
    self.reportFlags = 0;
    self.comment = @"";
  }
  return self;
}
static CMsgDOTASubmitPlayerReport* defaultCMsgDOTASubmitPlayerReportInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTASubmitPlayerReport class]) {
    defaultCMsgDOTASubmitPlayerReportInstance = [[CMsgDOTASubmitPlayerReport alloc] init];
  }
}
+ (CMsgDOTASubmitPlayerReport*) defaultInstance {
  return defaultCMsgDOTASubmitPlayerReportInstance;
}
- (CMsgDOTASubmitPlayerReport*) defaultInstance {
  return defaultCMsgDOTASubmitPlayerReportInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTargetAccountId) {
    [output writeUInt32:1 value:self.targetAccountId];
  }
  if (self.hasReportFlags) {
    [output writeUInt32:2 value:self.reportFlags];
  }
  if (self.hasComment) {
    [output writeString:5 value:self.comment];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTargetAccountId) {
    size_ += computeUInt32Size(1, self.targetAccountId);
  }
  if (self.hasReportFlags) {
    size_ += computeUInt32Size(2, self.reportFlags);
  }
  if (self.hasComment) {
    size_ += computeStringSize(5, self.comment);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTASubmitPlayerReport*) parseFromData:(NSData*) data {
  return (CMsgDOTASubmitPlayerReport*)[[[CMsgDOTASubmitPlayerReport builder] mergeFromData:data] build];
}
+ (CMsgDOTASubmitPlayerReport*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASubmitPlayerReport*)[[[CMsgDOTASubmitPlayerReport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASubmitPlayerReport*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTASubmitPlayerReport*)[[[CMsgDOTASubmitPlayerReport builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTASubmitPlayerReport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASubmitPlayerReport*)[[[CMsgDOTASubmitPlayerReport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASubmitPlayerReport*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTASubmitPlayerReport*)[[[CMsgDOTASubmitPlayerReport builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTASubmitPlayerReport*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASubmitPlayerReport*)[[[CMsgDOTASubmitPlayerReport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASubmitPlayerReport_Builder*) builder {
  return [[[CMsgDOTASubmitPlayerReport_Builder alloc] init] autorelease];
}
+ (CMsgDOTASubmitPlayerReport_Builder*) builderWithPrototype:(CMsgDOTASubmitPlayerReport*) prototype {
  return [[CMsgDOTASubmitPlayerReport builder] mergeFrom:prototype];
}
- (CMsgDOTASubmitPlayerReport_Builder*) builder {
  return [CMsgDOTASubmitPlayerReport builder];
}
- (CMsgDOTASubmitPlayerReport_Builder*) toBuilder {
  return [CMsgDOTASubmitPlayerReport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTargetAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetAccountId", [NSNumber numberWithInt:self.targetAccountId]];
  }
  if (self.hasReportFlags) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reportFlags", [NSNumber numberWithInt:self.reportFlags]];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTASubmitPlayerReport class]]) {
    return NO;
  }
  CMsgDOTASubmitPlayerReport *otherMessage = other;
  return
      self.hasTargetAccountId == otherMessage.hasTargetAccountId &&
      (!self.hasTargetAccountId || self.targetAccountId == otherMessage.targetAccountId) &&
      self.hasReportFlags == otherMessage.hasReportFlags &&
      (!self.hasReportFlags || self.reportFlags == otherMessage.reportFlags) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTargetAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.targetAccountId] hash];
  }
  if (self.hasReportFlags) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reportFlags] hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTASubmitPlayerReport_Builder()
@property (retain) CMsgDOTASubmitPlayerReport* _builderResult;
@end

@implementation CMsgDOTASubmitPlayerReport_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTASubmitPlayerReport alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTASubmitPlayerReport_Builder*) clear {
  _builderResult = [[[CMsgDOTASubmitPlayerReport alloc] init] autorelease];
  return self;
}
- (CMsgDOTASubmitPlayerReport_Builder*) clone {
  return [CMsgDOTASubmitPlayerReport builderWithPrototype:_builderResult];
}
- (CMsgDOTASubmitPlayerReport*) defaultInstance {
  return [CMsgDOTASubmitPlayerReport defaultInstance];
}
- (CMsgDOTASubmitPlayerReport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTASubmitPlayerReport*) buildPartial {
  CMsgDOTASubmitPlayerReport* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTASubmitPlayerReport_Builder*) mergeFrom:(CMsgDOTASubmitPlayerReport*) other {
  if (other == [CMsgDOTASubmitPlayerReport defaultInstance]) {
    return self;
  }
  if (other.hasTargetAccountId) {
    [self setTargetAccountId:other.targetAccountId];
  }
  if (other.hasReportFlags) {
    [self setReportFlags:other.reportFlags];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTASubmitPlayerReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTASubmitPlayerReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTargetAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setReportFlags:[input readUInt32]];
        break;
      }
      case 42: {
        [self setComment:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTargetAccountId {
  return _builderResult.hasTargetAccountId;
}
- (uint32_t) targetAccountId {
  return _builderResult.targetAccountId;
}
- (CMsgDOTASubmitPlayerReport_Builder*) setTargetAccountId:(uint32_t) value {
  _builderResult.hasTargetAccountId = YES;
  _builderResult.targetAccountId = value;
  return self;
}
- (CMsgDOTASubmitPlayerReport_Builder*) clearTargetAccountId {
  _builderResult.hasTargetAccountId = NO;
  _builderResult.targetAccountId = 0;
  return self;
}
- (BOOL) hasReportFlags {
  return _builderResult.hasReportFlags;
}
- (uint32_t) reportFlags {
  return _builderResult.reportFlags;
}
- (CMsgDOTASubmitPlayerReport_Builder*) setReportFlags:(uint32_t) value {
  _builderResult.hasReportFlags = YES;
  _builderResult.reportFlags = value;
  return self;
}
- (CMsgDOTASubmitPlayerReport_Builder*) clearReportFlags {
  _builderResult.hasReportFlags = NO;
  _builderResult.reportFlags = 0;
  return self;
}
- (BOOL) hasComment {
  return _builderResult.hasComment;
}
- (NSString*) comment {
  return _builderResult.comment;
}
- (CMsgDOTASubmitPlayerReport_Builder*) setComment:(NSString*) value {
  _builderResult.hasComment = YES;
  _builderResult.comment = value;
  return self;
}
- (CMsgDOTASubmitPlayerReport_Builder*) clearComment {
  _builderResult.hasComment = NO;
  _builderResult.comment = @"";
  return self;
}
@end

@interface CMsgDOTASubmitPlayerReportResponse ()
@property uint32_t targetAccountId;
@property uint32_t reportFlags;
@property uint32_t result;
@end

@implementation CMsgDOTASubmitPlayerReportResponse

- (BOOL) hasTargetAccountId {
  return !!hasTargetAccountId_;
}
- (void) setHasTargetAccountId:(BOOL) value_ {
  hasTargetAccountId_ = !!value_;
}
@synthesize targetAccountId;
- (BOOL) hasReportFlags {
  return !!hasReportFlags_;
}
- (void) setHasReportFlags:(BOOL) value_ {
  hasReportFlags_ = !!value_;
}
@synthesize reportFlags;
- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) value_ {
  hasResult_ = !!value_;
}
@synthesize result;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.targetAccountId = 0;
    self.reportFlags = 0;
    self.result = 0;
  }
  return self;
}
static CMsgDOTASubmitPlayerReportResponse* defaultCMsgDOTASubmitPlayerReportResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTASubmitPlayerReportResponse class]) {
    defaultCMsgDOTASubmitPlayerReportResponseInstance = [[CMsgDOTASubmitPlayerReportResponse alloc] init];
  }
}
+ (CMsgDOTASubmitPlayerReportResponse*) defaultInstance {
  return defaultCMsgDOTASubmitPlayerReportResponseInstance;
}
- (CMsgDOTASubmitPlayerReportResponse*) defaultInstance {
  return defaultCMsgDOTASubmitPlayerReportResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTargetAccountId) {
    [output writeUInt32:1 value:self.targetAccountId];
  }
  if (self.hasReportFlags) {
    [output writeUInt32:2 value:self.reportFlags];
  }
  if (self.hasResult) {
    [output writeUInt32:3 value:self.result];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTargetAccountId) {
    size_ += computeUInt32Size(1, self.targetAccountId);
  }
  if (self.hasReportFlags) {
    size_ += computeUInt32Size(2, self.reportFlags);
  }
  if (self.hasResult) {
    size_ += computeUInt32Size(3, self.result);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTASubmitPlayerReportResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTASubmitPlayerReportResponse*)[[[CMsgDOTASubmitPlayerReportResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTASubmitPlayerReportResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASubmitPlayerReportResponse*)[[[CMsgDOTASubmitPlayerReportResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASubmitPlayerReportResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTASubmitPlayerReportResponse*)[[[CMsgDOTASubmitPlayerReportResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTASubmitPlayerReportResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASubmitPlayerReportResponse*)[[[CMsgDOTASubmitPlayerReportResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASubmitPlayerReportResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTASubmitPlayerReportResponse*)[[[CMsgDOTASubmitPlayerReportResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTASubmitPlayerReportResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTASubmitPlayerReportResponse*)[[[CMsgDOTASubmitPlayerReportResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTASubmitPlayerReportResponse_Builder*) builder {
  return [[[CMsgDOTASubmitPlayerReportResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTASubmitPlayerReportResponse_Builder*) builderWithPrototype:(CMsgDOTASubmitPlayerReportResponse*) prototype {
  return [[CMsgDOTASubmitPlayerReportResponse builder] mergeFrom:prototype];
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) builder {
  return [CMsgDOTASubmitPlayerReportResponse builder];
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) toBuilder {
  return [CMsgDOTASubmitPlayerReportResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTargetAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetAccountId", [NSNumber numberWithInt:self.targetAccountId]];
  }
  if (self.hasReportFlags) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reportFlags", [NSNumber numberWithInt:self.reportFlags]];
  }
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", [NSNumber numberWithInt:self.result]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTASubmitPlayerReportResponse class]]) {
    return NO;
  }
  CMsgDOTASubmitPlayerReportResponse *otherMessage = other;
  return
      self.hasTargetAccountId == otherMessage.hasTargetAccountId &&
      (!self.hasTargetAccountId || self.targetAccountId == otherMessage.targetAccountId) &&
      self.hasReportFlags == otherMessage.hasReportFlags &&
      (!self.hasReportFlags || self.reportFlags == otherMessage.reportFlags) &&
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTargetAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.targetAccountId] hash];
  }
  if (self.hasReportFlags) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reportFlags] hash];
  }
  if (self.hasResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.result] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTASubmitPlayerReportResponse_Builder()
@property (retain) CMsgDOTASubmitPlayerReportResponse* _builderResult;
@end

@implementation CMsgDOTASubmitPlayerReportResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTASubmitPlayerReportResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTASubmitPlayerReportResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) clone {
  return [CMsgDOTASubmitPlayerReportResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTASubmitPlayerReportResponse*) defaultInstance {
  return [CMsgDOTASubmitPlayerReportResponse defaultInstance];
}
- (CMsgDOTASubmitPlayerReportResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTASubmitPlayerReportResponse*) buildPartial {
  CMsgDOTASubmitPlayerReportResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) mergeFrom:(CMsgDOTASubmitPlayerReportResponse*) other {
  if (other == [CMsgDOTASubmitPlayerReportResponse defaultInstance]) {
    return self;
  }
  if (other.hasTargetAccountId) {
    [self setTargetAccountId:other.targetAccountId];
  }
  if (other.hasReportFlags) {
    [self setReportFlags:other.reportFlags];
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTargetAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setReportFlags:[input readUInt32]];
        break;
      }
      case 24: {
        [self setResult:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTargetAccountId {
  return _builderResult.hasTargetAccountId;
}
- (uint32_t) targetAccountId {
  return _builderResult.targetAccountId;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) setTargetAccountId:(uint32_t) value {
  _builderResult.hasTargetAccountId = YES;
  _builderResult.targetAccountId = value;
  return self;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) clearTargetAccountId {
  _builderResult.hasTargetAccountId = NO;
  _builderResult.targetAccountId = 0;
  return self;
}
- (BOOL) hasReportFlags {
  return _builderResult.hasReportFlags;
}
- (uint32_t) reportFlags {
  return _builderResult.reportFlags;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) setReportFlags:(uint32_t) value {
  _builderResult.hasReportFlags = YES;
  _builderResult.reportFlags = value;
  return self;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) clearReportFlags {
  _builderResult.hasReportFlags = NO;
  _builderResult.reportFlags = 0;
  return self;
}
- (BOOL) hasResult {
  return _builderResult.hasResult;
}
- (uint32_t) result {
  return _builderResult.result;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) setResult:(uint32_t) value {
  _builderResult.hasResult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTASubmitPlayerReportResponse_Builder*) clearResult {
  _builderResult.hasResult = NO;
  _builderResult.result = 0;
  return self;
}
@end

@interface CMsgDOTAReportCountsRequest ()
@property uint32_t targetAccountId;
@end

@implementation CMsgDOTAReportCountsRequest

- (BOOL) hasTargetAccountId {
  return !!hasTargetAccountId_;
}
- (void) setHasTargetAccountId:(BOOL) value_ {
  hasTargetAccountId_ = !!value_;
}
@synthesize targetAccountId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.targetAccountId = 0;
  }
  return self;
}
static CMsgDOTAReportCountsRequest* defaultCMsgDOTAReportCountsRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAReportCountsRequest class]) {
    defaultCMsgDOTAReportCountsRequestInstance = [[CMsgDOTAReportCountsRequest alloc] init];
  }
}
+ (CMsgDOTAReportCountsRequest*) defaultInstance {
  return defaultCMsgDOTAReportCountsRequestInstance;
}
- (CMsgDOTAReportCountsRequest*) defaultInstance {
  return defaultCMsgDOTAReportCountsRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTargetAccountId) {
    [output writeUInt32:1 value:self.targetAccountId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTargetAccountId) {
    size_ += computeUInt32Size(1, self.targetAccountId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAReportCountsRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTAReportCountsRequest*)[[[CMsgDOTAReportCountsRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTAReportCountsRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportCountsRequest*)[[[CMsgDOTAReportCountsRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportCountsRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAReportCountsRequest*)[[[CMsgDOTAReportCountsRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAReportCountsRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportCountsRequest*)[[[CMsgDOTAReportCountsRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportCountsRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAReportCountsRequest*)[[[CMsgDOTAReportCountsRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAReportCountsRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportCountsRequest*)[[[CMsgDOTAReportCountsRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportCountsRequest_Builder*) builder {
  return [[[CMsgDOTAReportCountsRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTAReportCountsRequest_Builder*) builderWithPrototype:(CMsgDOTAReportCountsRequest*) prototype {
  return [[CMsgDOTAReportCountsRequest builder] mergeFrom:prototype];
}
- (CMsgDOTAReportCountsRequest_Builder*) builder {
  return [CMsgDOTAReportCountsRequest builder];
}
- (CMsgDOTAReportCountsRequest_Builder*) toBuilder {
  return [CMsgDOTAReportCountsRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTargetAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetAccountId", [NSNumber numberWithInt:self.targetAccountId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAReportCountsRequest class]]) {
    return NO;
  }
  CMsgDOTAReportCountsRequest *otherMessage = other;
  return
      self.hasTargetAccountId == otherMessage.hasTargetAccountId &&
      (!self.hasTargetAccountId || self.targetAccountId == otherMessage.targetAccountId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTargetAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.targetAccountId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAReportCountsRequest_Builder()
@property (retain) CMsgDOTAReportCountsRequest* _builderResult;
@end

@implementation CMsgDOTAReportCountsRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAReportCountsRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAReportCountsRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTAReportCountsRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTAReportCountsRequest_Builder*) clone {
  return [CMsgDOTAReportCountsRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTAReportCountsRequest*) defaultInstance {
  return [CMsgDOTAReportCountsRequest defaultInstance];
}
- (CMsgDOTAReportCountsRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAReportCountsRequest*) buildPartial {
  CMsgDOTAReportCountsRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAReportCountsRequest_Builder*) mergeFrom:(CMsgDOTAReportCountsRequest*) other {
  if (other == [CMsgDOTAReportCountsRequest defaultInstance]) {
    return self;
  }
  if (other.hasTargetAccountId) {
    [self setTargetAccountId:other.targetAccountId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAReportCountsRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAReportCountsRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTargetAccountId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTargetAccountId {
  return _builderResult.hasTargetAccountId;
}
- (uint32_t) targetAccountId {
  return _builderResult.targetAccountId;
}
- (CMsgDOTAReportCountsRequest_Builder*) setTargetAccountId:(uint32_t) value {
  _builderResult.hasTargetAccountId = YES;
  _builderResult.targetAccountId = value;
  return self;
}
- (CMsgDOTAReportCountsRequest_Builder*) clearTargetAccountId {
  _builderResult.hasTargetAccountId = NO;
  _builderResult.targetAccountId = 0;
  return self;
}
@end

@interface CMsgDOTAReportCountsResponse ()
@property uint32_t targetAccountId;
@property uint32_t leadershipCount;
@property uint32_t teachingCount;
@property uint32_t friendlyCount;
@property uint32_t forgivingCount;
@end

@implementation CMsgDOTAReportCountsResponse

- (BOOL) hasTargetAccountId {
  return !!hasTargetAccountId_;
}
- (void) setHasTargetAccountId:(BOOL) value_ {
  hasTargetAccountId_ = !!value_;
}
@synthesize targetAccountId;
- (BOOL) hasLeadershipCount {
  return !!hasLeadershipCount_;
}
- (void) setHasLeadershipCount:(BOOL) value_ {
  hasLeadershipCount_ = !!value_;
}
@synthesize leadershipCount;
- (BOOL) hasTeachingCount {
  return !!hasTeachingCount_;
}
- (void) setHasTeachingCount:(BOOL) value_ {
  hasTeachingCount_ = !!value_;
}
@synthesize teachingCount;
- (BOOL) hasFriendlyCount {
  return !!hasFriendlyCount_;
}
- (void) setHasFriendlyCount:(BOOL) value_ {
  hasFriendlyCount_ = !!value_;
}
@synthesize friendlyCount;
- (BOOL) hasForgivingCount {
  return !!hasForgivingCount_;
}
- (void) setHasForgivingCount:(BOOL) value_ {
  hasForgivingCount_ = !!value_;
}
@synthesize forgivingCount;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.targetAccountId = 0;
    self.leadershipCount = 0;
    self.teachingCount = 0;
    self.friendlyCount = 0;
    self.forgivingCount = 0;
  }
  return self;
}
static CMsgDOTAReportCountsResponse* defaultCMsgDOTAReportCountsResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAReportCountsResponse class]) {
    defaultCMsgDOTAReportCountsResponseInstance = [[CMsgDOTAReportCountsResponse alloc] init];
  }
}
+ (CMsgDOTAReportCountsResponse*) defaultInstance {
  return defaultCMsgDOTAReportCountsResponseInstance;
}
- (CMsgDOTAReportCountsResponse*) defaultInstance {
  return defaultCMsgDOTAReportCountsResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTargetAccountId) {
    [output writeUInt32:1 value:self.targetAccountId];
  }
  if (self.hasLeadershipCount) {
    [output writeUInt32:2 value:self.leadershipCount];
  }
  if (self.hasTeachingCount) {
    [output writeUInt32:3 value:self.teachingCount];
  }
  if (self.hasFriendlyCount) {
    [output writeUInt32:4 value:self.friendlyCount];
  }
  if (self.hasForgivingCount) {
    [output writeUInt32:5 value:self.forgivingCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTargetAccountId) {
    size_ += computeUInt32Size(1, self.targetAccountId);
  }
  if (self.hasLeadershipCount) {
    size_ += computeUInt32Size(2, self.leadershipCount);
  }
  if (self.hasTeachingCount) {
    size_ += computeUInt32Size(3, self.teachingCount);
  }
  if (self.hasFriendlyCount) {
    size_ += computeUInt32Size(4, self.friendlyCount);
  }
  if (self.hasForgivingCount) {
    size_ += computeUInt32Size(5, self.forgivingCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAReportCountsResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAReportCountsResponse*)[[[CMsgDOTAReportCountsResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAReportCountsResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportCountsResponse*)[[[CMsgDOTAReportCountsResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportCountsResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAReportCountsResponse*)[[[CMsgDOTAReportCountsResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAReportCountsResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportCountsResponse*)[[[CMsgDOTAReportCountsResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportCountsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAReportCountsResponse*)[[[CMsgDOTAReportCountsResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAReportCountsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAReportCountsResponse*)[[[CMsgDOTAReportCountsResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAReportCountsResponse_Builder*) builder {
  return [[[CMsgDOTAReportCountsResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAReportCountsResponse_Builder*) builderWithPrototype:(CMsgDOTAReportCountsResponse*) prototype {
  return [[CMsgDOTAReportCountsResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAReportCountsResponse_Builder*) builder {
  return [CMsgDOTAReportCountsResponse builder];
}
- (CMsgDOTAReportCountsResponse_Builder*) toBuilder {
  return [CMsgDOTAReportCountsResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTargetAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetAccountId", [NSNumber numberWithInt:self.targetAccountId]];
  }
  if (self.hasLeadershipCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leadershipCount", [NSNumber numberWithInt:self.leadershipCount]];
  }
  if (self.hasTeachingCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teachingCount", [NSNumber numberWithInt:self.teachingCount]];
  }
  if (self.hasFriendlyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"friendlyCount", [NSNumber numberWithInt:self.friendlyCount]];
  }
  if (self.hasForgivingCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"forgivingCount", [NSNumber numberWithInt:self.forgivingCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAReportCountsResponse class]]) {
    return NO;
  }
  CMsgDOTAReportCountsResponse *otherMessage = other;
  return
      self.hasTargetAccountId == otherMessage.hasTargetAccountId &&
      (!self.hasTargetAccountId || self.targetAccountId == otherMessage.targetAccountId) &&
      self.hasLeadershipCount == otherMessage.hasLeadershipCount &&
      (!self.hasLeadershipCount || self.leadershipCount == otherMessage.leadershipCount) &&
      self.hasTeachingCount == otherMessage.hasTeachingCount &&
      (!self.hasTeachingCount || self.teachingCount == otherMessage.teachingCount) &&
      self.hasFriendlyCount == otherMessage.hasFriendlyCount &&
      (!self.hasFriendlyCount || self.friendlyCount == otherMessage.friendlyCount) &&
      self.hasForgivingCount == otherMessage.hasForgivingCount &&
      (!self.hasForgivingCount || self.forgivingCount == otherMessage.forgivingCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTargetAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.targetAccountId] hash];
  }
  if (self.hasLeadershipCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leadershipCount] hash];
  }
  if (self.hasTeachingCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teachingCount] hash];
  }
  if (self.hasFriendlyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.friendlyCount] hash];
  }
  if (self.hasForgivingCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.forgivingCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAReportCountsResponse_Builder()
@property (retain) CMsgDOTAReportCountsResponse* _builderResult;
@end

@implementation CMsgDOTAReportCountsResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAReportCountsResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAReportCountsResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAReportCountsResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAReportCountsResponse_Builder*) clone {
  return [CMsgDOTAReportCountsResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAReportCountsResponse*) defaultInstance {
  return [CMsgDOTAReportCountsResponse defaultInstance];
}
- (CMsgDOTAReportCountsResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAReportCountsResponse*) buildPartial {
  CMsgDOTAReportCountsResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAReportCountsResponse_Builder*) mergeFrom:(CMsgDOTAReportCountsResponse*) other {
  if (other == [CMsgDOTAReportCountsResponse defaultInstance]) {
    return self;
  }
  if (other.hasTargetAccountId) {
    [self setTargetAccountId:other.targetAccountId];
  }
  if (other.hasLeadershipCount) {
    [self setLeadershipCount:other.leadershipCount];
  }
  if (other.hasTeachingCount) {
    [self setTeachingCount:other.teachingCount];
  }
  if (other.hasFriendlyCount) {
    [self setFriendlyCount:other.friendlyCount];
  }
  if (other.hasForgivingCount) {
    [self setForgivingCount:other.forgivingCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAReportCountsResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAReportCountsResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTargetAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLeadershipCount:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTeachingCount:[input readUInt32]];
        break;
      }
      case 32: {
        [self setFriendlyCount:[input readUInt32]];
        break;
      }
      case 40: {
        [self setForgivingCount:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTargetAccountId {
  return _builderResult.hasTargetAccountId;
}
- (uint32_t) targetAccountId {
  return _builderResult.targetAccountId;
}
- (CMsgDOTAReportCountsResponse_Builder*) setTargetAccountId:(uint32_t) value {
  _builderResult.hasTargetAccountId = YES;
  _builderResult.targetAccountId = value;
  return self;
}
- (CMsgDOTAReportCountsResponse_Builder*) clearTargetAccountId {
  _builderResult.hasTargetAccountId = NO;
  _builderResult.targetAccountId = 0;
  return self;
}
- (BOOL) hasLeadershipCount {
  return _builderResult.hasLeadershipCount;
}
- (uint32_t) leadershipCount {
  return _builderResult.leadershipCount;
}
- (CMsgDOTAReportCountsResponse_Builder*) setLeadershipCount:(uint32_t) value {
  _builderResult.hasLeadershipCount = YES;
  _builderResult.leadershipCount = value;
  return self;
}
- (CMsgDOTAReportCountsResponse_Builder*) clearLeadershipCount {
  _builderResult.hasLeadershipCount = NO;
  _builderResult.leadershipCount = 0;
  return self;
}
- (BOOL) hasTeachingCount {
  return _builderResult.hasTeachingCount;
}
- (uint32_t) teachingCount {
  return _builderResult.teachingCount;
}
- (CMsgDOTAReportCountsResponse_Builder*) setTeachingCount:(uint32_t) value {
  _builderResult.hasTeachingCount = YES;
  _builderResult.teachingCount = value;
  return self;
}
- (CMsgDOTAReportCountsResponse_Builder*) clearTeachingCount {
  _builderResult.hasTeachingCount = NO;
  _builderResult.teachingCount = 0;
  return self;
}
- (BOOL) hasFriendlyCount {
  return _builderResult.hasFriendlyCount;
}
- (uint32_t) friendlyCount {
  return _builderResult.friendlyCount;
}
- (CMsgDOTAReportCountsResponse_Builder*) setFriendlyCount:(uint32_t) value {
  _builderResult.hasFriendlyCount = YES;
  _builderResult.friendlyCount = value;
  return self;
}
- (CMsgDOTAReportCountsResponse_Builder*) clearFriendlyCount {
  _builderResult.hasFriendlyCount = NO;
  _builderResult.friendlyCount = 0;
  return self;
}
- (BOOL) hasForgivingCount {
  return _builderResult.hasForgivingCount;
}
- (uint32_t) forgivingCount {
  return _builderResult.forgivingCount;
}
- (CMsgDOTAReportCountsResponse_Builder*) setForgivingCount:(uint32_t) value {
  _builderResult.hasForgivingCount = YES;
  _builderResult.forgivingCount = value;
  return self;
}
- (CMsgDOTAReportCountsResponse_Builder*) clearForgivingCount {
  _builderResult.hasForgivingCount = NO;
  _builderResult.forgivingCount = 0;
  return self;
}
@end

@interface CMsgDOTARequestPlayerResources ()
@property uint64_t steamId;
@property uint32_t playerId;
@end

@implementation CMsgDOTARequestPlayerResources

- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (BOOL) hasPlayerId {
  return !!hasPlayerId_;
}
- (void) setHasPlayerId:(BOOL) value_ {
  hasPlayerId_ = !!value_;
}
@synthesize playerId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.steamId = 0L;
    self.playerId = 0;
  }
  return self;
}
static CMsgDOTARequestPlayerResources* defaultCMsgDOTARequestPlayerResourcesInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestPlayerResources class]) {
    defaultCMsgDOTARequestPlayerResourcesInstance = [[CMsgDOTARequestPlayerResources alloc] init];
  }
}
+ (CMsgDOTARequestPlayerResources*) defaultInstance {
  return defaultCMsgDOTARequestPlayerResourcesInstance;
}
- (CMsgDOTARequestPlayerResources*) defaultInstance {
  return defaultCMsgDOTARequestPlayerResourcesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSteamId) {
    [output writeFixed64:1 value:self.steamId];
  }
  if (self.hasPlayerId) {
    [output writeUInt32:2 value:self.playerId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSteamId) {
    size_ += computeFixed64Size(1, self.steamId);
  }
  if (self.hasPlayerId) {
    size_ += computeUInt32Size(2, self.playerId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestPlayerResources*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestPlayerResources*)[[[CMsgDOTARequestPlayerResources builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestPlayerResources*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestPlayerResources*)[[[CMsgDOTARequestPlayerResources builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestPlayerResources*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestPlayerResources*)[[[CMsgDOTARequestPlayerResources builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestPlayerResources*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestPlayerResources*)[[[CMsgDOTARequestPlayerResources builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestPlayerResources*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestPlayerResources*)[[[CMsgDOTARequestPlayerResources builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestPlayerResources*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestPlayerResources*)[[[CMsgDOTARequestPlayerResources builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestPlayerResources_Builder*) builder {
  return [[[CMsgDOTARequestPlayerResources_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestPlayerResources_Builder*) builderWithPrototype:(CMsgDOTARequestPlayerResources*) prototype {
  return [[CMsgDOTARequestPlayerResources builder] mergeFrom:prototype];
}
- (CMsgDOTARequestPlayerResources_Builder*) builder {
  return [CMsgDOTARequestPlayerResources builder];
}
- (CMsgDOTARequestPlayerResources_Builder*) toBuilder {
  return [CMsgDOTARequestPlayerResources builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  if (self.hasPlayerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerId", [NSNumber numberWithInt:self.playerId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestPlayerResources class]]) {
    return NO;
  }
  CMsgDOTARequestPlayerResources *otherMessage = other;
  return
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      self.hasPlayerId == otherMessage.hasPlayerId &&
      (!self.hasPlayerId || self.playerId == otherMessage.playerId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  if (self.hasPlayerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.playerId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestPlayerResources_Builder()
@property (retain) CMsgDOTARequestPlayerResources* _builderResult;
@end

@implementation CMsgDOTARequestPlayerResources_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestPlayerResources alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestPlayerResources_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestPlayerResources alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestPlayerResources_Builder*) clone {
  return [CMsgDOTARequestPlayerResources builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestPlayerResources*) defaultInstance {
  return [CMsgDOTARequestPlayerResources defaultInstance];
}
- (CMsgDOTARequestPlayerResources*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestPlayerResources*) buildPartial {
  CMsgDOTARequestPlayerResources* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestPlayerResources_Builder*) mergeFrom:(CMsgDOTARequestPlayerResources*) other {
  if (other == [CMsgDOTARequestPlayerResources defaultInstance]) {
    return self;
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  if (other.hasPlayerId) {
    [self setPlayerId:other.playerId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestPlayerResources_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestPlayerResources_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSteamId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setPlayerId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgDOTARequestPlayerResources_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgDOTARequestPlayerResources_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
- (BOOL) hasPlayerId {
  return _builderResult.hasPlayerId;
}
- (uint32_t) playerId {
  return _builderResult.playerId;
}
- (CMsgDOTARequestPlayerResources_Builder*) setPlayerId:(uint32_t) value {
  _builderResult.hasPlayerId = YES;
  _builderResult.playerId = value;
  return self;
}
- (CMsgDOTARequestPlayerResources_Builder*) clearPlayerId {
  _builderResult.hasPlayerId = NO;
  _builderResult.playerId = 0;
  return self;
}
@end

@interface CMsgDOTARequestPlayerResourcesResponse ()
@property uint64_t steamId;
@property uint32_t rank;
@property uint32_t playerId;
@property BOOL preventTextChat;
@property BOOL preventVoiceChat;
@property BOOL matchMakingBan;
@end

@implementation CMsgDOTARequestPlayerResourcesResponse

- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value_ {
  hasRank_ = !!value_;
}
@synthesize rank;
- (BOOL) hasPlayerId {
  return !!hasPlayerId_;
}
- (void) setHasPlayerId:(BOOL) value_ {
  hasPlayerId_ = !!value_;
}
@synthesize playerId;
- (BOOL) hasPreventTextChat {
  return !!hasPreventTextChat_;
}
- (void) setHasPreventTextChat:(BOOL) value_ {
  hasPreventTextChat_ = !!value_;
}
- (BOOL) preventTextChat {
  return !!preventTextChat_;
}
- (void) setPreventTextChat:(BOOL) value_ {
  preventTextChat_ = !!value_;
}
- (BOOL) hasPreventVoiceChat {
  return !!hasPreventVoiceChat_;
}
- (void) setHasPreventVoiceChat:(BOOL) value_ {
  hasPreventVoiceChat_ = !!value_;
}
- (BOOL) preventVoiceChat {
  return !!preventVoiceChat_;
}
- (void) setPreventVoiceChat:(BOOL) value_ {
  preventVoiceChat_ = !!value_;
}
- (BOOL) hasMatchMakingBan {
  return !!hasMatchMakingBan_;
}
- (void) setHasMatchMakingBan:(BOOL) value_ {
  hasMatchMakingBan_ = !!value_;
}
- (BOOL) matchMakingBan {
  return !!matchMakingBan_;
}
- (void) setMatchMakingBan:(BOOL) value_ {
  matchMakingBan_ = !!value_;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.steamId = 0L;
    self.rank = 0;
    self.playerId = 0;
    self.preventTextChat = NO;
    self.preventVoiceChat = NO;
    self.matchMakingBan = NO;
  }
  return self;
}
static CMsgDOTARequestPlayerResourcesResponse* defaultCMsgDOTARequestPlayerResourcesResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestPlayerResourcesResponse class]) {
    defaultCMsgDOTARequestPlayerResourcesResponseInstance = [[CMsgDOTARequestPlayerResourcesResponse alloc] init];
  }
}
+ (CMsgDOTARequestPlayerResourcesResponse*) defaultInstance {
  return defaultCMsgDOTARequestPlayerResourcesResponseInstance;
}
- (CMsgDOTARequestPlayerResourcesResponse*) defaultInstance {
  return defaultCMsgDOTARequestPlayerResourcesResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSteamId) {
    [output writeFixed64:1 value:self.steamId];
  }
  if (self.hasRank) {
    [output writeUInt32:2 value:self.rank];
  }
  if (self.hasPlayerId) {
    [output writeUInt32:3 value:self.playerId];
  }
  if (self.hasPreventTextChat) {
    [output writeBool:4 value:self.preventTextChat];
  }
  if (self.hasPreventVoiceChat) {
    [output writeBool:5 value:self.preventVoiceChat];
  }
  if (self.hasMatchMakingBan) {
    [output writeBool:6 value:self.matchMakingBan];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSteamId) {
    size_ += computeFixed64Size(1, self.steamId);
  }
  if (self.hasRank) {
    size_ += computeUInt32Size(2, self.rank);
  }
  if (self.hasPlayerId) {
    size_ += computeUInt32Size(3, self.playerId);
  }
  if (self.hasPreventTextChat) {
    size_ += computeBoolSize(4, self.preventTextChat);
  }
  if (self.hasPreventVoiceChat) {
    size_ += computeBoolSize(5, self.preventVoiceChat);
  }
  if (self.hasMatchMakingBan) {
    size_ += computeBoolSize(6, self.matchMakingBan);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestPlayerResourcesResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestPlayerResourcesResponse*)[[[CMsgDOTARequestPlayerResourcesResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestPlayerResourcesResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestPlayerResourcesResponse*)[[[CMsgDOTARequestPlayerResourcesResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestPlayerResourcesResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestPlayerResourcesResponse*)[[[CMsgDOTARequestPlayerResourcesResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestPlayerResourcesResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestPlayerResourcesResponse*)[[[CMsgDOTARequestPlayerResourcesResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestPlayerResourcesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestPlayerResourcesResponse*)[[[CMsgDOTARequestPlayerResourcesResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestPlayerResourcesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestPlayerResourcesResponse*)[[[CMsgDOTARequestPlayerResourcesResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestPlayerResourcesResponse_Builder*) builder {
  return [[[CMsgDOTARequestPlayerResourcesResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestPlayerResourcesResponse_Builder*) builderWithPrototype:(CMsgDOTARequestPlayerResourcesResponse*) prototype {
  return [[CMsgDOTARequestPlayerResourcesResponse builder] mergeFrom:prototype];
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) builder {
  return [CMsgDOTARequestPlayerResourcesResponse builder];
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) toBuilder {
  return [CMsgDOTARequestPlayerResourcesResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  if (self.hasRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rank", [NSNumber numberWithInt:self.rank]];
  }
  if (self.hasPlayerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerId", [NSNumber numberWithInt:self.playerId]];
  }
  if (self.hasPreventTextChat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preventTextChat", [NSNumber numberWithBool:self.preventTextChat]];
  }
  if (self.hasPreventVoiceChat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preventVoiceChat", [NSNumber numberWithBool:self.preventVoiceChat]];
  }
  if (self.hasMatchMakingBan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchMakingBan", [NSNumber numberWithBool:self.matchMakingBan]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestPlayerResourcesResponse class]]) {
    return NO;
  }
  CMsgDOTARequestPlayerResourcesResponse *otherMessage = other;
  return
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      self.hasRank == otherMessage.hasRank &&
      (!self.hasRank || self.rank == otherMessage.rank) &&
      self.hasPlayerId == otherMessage.hasPlayerId &&
      (!self.hasPlayerId || self.playerId == otherMessage.playerId) &&
      self.hasPreventTextChat == otherMessage.hasPreventTextChat &&
      (!self.hasPreventTextChat || self.preventTextChat == otherMessage.preventTextChat) &&
      self.hasPreventVoiceChat == otherMessage.hasPreventVoiceChat &&
      (!self.hasPreventVoiceChat || self.preventVoiceChat == otherMessage.preventVoiceChat) &&
      self.hasMatchMakingBan == otherMessage.hasMatchMakingBan &&
      (!self.hasMatchMakingBan || self.matchMakingBan == otherMessage.matchMakingBan) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  if (self.hasRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rank] hash];
  }
  if (self.hasPlayerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.playerId] hash];
  }
  if (self.hasPreventTextChat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.preventTextChat] hash];
  }
  if (self.hasPreventVoiceChat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.preventVoiceChat] hash];
  }
  if (self.hasMatchMakingBan) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.matchMakingBan] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestPlayerResourcesResponse_Builder()
@property (retain) CMsgDOTARequestPlayerResourcesResponse* _builderResult;
@end

@implementation CMsgDOTARequestPlayerResourcesResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestPlayerResourcesResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestPlayerResourcesResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) clone {
  return [CMsgDOTARequestPlayerResourcesResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestPlayerResourcesResponse*) defaultInstance {
  return [CMsgDOTARequestPlayerResourcesResponse defaultInstance];
}
- (CMsgDOTARequestPlayerResourcesResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestPlayerResourcesResponse*) buildPartial {
  CMsgDOTARequestPlayerResourcesResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) mergeFrom:(CMsgDOTARequestPlayerResourcesResponse*) other {
  if (other == [CMsgDOTARequestPlayerResourcesResponse defaultInstance]) {
    return self;
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasPlayerId) {
    [self setPlayerId:other.playerId];
  }
  if (other.hasPreventTextChat) {
    [self setPreventTextChat:other.preventTextChat];
  }
  if (other.hasPreventVoiceChat) {
    [self setPreventVoiceChat:other.preventVoiceChat];
  }
  if (other.hasMatchMakingBan) {
    [self setMatchMakingBan:other.matchMakingBan];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSteamId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setRank:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPlayerId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setPreventTextChat:[input readBool]];
        break;
      }
      case 40: {
        [self setPreventVoiceChat:[input readBool]];
        break;
      }
      case 48: {
        [self setMatchMakingBan:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
- (BOOL) hasRank {
  return _builderResult.hasRank;
}
- (uint32_t) rank {
  return _builderResult.rank;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) setRank:(uint32_t) value {
  _builderResult.hasRank = YES;
  _builderResult.rank = value;
  return self;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) clearRank {
  _builderResult.hasRank = NO;
  _builderResult.rank = 0;
  return self;
}
- (BOOL) hasPlayerId {
  return _builderResult.hasPlayerId;
}
- (uint32_t) playerId {
  return _builderResult.playerId;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) setPlayerId:(uint32_t) value {
  _builderResult.hasPlayerId = YES;
  _builderResult.playerId = value;
  return self;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) clearPlayerId {
  _builderResult.hasPlayerId = NO;
  _builderResult.playerId = 0;
  return self;
}
- (BOOL) hasPreventTextChat {
  return _builderResult.hasPreventTextChat;
}
- (BOOL) preventTextChat {
  return _builderResult.preventTextChat;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) setPreventTextChat:(BOOL) value {
  _builderResult.hasPreventTextChat = YES;
  _builderResult.preventTextChat = value;
  return self;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) clearPreventTextChat {
  _builderResult.hasPreventTextChat = NO;
  _builderResult.preventTextChat = NO;
  return self;
}
- (BOOL) hasPreventVoiceChat {
  return _builderResult.hasPreventVoiceChat;
}
- (BOOL) preventVoiceChat {
  return _builderResult.preventVoiceChat;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) setPreventVoiceChat:(BOOL) value {
  _builderResult.hasPreventVoiceChat = YES;
  _builderResult.preventVoiceChat = value;
  return self;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) clearPreventVoiceChat {
  _builderResult.hasPreventVoiceChat = NO;
  _builderResult.preventVoiceChat = NO;
  return self;
}
- (BOOL) hasMatchMakingBan {
  return _builderResult.hasMatchMakingBan;
}
- (BOOL) matchMakingBan {
  return _builderResult.matchMakingBan;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) setMatchMakingBan:(BOOL) value {
  _builderResult.hasMatchMakingBan = YES;
  _builderResult.matchMakingBan = value;
  return self;
}
- (CMsgDOTARequestPlayerResourcesResponse_Builder*) clearMatchMakingBan {
  _builderResult.hasMatchMakingBan = NO;
  _builderResult.matchMakingBan = NO;
  return self;
}
@end

@interface CMsgDOTAKickedFromMatchmakingQueue ()
@property MatchType match_type;
@end

@implementation CMsgDOTAKickedFromMatchmakingQueue

- (BOOL) hasmatch_type {
  return !!hasmatch_type_;
}
- (void) setHasmatch_type:(BOOL) value_ {
  hasmatch_type_ = !!value_;
}
@synthesize match_type;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.match_type = MatchTypeMATCH_TYPE_RANKED;
  }
  return self;
}
static CMsgDOTAKickedFromMatchmakingQueue* defaultCMsgDOTAKickedFromMatchmakingQueueInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAKickedFromMatchmakingQueue class]) {
    defaultCMsgDOTAKickedFromMatchmakingQueueInstance = [[CMsgDOTAKickedFromMatchmakingQueue alloc] init];
  }
}
+ (CMsgDOTAKickedFromMatchmakingQueue*) defaultInstance {
  return defaultCMsgDOTAKickedFromMatchmakingQueueInstance;
}
- (CMsgDOTAKickedFromMatchmakingQueue*) defaultInstance {
  return defaultCMsgDOTAKickedFromMatchmakingQueueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasmatch_type) {
    [output writeEnum:1 value:self.match_type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasmatch_type) {
    size_ += computeEnumSize(1, self.match_type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAKickedFromMatchmakingQueue*) parseFromData:(NSData*) data {
  return (CMsgDOTAKickedFromMatchmakingQueue*)[[[CMsgDOTAKickedFromMatchmakingQueue builder] mergeFromData:data] build];
}
+ (CMsgDOTAKickedFromMatchmakingQueue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAKickedFromMatchmakingQueue*)[[[CMsgDOTAKickedFromMatchmakingQueue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAKickedFromMatchmakingQueue*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAKickedFromMatchmakingQueue*)[[[CMsgDOTAKickedFromMatchmakingQueue builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAKickedFromMatchmakingQueue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAKickedFromMatchmakingQueue*)[[[CMsgDOTAKickedFromMatchmakingQueue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAKickedFromMatchmakingQueue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAKickedFromMatchmakingQueue*)[[[CMsgDOTAKickedFromMatchmakingQueue builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAKickedFromMatchmakingQueue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAKickedFromMatchmakingQueue*)[[[CMsgDOTAKickedFromMatchmakingQueue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAKickedFromMatchmakingQueue_Builder*) builder {
  return [[[CMsgDOTAKickedFromMatchmakingQueue_Builder alloc] init] autorelease];
}
+ (CMsgDOTAKickedFromMatchmakingQueue_Builder*) builderWithPrototype:(CMsgDOTAKickedFromMatchmakingQueue*) prototype {
  return [[CMsgDOTAKickedFromMatchmakingQueue builder] mergeFrom:prototype];
}
- (CMsgDOTAKickedFromMatchmakingQueue_Builder*) builder {
  return [CMsgDOTAKickedFromMatchmakingQueue builder];
}
- (CMsgDOTAKickedFromMatchmakingQueue_Builder*) toBuilder {
  return [CMsgDOTAKickedFromMatchmakingQueue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasmatch_type) {
    [output appendFormat:@"%@%@: %d\n", indent, @"match_type", self.match_type];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAKickedFromMatchmakingQueue class]]) {
    return NO;
  }
  CMsgDOTAKickedFromMatchmakingQueue *otherMessage = other;
  return
      self.hasmatch_type == otherMessage.hasmatch_type &&
      (!self.hasmatch_type || self.match_type == otherMessage.match_type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasmatch_type) {
    hashCode = hashCode * 31 + self.match_type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAKickedFromMatchmakingQueue_Builder()
@property (retain) CMsgDOTAKickedFromMatchmakingQueue* _builderResult;
@end

@implementation CMsgDOTAKickedFromMatchmakingQueue_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAKickedFromMatchmakingQueue alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAKickedFromMatchmakingQueue_Builder*) clear {
  _builderResult = [[[CMsgDOTAKickedFromMatchmakingQueue alloc] init] autorelease];
  return self;
}
- (CMsgDOTAKickedFromMatchmakingQueue_Builder*) clone {
  return [CMsgDOTAKickedFromMatchmakingQueue builderWithPrototype:_builderResult];
}
- (CMsgDOTAKickedFromMatchmakingQueue*) defaultInstance {
  return [CMsgDOTAKickedFromMatchmakingQueue defaultInstance];
}
- (CMsgDOTAKickedFromMatchmakingQueue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAKickedFromMatchmakingQueue*) buildPartial {
  CMsgDOTAKickedFromMatchmakingQueue* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAKickedFromMatchmakingQueue_Builder*) mergeFrom:(CMsgDOTAKickedFromMatchmakingQueue*) other {
  if (other == [CMsgDOTAKickedFromMatchmakingQueue defaultInstance]) {
    return self;
  }
  if (other.hasmatch_type) {
    [self setmatch_type:other.match_type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAKickedFromMatchmakingQueue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAKickedFromMatchmakingQueue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (MatchTypeIsValidValue(value)) {
          [self setmatch_type:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasmatch_type {
  return _builderResult.hasmatch_type;
}
- (MatchType) match_type {
  return _builderResult.match_type;
}
- (CMsgDOTAKickedFromMatchmakingQueue_Builder*) setmatch_type:(MatchType) value {
  _builderResult.hasmatch_type = YES;
  _builderResult.match_type = value;
  return self;
}
- (CMsgDOTAKickedFromMatchmakingQueue_Builder*) clearmatch_type {
  _builderResult.hasmatch_type = NO;
  _builderResult.match_type = MatchTypeMATCH_TYPE_RANKED;
  return self;
}
@end

@interface CMsgDOTARequestSaveGames ()
@property uint32_t serverRegion;
@end

@implementation CMsgDOTARequestSaveGames

- (BOOL) hasServerRegion {
  return !!hasServerRegion_;
}
- (void) setHasServerRegion:(BOOL) value_ {
  hasServerRegion_ = !!value_;
}
@synthesize serverRegion;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.serverRegion = 0;
  }
  return self;
}
static CMsgDOTARequestSaveGames* defaultCMsgDOTARequestSaveGamesInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestSaveGames class]) {
    defaultCMsgDOTARequestSaveGamesInstance = [[CMsgDOTARequestSaveGames alloc] init];
  }
}
+ (CMsgDOTARequestSaveGames*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesInstance;
}
- (CMsgDOTARequestSaveGames*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasServerRegion) {
    [output writeUInt32:1 value:self.serverRegion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasServerRegion) {
    size_ += computeUInt32Size(1, self.serverRegion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestSaveGames*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestSaveGames*)[[[CMsgDOTARequestSaveGames builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestSaveGames*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGames*)[[[CMsgDOTARequestSaveGames builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGames*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestSaveGames*)[[[CMsgDOTARequestSaveGames builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestSaveGames*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGames*)[[[CMsgDOTARequestSaveGames builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGames*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestSaveGames*)[[[CMsgDOTARequestSaveGames builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestSaveGames*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGames*)[[[CMsgDOTARequestSaveGames builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGames_Builder*) builder {
  return [[[CMsgDOTARequestSaveGames_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestSaveGames_Builder*) builderWithPrototype:(CMsgDOTARequestSaveGames*) prototype {
  return [[CMsgDOTARequestSaveGames builder] mergeFrom:prototype];
}
- (CMsgDOTARequestSaveGames_Builder*) builder {
  return [CMsgDOTARequestSaveGames builder];
}
- (CMsgDOTARequestSaveGames_Builder*) toBuilder {
  return [CMsgDOTARequestSaveGames builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasServerRegion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverRegion", [NSNumber numberWithInt:self.serverRegion]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestSaveGames class]]) {
    return NO;
  }
  CMsgDOTARequestSaveGames *otherMessage = other;
  return
      self.hasServerRegion == otherMessage.hasServerRegion &&
      (!self.hasServerRegion || self.serverRegion == otherMessage.serverRegion) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasServerRegion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.serverRegion] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestSaveGames_Builder()
@property (retain) CMsgDOTARequestSaveGames* _builderResult;
@end

@implementation CMsgDOTARequestSaveGames_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestSaveGames alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestSaveGames_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestSaveGames alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestSaveGames_Builder*) clone {
  return [CMsgDOTARequestSaveGames builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestSaveGames*) defaultInstance {
  return [CMsgDOTARequestSaveGames defaultInstance];
}
- (CMsgDOTARequestSaveGames*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestSaveGames*) buildPartial {
  CMsgDOTARequestSaveGames* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestSaveGames_Builder*) mergeFrom:(CMsgDOTARequestSaveGames*) other {
  if (other == [CMsgDOTARequestSaveGames defaultInstance]) {
    return self;
  }
  if (other.hasServerRegion) {
    [self setServerRegion:other.serverRegion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestSaveGames_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestSaveGames_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setServerRegion:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasServerRegion {
  return _builderResult.hasServerRegion;
}
- (uint32_t) serverRegion {
  return _builderResult.serverRegion;
}
- (CMsgDOTARequestSaveGames_Builder*) setServerRegion:(uint32_t) value {
  _builderResult.hasServerRegion = YES;
  _builderResult.serverRegion = value;
  return self;
}
- (CMsgDOTARequestSaveGames_Builder*) clearServerRegion {
  _builderResult.hasServerRegion = NO;
  _builderResult.serverRegion = 0;
  return self;
}
@end

@interface CMsgDOTARequestSaveGamesServer ()
@property uint64_t steamId;
@end

@implementation CMsgDOTARequestSaveGamesServer

- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.steamId = 0L;
  }
  return self;
}
static CMsgDOTARequestSaveGamesServer* defaultCMsgDOTARequestSaveGamesServerInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestSaveGamesServer class]) {
    defaultCMsgDOTARequestSaveGamesServerInstance = [[CMsgDOTARequestSaveGamesServer alloc] init];
  }
}
+ (CMsgDOTARequestSaveGamesServer*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesServerInstance;
}
- (CMsgDOTARequestSaveGamesServer*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesServerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSteamId) {
    [output writeFixed64:1 value:self.steamId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSteamId) {
    size_ += computeFixed64Size(1, self.steamId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestSaveGamesServer*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestSaveGamesServer*)[[[CMsgDOTARequestSaveGamesServer builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestSaveGamesServer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesServer*)[[[CMsgDOTARequestSaveGamesServer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesServer*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestSaveGamesServer*)[[[CMsgDOTARequestSaveGamesServer builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesServer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesServer*)[[[CMsgDOTARequestSaveGamesServer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesServer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestSaveGamesServer*)[[[CMsgDOTARequestSaveGamesServer builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesServer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesServer*)[[[CMsgDOTARequestSaveGamesServer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesServer_Builder*) builder {
  return [[[CMsgDOTARequestSaveGamesServer_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestSaveGamesServer_Builder*) builderWithPrototype:(CMsgDOTARequestSaveGamesServer*) prototype {
  return [[CMsgDOTARequestSaveGamesServer builder] mergeFrom:prototype];
}
- (CMsgDOTARequestSaveGamesServer_Builder*) builder {
  return [CMsgDOTARequestSaveGamesServer builder];
}
- (CMsgDOTARequestSaveGamesServer_Builder*) toBuilder {
  return [CMsgDOTARequestSaveGamesServer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestSaveGamesServer class]]) {
    return NO;
  }
  CMsgDOTARequestSaveGamesServer *otherMessage = other;
  return
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestSaveGamesServer_Builder()
@property (retain) CMsgDOTARequestSaveGamesServer* _builderResult;
@end

@implementation CMsgDOTARequestSaveGamesServer_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestSaveGamesServer alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestSaveGamesServer_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestSaveGamesServer alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestSaveGamesServer_Builder*) clone {
  return [CMsgDOTARequestSaveGamesServer builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestSaveGamesServer*) defaultInstance {
  return [CMsgDOTARequestSaveGamesServer defaultInstance];
}
- (CMsgDOTARequestSaveGamesServer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestSaveGamesServer*) buildPartial {
  CMsgDOTARequestSaveGamesServer* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestSaveGamesServer_Builder*) mergeFrom:(CMsgDOTARequestSaveGamesServer*) other {
  if (other == [CMsgDOTARequestSaveGamesServer defaultInstance]) {
    return self;
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestSaveGamesServer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestSaveGamesServer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSteamId:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgDOTARequestSaveGamesServer_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgDOTARequestSaveGamesServer_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
@end

@interface CMsgDOTARequestSaveGamesResponse ()
@property uint64_t steamId;
@property (retain) PBAppendableArray * saveGamesArray;
@end

@implementation CMsgDOTARequestSaveGamesResponse

- (BOOL) hasSteamId {
  return !!hasSteamId_;
}
- (void) setHasSteamId:(BOOL) value_ {
  hasSteamId_ = !!value_;
}
@synthesize steamId;
@synthesize saveGamesArray;
@dynamic saveGames;
- (void) dealloc {
  self.saveGamesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.steamId = 0L;
  }
  return self;
}
static CMsgDOTARequestSaveGamesResponse* defaultCMsgDOTARequestSaveGamesResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestSaveGamesResponse class]) {
    defaultCMsgDOTARequestSaveGamesResponseInstance = [[CMsgDOTARequestSaveGamesResponse alloc] init];
  }
}
+ (CMsgDOTARequestSaveGamesResponse*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponseInstance;
}
- (CMsgDOTARequestSaveGamesResponse*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponseInstance;
}
- (PBArray *)saveGames {
  return saveGamesArray;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame*)saveGamesAtIndex:(NSUInteger)index {
  return [saveGamesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSteamId) {
    [output writeFixed64:1 value:self.steamId];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame *element in self.saveGamesArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSteamId) {
    size_ += computeFixed64Size(1, self.steamId);
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame *element in self.saveGamesArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestSaveGamesResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestSaveGamesResponse*)[[[CMsgDOTARequestSaveGamesResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestSaveGamesResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse*)[[[CMsgDOTARequestSaveGamesResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse*)[[[CMsgDOTARequestSaveGamesResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse*)[[[CMsgDOTARequestSaveGamesResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse*)[[[CMsgDOTARequestSaveGamesResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse*)[[[CMsgDOTARequestSaveGamesResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_Builder*) builder {
  return [[[CMsgDOTARequestSaveGamesResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestSaveGamesResponse_Builder*) builderWithPrototype:(CMsgDOTARequestSaveGamesResponse*) prototype {
  return [[CMsgDOTARequestSaveGamesResponse builder] mergeFrom:prototype];
}
- (CMsgDOTARequestSaveGamesResponse_Builder*) builder {
  return [CMsgDOTARequestSaveGamesResponse builder];
}
- (CMsgDOTARequestSaveGamesResponse_Builder*) toBuilder {
  return [CMsgDOTARequestSaveGamesResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamId", [NSNumber numberWithLongLong:self.steamId]];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame* element in self.saveGamesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"saveGames"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestSaveGamesResponse class]]) {
    return NO;
  }
  CMsgDOTARequestSaveGamesResponse *otherMessage = other;
  return
      self.hasSteamId == otherMessage.hasSteamId &&
      (!self.hasSteamId || self.steamId == otherMessage.steamId) &&
      [self.saveGamesArray isEqualToArray:otherMessage.saveGamesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.steamId] hash];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame* element in self.saveGamesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestSaveGamesResponse_SaveGame ()
@property uint64_t lobbyId;
@property uint32_t saveTime;
@property (retain) PBAppendableArray * playersArray;
@property (retain) PBAppendableArray * saveInstancesArray;
@end

@implementation CMsgDOTARequestSaveGamesResponse_SaveGame

- (BOOL) hasLobbyId {
  return !!hasLobbyId_;
}
- (void) setHasLobbyId:(BOOL) value_ {
  hasLobbyId_ = !!value_;
}
@synthesize lobbyId;
- (BOOL) hasSaveTime {
  return !!hasSaveTime_;
}
- (void) setHasSaveTime:(BOOL) value_ {
  hasSaveTime_ = !!value_;
}
@synthesize saveTime;
@synthesize playersArray;
@dynamic players;
@synthesize saveInstancesArray;
@dynamic saveInstances;
- (void) dealloc {
  self.playersArray = nil;
  self.saveInstancesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lobbyId = 0L;
    self.saveTime = 0;
  }
  return self;
}
static CMsgDOTARequestSaveGamesResponse_SaveGame* defaultCMsgDOTARequestSaveGamesResponse_SaveGameInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestSaveGamesResponse_SaveGame class]) {
    defaultCMsgDOTARequestSaveGamesResponse_SaveGameInstance = [[CMsgDOTARequestSaveGamesResponse_SaveGame alloc] init];
  }
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponse_SaveGameInstance;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponse_SaveGameInstance;
}
- (PBArray *)players {
  return playersArray;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*)playersAtIndex:(NSUInteger)index {
  return [playersArray objectAtIndex:index];
}
- (PBArray *)saveInstances {
  return saveInstancesArray;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*)saveInstancesAtIndex:(NSUInteger)index {
  return [saveInstancesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLobbyId) {
    [output writeFixed64:1 value:self.lobbyId];
  }
  if (self.hasSaveTime) {
    [output writeUInt32:2 value:self.saveTime];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_Player *element in self.playersArray) {
    [output writeMessage:3 value:element];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance *element in self.saveInstancesArray) {
    [output writeMessage:4 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLobbyId) {
    size_ += computeFixed64Size(1, self.lobbyId);
  }
  if (self.hasSaveTime) {
    size_ += computeUInt32Size(2, self.saveTime);
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_Player *element in self.playersArray) {
    size_ += computeMessageSize(3, element);
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance *element in self.saveInstancesArray) {
    size_ += computeMessageSize(4, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) builder {
  return [[[CMsgDOTARequestSaveGamesResponse_SaveGame_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) builderWithPrototype:(CMsgDOTARequestSaveGamesResponse_SaveGame*) prototype {
  return [[CMsgDOTARequestSaveGamesResponse_SaveGame builder] mergeFrom:prototype];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) builder {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame builder];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) toBuilder {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLobbyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyId", [NSNumber numberWithLongLong:self.lobbyId]];
  }
  if (self.hasSaveTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saveTime", [NSNumber numberWithInt:self.saveTime]];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_Player* element in self.playersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"players"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* element in self.saveInstancesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"saveInstances"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestSaveGamesResponse_SaveGame class]]) {
    return NO;
  }
  CMsgDOTARequestSaveGamesResponse_SaveGame *otherMessage = other;
  return
      self.hasLobbyId == otherMessage.hasLobbyId &&
      (!self.hasLobbyId || self.lobbyId == otherMessage.lobbyId) &&
      self.hasSaveTime == otherMessage.hasSaveTime &&
      (!self.hasSaveTime || self.saveTime == otherMessage.saveTime) &&
      [self.playersArray isEqualToArray:otherMessage.playersArray] &&
      [self.saveInstancesArray isEqualToArray:otherMessage.saveInstancesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLobbyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lobbyId] hash];
  }
  if (self.hasSaveTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.saveTime] hash];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_Player* element in self.playersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* element in self.saveInstancesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestSaveGamesResponse_SaveGame_Player ()
@property DOTA_GC_TEAM team;
@property (retain) NSString* name;
@property (retain) NSString* hero;
@end

@implementation CMsgDOTARequestSaveGamesResponse_SaveGame_Player

- (BOOL) hasteam {
  return !!hasteam_;
}
- (void) setHasteam:(BOOL) value_ {
  hasteam_ = !!value_;
}
@synthesize team;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasHero {
  return !!hasHero_;
}
- (void) setHasHero:(BOOL) value_ {
  hasHero_ = !!value_;
}
@synthesize hero;
- (void) dealloc {
  self.name = nil;
  self.hero = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.team = DOTA_GC_TEAMDOTA_GC_TEAM_GOOD_GUYS;
    self.name = @"";
    self.hero = @"";
  }
  return self;
}
static CMsgDOTARequestSaveGamesResponse_SaveGame_Player* defaultCMsgDOTARequestSaveGamesResponse_SaveGame_PlayerInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestSaveGamesResponse_SaveGame_Player class]) {
    defaultCMsgDOTARequestSaveGamesResponse_SaveGame_PlayerInstance = [[CMsgDOTARequestSaveGamesResponse_SaveGame_Player alloc] init];
  }
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponse_SaveGame_PlayerInstance;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponse_SaveGame_PlayerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasteam) {
    [output writeEnum:1 value:self.team];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasHero) {
    [output writeString:3 value:self.hero];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasteam) {
    size_ += computeEnumSize(1, self.team);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasHero) {
    size_ += computeStringSize(3, self.hero);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_Player builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_Player builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_Player builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_Player builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_Player builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_Player builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) builder {
  return [[[CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) builderWithPrototype:(CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) prototype {
  return [[CMsgDOTARequestSaveGamesResponse_SaveGame_Player builder] mergeFrom:prototype];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) builder {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_Player builder];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) toBuilder {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_Player builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasteam) {
    [output appendFormat:@"%@%@: %d\n", indent, @"team", self.team];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasHero) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hero", self.hero];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestSaveGamesResponse_SaveGame_Player class]]) {
    return NO;
  }
  CMsgDOTARequestSaveGamesResponse_SaveGame_Player *otherMessage = other;
  return
      self.hasteam == otherMessage.hasteam &&
      (!self.hasteam || self.team == otherMessage.team) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasHero == otherMessage.hasHero &&
      (!self.hasHero || [self.hero isEqual:otherMessage.hero]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasteam) {
    hashCode = hashCode * 31 + self.team;
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasHero) {
    hashCode = hashCode * 31 + [self.hero hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder()
@property (retain) CMsgDOTARequestSaveGamesResponse_SaveGame_Player* _builderResult;
@end

@implementation CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestSaveGamesResponse_SaveGame_Player alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestSaveGamesResponse_SaveGame_Player alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) clone {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_Player builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) defaultInstance {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_Player defaultInstance];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) buildPartial {
  CMsgDOTARequestSaveGamesResponse_SaveGame_Player* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) mergeFrom:(CMsgDOTARequestSaveGamesResponse_SaveGame_Player*) other {
  if (other == [CMsgDOTARequestSaveGamesResponse_SaveGame_Player defaultInstance]) {
    return self;
  }
  if (other.hasteam) {
    [self setteam:other.team];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasHero) {
    [self setHero:other.hero];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (DOTA_GC_TEAMIsValidValue(value)) {
          [self setteam:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setHero:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasteam {
  return _builderResult.hasteam;
}
- (DOTA_GC_TEAM) team {
  return _builderResult.team;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) setteam:(DOTA_GC_TEAM) value {
  _builderResult.hasteam = YES;
  _builderResult.team = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) clearteam {
  _builderResult.hasteam = NO;
  _builderResult.team = DOTA_GC_TEAMDOTA_GC_TEAM_GOOD_GUYS;
  return self;
}
- (BOOL) hasName {
  return _builderResult.hasName;
}
- (NSString*) name {
  return _builderResult.name;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) setName:(NSString*) value {
  _builderResult.hasName = YES;
  _builderResult.name = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) clearName {
  _builderResult.hasName = NO;
  _builderResult.name = @"";
  return self;
}
- (BOOL) hasHero {
  return _builderResult.hasHero;
}
- (NSString*) hero {
  return _builderResult.hero;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) setHero:(NSString*) value {
  _builderResult.hasHero = YES;
  _builderResult.hero = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder*) clearHero {
  _builderResult.hasHero = NO;
  _builderResult.hero = @"";
  return self;
}
@end

@interface CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance ()
@property uint32_t saveNumber;
@property uint32_t gameTime;
@property uint32_t team1Score;
@property uint32_t team2Score;
@property (retain) PBAppendableArray * playerPositionsArray;
@property uint32_t saveId;
@end

@implementation CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance

- (BOOL) hasSaveNumber {
  return !!hasSaveNumber_;
}
- (void) setHasSaveNumber:(BOOL) value_ {
  hasSaveNumber_ = !!value_;
}
@synthesize saveNumber;
- (BOOL) hasGameTime {
  return !!hasGameTime_;
}
- (void) setHasGameTime:(BOOL) value_ {
  hasGameTime_ = !!value_;
}
@synthesize gameTime;
- (BOOL) hasTeam1Score {
  return !!hasTeam1Score_;
}
- (void) setHasTeam1Score:(BOOL) value_ {
  hasTeam1Score_ = !!value_;
}
@synthesize team1Score;
- (BOOL) hasTeam2Score {
  return !!hasTeam2Score_;
}
- (void) setHasTeam2Score:(BOOL) value_ {
  hasTeam2Score_ = !!value_;
}
@synthesize team2Score;
@synthesize playerPositionsArray;
@dynamic playerPositions;
- (BOOL) hasSaveId {
  return !!hasSaveId_;
}
- (void) setHasSaveId:(BOOL) value_ {
  hasSaveId_ = !!value_;
}
@synthesize saveId;
- (void) dealloc {
  self.playerPositionsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.saveNumber = 0;
    self.gameTime = 0;
    self.team1Score = 0;
    self.team2Score = 0;
    self.saveId = 0;
  }
  return self;
}
static CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* defaultCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstanceInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance class]) {
    defaultCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstanceInstance = [[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance alloc] init];
  }
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstanceInstance;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstanceInstance;
}
- (PBArray *)playerPositions {
  return playerPositionsArray;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*)playerPositionsAtIndex:(NSUInteger)index {
  return [playerPositionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSaveNumber) {
    [output writeUInt32:1 value:self.saveNumber];
  }
  if (self.hasGameTime) {
    [output writeUInt32:2 value:self.gameTime];
  }
  if (self.hasTeam1Score) {
    [output writeUInt32:3 value:self.team1Score];
  }
  if (self.hasTeam2Score) {
    [output writeUInt32:4 value:self.team2Score];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions *element in self.playerPositionsArray) {
    [output writeMessage:5 value:element];
  }
  if (self.hasSaveId) {
    [output writeUInt32:6 value:self.saveId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSaveNumber) {
    size_ += computeUInt32Size(1, self.saveNumber);
  }
  if (self.hasGameTime) {
    size_ += computeUInt32Size(2, self.gameTime);
  }
  if (self.hasTeam1Score) {
    size_ += computeUInt32Size(3, self.team1Score);
  }
  if (self.hasTeam2Score) {
    size_ += computeUInt32Size(4, self.team2Score);
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions *element in self.playerPositionsArray) {
    size_ += computeMessageSize(5, element);
  }
  if (self.hasSaveId) {
    size_ += computeUInt32Size(6, self.saveId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) builder {
  return [[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) builderWithPrototype:(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) prototype {
  return [[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builder] mergeFrom:prototype];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) builder {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builder];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) toBuilder {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSaveNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saveNumber", [NSNumber numberWithInt:self.saveNumber]];
  }
  if (self.hasGameTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameTime", [NSNumber numberWithInt:self.gameTime]];
  }
  if (self.hasTeam1Score) {
    [output appendFormat:@"%@%@: %@\n", indent, @"team1Score", [NSNumber numberWithInt:self.team1Score]];
  }
  if (self.hasTeam2Score) {
    [output appendFormat:@"%@%@: %@\n", indent, @"team2Score", [NSNumber numberWithInt:self.team2Score]];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* element in self.playerPositionsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"playerPositions"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSaveId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saveId", [NSNumber numberWithInt:self.saveId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance class]]) {
    return NO;
  }
  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance *otherMessage = other;
  return
      self.hasSaveNumber == otherMessage.hasSaveNumber &&
      (!self.hasSaveNumber || self.saveNumber == otherMessage.saveNumber) &&
      self.hasGameTime == otherMessage.hasGameTime &&
      (!self.hasGameTime || self.gameTime == otherMessage.gameTime) &&
      self.hasTeam1Score == otherMessage.hasTeam1Score &&
      (!self.hasTeam1Score || self.team1Score == otherMessage.team1Score) &&
      self.hasTeam2Score == otherMessage.hasTeam2Score &&
      (!self.hasTeam2Score || self.team2Score == otherMessage.team2Score) &&
      [self.playerPositionsArray isEqualToArray:otherMessage.playerPositionsArray] &&
      self.hasSaveId == otherMessage.hasSaveId &&
      (!self.hasSaveId || self.saveId == otherMessage.saveId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSaveNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.saveNumber] hash];
  }
  if (self.hasGameTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameTime] hash];
  }
  if (self.hasTeam1Score) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.team1Score] hash];
  }
  if (self.hasTeam2Score) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.team2Score] hash];
  }
  for (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* element in self.playerPositionsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasSaveId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.saveId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions ()
@property Float32 x;
@property Float32 y;
@end

@implementation CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions

- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) value_ {
  hasX_ = !!value_;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) value_ {
  hasY_ = !!value_;
}
@synthesize y;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.x = 0;
    self.y = 0;
  }
  return self;
}
static CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* defaultCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositionsInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions class]) {
    defaultCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositionsInstance = [[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions alloc] init];
  }
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositionsInstance;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) defaultInstance {
  return defaultCMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositionsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasX) {
    [output writeFloat:1 value:self.x];
  }
  if (self.hasY) {
    [output writeFloat:2 value:self.y];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasX) {
    size_ += computeFloatSize(1, self.x);
  }
  if (self.hasY) {
    size_ += computeFloatSize(2, self.y);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*)[[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) builder {
  return [[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) builderWithPrototype:(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) prototype {
  return [[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builder] mergeFrom:prototype];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) builder {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builder];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) toBuilder {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"x", [NSNumber numberWithFloat:self.x]];
  }
  if (self.hasY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"y", [NSNumber numberWithFloat:self.y]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions class]]) {
    return NO;
  }
  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions *otherMessage = other;
  return
      self.hasX == otherMessage.hasX &&
      (!self.hasX || self.x == otherMessage.x) &&
      self.hasY == otherMessage.hasY &&
      (!self.hasY || self.y == otherMessage.y) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.x] hash];
  }
  if (self.hasY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.y] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder()
@property (retain) CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* _builderResult;
@end

@implementation CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) clone {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) defaultInstance {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions defaultInstance];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) buildPartial {
  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) mergeFrom:(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*) other {
  if (other == [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions defaultInstance]) {
    return self;
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setX:[input readFloat]];
        break;
      }
      case 21: {
        [self setY:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasX {
  return _builderResult.hasX;
}
- (Float32) x {
  return _builderResult.x;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) setX:(Float32) value {
  _builderResult.hasX = YES;
  _builderResult.x = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) clearX {
  _builderResult.hasX = NO;
  _builderResult.x = 0;
  return self;
}
- (BOOL) hasY {
  return _builderResult.hasY;
}
- (Float32) y {
  return _builderResult.y;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) setY:(Float32) value {
  _builderResult.hasY = YES;
  _builderResult.y = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder*) clearY {
  _builderResult.hasY = NO;
  _builderResult.y = 0;
  return self;
}
@end

@interface CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder()
@property (retain) CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* _builderResult;
@end

@implementation CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) clone {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) defaultInstance {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance defaultInstance];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) buildPartial {
  CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) mergeFrom:(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*) other {
  if (other == [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance defaultInstance]) {
    return self;
  }
  if (other.hasSaveNumber) {
    [self setSaveNumber:other.saveNumber];
  }
  if (other.hasGameTime) {
    [self setGameTime:other.gameTime];
  }
  if (other.hasTeam1Score) {
    [self setTeam1Score:other.team1Score];
  }
  if (other.hasTeam2Score) {
    [self setTeam2Score:other.team2Score];
  }
  if (other.playerPositionsArray.count > 0) {
    if (_builderResult.playerPositionsArray == nil) {
      _builderResult.playerPositionsArray = [[other.playerPositionsArray copyWithZone:[other.playerPositionsArray zone]] autorelease];
    } else {
      [_builderResult.playerPositionsArray appendArray:other.playerPositionsArray];
    }
  }
  if (other.hasSaveId) {
    [self setSaveId:other.saveId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSaveNumber:[input readUInt32]];
        break;
      }
      case 16: {
        [self setGameTime:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTeam1Score:[input readUInt32]];
        break;
      }
      case 32: {
        [self setTeam2Score:[input readUInt32]];
        break;
      }
      case 42: {
        CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions_Builder* subBuilder = [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlayerPositions:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setSaveId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSaveNumber {
  return _builderResult.hasSaveNumber;
}
- (uint32_t) saveNumber {
  return _builderResult.saveNumber;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) setSaveNumber:(uint32_t) value {
  _builderResult.hasSaveNumber = YES;
  _builderResult.saveNumber = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) clearSaveNumber {
  _builderResult.hasSaveNumber = NO;
  _builderResult.saveNumber = 0;
  return self;
}
- (BOOL) hasGameTime {
  return _builderResult.hasGameTime;
}
- (uint32_t) gameTime {
  return _builderResult.gameTime;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) setGameTime:(uint32_t) value {
  _builderResult.hasGameTime = YES;
  _builderResult.gameTime = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) clearGameTime {
  _builderResult.hasGameTime = NO;
  _builderResult.gameTime = 0;
  return self;
}
- (BOOL) hasTeam1Score {
  return _builderResult.hasTeam1Score;
}
- (uint32_t) team1Score {
  return _builderResult.team1Score;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) setTeam1Score:(uint32_t) value {
  _builderResult.hasTeam1Score = YES;
  _builderResult.team1Score = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) clearTeam1Score {
  _builderResult.hasTeam1Score = NO;
  _builderResult.team1Score = 0;
  return self;
}
- (BOOL) hasTeam2Score {
  return _builderResult.hasTeam2Score;
}
- (uint32_t) team2Score {
  return _builderResult.team2Score;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) setTeam2Score:(uint32_t) value {
  _builderResult.hasTeam2Score = YES;
  _builderResult.team2Score = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) clearTeam2Score {
  _builderResult.hasTeam2Score = NO;
  _builderResult.team2Score = 0;
  return self;
}
- (PBAppendableArray *)playerPositions {
  return _builderResult.playerPositionsArray;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*)playerPositionsAtIndex:(NSUInteger)index {
  return [_builderResult playerPositionsAtIndex:index];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder *)addPlayerPositions:(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions*)value {
  if (_builderResult.playerPositionsArray == nil) {
    _builderResult.playerPositionsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.playerPositionsArray addObject:value];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder *)setPlayerPositionsArray:(NSArray *)array {
  _builderResult.playerPositionsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder *)setPlayerPositionsValues:(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_PlayerPositions* *)values count:(NSUInteger)count {
  _builderResult.playerPositionsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder *)clearPlayerPositions {
  _builderResult.playerPositionsArray = nil;
  return self;
}
- (BOOL) hasSaveId {
  return _builderResult.hasSaveId;
}
- (uint32_t) saveId {
  return _builderResult.saveId;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) setSaveId:(uint32_t) value {
  _builderResult.hasSaveId = YES;
  _builderResult.saveId = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder*) clearSaveId {
  _builderResult.hasSaveId = NO;
  _builderResult.saveId = 0;
  return self;
}
@end

@interface CMsgDOTARequestSaveGamesResponse_SaveGame_Builder()
@property (retain) CMsgDOTARequestSaveGamesResponse_SaveGame* _builderResult;
@end

@implementation CMsgDOTARequestSaveGamesResponse_SaveGame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestSaveGamesResponse_SaveGame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestSaveGamesResponse_SaveGame alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) clone {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame*) defaultInstance {
  return [CMsgDOTARequestSaveGamesResponse_SaveGame defaultInstance];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame*) buildPartial {
  CMsgDOTARequestSaveGamesResponse_SaveGame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) mergeFrom:(CMsgDOTARequestSaveGamesResponse_SaveGame*) other {
  if (other == [CMsgDOTARequestSaveGamesResponse_SaveGame defaultInstance]) {
    return self;
  }
  if (other.hasLobbyId) {
    [self setLobbyId:other.lobbyId];
  }
  if (other.hasSaveTime) {
    [self setSaveTime:other.saveTime];
  }
  if (other.playersArray.count > 0) {
    if (_builderResult.playersArray == nil) {
      _builderResult.playersArray = [[other.playersArray copyWithZone:[other.playersArray zone]] autorelease];
    } else {
      [_builderResult.playersArray appendArray:other.playersArray];
    }
  }
  if (other.saveInstancesArray.count > 0) {
    if (_builderResult.saveInstancesArray == nil) {
      _builderResult.saveInstancesArray = [[other.saveInstancesArray copyWithZone:[other.saveInstancesArray zone]] autorelease];
    } else {
      [_builderResult.saveInstancesArray appendArray:other.saveInstancesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setLobbyId:[input readFixed64]];
        break;
      }
      case 16: {
        [self setSaveTime:[input readUInt32]];
        break;
      }
      case 26: {
        CMsgDOTARequestSaveGamesResponse_SaveGame_Player_Builder* subBuilder = [CMsgDOTARequestSaveGamesResponse_SaveGame_Player builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlayers:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance_Builder* subBuilder = [CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSaveInstances:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLobbyId {
  return _builderResult.hasLobbyId;
}
- (uint64_t) lobbyId {
  return _builderResult.lobbyId;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) setLobbyId:(uint64_t) value {
  _builderResult.hasLobbyId = YES;
  _builderResult.lobbyId = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) clearLobbyId {
  _builderResult.hasLobbyId = NO;
  _builderResult.lobbyId = 0L;
  return self;
}
- (BOOL) hasSaveTime {
  return _builderResult.hasSaveTime;
}
- (uint32_t) saveTime {
  return _builderResult.saveTime;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) setSaveTime:(uint32_t) value {
  _builderResult.hasSaveTime = YES;
  _builderResult.saveTime = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder*) clearSaveTime {
  _builderResult.hasSaveTime = NO;
  _builderResult.saveTime = 0;
  return self;
}
- (PBAppendableArray *)players {
  return _builderResult.playersArray;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Player*)playersAtIndex:(NSUInteger)index {
  return [_builderResult playersAtIndex:index];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder *)addPlayers:(CMsgDOTARequestSaveGamesResponse_SaveGame_Player*)value {
  if (_builderResult.playersArray == nil) {
    _builderResult.playersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.playersArray addObject:value];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder *)setPlayersArray:(NSArray *)array {
  _builderResult.playersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder *)setPlayersValues:(const CMsgDOTARequestSaveGamesResponse_SaveGame_Player* *)values count:(NSUInteger)count {
  _builderResult.playersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder *)clearPlayers {
  _builderResult.playersArray = nil;
  return self;
}
- (PBAppendableArray *)saveInstances {
  return _builderResult.saveInstancesArray;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*)saveInstancesAtIndex:(NSUInteger)index {
  return [_builderResult saveInstancesAtIndex:index];
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder *)addSaveInstances:(CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance*)value {
  if (_builderResult.saveInstancesArray == nil) {
    _builderResult.saveInstancesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.saveInstancesArray addObject:value];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder *)setSaveInstancesArray:(NSArray *)array {
  _builderResult.saveInstancesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder *)setSaveInstancesValues:(const CMsgDOTARequestSaveGamesResponse_SaveGame_SaveInstance* *)values count:(NSUInteger)count {
  _builderResult.saveInstancesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame_Builder *)clearSaveInstances {
  _builderResult.saveInstancesArray = nil;
  return self;
}
@end

@interface CMsgDOTARequestSaveGamesResponse_Builder()
@property (retain) CMsgDOTARequestSaveGamesResponse* _builderResult;
@end

@implementation CMsgDOTARequestSaveGamesResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestSaveGamesResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestSaveGamesResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestSaveGamesResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_Builder*) clone {
  return [CMsgDOTARequestSaveGamesResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestSaveGamesResponse*) defaultInstance {
  return [CMsgDOTARequestSaveGamesResponse defaultInstance];
}
- (CMsgDOTARequestSaveGamesResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestSaveGamesResponse*) buildPartial {
  CMsgDOTARequestSaveGamesResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestSaveGamesResponse_Builder*) mergeFrom:(CMsgDOTARequestSaveGamesResponse*) other {
  if (other == [CMsgDOTARequestSaveGamesResponse defaultInstance]) {
    return self;
  }
  if (other.hasSteamId) {
    [self setSteamId:other.steamId];
  }
  if (other.saveGamesArray.count > 0) {
    if (_builderResult.saveGamesArray == nil) {
      _builderResult.saveGamesArray = [[other.saveGamesArray copyWithZone:[other.saveGamesArray zone]] autorelease];
    } else {
      [_builderResult.saveGamesArray appendArray:other.saveGamesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestSaveGamesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSteamId:[input readFixed64]];
        break;
      }
      case 18: {
        CMsgDOTARequestSaveGamesResponse_SaveGame_Builder* subBuilder = [CMsgDOTARequestSaveGamesResponse_SaveGame builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSaveGames:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSteamId {
  return _builderResult.hasSteamId;
}
- (uint64_t) steamId {
  return _builderResult.steamId;
}
- (CMsgDOTARequestSaveGamesResponse_Builder*) setSteamId:(uint64_t) value {
  _builderResult.hasSteamId = YES;
  _builderResult.steamId = value;
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_Builder*) clearSteamId {
  _builderResult.hasSteamId = NO;
  _builderResult.steamId = 0L;
  return self;
}
- (PBAppendableArray *)saveGames {
  return _builderResult.saveGamesArray;
}
- (CMsgDOTARequestSaveGamesResponse_SaveGame*)saveGamesAtIndex:(NSUInteger)index {
  return [_builderResult saveGamesAtIndex:index];
}
- (CMsgDOTARequestSaveGamesResponse_Builder *)addSaveGames:(CMsgDOTARequestSaveGamesResponse_SaveGame*)value {
  if (_builderResult.saveGamesArray == nil) {
    _builderResult.saveGamesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.saveGamesArray addObject:value];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_Builder *)setSaveGamesArray:(NSArray *)array {
  _builderResult.saveGamesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_Builder *)setSaveGamesValues:(const CMsgDOTARequestSaveGamesResponse_SaveGame* *)values count:(NSUInteger)count {
  _builderResult.saveGamesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTARequestSaveGamesResponse_Builder *)clearSaveGames {
  _builderResult.saveGamesArray = nil;
  return self;
}
@end

@interface CMsgDOTAPlayerFailedToConnect ()
@property (retain) PBAppendableArray * failedLoadersArray;
@property (retain) PBAppendableArray * abandonedLoadersArray;
@end

@implementation CMsgDOTAPlayerFailedToConnect

@synthesize failedLoadersArray;
@dynamic failedLoaders;
@synthesize abandonedLoadersArray;
@dynamic abandonedLoaders;
- (void) dealloc {
  self.failedLoadersArray = nil;
  self.abandonedLoadersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAPlayerFailedToConnect* defaultCMsgDOTAPlayerFailedToConnectInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAPlayerFailedToConnect class]) {
    defaultCMsgDOTAPlayerFailedToConnectInstance = [[CMsgDOTAPlayerFailedToConnect alloc] init];
  }
}
+ (CMsgDOTAPlayerFailedToConnect*) defaultInstance {
  return defaultCMsgDOTAPlayerFailedToConnectInstance;
}
- (CMsgDOTAPlayerFailedToConnect*) defaultInstance {
  return defaultCMsgDOTAPlayerFailedToConnectInstance;
}
- (PBArray *)failedLoaders {
  return failedLoadersArray;
}
- (uint64_t)failedLoadersAtIndex:(NSUInteger)index {
  return [failedLoadersArray uint64AtIndex:index];
}
- (PBArray *)abandonedLoaders {
  return abandonedLoadersArray;
}
- (uint64_t)abandonedLoadersAtIndex:(NSUInteger)index {
  return [abandonedLoadersArray uint64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger failedLoadersArrayCount = self.failedLoadersArray.count;
  if (failedLoadersArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.failedLoadersArray.data;
    for (NSUInteger i = 0; i < failedLoadersArrayCount; ++i) {
      [output writeFixed64:1 value:values[i]];
    }
  }
  const NSUInteger abandonedLoadersArrayCount = self.abandonedLoadersArray.count;
  if (abandonedLoadersArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.abandonedLoadersArray.data;
    for (NSUInteger i = 0; i < abandonedLoadersArrayCount; ++i) {
      [output writeFixed64:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.failedLoadersArray.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.abandonedLoadersArray.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAPlayerFailedToConnect*) parseFromData:(NSData*) data {
  return (CMsgDOTAPlayerFailedToConnect*)[[[CMsgDOTAPlayerFailedToConnect builder] mergeFromData:data] build];
}
+ (CMsgDOTAPlayerFailedToConnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerFailedToConnect*)[[[CMsgDOTAPlayerFailedToConnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerFailedToConnect*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAPlayerFailedToConnect*)[[[CMsgDOTAPlayerFailedToConnect builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAPlayerFailedToConnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerFailedToConnect*)[[[CMsgDOTAPlayerFailedToConnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerFailedToConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAPlayerFailedToConnect*)[[[CMsgDOTAPlayerFailedToConnect builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAPlayerFailedToConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerFailedToConnect*)[[[CMsgDOTAPlayerFailedToConnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerFailedToConnect_Builder*) builder {
  return [[[CMsgDOTAPlayerFailedToConnect_Builder alloc] init] autorelease];
}
+ (CMsgDOTAPlayerFailedToConnect_Builder*) builderWithPrototype:(CMsgDOTAPlayerFailedToConnect*) prototype {
  return [[CMsgDOTAPlayerFailedToConnect builder] mergeFrom:prototype];
}
- (CMsgDOTAPlayerFailedToConnect_Builder*) builder {
  return [CMsgDOTAPlayerFailedToConnect builder];
}
- (CMsgDOTAPlayerFailedToConnect_Builder*) toBuilder {
  return [CMsgDOTAPlayerFailedToConnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.failedLoadersArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"failedLoaders", value];
  }
  for (NSNumber* value in self.abandonedLoadersArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abandonedLoaders", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAPlayerFailedToConnect class]]) {
    return NO;
  }
  CMsgDOTAPlayerFailedToConnect *otherMessage = other;
  return
      [self.failedLoadersArray isEqualToArray:otherMessage.failedLoadersArray] &&
      [self.abandonedLoadersArray isEqualToArray:otherMessage.abandonedLoadersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.failedLoadersArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.abandonedLoadersArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAPlayerFailedToConnect_Builder()
@property (retain) CMsgDOTAPlayerFailedToConnect* _builderResult;
@end

@implementation CMsgDOTAPlayerFailedToConnect_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAPlayerFailedToConnect alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAPlayerFailedToConnect_Builder*) clear {
  _builderResult = [[[CMsgDOTAPlayerFailedToConnect alloc] init] autorelease];
  return self;
}
- (CMsgDOTAPlayerFailedToConnect_Builder*) clone {
  return [CMsgDOTAPlayerFailedToConnect builderWithPrototype:_builderResult];
}
- (CMsgDOTAPlayerFailedToConnect*) defaultInstance {
  return [CMsgDOTAPlayerFailedToConnect defaultInstance];
}
- (CMsgDOTAPlayerFailedToConnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAPlayerFailedToConnect*) buildPartial {
  CMsgDOTAPlayerFailedToConnect* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAPlayerFailedToConnect_Builder*) mergeFrom:(CMsgDOTAPlayerFailedToConnect*) other {
  if (other == [CMsgDOTAPlayerFailedToConnect defaultInstance]) {
    return self;
  }
  if (other.failedLoadersArray.count > 0) {
    if (_builderResult.failedLoadersArray == nil) {
      _builderResult.failedLoadersArray = [[other.failedLoadersArray copyWithZone:[other.failedLoadersArray zone]] autorelease];
    } else {
      [_builderResult.failedLoadersArray appendArray:other.failedLoadersArray];
    }
  }
  if (other.abandonedLoadersArray.count > 0) {
    if (_builderResult.abandonedLoadersArray == nil) {
      _builderResult.abandonedLoadersArray = [[other.abandonedLoadersArray copyWithZone:[other.abandonedLoadersArray zone]] autorelease];
    } else {
      [_builderResult.abandonedLoadersArray appendArray:other.abandonedLoadersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAPlayerFailedToConnect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAPlayerFailedToConnect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self addFailedLoaders:[input readFixed64]];
        break;
      }
      case 17: {
        [self addAbandonedLoaders:[input readFixed64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)failedLoaders {
  return _builderResult.failedLoadersArray;
}
- (uint64_t)failedLoadersAtIndex:(NSUInteger)index {
  return [_builderResult failedLoadersAtIndex:index];
}
- (CMsgDOTAPlayerFailedToConnect_Builder *)addFailedLoaders:(uint64_t)value {
  if (_builderResult.failedLoadersArray == nil) {
    _builderResult.failedLoadersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_builderResult.failedLoadersArray addUint64:value];
  return self;
}
- (CMsgDOTAPlayerFailedToConnect_Builder *)setFailedLoadersArray:(NSArray *)array {
  _builderResult.failedLoadersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgDOTAPlayerFailedToConnect_Builder *)setFailedLoadersValues:(const uint64_t *)values count:(NSUInteger)count {
  _builderResult.failedLoadersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgDOTAPlayerFailedToConnect_Builder *)clearFailedLoaders {
  _builderResult.failedLoadersArray = nil;
  return self;
}
- (PBAppendableArray *)abandonedLoaders {
  return _builderResult.abandonedLoadersArray;
}
- (uint64_t)abandonedLoadersAtIndex:(NSUInteger)index {
  return [_builderResult abandonedLoadersAtIndex:index];
}
- (CMsgDOTAPlayerFailedToConnect_Builder *)addAbandonedLoaders:(uint64_t)value {
  if (_builderResult.abandonedLoadersArray == nil) {
    _builderResult.abandonedLoadersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_builderResult.abandonedLoadersArray addUint64:value];
  return self;
}
- (CMsgDOTAPlayerFailedToConnect_Builder *)setAbandonedLoadersArray:(NSArray *)array {
  _builderResult.abandonedLoadersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgDOTAPlayerFailedToConnect_Builder *)setAbandonedLoadersValues:(const uint64_t *)values count:(NSUInteger)count {
  _builderResult.abandonedLoadersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgDOTAPlayerFailedToConnect_Builder *)clearAbandonedLoaders {
  _builderResult.abandonedLoadersArray = nil;
  return self;
}
@end

@interface CMsgGCToRelayConnect ()
@property uint32_t sourceTvPublicAddr;
@property uint32_t sourceTvPrivateAddr;
@property uint32_t sourceTvPort;
@property uint64_t gameServerSteamId;
@property uint32_t parentCount;
@property uint64_t tvUniqueSecretCode;
@end

@implementation CMsgGCToRelayConnect

- (BOOL) hasSourceTvPublicAddr {
  return !!hasSourceTvPublicAddr_;
}
- (void) setHasSourceTvPublicAddr:(BOOL) value_ {
  hasSourceTvPublicAddr_ = !!value_;
}
@synthesize sourceTvPublicAddr;
- (BOOL) hasSourceTvPrivateAddr {
  return !!hasSourceTvPrivateAddr_;
}
- (void) setHasSourceTvPrivateAddr:(BOOL) value_ {
  hasSourceTvPrivateAddr_ = !!value_;
}
@synthesize sourceTvPrivateAddr;
- (BOOL) hasSourceTvPort {
  return !!hasSourceTvPort_;
}
- (void) setHasSourceTvPort:(BOOL) value_ {
  hasSourceTvPort_ = !!value_;
}
@synthesize sourceTvPort;
- (BOOL) hasGameServerSteamId {
  return !!hasGameServerSteamId_;
}
- (void) setHasGameServerSteamId:(BOOL) value_ {
  hasGameServerSteamId_ = !!value_;
}
@synthesize gameServerSteamId;
- (BOOL) hasParentCount {
  return !!hasParentCount_;
}
- (void) setHasParentCount:(BOOL) value_ {
  hasParentCount_ = !!value_;
}
@synthesize parentCount;
- (BOOL) hasTvUniqueSecretCode {
  return !!hasTvUniqueSecretCode_;
}
- (void) setHasTvUniqueSecretCode:(BOOL) value_ {
  hasTvUniqueSecretCode_ = !!value_;
}
@synthesize tvUniqueSecretCode;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sourceTvPublicAddr = 0;
    self.sourceTvPrivateAddr = 0;
    self.sourceTvPort = 0;
    self.gameServerSteamId = 0L;
    self.parentCount = 0;
    self.tvUniqueSecretCode = 0L;
  }
  return self;
}
static CMsgGCToRelayConnect* defaultCMsgGCToRelayConnectInstance = nil;
+ (void) initialize {
  if (self == [CMsgGCToRelayConnect class]) {
    defaultCMsgGCToRelayConnectInstance = [[CMsgGCToRelayConnect alloc] init];
  }
}
+ (CMsgGCToRelayConnect*) defaultInstance {
  return defaultCMsgGCToRelayConnectInstance;
}
- (CMsgGCToRelayConnect*) defaultInstance {
  return defaultCMsgGCToRelayConnectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSourceTvPublicAddr) {
    [output writeUInt32:1 value:self.sourceTvPublicAddr];
  }
  if (self.hasSourceTvPrivateAddr) {
    [output writeUInt32:2 value:self.sourceTvPrivateAddr];
  }
  if (self.hasSourceTvPort) {
    [output writeUInt32:3 value:self.sourceTvPort];
  }
  if (self.hasGameServerSteamId) {
    [output writeUInt64:4 value:self.gameServerSteamId];
  }
  if (self.hasParentCount) {
    [output writeUInt32:5 value:self.parentCount];
  }
  if (self.hasTvUniqueSecretCode) {
    [output writeFixed64:6 value:self.tvUniqueSecretCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSourceTvPublicAddr) {
    size_ += computeUInt32Size(1, self.sourceTvPublicAddr);
  }
  if (self.hasSourceTvPrivateAddr) {
    size_ += computeUInt32Size(2, self.sourceTvPrivateAddr);
  }
  if (self.hasSourceTvPort) {
    size_ += computeUInt32Size(3, self.sourceTvPort);
  }
  if (self.hasGameServerSteamId) {
    size_ += computeUInt64Size(4, self.gameServerSteamId);
  }
  if (self.hasParentCount) {
    size_ += computeUInt32Size(5, self.parentCount);
  }
  if (self.hasTvUniqueSecretCode) {
    size_ += computeFixed64Size(6, self.tvUniqueSecretCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGCToRelayConnect*) parseFromData:(NSData*) data {
  return (CMsgGCToRelayConnect*)[[[CMsgGCToRelayConnect builder] mergeFromData:data] build];
}
+ (CMsgGCToRelayConnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCToRelayConnect*)[[[CMsgGCToRelayConnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCToRelayConnect*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGCToRelayConnect*)[[[CMsgGCToRelayConnect builder] mergeFromInputStream:input] build];
}
+ (CMsgGCToRelayConnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCToRelayConnect*)[[[CMsgGCToRelayConnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCToRelayConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGCToRelayConnect*)[[[CMsgGCToRelayConnect builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGCToRelayConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCToRelayConnect*)[[[CMsgGCToRelayConnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCToRelayConnect_Builder*) builder {
  return [[[CMsgGCToRelayConnect_Builder alloc] init] autorelease];
}
+ (CMsgGCToRelayConnect_Builder*) builderWithPrototype:(CMsgGCToRelayConnect*) prototype {
  return [[CMsgGCToRelayConnect builder] mergeFrom:prototype];
}
- (CMsgGCToRelayConnect_Builder*) builder {
  return [CMsgGCToRelayConnect builder];
}
- (CMsgGCToRelayConnect_Builder*) toBuilder {
  return [CMsgGCToRelayConnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSourceTvPublicAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceTvPublicAddr", [NSNumber numberWithInt:self.sourceTvPublicAddr]];
  }
  if (self.hasSourceTvPrivateAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceTvPrivateAddr", [NSNumber numberWithInt:self.sourceTvPrivateAddr]];
  }
  if (self.hasSourceTvPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceTvPort", [NSNumber numberWithInt:self.sourceTvPort]];
  }
  if (self.hasGameServerSteamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameServerSteamId", [NSNumber numberWithLongLong:self.gameServerSteamId]];
  }
  if (self.hasParentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentCount", [NSNumber numberWithInt:self.parentCount]];
  }
  if (self.hasTvUniqueSecretCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tvUniqueSecretCode", [NSNumber numberWithLongLong:self.tvUniqueSecretCode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGCToRelayConnect class]]) {
    return NO;
  }
  CMsgGCToRelayConnect *otherMessage = other;
  return
      self.hasSourceTvPublicAddr == otherMessage.hasSourceTvPublicAddr &&
      (!self.hasSourceTvPublicAddr || self.sourceTvPublicAddr == otherMessage.sourceTvPublicAddr) &&
      self.hasSourceTvPrivateAddr == otherMessage.hasSourceTvPrivateAddr &&
      (!self.hasSourceTvPrivateAddr || self.sourceTvPrivateAddr == otherMessage.sourceTvPrivateAddr) &&
      self.hasSourceTvPort == otherMessage.hasSourceTvPort &&
      (!self.hasSourceTvPort || self.sourceTvPort == otherMessage.sourceTvPort) &&
      self.hasGameServerSteamId == otherMessage.hasGameServerSteamId &&
      (!self.hasGameServerSteamId || self.gameServerSteamId == otherMessage.gameServerSteamId) &&
      self.hasParentCount == otherMessage.hasParentCount &&
      (!self.hasParentCount || self.parentCount == otherMessage.parentCount) &&
      self.hasTvUniqueSecretCode == otherMessage.hasTvUniqueSecretCode &&
      (!self.hasTvUniqueSecretCode || self.tvUniqueSecretCode == otherMessage.tvUniqueSecretCode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSourceTvPublicAddr) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceTvPublicAddr] hash];
  }
  if (self.hasSourceTvPrivateAddr) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceTvPrivateAddr] hash];
  }
  if (self.hasSourceTvPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceTvPort] hash];
  }
  if (self.hasGameServerSteamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.gameServerSteamId] hash];
  }
  if (self.hasParentCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.parentCount] hash];
  }
  if (self.hasTvUniqueSecretCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tvUniqueSecretCode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGCToRelayConnect_Builder()
@property (retain) CMsgGCToRelayConnect* _builderResult;
@end

@implementation CMsgGCToRelayConnect_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGCToRelayConnect alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGCToRelayConnect_Builder*) clear {
  _builderResult = [[[CMsgGCToRelayConnect alloc] init] autorelease];
  return self;
}
- (CMsgGCToRelayConnect_Builder*) clone {
  return [CMsgGCToRelayConnect builderWithPrototype:_builderResult];
}
- (CMsgGCToRelayConnect*) defaultInstance {
  return [CMsgGCToRelayConnect defaultInstance];
}
- (CMsgGCToRelayConnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGCToRelayConnect*) buildPartial {
  CMsgGCToRelayConnect* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGCToRelayConnect_Builder*) mergeFrom:(CMsgGCToRelayConnect*) other {
  if (other == [CMsgGCToRelayConnect defaultInstance]) {
    return self;
  }
  if (other.hasSourceTvPublicAddr) {
    [self setSourceTvPublicAddr:other.sourceTvPublicAddr];
  }
  if (other.hasSourceTvPrivateAddr) {
    [self setSourceTvPrivateAddr:other.sourceTvPrivateAddr];
  }
  if (other.hasSourceTvPort) {
    [self setSourceTvPort:other.sourceTvPort];
  }
  if (other.hasGameServerSteamId) {
    [self setGameServerSteamId:other.gameServerSteamId];
  }
  if (other.hasParentCount) {
    [self setParentCount:other.parentCount];
  }
  if (other.hasTvUniqueSecretCode) {
    [self setTvUniqueSecretCode:other.tvUniqueSecretCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGCToRelayConnect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGCToRelayConnect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSourceTvPublicAddr:[input readUInt32]];
        break;
      }
      case 16: {
        [self setSourceTvPrivateAddr:[input readUInt32]];
        break;
      }
      case 24: {
        [self setSourceTvPort:[input readUInt32]];
        break;
      }
      case 32: {
        [self setGameServerSteamId:[input readUInt64]];
        break;
      }
      case 40: {
        [self setParentCount:[input readUInt32]];
        break;
      }
      case 49: {
        [self setTvUniqueSecretCode:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasSourceTvPublicAddr {
  return _builderResult.hasSourceTvPublicAddr;
}
- (uint32_t) sourceTvPublicAddr {
  return _builderResult.sourceTvPublicAddr;
}
- (CMsgGCToRelayConnect_Builder*) setSourceTvPublicAddr:(uint32_t) value {
  _builderResult.hasSourceTvPublicAddr = YES;
  _builderResult.sourceTvPublicAddr = value;
  return self;
}
- (CMsgGCToRelayConnect_Builder*) clearSourceTvPublicAddr {
  _builderResult.hasSourceTvPublicAddr = NO;
  _builderResult.sourceTvPublicAddr = 0;
  return self;
}
- (BOOL) hasSourceTvPrivateAddr {
  return _builderResult.hasSourceTvPrivateAddr;
}
- (uint32_t) sourceTvPrivateAddr {
  return _builderResult.sourceTvPrivateAddr;
}
- (CMsgGCToRelayConnect_Builder*) setSourceTvPrivateAddr:(uint32_t) value {
  _builderResult.hasSourceTvPrivateAddr = YES;
  _builderResult.sourceTvPrivateAddr = value;
  return self;
}
- (CMsgGCToRelayConnect_Builder*) clearSourceTvPrivateAddr {
  _builderResult.hasSourceTvPrivateAddr = NO;
  _builderResult.sourceTvPrivateAddr = 0;
  return self;
}
- (BOOL) hasSourceTvPort {
  return _builderResult.hasSourceTvPort;
}
- (uint32_t) sourceTvPort {
  return _builderResult.sourceTvPort;
}
- (CMsgGCToRelayConnect_Builder*) setSourceTvPort:(uint32_t) value {
  _builderResult.hasSourceTvPort = YES;
  _builderResult.sourceTvPort = value;
  return self;
}
- (CMsgGCToRelayConnect_Builder*) clearSourceTvPort {
  _builderResult.hasSourceTvPort = NO;
  _builderResult.sourceTvPort = 0;
  return self;
}
- (BOOL) hasGameServerSteamId {
  return _builderResult.hasGameServerSteamId;
}
- (uint64_t) gameServerSteamId {
  return _builderResult.gameServerSteamId;
}
- (CMsgGCToRelayConnect_Builder*) setGameServerSteamId:(uint64_t) value {
  _builderResult.hasGameServerSteamId = YES;
  _builderResult.gameServerSteamId = value;
  return self;
}
- (CMsgGCToRelayConnect_Builder*) clearGameServerSteamId {
  _builderResult.hasGameServerSteamId = NO;
  _builderResult.gameServerSteamId = 0L;
  return self;
}
- (BOOL) hasParentCount {
  return _builderResult.hasParentCount;
}
- (uint32_t) parentCount {
  return _builderResult.parentCount;
}
- (CMsgGCToRelayConnect_Builder*) setParentCount:(uint32_t) value {
  _builderResult.hasParentCount = YES;
  _builderResult.parentCount = value;
  return self;
}
- (CMsgGCToRelayConnect_Builder*) clearParentCount {
  _builderResult.hasParentCount = NO;
  _builderResult.parentCount = 0;
  return self;
}
- (BOOL) hasTvUniqueSecretCode {
  return _builderResult.hasTvUniqueSecretCode;
}
- (uint64_t) tvUniqueSecretCode {
  return _builderResult.tvUniqueSecretCode;
}
- (CMsgGCToRelayConnect_Builder*) setTvUniqueSecretCode:(uint64_t) value {
  _builderResult.hasTvUniqueSecretCode = YES;
  _builderResult.tvUniqueSecretCode = value;
  return self;
}
- (CMsgGCToRelayConnect_Builder*) clearTvUniqueSecretCode {
  _builderResult.hasTvUniqueSecretCode = NO;
  _builderResult.tvUniqueSecretCode = 0L;
  return self;
}
@end

@interface CMsgGCToRelayConnectResponse ()
@end

@implementation CMsgGCToRelayConnectResponse

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgGCToRelayConnectResponse* defaultCMsgGCToRelayConnectResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgGCToRelayConnectResponse class]) {
    defaultCMsgGCToRelayConnectResponseInstance = [[CMsgGCToRelayConnectResponse alloc] init];
  }
}
+ (CMsgGCToRelayConnectResponse*) defaultInstance {
  return defaultCMsgGCToRelayConnectResponseInstance;
}
- (CMsgGCToRelayConnectResponse*) defaultInstance {
  return defaultCMsgGCToRelayConnectResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGCToRelayConnectResponse*) parseFromData:(NSData*) data {
  return (CMsgGCToRelayConnectResponse*)[[[CMsgGCToRelayConnectResponse builder] mergeFromData:data] build];
}
+ (CMsgGCToRelayConnectResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCToRelayConnectResponse*)[[[CMsgGCToRelayConnectResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCToRelayConnectResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGCToRelayConnectResponse*)[[[CMsgGCToRelayConnectResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgGCToRelayConnectResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCToRelayConnectResponse*)[[[CMsgGCToRelayConnectResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCToRelayConnectResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGCToRelayConnectResponse*)[[[CMsgGCToRelayConnectResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGCToRelayConnectResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCToRelayConnectResponse*)[[[CMsgGCToRelayConnectResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCToRelayConnectResponse_Builder*) builder {
  return [[[CMsgGCToRelayConnectResponse_Builder alloc] init] autorelease];
}
+ (CMsgGCToRelayConnectResponse_Builder*) builderWithPrototype:(CMsgGCToRelayConnectResponse*) prototype {
  return [[CMsgGCToRelayConnectResponse builder] mergeFrom:prototype];
}
- (CMsgGCToRelayConnectResponse_Builder*) builder {
  return [CMsgGCToRelayConnectResponse builder];
}
- (CMsgGCToRelayConnectResponse_Builder*) toBuilder {
  return [CMsgGCToRelayConnectResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGCToRelayConnectResponse class]]) {
    return NO;
  }
  CMsgGCToRelayConnectResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGCToRelayConnectResponse_Builder()
@property (retain) CMsgGCToRelayConnectResponse* _builderResult;
@end

@implementation CMsgGCToRelayConnectResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGCToRelayConnectResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGCToRelayConnectResponse_Builder*) clear {
  _builderResult = [[[CMsgGCToRelayConnectResponse alloc] init] autorelease];
  return self;
}
- (CMsgGCToRelayConnectResponse_Builder*) clone {
  return [CMsgGCToRelayConnectResponse builderWithPrototype:_builderResult];
}
- (CMsgGCToRelayConnectResponse*) defaultInstance {
  return [CMsgGCToRelayConnectResponse defaultInstance];
}
- (CMsgGCToRelayConnectResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGCToRelayConnectResponse*) buildPartial {
  CMsgGCToRelayConnectResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGCToRelayConnectResponse_Builder*) mergeFrom:(CMsgGCToRelayConnectResponse*) other {
  if (other == [CMsgGCToRelayConnectResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGCToRelayConnectResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGCToRelayConnectResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgWatchGame ()
@property uint64_t serverSteamid;
@property uint32_t clientVersion;
@property uint64_t watchServerSteamid;
@property uint64_t lobbyId;
@end

@implementation CMsgWatchGame

- (BOOL) hasServerSteamid {
  return !!hasServerSteamid_;
}
- (void) setHasServerSteamid:(BOOL) value_ {
  hasServerSteamid_ = !!value_;
}
@synthesize serverSteamid;
- (BOOL) hasClientVersion {
  return !!hasClientVersion_;
}
- (void) setHasClientVersion:(BOOL) value_ {
  hasClientVersion_ = !!value_;
}
@synthesize clientVersion;
- (BOOL) hasWatchServerSteamid {
  return !!hasWatchServerSteamid_;
}
- (void) setHasWatchServerSteamid:(BOOL) value_ {
  hasWatchServerSteamid_ = !!value_;
}
@synthesize watchServerSteamid;
- (BOOL) hasLobbyId {
  return !!hasLobbyId_;
}
- (void) setHasLobbyId:(BOOL) value_ {
  hasLobbyId_ = !!value_;
}
@synthesize lobbyId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.serverSteamid = 0L;
    self.clientVersion = 0;
    self.watchServerSteamid = 0L;
    self.lobbyId = 0L;
  }
  return self;
}
static CMsgWatchGame* defaultCMsgWatchGameInstance = nil;
+ (void) initialize {
  if (self == [CMsgWatchGame class]) {
    defaultCMsgWatchGameInstance = [[CMsgWatchGame alloc] init];
  }
}
+ (CMsgWatchGame*) defaultInstance {
  return defaultCMsgWatchGameInstance;
}
- (CMsgWatchGame*) defaultInstance {
  return defaultCMsgWatchGameInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasServerSteamid) {
    [output writeFixed64:1 value:self.serverSteamid];
  }
  if (self.hasClientVersion) {
    [output writeUInt32:2 value:self.clientVersion];
  }
  if (self.hasWatchServerSteamid) {
    [output writeFixed64:3 value:self.watchServerSteamid];
  }
  if (self.hasLobbyId) {
    [output writeUInt64:4 value:self.lobbyId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasServerSteamid) {
    size_ += computeFixed64Size(1, self.serverSteamid);
  }
  if (self.hasClientVersion) {
    size_ += computeUInt32Size(2, self.clientVersion);
  }
  if (self.hasWatchServerSteamid) {
    size_ += computeFixed64Size(3, self.watchServerSteamid);
  }
  if (self.hasLobbyId) {
    size_ += computeUInt64Size(4, self.lobbyId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgWatchGame*) parseFromData:(NSData*) data {
  return (CMsgWatchGame*)[[[CMsgWatchGame builder] mergeFromData:data] build];
}
+ (CMsgWatchGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgWatchGame*)[[[CMsgWatchGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgWatchGame*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgWatchGame*)[[[CMsgWatchGame builder] mergeFromInputStream:input] build];
}
+ (CMsgWatchGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgWatchGame*)[[[CMsgWatchGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgWatchGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgWatchGame*)[[[CMsgWatchGame builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgWatchGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgWatchGame*)[[[CMsgWatchGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgWatchGame_Builder*) builder {
  return [[[CMsgWatchGame_Builder alloc] init] autorelease];
}
+ (CMsgWatchGame_Builder*) builderWithPrototype:(CMsgWatchGame*) prototype {
  return [[CMsgWatchGame builder] mergeFrom:prototype];
}
- (CMsgWatchGame_Builder*) builder {
  return [CMsgWatchGame builder];
}
- (CMsgWatchGame_Builder*) toBuilder {
  return [CMsgWatchGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasServerSteamid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverSteamid", [NSNumber numberWithLongLong:self.serverSteamid]];
  }
  if (self.hasClientVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientVersion", [NSNumber numberWithInt:self.clientVersion]];
  }
  if (self.hasWatchServerSteamid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"watchServerSteamid", [NSNumber numberWithLongLong:self.watchServerSteamid]];
  }
  if (self.hasLobbyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyId", [NSNumber numberWithLongLong:self.lobbyId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgWatchGame class]]) {
    return NO;
  }
  CMsgWatchGame *otherMessage = other;
  return
      self.hasServerSteamid == otherMessage.hasServerSteamid &&
      (!self.hasServerSteamid || self.serverSteamid == otherMessage.serverSteamid) &&
      self.hasClientVersion == otherMessage.hasClientVersion &&
      (!self.hasClientVersion || self.clientVersion == otherMessage.clientVersion) &&
      self.hasWatchServerSteamid == otherMessage.hasWatchServerSteamid &&
      (!self.hasWatchServerSteamid || self.watchServerSteamid == otherMessage.watchServerSteamid) &&
      self.hasLobbyId == otherMessage.hasLobbyId &&
      (!self.hasLobbyId || self.lobbyId == otherMessage.lobbyId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasServerSteamid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.serverSteamid] hash];
  }
  if (self.hasClientVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.clientVersion] hash];
  }
  if (self.hasWatchServerSteamid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.watchServerSteamid] hash];
  }
  if (self.hasLobbyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lobbyId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgWatchGame_Builder()
@property (retain) CMsgWatchGame* _builderResult;
@end

@implementation CMsgWatchGame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgWatchGame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgWatchGame_Builder*) clear {
  _builderResult = [[[CMsgWatchGame alloc] init] autorelease];
  return self;
}
- (CMsgWatchGame_Builder*) clone {
  return [CMsgWatchGame builderWithPrototype:_builderResult];
}
- (CMsgWatchGame*) defaultInstance {
  return [CMsgWatchGame defaultInstance];
}
- (CMsgWatchGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgWatchGame*) buildPartial {
  CMsgWatchGame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgWatchGame_Builder*) mergeFrom:(CMsgWatchGame*) other {
  if (other == [CMsgWatchGame defaultInstance]) {
    return self;
  }
  if (other.hasServerSteamid) {
    [self setServerSteamid:other.serverSteamid];
  }
  if (other.hasClientVersion) {
    [self setClientVersion:other.clientVersion];
  }
  if (other.hasWatchServerSteamid) {
    [self setWatchServerSteamid:other.watchServerSteamid];
  }
  if (other.hasLobbyId) {
    [self setLobbyId:other.lobbyId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgWatchGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgWatchGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setServerSteamid:[input readFixed64]];
        break;
      }
      case 16: {
        [self setClientVersion:[input readUInt32]];
        break;
      }
      case 25: {
        [self setWatchServerSteamid:[input readFixed64]];
        break;
      }
      case 32: {
        [self setLobbyId:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasServerSteamid {
  return _builderResult.hasServerSteamid;
}
- (uint64_t) serverSteamid {
  return _builderResult.serverSteamid;
}
- (CMsgWatchGame_Builder*) setServerSteamid:(uint64_t) value {
  _builderResult.hasServerSteamid = YES;
  _builderResult.serverSteamid = value;
  return self;
}
- (CMsgWatchGame_Builder*) clearServerSteamid {
  _builderResult.hasServerSteamid = NO;
  _builderResult.serverSteamid = 0L;
  return self;
}
- (BOOL) hasClientVersion {
  return _builderResult.hasClientVersion;
}
- (uint32_t) clientVersion {
  return _builderResult.clientVersion;
}
- (CMsgWatchGame_Builder*) setClientVersion:(uint32_t) value {
  _builderResult.hasClientVersion = YES;
  _builderResult.clientVersion = value;
  return self;
}
- (CMsgWatchGame_Builder*) clearClientVersion {
  _builderResult.hasClientVersion = NO;
  _builderResult.clientVersion = 0;
  return self;
}
- (BOOL) hasWatchServerSteamid {
  return _builderResult.hasWatchServerSteamid;
}
- (uint64_t) watchServerSteamid {
  return _builderResult.watchServerSteamid;
}
- (CMsgWatchGame_Builder*) setWatchServerSteamid:(uint64_t) value {
  _builderResult.hasWatchServerSteamid = YES;
  _builderResult.watchServerSteamid = value;
  return self;
}
- (CMsgWatchGame_Builder*) clearWatchServerSteamid {
  _builderResult.hasWatchServerSteamid = NO;
  _builderResult.watchServerSteamid = 0L;
  return self;
}
- (BOOL) hasLobbyId {
  return _builderResult.hasLobbyId;
}
- (uint64_t) lobbyId {
  return _builderResult.lobbyId;
}
- (CMsgWatchGame_Builder*) setLobbyId:(uint64_t) value {
  _builderResult.hasLobbyId = YES;
  _builderResult.lobbyId = value;
  return self;
}
- (CMsgWatchGame_Builder*) clearLobbyId {
  _builderResult.hasLobbyId = NO;
  _builderResult.lobbyId = 0L;
  return self;
}
@end

@interface CMsgCancelWatchGame ()
@end

@implementation CMsgCancelWatchGame

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgCancelWatchGame* defaultCMsgCancelWatchGameInstance = nil;
+ (void) initialize {
  if (self == [CMsgCancelWatchGame class]) {
    defaultCMsgCancelWatchGameInstance = [[CMsgCancelWatchGame alloc] init];
  }
}
+ (CMsgCancelWatchGame*) defaultInstance {
  return defaultCMsgCancelWatchGameInstance;
}
- (CMsgCancelWatchGame*) defaultInstance {
  return defaultCMsgCancelWatchGameInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgCancelWatchGame*) parseFromData:(NSData*) data {
  return (CMsgCancelWatchGame*)[[[CMsgCancelWatchGame builder] mergeFromData:data] build];
}
+ (CMsgCancelWatchGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCancelWatchGame*)[[[CMsgCancelWatchGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgCancelWatchGame*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgCancelWatchGame*)[[[CMsgCancelWatchGame builder] mergeFromInputStream:input] build];
}
+ (CMsgCancelWatchGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCancelWatchGame*)[[[CMsgCancelWatchGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgCancelWatchGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgCancelWatchGame*)[[[CMsgCancelWatchGame builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgCancelWatchGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCancelWatchGame*)[[[CMsgCancelWatchGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgCancelWatchGame_Builder*) builder {
  return [[[CMsgCancelWatchGame_Builder alloc] init] autorelease];
}
+ (CMsgCancelWatchGame_Builder*) builderWithPrototype:(CMsgCancelWatchGame*) prototype {
  return [[CMsgCancelWatchGame builder] mergeFrom:prototype];
}
- (CMsgCancelWatchGame_Builder*) builder {
  return [CMsgCancelWatchGame builder];
}
- (CMsgCancelWatchGame_Builder*) toBuilder {
  return [CMsgCancelWatchGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgCancelWatchGame class]]) {
    return NO;
  }
  CMsgCancelWatchGame *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgCancelWatchGame_Builder()
@property (retain) CMsgCancelWatchGame* _builderResult;
@end

@implementation CMsgCancelWatchGame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgCancelWatchGame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgCancelWatchGame_Builder*) clear {
  _builderResult = [[[CMsgCancelWatchGame alloc] init] autorelease];
  return self;
}
- (CMsgCancelWatchGame_Builder*) clone {
  return [CMsgCancelWatchGame builderWithPrototype:_builderResult];
}
- (CMsgCancelWatchGame*) defaultInstance {
  return [CMsgCancelWatchGame defaultInstance];
}
- (CMsgCancelWatchGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgCancelWatchGame*) buildPartial {
  CMsgCancelWatchGame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgCancelWatchGame_Builder*) mergeFrom:(CMsgCancelWatchGame*) other {
  if (other == [CMsgCancelWatchGame defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgCancelWatchGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgCancelWatchGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgWatchGameResponse ()
@property CMsgWatchGameResponse_WatchGameResult watch_game_result;
@property uint32_t sourceTvPublicAddr;
@property uint32_t sourceTvPrivateAddr;
@property uint32_t sourceTvPort;
@property uint64_t gameServerSteamid;
@property uint64_t watchServerSteamid;
@property uint64_t watchTvUniqueSecretCode;
@end

@implementation CMsgWatchGameResponse

- (BOOL) haswatch_game_result {
  return !!haswatch_game_result_;
}
- (void) setHaswatch_game_result:(BOOL) value_ {
  haswatch_game_result_ = !!value_;
}
@synthesize watch_game_result;
- (BOOL) hasSourceTvPublicAddr {
  return !!hasSourceTvPublicAddr_;
}
- (void) setHasSourceTvPublicAddr:(BOOL) value_ {
  hasSourceTvPublicAddr_ = !!value_;
}
@synthesize sourceTvPublicAddr;
- (BOOL) hasSourceTvPrivateAddr {
  return !!hasSourceTvPrivateAddr_;
}
- (void) setHasSourceTvPrivateAddr:(BOOL) value_ {
  hasSourceTvPrivateAddr_ = !!value_;
}
@synthesize sourceTvPrivateAddr;
- (BOOL) hasSourceTvPort {
  return !!hasSourceTvPort_;
}
- (void) setHasSourceTvPort:(BOOL) value_ {
  hasSourceTvPort_ = !!value_;
}
@synthesize sourceTvPort;
- (BOOL) hasGameServerSteamid {
  return !!hasGameServerSteamid_;
}
- (void) setHasGameServerSteamid:(BOOL) value_ {
  hasGameServerSteamid_ = !!value_;
}
@synthesize gameServerSteamid;
- (BOOL) hasWatchServerSteamid {
  return !!hasWatchServerSteamid_;
}
- (void) setHasWatchServerSteamid:(BOOL) value_ {
  hasWatchServerSteamid_ = !!value_;
}
@synthesize watchServerSteamid;
- (BOOL) hasWatchTvUniqueSecretCode {
  return !!hasWatchTvUniqueSecretCode_;
}
- (void) setHasWatchTvUniqueSecretCode:(BOOL) value_ {
  hasWatchTvUniqueSecretCode_ = !!value_;
}
@synthesize watchTvUniqueSecretCode;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.watch_game_result = CMsgWatchGameResponse_WatchGameResultPENDING;
    self.sourceTvPublicAddr = 0;
    self.sourceTvPrivateAddr = 0;
    self.sourceTvPort = 0;
    self.gameServerSteamid = 0L;
    self.watchServerSteamid = 0L;
    self.watchTvUniqueSecretCode = 0L;
  }
  return self;
}
static CMsgWatchGameResponse* defaultCMsgWatchGameResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgWatchGameResponse class]) {
    defaultCMsgWatchGameResponseInstance = [[CMsgWatchGameResponse alloc] init];
  }
}
+ (CMsgWatchGameResponse*) defaultInstance {
  return defaultCMsgWatchGameResponseInstance;
}
- (CMsgWatchGameResponse*) defaultInstance {
  return defaultCMsgWatchGameResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.haswatch_game_result) {
    [output writeEnum:1 value:self.watch_game_result];
  }
  if (self.hasSourceTvPublicAddr) {
    [output writeUInt32:2 value:self.sourceTvPublicAddr];
  }
  if (self.hasSourceTvPrivateAddr) {
    [output writeUInt32:3 value:self.sourceTvPrivateAddr];
  }
  if (self.hasSourceTvPort) {
    [output writeUInt32:4 value:self.sourceTvPort];
  }
  if (self.hasGameServerSteamid) {
    [output writeFixed64:5 value:self.gameServerSteamid];
  }
  if (self.hasWatchServerSteamid) {
    [output writeFixed64:6 value:self.watchServerSteamid];
  }
  if (self.hasWatchTvUniqueSecretCode) {
    [output writeFixed64:7 value:self.watchTvUniqueSecretCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.haswatch_game_result) {
    size_ += computeEnumSize(1, self.watch_game_result);
  }
  if (self.hasSourceTvPublicAddr) {
    size_ += computeUInt32Size(2, self.sourceTvPublicAddr);
  }
  if (self.hasSourceTvPrivateAddr) {
    size_ += computeUInt32Size(3, self.sourceTvPrivateAddr);
  }
  if (self.hasSourceTvPort) {
    size_ += computeUInt32Size(4, self.sourceTvPort);
  }
  if (self.hasGameServerSteamid) {
    size_ += computeFixed64Size(5, self.gameServerSteamid);
  }
  if (self.hasWatchServerSteamid) {
    size_ += computeFixed64Size(6, self.watchServerSteamid);
  }
  if (self.hasWatchTvUniqueSecretCode) {
    size_ += computeFixed64Size(7, self.watchTvUniqueSecretCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgWatchGameResponse*) parseFromData:(NSData*) data {
  return (CMsgWatchGameResponse*)[[[CMsgWatchGameResponse builder] mergeFromData:data] build];
}
+ (CMsgWatchGameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgWatchGameResponse*)[[[CMsgWatchGameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgWatchGameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgWatchGameResponse*)[[[CMsgWatchGameResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgWatchGameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgWatchGameResponse*)[[[CMsgWatchGameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgWatchGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgWatchGameResponse*)[[[CMsgWatchGameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgWatchGameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgWatchGameResponse*)[[[CMsgWatchGameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgWatchGameResponse_Builder*) builder {
  return [[[CMsgWatchGameResponse_Builder alloc] init] autorelease];
}
+ (CMsgWatchGameResponse_Builder*) builderWithPrototype:(CMsgWatchGameResponse*) prototype {
  return [[CMsgWatchGameResponse builder] mergeFrom:prototype];
}
- (CMsgWatchGameResponse_Builder*) builder {
  return [CMsgWatchGameResponse builder];
}
- (CMsgWatchGameResponse_Builder*) toBuilder {
  return [CMsgWatchGameResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.haswatch_game_result) {
    [output appendFormat:@"%@%@: %d\n", indent, @"watch_game_result", self.watch_game_result];
  }
  if (self.hasSourceTvPublicAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceTvPublicAddr", [NSNumber numberWithInt:self.sourceTvPublicAddr]];
  }
  if (self.hasSourceTvPrivateAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceTvPrivateAddr", [NSNumber numberWithInt:self.sourceTvPrivateAddr]];
  }
  if (self.hasSourceTvPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceTvPort", [NSNumber numberWithInt:self.sourceTvPort]];
  }
  if (self.hasGameServerSteamid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameServerSteamid", [NSNumber numberWithLongLong:self.gameServerSteamid]];
  }
  if (self.hasWatchServerSteamid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"watchServerSteamid", [NSNumber numberWithLongLong:self.watchServerSteamid]];
  }
  if (self.hasWatchTvUniqueSecretCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"watchTvUniqueSecretCode", [NSNumber numberWithLongLong:self.watchTvUniqueSecretCode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgWatchGameResponse class]]) {
    return NO;
  }
  CMsgWatchGameResponse *otherMessage = other;
  return
      self.haswatch_game_result == otherMessage.haswatch_game_result &&
      (!self.haswatch_game_result || self.watch_game_result == otherMessage.watch_game_result) &&
      self.hasSourceTvPublicAddr == otherMessage.hasSourceTvPublicAddr &&
      (!self.hasSourceTvPublicAddr || self.sourceTvPublicAddr == otherMessage.sourceTvPublicAddr) &&
      self.hasSourceTvPrivateAddr == otherMessage.hasSourceTvPrivateAddr &&
      (!self.hasSourceTvPrivateAddr || self.sourceTvPrivateAddr == otherMessage.sourceTvPrivateAddr) &&
      self.hasSourceTvPort == otherMessage.hasSourceTvPort &&
      (!self.hasSourceTvPort || self.sourceTvPort == otherMessage.sourceTvPort) &&
      self.hasGameServerSteamid == otherMessage.hasGameServerSteamid &&
      (!self.hasGameServerSteamid || self.gameServerSteamid == otherMessage.gameServerSteamid) &&
      self.hasWatchServerSteamid == otherMessage.hasWatchServerSteamid &&
      (!self.hasWatchServerSteamid || self.watchServerSteamid == otherMessage.watchServerSteamid) &&
      self.hasWatchTvUniqueSecretCode == otherMessage.hasWatchTvUniqueSecretCode &&
      (!self.hasWatchTvUniqueSecretCode || self.watchTvUniqueSecretCode == otherMessage.watchTvUniqueSecretCode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.haswatch_game_result) {
    hashCode = hashCode * 31 + self.watch_game_result;
  }
  if (self.hasSourceTvPublicAddr) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceTvPublicAddr] hash];
  }
  if (self.hasSourceTvPrivateAddr) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceTvPrivateAddr] hash];
  }
  if (self.hasSourceTvPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sourceTvPort] hash];
  }
  if (self.hasGameServerSteamid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.gameServerSteamid] hash];
  }
  if (self.hasWatchServerSteamid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.watchServerSteamid] hash];
  }
  if (self.hasWatchTvUniqueSecretCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.watchTvUniqueSecretCode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgWatchGameResponse_WatchGameResultIsValidValue(CMsgWatchGameResponse_WatchGameResult value) {
  switch (value) {
    case CMsgWatchGameResponse_WatchGameResultPENDING:
    case CMsgWatchGameResponse_WatchGameResultREADY:
    case CMsgWatchGameResponse_WatchGameResultGAMESERVERNOTFOUND:
    case CMsgWatchGameResponse_WatchGameResultUNAVAILABLE:
    case CMsgWatchGameResponse_WatchGameResultCANCELLED:
    case CMsgWatchGameResponse_WatchGameResultINCOMPATIBLEVERSION:
    case CMsgWatchGameResponse_WatchGameResultMISSINGLEAGUESUBSCRIPTION:
    case CMsgWatchGameResponse_WatchGameResultLOBBYNOTFOUND:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgWatchGameResponse_Builder()
@property (retain) CMsgWatchGameResponse* _builderResult;
@end

@implementation CMsgWatchGameResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgWatchGameResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgWatchGameResponse_Builder*) clear {
  _builderResult = [[[CMsgWatchGameResponse alloc] init] autorelease];
  return self;
}
- (CMsgWatchGameResponse_Builder*) clone {
  return [CMsgWatchGameResponse builderWithPrototype:_builderResult];
}
- (CMsgWatchGameResponse*) defaultInstance {
  return [CMsgWatchGameResponse defaultInstance];
}
- (CMsgWatchGameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgWatchGameResponse*) buildPartial {
  CMsgWatchGameResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgWatchGameResponse_Builder*) mergeFrom:(CMsgWatchGameResponse*) other {
  if (other == [CMsgWatchGameResponse defaultInstance]) {
    return self;
  }
  if (other.haswatch_game_result) {
    [self setwatch_game_result:other.watch_game_result];
  }
  if (other.hasSourceTvPublicAddr) {
    [self setSourceTvPublicAddr:other.sourceTvPublicAddr];
  }
  if (other.hasSourceTvPrivateAddr) {
    [self setSourceTvPrivateAddr:other.sourceTvPrivateAddr];
  }
  if (other.hasSourceTvPort) {
    [self setSourceTvPort:other.sourceTvPort];
  }
  if (other.hasGameServerSteamid) {
    [self setGameServerSteamid:other.gameServerSteamid];
  }
  if (other.hasWatchServerSteamid) {
    [self setWatchServerSteamid:other.watchServerSteamid];
  }
  if (other.hasWatchTvUniqueSecretCode) {
    [self setWatchTvUniqueSecretCode:other.watchTvUniqueSecretCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgWatchGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgWatchGameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgWatchGameResponse_WatchGameResultIsValidValue(value)) {
          [self setwatch_game_result:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setSourceTvPublicAddr:[input readUInt32]];
        break;
      }
      case 24: {
        [self setSourceTvPrivateAddr:[input readUInt32]];
        break;
      }
      case 32: {
        [self setSourceTvPort:[input readUInt32]];
        break;
      }
      case 41: {
        [self setGameServerSteamid:[input readFixed64]];
        break;
      }
      case 49: {
        [self setWatchServerSteamid:[input readFixed64]];
        break;
      }
      case 57: {
        [self setWatchTvUniqueSecretCode:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) haswatch_game_result {
  return _builderResult.haswatch_game_result;
}
- (CMsgWatchGameResponse_WatchGameResult) watch_game_result {
  return _builderResult.watch_game_result;
}
- (CMsgWatchGameResponse_Builder*) setwatch_game_result:(CMsgWatchGameResponse_WatchGameResult) value {
  _builderResult.haswatch_game_result = YES;
  _builderResult.watch_game_result = value;
  return self;
}
- (CMsgWatchGameResponse_Builder*) clearwatch_game_result {
  _builderResult.haswatch_game_result = NO;
  _builderResult.watch_game_result = CMsgWatchGameResponse_WatchGameResultPENDING;
  return self;
}
- (BOOL) hasSourceTvPublicAddr {
  return _builderResult.hasSourceTvPublicAddr;
}
- (uint32_t) sourceTvPublicAddr {
  return _builderResult.sourceTvPublicAddr;
}
- (CMsgWatchGameResponse_Builder*) setSourceTvPublicAddr:(uint32_t) value {
  _builderResult.hasSourceTvPublicAddr = YES;
  _builderResult.sourceTvPublicAddr = value;
  return self;
}
- (CMsgWatchGameResponse_Builder*) clearSourceTvPublicAddr {
  _builderResult.hasSourceTvPublicAddr = NO;
  _builderResult.sourceTvPublicAddr = 0;
  return self;
}
- (BOOL) hasSourceTvPrivateAddr {
  return _builderResult.hasSourceTvPrivateAddr;
}
- (uint32_t) sourceTvPrivateAddr {
  return _builderResult.sourceTvPrivateAddr;
}
- (CMsgWatchGameResponse_Builder*) setSourceTvPrivateAddr:(uint32_t) value {
  _builderResult.hasSourceTvPrivateAddr = YES;
  _builderResult.sourceTvPrivateAddr = value;
  return self;
}
- (CMsgWatchGameResponse_Builder*) clearSourceTvPrivateAddr {
  _builderResult.hasSourceTvPrivateAddr = NO;
  _builderResult.sourceTvPrivateAddr = 0;
  return self;
}
- (BOOL) hasSourceTvPort {
  return _builderResult.hasSourceTvPort;
}
- (uint32_t) sourceTvPort {
  return _builderResult.sourceTvPort;
}
- (CMsgWatchGameResponse_Builder*) setSourceTvPort:(uint32_t) value {
  _builderResult.hasSourceTvPort = YES;
  _builderResult.sourceTvPort = value;
  return self;
}
- (CMsgWatchGameResponse_Builder*) clearSourceTvPort {
  _builderResult.hasSourceTvPort = NO;
  _builderResult.sourceTvPort = 0;
  return self;
}
- (BOOL) hasGameServerSteamid {
  return _builderResult.hasGameServerSteamid;
}
- (uint64_t) gameServerSteamid {
  return _builderResult.gameServerSteamid;
}
- (CMsgWatchGameResponse_Builder*) setGameServerSteamid:(uint64_t) value {
  _builderResult.hasGameServerSteamid = YES;
  _builderResult.gameServerSteamid = value;
  return self;
}
- (CMsgWatchGameResponse_Builder*) clearGameServerSteamid {
  _builderResult.hasGameServerSteamid = NO;
  _builderResult.gameServerSteamid = 0L;
  return self;
}
- (BOOL) hasWatchServerSteamid {
  return _builderResult.hasWatchServerSteamid;
}
- (uint64_t) watchServerSteamid {
  return _builderResult.watchServerSteamid;
}
- (CMsgWatchGameResponse_Builder*) setWatchServerSteamid:(uint64_t) value {
  _builderResult.hasWatchServerSteamid = YES;
  _builderResult.watchServerSteamid = value;
  return self;
}
- (CMsgWatchGameResponse_Builder*) clearWatchServerSteamid {
  _builderResult.hasWatchServerSteamid = NO;
  _builderResult.watchServerSteamid = 0L;
  return self;
}
- (BOOL) hasWatchTvUniqueSecretCode {
  return _builderResult.hasWatchTvUniqueSecretCode;
}
- (uint64_t) watchTvUniqueSecretCode {
  return _builderResult.watchTvUniqueSecretCode;
}
- (CMsgWatchGameResponse_Builder*) setWatchTvUniqueSecretCode:(uint64_t) value {
  _builderResult.hasWatchTvUniqueSecretCode = YES;
  _builderResult.watchTvUniqueSecretCode = value;
  return self;
}
- (CMsgWatchGameResponse_Builder*) clearWatchTvUniqueSecretCode {
  _builderResult.hasWatchTvUniqueSecretCode = NO;
  _builderResult.watchTvUniqueSecretCode = 0L;
  return self;
}
@end

@interface CMsgGCBanStatusRequest ()
@property uint32_t accountId;
@end

@implementation CMsgGCBanStatusRequest

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
  }
  return self;
}
static CMsgGCBanStatusRequest* defaultCMsgGCBanStatusRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgGCBanStatusRequest class]) {
    defaultCMsgGCBanStatusRequestInstance = [[CMsgGCBanStatusRequest alloc] init];
  }
}
+ (CMsgGCBanStatusRequest*) defaultInstance {
  return defaultCMsgGCBanStatusRequestInstance;
}
- (CMsgGCBanStatusRequest*) defaultInstance {
  return defaultCMsgGCBanStatusRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGCBanStatusRequest*) parseFromData:(NSData*) data {
  return (CMsgGCBanStatusRequest*)[[[CMsgGCBanStatusRequest builder] mergeFromData:data] build];
}
+ (CMsgGCBanStatusRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCBanStatusRequest*)[[[CMsgGCBanStatusRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCBanStatusRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGCBanStatusRequest*)[[[CMsgGCBanStatusRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgGCBanStatusRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCBanStatusRequest*)[[[CMsgGCBanStatusRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCBanStatusRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGCBanStatusRequest*)[[[CMsgGCBanStatusRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGCBanStatusRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCBanStatusRequest*)[[[CMsgGCBanStatusRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCBanStatusRequest_Builder*) builder {
  return [[[CMsgGCBanStatusRequest_Builder alloc] init] autorelease];
}
+ (CMsgGCBanStatusRequest_Builder*) builderWithPrototype:(CMsgGCBanStatusRequest*) prototype {
  return [[CMsgGCBanStatusRequest builder] mergeFrom:prototype];
}
- (CMsgGCBanStatusRequest_Builder*) builder {
  return [CMsgGCBanStatusRequest builder];
}
- (CMsgGCBanStatusRequest_Builder*) toBuilder {
  return [CMsgGCBanStatusRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGCBanStatusRequest class]]) {
    return NO;
  }
  CMsgGCBanStatusRequest *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGCBanStatusRequest_Builder()
@property (retain) CMsgGCBanStatusRequest* _builderResult;
@end

@implementation CMsgGCBanStatusRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGCBanStatusRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGCBanStatusRequest_Builder*) clear {
  _builderResult = [[[CMsgGCBanStatusRequest alloc] init] autorelease];
  return self;
}
- (CMsgGCBanStatusRequest_Builder*) clone {
  return [CMsgGCBanStatusRequest builderWithPrototype:_builderResult];
}
- (CMsgGCBanStatusRequest*) defaultInstance {
  return [CMsgGCBanStatusRequest defaultInstance];
}
- (CMsgGCBanStatusRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGCBanStatusRequest*) buildPartial {
  CMsgGCBanStatusRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGCBanStatusRequest_Builder*) mergeFrom:(CMsgGCBanStatusRequest*) other {
  if (other == [CMsgGCBanStatusRequest defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGCBanStatusRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGCBanStatusRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgGCBanStatusRequest_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgGCBanStatusRequest_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
@end

@interface CMsgGCBanStatusResponse ()
@property uint32_t result;
@property BOOL matchBanned;
@property BOOL textChatBanned;
@property BOOL voiceChatBanned;
@end

@implementation CMsgGCBanStatusResponse

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) value_ {
  hasResult_ = !!value_;
}
@synthesize result;
- (BOOL) hasMatchBanned {
  return !!hasMatchBanned_;
}
- (void) setHasMatchBanned:(BOOL) value_ {
  hasMatchBanned_ = !!value_;
}
- (BOOL) matchBanned {
  return !!matchBanned_;
}
- (void) setMatchBanned:(BOOL) value_ {
  matchBanned_ = !!value_;
}
- (BOOL) hasTextChatBanned {
  return !!hasTextChatBanned_;
}
- (void) setHasTextChatBanned:(BOOL) value_ {
  hasTextChatBanned_ = !!value_;
}
- (BOOL) textChatBanned {
  return !!textChatBanned_;
}
- (void) setTextChatBanned:(BOOL) value_ {
  textChatBanned_ = !!value_;
}
- (BOOL) hasVoiceChatBanned {
  return !!hasVoiceChatBanned_;
}
- (void) setHasVoiceChatBanned:(BOOL) value_ {
  hasVoiceChatBanned_ = !!value_;
}
- (BOOL) voiceChatBanned {
  return !!voiceChatBanned_;
}
- (void) setVoiceChatBanned:(BOOL) value_ {
  voiceChatBanned_ = !!value_;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = 0;
    self.matchBanned = NO;
    self.textChatBanned = NO;
    self.voiceChatBanned = NO;
  }
  return self;
}
static CMsgGCBanStatusResponse* defaultCMsgGCBanStatusResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgGCBanStatusResponse class]) {
    defaultCMsgGCBanStatusResponseInstance = [[CMsgGCBanStatusResponse alloc] init];
  }
}
+ (CMsgGCBanStatusResponse*) defaultInstance {
  return defaultCMsgGCBanStatusResponseInstance;
}
- (CMsgGCBanStatusResponse*) defaultInstance {
  return defaultCMsgGCBanStatusResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeUInt32:1 value:self.result];
  }
  if (self.hasMatchBanned) {
    [output writeBool:2 value:self.matchBanned];
  }
  if (self.hasTextChatBanned) {
    [output writeBool:3 value:self.textChatBanned];
  }
  if (self.hasVoiceChatBanned) {
    [output writeBool:4 value:self.voiceChatBanned];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeUInt32Size(1, self.result);
  }
  if (self.hasMatchBanned) {
    size_ += computeBoolSize(2, self.matchBanned);
  }
  if (self.hasTextChatBanned) {
    size_ += computeBoolSize(3, self.textChatBanned);
  }
  if (self.hasVoiceChatBanned) {
    size_ += computeBoolSize(4, self.voiceChatBanned);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGCBanStatusResponse*) parseFromData:(NSData*) data {
  return (CMsgGCBanStatusResponse*)[[[CMsgGCBanStatusResponse builder] mergeFromData:data] build];
}
+ (CMsgGCBanStatusResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCBanStatusResponse*)[[[CMsgGCBanStatusResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCBanStatusResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGCBanStatusResponse*)[[[CMsgGCBanStatusResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgGCBanStatusResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCBanStatusResponse*)[[[CMsgGCBanStatusResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCBanStatusResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGCBanStatusResponse*)[[[CMsgGCBanStatusResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGCBanStatusResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCBanStatusResponse*)[[[CMsgGCBanStatusResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCBanStatusResponse_Builder*) builder {
  return [[[CMsgGCBanStatusResponse_Builder alloc] init] autorelease];
}
+ (CMsgGCBanStatusResponse_Builder*) builderWithPrototype:(CMsgGCBanStatusResponse*) prototype {
  return [[CMsgGCBanStatusResponse builder] mergeFrom:prototype];
}
- (CMsgGCBanStatusResponse_Builder*) builder {
  return [CMsgGCBanStatusResponse builder];
}
- (CMsgGCBanStatusResponse_Builder*) toBuilder {
  return [CMsgGCBanStatusResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", [NSNumber numberWithInt:self.result]];
  }
  if (self.hasMatchBanned) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchBanned", [NSNumber numberWithBool:self.matchBanned]];
  }
  if (self.hasTextChatBanned) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textChatBanned", [NSNumber numberWithBool:self.textChatBanned]];
  }
  if (self.hasVoiceChatBanned) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voiceChatBanned", [NSNumber numberWithBool:self.voiceChatBanned]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGCBanStatusResponse class]]) {
    return NO;
  }
  CMsgGCBanStatusResponse *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      self.hasMatchBanned == otherMessage.hasMatchBanned &&
      (!self.hasMatchBanned || self.matchBanned == otherMessage.matchBanned) &&
      self.hasTextChatBanned == otherMessage.hasTextChatBanned &&
      (!self.hasTextChatBanned || self.textChatBanned == otherMessage.textChatBanned) &&
      self.hasVoiceChatBanned == otherMessage.hasVoiceChatBanned &&
      (!self.hasVoiceChatBanned || self.voiceChatBanned == otherMessage.voiceChatBanned) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.result] hash];
  }
  if (self.hasMatchBanned) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.matchBanned] hash];
  }
  if (self.hasTextChatBanned) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.textChatBanned] hash];
  }
  if (self.hasVoiceChatBanned) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.voiceChatBanned] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGCBanStatusResponse_Builder()
@property (retain) CMsgGCBanStatusResponse* _builderResult;
@end

@implementation CMsgGCBanStatusResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGCBanStatusResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGCBanStatusResponse_Builder*) clear {
  _builderResult = [[[CMsgGCBanStatusResponse alloc] init] autorelease];
  return self;
}
- (CMsgGCBanStatusResponse_Builder*) clone {
  return [CMsgGCBanStatusResponse builderWithPrototype:_builderResult];
}
- (CMsgGCBanStatusResponse*) defaultInstance {
  return [CMsgGCBanStatusResponse defaultInstance];
}
- (CMsgGCBanStatusResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGCBanStatusResponse*) buildPartial {
  CMsgGCBanStatusResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGCBanStatusResponse_Builder*) mergeFrom:(CMsgGCBanStatusResponse*) other {
  if (other == [CMsgGCBanStatusResponse defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  if (other.hasMatchBanned) {
    [self setMatchBanned:other.matchBanned];
  }
  if (other.hasTextChatBanned) {
    [self setTextChatBanned:other.textChatBanned];
  }
  if (other.hasVoiceChatBanned) {
    [self setVoiceChatBanned:other.voiceChatBanned];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGCBanStatusResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGCBanStatusResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResult:[input readUInt32]];
        break;
      }
      case 16: {
        [self setMatchBanned:[input readBool]];
        break;
      }
      case 24: {
        [self setTextChatBanned:[input readBool]];
        break;
      }
      case 32: {
        [self setVoiceChatBanned:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return _builderResult.hasResult;
}
- (uint32_t) result {
  return _builderResult.result;
}
- (CMsgGCBanStatusResponse_Builder*) setResult:(uint32_t) value {
  _builderResult.hasResult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgGCBanStatusResponse_Builder*) clearResult {
  _builderResult.hasResult = NO;
  _builderResult.result = 0;
  return self;
}
- (BOOL) hasMatchBanned {
  return _builderResult.hasMatchBanned;
}
- (BOOL) matchBanned {
  return _builderResult.matchBanned;
}
- (CMsgGCBanStatusResponse_Builder*) setMatchBanned:(BOOL) value {
  _builderResult.hasMatchBanned = YES;
  _builderResult.matchBanned = value;
  return self;
}
- (CMsgGCBanStatusResponse_Builder*) clearMatchBanned {
  _builderResult.hasMatchBanned = NO;
  _builderResult.matchBanned = NO;
  return self;
}
- (BOOL) hasTextChatBanned {
  return _builderResult.hasTextChatBanned;
}
- (BOOL) textChatBanned {
  return _builderResult.textChatBanned;
}
- (CMsgGCBanStatusResponse_Builder*) setTextChatBanned:(BOOL) value {
  _builderResult.hasTextChatBanned = YES;
  _builderResult.textChatBanned = value;
  return self;
}
- (CMsgGCBanStatusResponse_Builder*) clearTextChatBanned {
  _builderResult.hasTextChatBanned = NO;
  _builderResult.textChatBanned = NO;
  return self;
}
- (BOOL) hasVoiceChatBanned {
  return _builderResult.hasVoiceChatBanned;
}
- (BOOL) voiceChatBanned {
  return _builderResult.voiceChatBanned;
}
- (CMsgGCBanStatusResponse_Builder*) setVoiceChatBanned:(BOOL) value {
  _builderResult.hasVoiceChatBanned = YES;
  _builderResult.voiceChatBanned = value;
  return self;
}
- (CMsgGCBanStatusResponse_Builder*) clearVoiceChatBanned {
  _builderResult.hasVoiceChatBanned = NO;
  _builderResult.voiceChatBanned = NO;
  return self;
}
@end

@interface CMsgDOTADailyStats ()
@property uint32_t date;
@property uint32_t heroId;
@property uint32_t popularity;
@end

@implementation CMsgDOTADailyStats

- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value_ {
  hasDate_ = !!value_;
}
@synthesize date;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (BOOL) hasPopularity {
  return !!hasPopularity_;
}
- (void) setHasPopularity:(BOOL) value_ {
  hasPopularity_ = !!value_;
}
@synthesize popularity;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.date = 0;
    self.heroId = 0;
    self.popularity = 0;
  }
  return self;
}
static CMsgDOTADailyStats* defaultCMsgDOTADailyStatsInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTADailyStats class]) {
    defaultCMsgDOTADailyStatsInstance = [[CMsgDOTADailyStats alloc] init];
  }
}
+ (CMsgDOTADailyStats*) defaultInstance {
  return defaultCMsgDOTADailyStatsInstance;
}
- (CMsgDOTADailyStats*) defaultInstance {
  return defaultCMsgDOTADailyStatsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDate) {
    [output writeFixed32:1 value:self.date];
  }
  if (self.hasHeroId) {
    [output writeUInt32:2 value:self.heroId];
  }
  if (self.hasPopularity) {
    [output writeUInt32:3 value:self.popularity];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDate) {
    size_ += computeFixed32Size(1, self.date);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(2, self.heroId);
  }
  if (self.hasPopularity) {
    size_ += computeUInt32Size(3, self.popularity);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTADailyStats*) parseFromData:(NSData*) data {
  return (CMsgDOTADailyStats*)[[[CMsgDOTADailyStats builder] mergeFromData:data] build];
}
+ (CMsgDOTADailyStats*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADailyStats*)[[[CMsgDOTADailyStats builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADailyStats*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTADailyStats*)[[[CMsgDOTADailyStats builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTADailyStats*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADailyStats*)[[[CMsgDOTADailyStats builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADailyStats*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTADailyStats*)[[[CMsgDOTADailyStats builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTADailyStats*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADailyStats*)[[[CMsgDOTADailyStats builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADailyStats_Builder*) builder {
  return [[[CMsgDOTADailyStats_Builder alloc] init] autorelease];
}
+ (CMsgDOTADailyStats_Builder*) builderWithPrototype:(CMsgDOTADailyStats*) prototype {
  return [[CMsgDOTADailyStats builder] mergeFrom:prototype];
}
- (CMsgDOTADailyStats_Builder*) builder {
  return [CMsgDOTADailyStats builder];
}
- (CMsgDOTADailyStats_Builder*) toBuilder {
  return [CMsgDOTADailyStats builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", [NSNumber numberWithInt:self.date]];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  if (self.hasPopularity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"popularity", [NSNumber numberWithInt:self.popularity]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTADailyStats class]]) {
    return NO;
  }
  CMsgDOTADailyStats *otherMessage = other;
  return
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || self.date == otherMessage.date) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      self.hasPopularity == otherMessage.hasPopularity &&
      (!self.hasPopularity || self.popularity == otherMessage.popularity) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.date] hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  if (self.hasPopularity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.popularity] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTADailyStats_Builder()
@property (retain) CMsgDOTADailyStats* _builderResult;
@end

@implementation CMsgDOTADailyStats_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTADailyStats alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTADailyStats_Builder*) clear {
  _builderResult = [[[CMsgDOTADailyStats alloc] init] autorelease];
  return self;
}
- (CMsgDOTADailyStats_Builder*) clone {
  return [CMsgDOTADailyStats builderWithPrototype:_builderResult];
}
- (CMsgDOTADailyStats*) defaultInstance {
  return [CMsgDOTADailyStats defaultInstance];
}
- (CMsgDOTADailyStats*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTADailyStats*) buildPartial {
  CMsgDOTADailyStats* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTADailyStats_Builder*) mergeFrom:(CMsgDOTADailyStats*) other {
  if (other == [CMsgDOTADailyStats defaultInstance]) {
    return self;
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.hasPopularity) {
    [self setPopularity:other.popularity];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTADailyStats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTADailyStats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setDate:[input readFixed32]];
        break;
      }
      case 16: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPopularity:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDate {
  return _builderResult.hasDate;
}
- (uint32_t) date {
  return _builderResult.date;
}
- (CMsgDOTADailyStats_Builder*) setDate:(uint32_t) value {
  _builderResult.hasDate = YES;
  _builderResult.date = value;
  return self;
}
- (CMsgDOTADailyStats_Builder*) clearDate {
  _builderResult.hasDate = NO;
  _builderResult.date = 0;
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTADailyStats_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTADailyStats_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (BOOL) hasPopularity {
  return _builderResult.hasPopularity;
}
- (uint32_t) popularity {
  return _builderResult.popularity;
}
- (CMsgDOTADailyStats_Builder*) setPopularity:(uint32_t) value {
  _builderResult.hasPopularity = YES;
  _builderResult.popularity = value;
  return self;
}
- (CMsgDOTADailyStats_Builder*) clearPopularity {
  _builderResult.hasPopularity = NO;
  _builderResult.popularity = 0;
  return self;
}
@end

@interface CMsgDOTARequestDailyStats ()
@end

@implementation CMsgDOTARequestDailyStats

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTARequestDailyStats* defaultCMsgDOTARequestDailyStatsInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARequestDailyStats class]) {
    defaultCMsgDOTARequestDailyStatsInstance = [[CMsgDOTARequestDailyStats alloc] init];
  }
}
+ (CMsgDOTARequestDailyStats*) defaultInstance {
  return defaultCMsgDOTARequestDailyStatsInstance;
}
- (CMsgDOTARequestDailyStats*) defaultInstance {
  return defaultCMsgDOTARequestDailyStatsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARequestDailyStats*) parseFromData:(NSData*) data {
  return (CMsgDOTARequestDailyStats*)[[[CMsgDOTARequestDailyStats builder] mergeFromData:data] build];
}
+ (CMsgDOTARequestDailyStats*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestDailyStats*)[[[CMsgDOTARequestDailyStats builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestDailyStats*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARequestDailyStats*)[[[CMsgDOTARequestDailyStats builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARequestDailyStats*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestDailyStats*)[[[CMsgDOTARequestDailyStats builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestDailyStats*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARequestDailyStats*)[[[CMsgDOTARequestDailyStats builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARequestDailyStats*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARequestDailyStats*)[[[CMsgDOTARequestDailyStats builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARequestDailyStats_Builder*) builder {
  return [[[CMsgDOTARequestDailyStats_Builder alloc] init] autorelease];
}
+ (CMsgDOTARequestDailyStats_Builder*) builderWithPrototype:(CMsgDOTARequestDailyStats*) prototype {
  return [[CMsgDOTARequestDailyStats builder] mergeFrom:prototype];
}
- (CMsgDOTARequestDailyStats_Builder*) builder {
  return [CMsgDOTARequestDailyStats builder];
}
- (CMsgDOTARequestDailyStats_Builder*) toBuilder {
  return [CMsgDOTARequestDailyStats builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARequestDailyStats class]]) {
    return NO;
  }
  CMsgDOTARequestDailyStats *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARequestDailyStats_Builder()
@property (retain) CMsgDOTARequestDailyStats* _builderResult;
@end

@implementation CMsgDOTARequestDailyStats_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARequestDailyStats alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARequestDailyStats_Builder*) clear {
  _builderResult = [[[CMsgDOTARequestDailyStats alloc] init] autorelease];
  return self;
}
- (CMsgDOTARequestDailyStats_Builder*) clone {
  return [CMsgDOTARequestDailyStats builderWithPrototype:_builderResult];
}
- (CMsgDOTARequestDailyStats*) defaultInstance {
  return [CMsgDOTARequestDailyStats defaultInstance];
}
- (CMsgDOTARequestDailyStats*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARequestDailyStats*) buildPartial {
  CMsgDOTARequestDailyStats* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARequestDailyStats_Builder*) mergeFrom:(CMsgDOTARequestDailyStats*) other {
  if (other == [CMsgDOTARequestDailyStats defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARequestDailyStats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARequestDailyStats_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgGCMatchDetailsRequest ()
@property uint32_t matchId;
@end

@implementation CMsgGCMatchDetailsRequest

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
  }
  return self;
}
static CMsgGCMatchDetailsRequest* defaultCMsgGCMatchDetailsRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgGCMatchDetailsRequest class]) {
    defaultCMsgGCMatchDetailsRequestInstance = [[CMsgGCMatchDetailsRequest alloc] init];
  }
}
+ (CMsgGCMatchDetailsRequest*) defaultInstance {
  return defaultCMsgGCMatchDetailsRequestInstance;
}
- (CMsgGCMatchDetailsRequest*) defaultInstance {
  return defaultCMsgGCMatchDetailsRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGCMatchDetailsRequest*) parseFromData:(NSData*) data {
  return (CMsgGCMatchDetailsRequest*)[[[CMsgGCMatchDetailsRequest builder] mergeFromData:data] build];
}
+ (CMsgGCMatchDetailsRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCMatchDetailsRequest*)[[[CMsgGCMatchDetailsRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCMatchDetailsRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGCMatchDetailsRequest*)[[[CMsgGCMatchDetailsRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgGCMatchDetailsRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCMatchDetailsRequest*)[[[CMsgGCMatchDetailsRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCMatchDetailsRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGCMatchDetailsRequest*)[[[CMsgGCMatchDetailsRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGCMatchDetailsRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCMatchDetailsRequest*)[[[CMsgGCMatchDetailsRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCMatchDetailsRequest_Builder*) builder {
  return [[[CMsgGCMatchDetailsRequest_Builder alloc] init] autorelease];
}
+ (CMsgGCMatchDetailsRequest_Builder*) builderWithPrototype:(CMsgGCMatchDetailsRequest*) prototype {
  return [[CMsgGCMatchDetailsRequest builder] mergeFrom:prototype];
}
- (CMsgGCMatchDetailsRequest_Builder*) builder {
  return [CMsgGCMatchDetailsRequest builder];
}
- (CMsgGCMatchDetailsRequest_Builder*) toBuilder {
  return [CMsgGCMatchDetailsRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGCMatchDetailsRequest class]]) {
    return NO;
  }
  CMsgGCMatchDetailsRequest *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGCMatchDetailsRequest_Builder()
@property (retain) CMsgGCMatchDetailsRequest* _builderResult;
@end

@implementation CMsgGCMatchDetailsRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGCMatchDetailsRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGCMatchDetailsRequest_Builder*) clear {
  _builderResult = [[[CMsgGCMatchDetailsRequest alloc] init] autorelease];
  return self;
}
- (CMsgGCMatchDetailsRequest_Builder*) clone {
  return [CMsgGCMatchDetailsRequest builderWithPrototype:_builderResult];
}
- (CMsgGCMatchDetailsRequest*) defaultInstance {
  return [CMsgGCMatchDetailsRequest defaultInstance];
}
- (CMsgGCMatchDetailsRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGCMatchDetailsRequest*) buildPartial {
  CMsgGCMatchDetailsRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGCMatchDetailsRequest_Builder*) mergeFrom:(CMsgGCMatchDetailsRequest*) other {
  if (other == [CMsgGCMatchDetailsRequest defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGCMatchDetailsRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGCMatchDetailsRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgGCMatchDetailsRequest_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgGCMatchDetailsRequest_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
@end

@interface CMsgGCMatchDetailsResponse ()
@property uint32_t result;
@property (retain) CMsgDOTAMatch* match;
@property DOTAMatchVote vote;
@end

@implementation CMsgGCMatchDetailsResponse

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) value_ {
  hasResult_ = !!value_;
}
@synthesize result;
- (BOOL) hasMatch {
  return !!hasMatch_;
}
- (void) setHasMatch:(BOOL) value_ {
  hasMatch_ = !!value_;
}
@synthesize match;
- (BOOL) hasvote {
  return !!hasvote_;
}
- (void) setHasvote:(BOOL) value_ {
  hasvote_ = !!value_;
}
@synthesize vote;
- (void) dealloc {
  self.match = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = 0;
    self.match = [CMsgDOTAMatch defaultInstance];
    self.vote = DOTAMatchVoteDOTAMatchVote_INVALID;
  }
  return self;
}
static CMsgGCMatchDetailsResponse* defaultCMsgGCMatchDetailsResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgGCMatchDetailsResponse class]) {
    defaultCMsgGCMatchDetailsResponseInstance = [[CMsgGCMatchDetailsResponse alloc] init];
  }
}
+ (CMsgGCMatchDetailsResponse*) defaultInstance {
  return defaultCMsgGCMatchDetailsResponseInstance;
}
- (CMsgGCMatchDetailsResponse*) defaultInstance {
  return defaultCMsgGCMatchDetailsResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeUInt32:1 value:self.result];
  }
  if (self.hasMatch) {
    [output writeMessage:2 value:self.match];
  }
  if (self.hasvote) {
    [output writeEnum:3 value:self.vote];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeUInt32Size(1, self.result);
  }
  if (self.hasMatch) {
    size_ += computeMessageSize(2, self.match);
  }
  if (self.hasvote) {
    size_ += computeEnumSize(3, self.vote);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGCMatchDetailsResponse*) parseFromData:(NSData*) data {
  return (CMsgGCMatchDetailsResponse*)[[[CMsgGCMatchDetailsResponse builder] mergeFromData:data] build];
}
+ (CMsgGCMatchDetailsResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCMatchDetailsResponse*)[[[CMsgGCMatchDetailsResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCMatchDetailsResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGCMatchDetailsResponse*)[[[CMsgGCMatchDetailsResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgGCMatchDetailsResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCMatchDetailsResponse*)[[[CMsgGCMatchDetailsResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCMatchDetailsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGCMatchDetailsResponse*)[[[CMsgGCMatchDetailsResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGCMatchDetailsResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGCMatchDetailsResponse*)[[[CMsgGCMatchDetailsResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGCMatchDetailsResponse_Builder*) builder {
  return [[[CMsgGCMatchDetailsResponse_Builder alloc] init] autorelease];
}
+ (CMsgGCMatchDetailsResponse_Builder*) builderWithPrototype:(CMsgGCMatchDetailsResponse*) prototype {
  return [[CMsgGCMatchDetailsResponse builder] mergeFrom:prototype];
}
- (CMsgGCMatchDetailsResponse_Builder*) builder {
  return [CMsgGCMatchDetailsResponse builder];
}
- (CMsgGCMatchDetailsResponse_Builder*) toBuilder {
  return [CMsgGCMatchDetailsResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", [NSNumber numberWithInt:self.result]];
  }
  if (self.hasMatch) {
    [output appendFormat:@"%@%@ {\n", indent, @"match"];
    [self.match writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasvote) {
    [output appendFormat:@"%@%@: %d\n", indent, @"vote", self.vote];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGCMatchDetailsResponse class]]) {
    return NO;
  }
  CMsgGCMatchDetailsResponse *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      self.hasMatch == otherMessage.hasMatch &&
      (!self.hasMatch || [self.match isEqual:otherMessage.match]) &&
      self.hasvote == otherMessage.hasvote &&
      (!self.hasvote || self.vote == otherMessage.vote) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.result] hash];
  }
  if (self.hasMatch) {
    hashCode = hashCode * 31 + [self.match hash];
  }
  if (self.hasvote) {
    hashCode = hashCode * 31 + self.vote;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGCMatchDetailsResponse_Builder()
@property (retain) CMsgGCMatchDetailsResponse* _builderResult;
@end

@implementation CMsgGCMatchDetailsResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGCMatchDetailsResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGCMatchDetailsResponse_Builder*) clear {
  _builderResult = [[[CMsgGCMatchDetailsResponse alloc] init] autorelease];
  return self;
}
- (CMsgGCMatchDetailsResponse_Builder*) clone {
  return [CMsgGCMatchDetailsResponse builderWithPrototype:_builderResult];
}
- (CMsgGCMatchDetailsResponse*) defaultInstance {
  return [CMsgGCMatchDetailsResponse defaultInstance];
}
- (CMsgGCMatchDetailsResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGCMatchDetailsResponse*) buildPartial {
  CMsgGCMatchDetailsResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGCMatchDetailsResponse_Builder*) mergeFrom:(CMsgGCMatchDetailsResponse*) other {
  if (other == [CMsgGCMatchDetailsResponse defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  if (other.hasMatch) {
    [self mergeMatch:other.match];
  }
  if (other.hasvote) {
    [self setvote:other.vote];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGCMatchDetailsResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGCMatchDetailsResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResult:[input readUInt32]];
        break;
      }
      case 18: {
        CMsgDOTAMatch_Builder* subBuilder = [CMsgDOTAMatch builder];
        if (self.hasMatch) {
          [subBuilder mergeFrom:self.match];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMatch:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (DOTAMatchVoteIsValidValue(value)) {
          [self setvote:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return _builderResult.hasResult;
}
- (uint32_t) result {
  return _builderResult.result;
}
- (CMsgGCMatchDetailsResponse_Builder*) setResult:(uint32_t) value {
  _builderResult.hasResult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgGCMatchDetailsResponse_Builder*) clearResult {
  _builderResult.hasResult = NO;
  _builderResult.result = 0;
  return self;
}
- (BOOL) hasMatch {
  return _builderResult.hasMatch;
}
- (CMsgDOTAMatch*) match {
  return _builderResult.match;
}
- (CMsgGCMatchDetailsResponse_Builder*) setMatch:(CMsgDOTAMatch*) value {
  _builderResult.hasMatch = YES;
  _builderResult.match = value;
  return self;
}
- (CMsgGCMatchDetailsResponse_Builder*) setMatchBuilder:(CMsgDOTAMatch_Builder*) builderForValue {
  return [self setMatch:[builderForValue build]];
}
- (CMsgGCMatchDetailsResponse_Builder*) mergeMatch:(CMsgDOTAMatch*) value {
  if (_builderResult.hasMatch &&
      _builderResult.match != [CMsgDOTAMatch defaultInstance]) {
    _builderResult.match =
      [[[CMsgDOTAMatch builderWithPrototype:_builderResult.match] mergeFrom:value] buildPartial];
  } else {
    _builderResult.match = value;
  }
  _builderResult.hasMatch = YES;
  return self;
}
- (CMsgGCMatchDetailsResponse_Builder*) clearMatch {
  _builderResult.hasMatch = NO;
  _builderResult.match = [CMsgDOTAMatch defaultInstance];
  return self;
}
- (BOOL) hasvote {
  return _builderResult.hasvote;
}
- (DOTAMatchVote) vote {
  return _builderResult.vote;
}
- (CMsgGCMatchDetailsResponse_Builder*) setvote:(DOTAMatchVote) value {
  _builderResult.hasvote = YES;
  _builderResult.vote = value;
  return self;
}
- (CMsgGCMatchDetailsResponse_Builder*) clearvote {
  _builderResult.hasvote = NO;
  _builderResult.vote = DOTAMatchVoteDOTAMatchVote_INVALID;
  return self;
}
@end

@interface CMsgDOTAProfileRequest ()
@property uint32_t accountId;
@property BOOL requestName;
@end

@implementation CMsgDOTAProfileRequest

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasRequestName {
  return !!hasRequestName_;
}
- (void) setHasRequestName:(BOOL) value_ {
  hasRequestName_ = !!value_;
}
- (BOOL) requestName {
  return !!requestName_;
}
- (void) setRequestName:(BOOL) value_ {
  requestName_ = !!value_;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.requestName = NO;
  }
  return self;
}
static CMsgDOTAProfileRequest* defaultCMsgDOTAProfileRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAProfileRequest class]) {
    defaultCMsgDOTAProfileRequestInstance = [[CMsgDOTAProfileRequest alloc] init];
  }
}
+ (CMsgDOTAProfileRequest*) defaultInstance {
  return defaultCMsgDOTAProfileRequestInstance;
}
- (CMsgDOTAProfileRequest*) defaultInstance {
  return defaultCMsgDOTAProfileRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasRequestName) {
    [output writeBool:2 value:self.requestName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasRequestName) {
    size_ += computeBoolSize(2, self.requestName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAProfileRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTAProfileRequest*)[[[CMsgDOTAProfileRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTAProfileRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileRequest*)[[[CMsgDOTAProfileRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAProfileRequest*)[[[CMsgDOTAProfileRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAProfileRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileRequest*)[[[CMsgDOTAProfileRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAProfileRequest*)[[[CMsgDOTAProfileRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAProfileRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileRequest*)[[[CMsgDOTAProfileRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileRequest_Builder*) builder {
  return [[[CMsgDOTAProfileRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTAProfileRequest_Builder*) builderWithPrototype:(CMsgDOTAProfileRequest*) prototype {
  return [[CMsgDOTAProfileRequest builder] mergeFrom:prototype];
}
- (CMsgDOTAProfileRequest_Builder*) builder {
  return [CMsgDOTAProfileRequest builder];
}
- (CMsgDOTAProfileRequest_Builder*) toBuilder {
  return [CMsgDOTAProfileRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasRequestName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestName", [NSNumber numberWithBool:self.requestName]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAProfileRequest class]]) {
    return NO;
  }
  CMsgDOTAProfileRequest *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasRequestName == otherMessage.hasRequestName &&
      (!self.hasRequestName || self.requestName == otherMessage.requestName) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasRequestName) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.requestName] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAProfileRequest_Builder()
@property (retain) CMsgDOTAProfileRequest* _builderResult;
@end

@implementation CMsgDOTAProfileRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAProfileRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAProfileRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTAProfileRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTAProfileRequest_Builder*) clone {
  return [CMsgDOTAProfileRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTAProfileRequest*) defaultInstance {
  return [CMsgDOTAProfileRequest defaultInstance];
}
- (CMsgDOTAProfileRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAProfileRequest*) buildPartial {
  CMsgDOTAProfileRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAProfileRequest_Builder*) mergeFrom:(CMsgDOTAProfileRequest*) other {
  if (other == [CMsgDOTAProfileRequest defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasRequestName) {
    [self setRequestName:other.requestName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAProfileRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAProfileRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRequestName:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTAProfileRequest_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTAProfileRequest_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasRequestName {
  return _builderResult.hasRequestName;
}
- (BOOL) requestName {
  return _builderResult.requestName;
}
- (CMsgDOTAProfileRequest_Builder*) setRequestName:(BOOL) value {
  _builderResult.hasRequestName = YES;
  _builderResult.requestName = value;
  return self;
}
- (CMsgDOTAProfileRequest_Builder*) clearRequestName {
  _builderResult.hasRequestName = NO;
  _builderResult.requestName = NO;
  return self;
}
@end

@interface CMsgDOTAProfileResponse ()
@property uint32_t result;
@property (retain) CSODOTAGameAccountClient* gameAccountClient;
@property (retain) PBAppendableArray * latestMatchesArray;
@property (retain) PBAppendableArray * heroesArray;
@property (retain) NSString* playerName;
@property (retain) NSString* teamName;
@property (retain) NSString* teamTag;
@property uint64_t teamLogo;
@property (retain) CMsgDOTAProfileResponse_ShowcaseHero* showcaseHero;
@property (retain) PBAppendableArray * leaguePassesArray;
@property (retain) PBAppendableArray * eventTicketsArray;
@property uint32_t teamId;
@end

@implementation CMsgDOTAProfileResponse

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) value_ {
  hasResult_ = !!value_;
}
@synthesize result;
- (BOOL) hasGameAccountClient {
  return !!hasGameAccountClient_;
}
- (void) setHasGameAccountClient:(BOOL) value_ {
  hasGameAccountClient_ = !!value_;
}
@synthesize gameAccountClient;
@synthesize latestMatchesArray;
@dynamic latestMatches;
@synthesize heroesArray;
@dynamic heroes;
- (BOOL) hasPlayerName {
  return !!hasPlayerName_;
}
- (void) setHasPlayerName:(BOOL) value_ {
  hasPlayerName_ = !!value_;
}
@synthesize playerName;
- (BOOL) hasTeamName {
  return !!hasTeamName_;
}
- (void) setHasTeamName:(BOOL) value_ {
  hasTeamName_ = !!value_;
}
@synthesize teamName;
- (BOOL) hasTeamTag {
  return !!hasTeamTag_;
}
- (void) setHasTeamTag:(BOOL) value_ {
  hasTeamTag_ = !!value_;
}
@synthesize teamTag;
- (BOOL) hasTeamLogo {
  return !!hasTeamLogo_;
}
- (void) setHasTeamLogo:(BOOL) value_ {
  hasTeamLogo_ = !!value_;
}
@synthesize teamLogo;
- (BOOL) hasShowcaseHero {
  return !!hasShowcaseHero_;
}
- (void) setHasShowcaseHero:(BOOL) value_ {
  hasShowcaseHero_ = !!value_;
}
@synthesize showcaseHero;
@synthesize leaguePassesArray;
@dynamic leaguePasses;
@synthesize eventTicketsArray;
@dynamic eventTickets;
- (BOOL) hasTeamId {
  return !!hasTeamId_;
}
- (void) setHasTeamId:(BOOL) value_ {
  hasTeamId_ = !!value_;
}
@synthesize teamId;
- (void) dealloc {
  self.gameAccountClient = nil;
  self.latestMatchesArray = nil;
  self.heroesArray = nil;
  self.playerName = nil;
  self.teamName = nil;
  self.teamTag = nil;
  self.showcaseHero = nil;
  self.leaguePassesArray = nil;
  self.eventTicketsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = 0;
    self.gameAccountClient = [CSODOTAGameAccountClient defaultInstance];
    self.playerName = @"";
    self.teamName = @"";
    self.teamTag = @"";
    self.teamLogo = 0L;
    self.showcaseHero = [CMsgDOTAProfileResponse_ShowcaseHero defaultInstance];
    self.teamId = 0;
  }
  return self;
}
static CMsgDOTAProfileResponse* defaultCMsgDOTAProfileResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAProfileResponse class]) {
    defaultCMsgDOTAProfileResponseInstance = [[CMsgDOTAProfileResponse alloc] init];
  }
}
+ (CMsgDOTAProfileResponse*) defaultInstance {
  return defaultCMsgDOTAProfileResponseInstance;
}
- (CMsgDOTAProfileResponse*) defaultInstance {
  return defaultCMsgDOTAProfileResponseInstance;
}
- (PBArray *)latestMatches {
  return latestMatchesArray;
}
- (CMsgDOTAMatch*)latestMatchesAtIndex:(NSUInteger)index {
  return [latestMatchesArray objectAtIndex:index];
}
- (PBArray *)heroes {
  return heroesArray;
}
- (CMsgDOTAProfileResponse_PlayedHero*)heroesAtIndex:(NSUInteger)index {
  return [heroesArray objectAtIndex:index];
}
- (PBArray *)leaguePasses {
  return leaguePassesArray;
}
- (CMsgDOTAProfileResponse_LeaguePass*)leaguePassesAtIndex:(NSUInteger)index {
  return [leaguePassesArray objectAtIndex:index];
}
- (PBArray *)eventTickets {
  return eventTicketsArray;
}
- (CMsgDOTAProfileResponse_EventTicket*)eventTicketsAtIndex:(NSUInteger)index {
  return [eventTicketsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeUInt32:1 value:self.result];
  }
  if (self.hasGameAccountClient) {
    [output writeMessage:2 value:self.gameAccountClient];
  }
  for (CMsgDOTAMatch *element in self.latestMatchesArray) {
    [output writeMessage:3 value:element];
  }
  for (CMsgDOTAProfileResponse_PlayedHero *element in self.heroesArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasPlayerName) {
    [output writeString:5 value:self.playerName];
  }
  if (self.hasTeamName) {
    [output writeString:6 value:self.teamName];
  }
  if (self.hasTeamTag) {
    [output writeString:7 value:self.teamTag];
  }
  if (self.hasTeamLogo) {
    [output writeUInt64:8 value:self.teamLogo];
  }
  if (self.hasShowcaseHero) {
    [output writeMessage:9 value:self.showcaseHero];
  }
  for (CMsgDOTAProfileResponse_LeaguePass *element in self.leaguePassesArray) {
    [output writeMessage:10 value:element];
  }
  for (CMsgDOTAProfileResponse_EventTicket *element in self.eventTicketsArray) {
    [output writeMessage:11 value:element];
  }
  if (self.hasTeamId) {
    [output writeUInt32:12 value:self.teamId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeUInt32Size(1, self.result);
  }
  if (self.hasGameAccountClient) {
    size_ += computeMessageSize(2, self.gameAccountClient);
  }
  for (CMsgDOTAMatch *element in self.latestMatchesArray) {
    size_ += computeMessageSize(3, element);
  }
  for (CMsgDOTAProfileResponse_PlayedHero *element in self.heroesArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasPlayerName) {
    size_ += computeStringSize(5, self.playerName);
  }
  if (self.hasTeamName) {
    size_ += computeStringSize(6, self.teamName);
  }
  if (self.hasTeamTag) {
    size_ += computeStringSize(7, self.teamTag);
  }
  if (self.hasTeamLogo) {
    size_ += computeUInt64Size(8, self.teamLogo);
  }
  if (self.hasShowcaseHero) {
    size_ += computeMessageSize(9, self.showcaseHero);
  }
  for (CMsgDOTAProfileResponse_LeaguePass *element in self.leaguePassesArray) {
    size_ += computeMessageSize(10, element);
  }
  for (CMsgDOTAProfileResponse_EventTicket *element in self.eventTicketsArray) {
    size_ += computeMessageSize(11, element);
  }
  if (self.hasTeamId) {
    size_ += computeUInt32Size(12, self.teamId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAProfileResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAProfileResponse*)[[[CMsgDOTAProfileResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAProfileResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse*)[[[CMsgDOTAProfileResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAProfileResponse*)[[[CMsgDOTAProfileResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAProfileResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse*)[[[CMsgDOTAProfileResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAProfileResponse*)[[[CMsgDOTAProfileResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAProfileResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse*)[[[CMsgDOTAProfileResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_Builder*) builder {
  return [[[CMsgDOTAProfileResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAProfileResponse_Builder*) builderWithPrototype:(CMsgDOTAProfileResponse*) prototype {
  return [[CMsgDOTAProfileResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAProfileResponse_Builder*) builder {
  return [CMsgDOTAProfileResponse builder];
}
- (CMsgDOTAProfileResponse_Builder*) toBuilder {
  return [CMsgDOTAProfileResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", [NSNumber numberWithInt:self.result]];
  }
  if (self.hasGameAccountClient) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameAccountClient"];
    [self.gameAccountClient writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CMsgDOTAMatch* element in self.latestMatchesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"latestMatches"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CMsgDOTAProfileResponse_PlayedHero* element in self.heroesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"heroes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPlayerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerName", self.playerName];
  }
  if (self.hasTeamName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamName", self.teamName];
  }
  if (self.hasTeamTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamTag", self.teamTag];
  }
  if (self.hasTeamLogo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamLogo", [NSNumber numberWithLongLong:self.teamLogo]];
  }
  if (self.hasShowcaseHero) {
    [output appendFormat:@"%@%@ {\n", indent, @"showcaseHero"];
    [self.showcaseHero writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CMsgDOTAProfileResponse_LeaguePass* element in self.leaguePassesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"leaguePasses"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CMsgDOTAProfileResponse_EventTicket* element in self.eventTicketsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"eventTickets"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTeamId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamId", [NSNumber numberWithInt:self.teamId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAProfileResponse class]]) {
    return NO;
  }
  CMsgDOTAProfileResponse *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      self.hasGameAccountClient == otherMessage.hasGameAccountClient &&
      (!self.hasGameAccountClient || [self.gameAccountClient isEqual:otherMessage.gameAccountClient]) &&
      [self.latestMatchesArray isEqualToArray:otherMessage.latestMatchesArray] &&
      [self.heroesArray isEqualToArray:otherMessage.heroesArray] &&
      self.hasPlayerName == otherMessage.hasPlayerName &&
      (!self.hasPlayerName || [self.playerName isEqual:otherMessage.playerName]) &&
      self.hasTeamName == otherMessage.hasTeamName &&
      (!self.hasTeamName || [self.teamName isEqual:otherMessage.teamName]) &&
      self.hasTeamTag == otherMessage.hasTeamTag &&
      (!self.hasTeamTag || [self.teamTag isEqual:otherMessage.teamTag]) &&
      self.hasTeamLogo == otherMessage.hasTeamLogo &&
      (!self.hasTeamLogo || self.teamLogo == otherMessage.teamLogo) &&
      self.hasShowcaseHero == otherMessage.hasShowcaseHero &&
      (!self.hasShowcaseHero || [self.showcaseHero isEqual:otherMessage.showcaseHero]) &&
      [self.leaguePassesArray isEqualToArray:otherMessage.leaguePassesArray] &&
      [self.eventTicketsArray isEqualToArray:otherMessage.eventTicketsArray] &&
      self.hasTeamId == otherMessage.hasTeamId &&
      (!self.hasTeamId || self.teamId == otherMessage.teamId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.result] hash];
  }
  if (self.hasGameAccountClient) {
    hashCode = hashCode * 31 + [self.gameAccountClient hash];
  }
  for (CMsgDOTAMatch* element in self.latestMatchesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CMsgDOTAProfileResponse_PlayedHero* element in self.heroesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasPlayerName) {
    hashCode = hashCode * 31 + [self.playerName hash];
  }
  if (self.hasTeamName) {
    hashCode = hashCode * 31 + [self.teamName hash];
  }
  if (self.hasTeamTag) {
    hashCode = hashCode * 31 + [self.teamTag hash];
  }
  if (self.hasTeamLogo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.teamLogo] hash];
  }
  if (self.hasShowcaseHero) {
    hashCode = hashCode * 31 + [self.showcaseHero hash];
  }
  for (CMsgDOTAProfileResponse_LeaguePass* element in self.leaguePassesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CMsgDOTAProfileResponse_EventTicket* element in self.eventTicketsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasTeamId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.teamId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAProfileResponse_PlayedHero ()
@property uint32_t heroId;
@property uint32_t wins;
@end

@implementation CMsgDOTAProfileResponse_PlayedHero

- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (BOOL) hasWins {
  return !!hasWins_;
}
- (void) setHasWins:(BOOL) value_ {
  hasWins_ = !!value_;
}
@synthesize wins;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.heroId = 0;
    self.wins = 0;
  }
  return self;
}
static CMsgDOTAProfileResponse_PlayedHero* defaultCMsgDOTAProfileResponse_PlayedHeroInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAProfileResponse_PlayedHero class]) {
    defaultCMsgDOTAProfileResponse_PlayedHeroInstance = [[CMsgDOTAProfileResponse_PlayedHero alloc] init];
  }
}
+ (CMsgDOTAProfileResponse_PlayedHero*) defaultInstance {
  return defaultCMsgDOTAProfileResponse_PlayedHeroInstance;
}
- (CMsgDOTAProfileResponse_PlayedHero*) defaultInstance {
  return defaultCMsgDOTAProfileResponse_PlayedHeroInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHeroId) {
    [output writeUInt32:1 value:self.heroId];
  }
  if (self.hasWins) {
    [output writeUInt32:2 value:self.wins];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHeroId) {
    size_ += computeUInt32Size(1, self.heroId);
  }
  if (self.hasWins) {
    size_ += computeUInt32Size(2, self.wins);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAProfileResponse_PlayedHero*) parseFromData:(NSData*) data {
  return (CMsgDOTAProfileResponse_PlayedHero*)[[[CMsgDOTAProfileResponse_PlayedHero builder] mergeFromData:data] build];
}
+ (CMsgDOTAProfileResponse_PlayedHero*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_PlayedHero*)[[[CMsgDOTAProfileResponse_PlayedHero builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_PlayedHero*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAProfileResponse_PlayedHero*)[[[CMsgDOTAProfileResponse_PlayedHero builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAProfileResponse_PlayedHero*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_PlayedHero*)[[[CMsgDOTAProfileResponse_PlayedHero builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_PlayedHero*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAProfileResponse_PlayedHero*)[[[CMsgDOTAProfileResponse_PlayedHero builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAProfileResponse_PlayedHero*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_PlayedHero*)[[[CMsgDOTAProfileResponse_PlayedHero builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_PlayedHero_Builder*) builder {
  return [[[CMsgDOTAProfileResponse_PlayedHero_Builder alloc] init] autorelease];
}
+ (CMsgDOTAProfileResponse_PlayedHero_Builder*) builderWithPrototype:(CMsgDOTAProfileResponse_PlayedHero*) prototype {
  return [[CMsgDOTAProfileResponse_PlayedHero builder] mergeFrom:prototype];
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) builder {
  return [CMsgDOTAProfileResponse_PlayedHero builder];
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) toBuilder {
  return [CMsgDOTAProfileResponse_PlayedHero builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  if (self.hasWins) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wins", [NSNumber numberWithInt:self.wins]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAProfileResponse_PlayedHero class]]) {
    return NO;
  }
  CMsgDOTAProfileResponse_PlayedHero *otherMessage = other;
  return
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      self.hasWins == otherMessage.hasWins &&
      (!self.hasWins || self.wins == otherMessage.wins) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  if (self.hasWins) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.wins] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAProfileResponse_PlayedHero_Builder()
@property (retain) CMsgDOTAProfileResponse_PlayedHero* _builderResult;
@end

@implementation CMsgDOTAProfileResponse_PlayedHero_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAProfileResponse_PlayedHero alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) clear {
  _builderResult = [[[CMsgDOTAProfileResponse_PlayedHero alloc] init] autorelease];
  return self;
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) clone {
  return [CMsgDOTAProfileResponse_PlayedHero builderWithPrototype:_builderResult];
}
- (CMsgDOTAProfileResponse_PlayedHero*) defaultInstance {
  return [CMsgDOTAProfileResponse_PlayedHero defaultInstance];
}
- (CMsgDOTAProfileResponse_PlayedHero*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAProfileResponse_PlayedHero*) buildPartial {
  CMsgDOTAProfileResponse_PlayedHero* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) mergeFrom:(CMsgDOTAProfileResponse_PlayedHero*) other {
  if (other == [CMsgDOTAProfileResponse_PlayedHero defaultInstance]) {
    return self;
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.hasWins) {
    [self setWins:other.wins];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setWins:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (BOOL) hasWins {
  return _builderResult.hasWins;
}
- (uint32_t) wins {
  return _builderResult.wins;
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) setWins:(uint32_t) value {
  _builderResult.hasWins = YES;
  _builderResult.wins = value;
  return self;
}
- (CMsgDOTAProfileResponse_PlayedHero_Builder*) clearWins {
  _builderResult.hasWins = NO;
  _builderResult.wins = 0;
  return self;
}
@end

@interface CMsgDOTAProfileResponse_ShowcaseHero ()
@property uint32_t heroId;
@property (retain) PBAppendableArray * objectDataArray;
@end

@implementation CMsgDOTAProfileResponse_ShowcaseHero

- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
@synthesize objectDataArray;
@dynamic objectData;
- (void) dealloc {
  self.objectDataArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.heroId = 0;
  }
  return self;
}
static CMsgDOTAProfileResponse_ShowcaseHero* defaultCMsgDOTAProfileResponse_ShowcaseHeroInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAProfileResponse_ShowcaseHero class]) {
    defaultCMsgDOTAProfileResponse_ShowcaseHeroInstance = [[CMsgDOTAProfileResponse_ShowcaseHero alloc] init];
  }
}
+ (CMsgDOTAProfileResponse_ShowcaseHero*) defaultInstance {
  return defaultCMsgDOTAProfileResponse_ShowcaseHeroInstance;
}
- (CMsgDOTAProfileResponse_ShowcaseHero*) defaultInstance {
  return defaultCMsgDOTAProfileResponse_ShowcaseHeroInstance;
}
- (PBArray *)objectData {
  return objectDataArray;
}
- (NSData*)objectDataAtIndex:(NSUInteger)index {
  return [objectDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHeroId) {
    [output writeUInt32:1 value:self.heroId];
  }
  const NSUInteger objectDataArrayCount = self.objectDataArray.count;
  if (objectDataArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.objectDataArray.data;
    for (NSUInteger i = 0; i < objectDataArrayCount; ++i) {
      [output writeData:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHeroId) {
    size_ += computeUInt32Size(1, self.heroId);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.objectDataArray.count;
    const NSData* *values = (const NSData* *)self.objectDataArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAProfileResponse_ShowcaseHero*) parseFromData:(NSData*) data {
  return (CMsgDOTAProfileResponse_ShowcaseHero*)[[[CMsgDOTAProfileResponse_ShowcaseHero builder] mergeFromData:data] build];
}
+ (CMsgDOTAProfileResponse_ShowcaseHero*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_ShowcaseHero*)[[[CMsgDOTAProfileResponse_ShowcaseHero builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_ShowcaseHero*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAProfileResponse_ShowcaseHero*)[[[CMsgDOTAProfileResponse_ShowcaseHero builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAProfileResponse_ShowcaseHero*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_ShowcaseHero*)[[[CMsgDOTAProfileResponse_ShowcaseHero builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_ShowcaseHero*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAProfileResponse_ShowcaseHero*)[[[CMsgDOTAProfileResponse_ShowcaseHero builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAProfileResponse_ShowcaseHero*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_ShowcaseHero*)[[[CMsgDOTAProfileResponse_ShowcaseHero builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) builder {
  return [[[CMsgDOTAProfileResponse_ShowcaseHero_Builder alloc] init] autorelease];
}
+ (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) builderWithPrototype:(CMsgDOTAProfileResponse_ShowcaseHero*) prototype {
  return [[CMsgDOTAProfileResponse_ShowcaseHero builder] mergeFrom:prototype];
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) builder {
  return [CMsgDOTAProfileResponse_ShowcaseHero builder];
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) toBuilder {
  return [CMsgDOTAProfileResponse_ShowcaseHero builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  for (NSData* element in self.objectDataArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"objectData", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAProfileResponse_ShowcaseHero class]]) {
    return NO;
  }
  CMsgDOTAProfileResponse_ShowcaseHero *otherMessage = other;
  return
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      [self.objectDataArray isEqualToArray:otherMessage.objectDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  for (NSData* element in self.objectDataArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAProfileResponse_ShowcaseHero_Builder()
@property (retain) CMsgDOTAProfileResponse_ShowcaseHero* _builderResult;
@end

@implementation CMsgDOTAProfileResponse_ShowcaseHero_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAProfileResponse_ShowcaseHero alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) clear {
  _builderResult = [[[CMsgDOTAProfileResponse_ShowcaseHero alloc] init] autorelease];
  return self;
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) clone {
  return [CMsgDOTAProfileResponse_ShowcaseHero builderWithPrototype:_builderResult];
}
- (CMsgDOTAProfileResponse_ShowcaseHero*) defaultInstance {
  return [CMsgDOTAProfileResponse_ShowcaseHero defaultInstance];
}
- (CMsgDOTAProfileResponse_ShowcaseHero*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAProfileResponse_ShowcaseHero*) buildPartial {
  CMsgDOTAProfileResponse_ShowcaseHero* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) mergeFrom:(CMsgDOTAProfileResponse_ShowcaseHero*) other {
  if (other == [CMsgDOTAProfileResponse_ShowcaseHero defaultInstance]) {
    return self;
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.objectDataArray.count > 0) {
    if (_builderResult.objectDataArray == nil) {
      _builderResult.objectDataArray = [[other.objectDataArray copyWithZone:[other.objectDataArray zone]] autorelease];
    } else {
      [_builderResult.objectDataArray appendArray:other.objectDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 18: {
        [self addObjectData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (PBAppendableArray *)objectData {
  return _builderResult.objectDataArray;
}
- (NSData*)objectDataAtIndex:(NSUInteger)index {
  return [_builderResult objectDataAtIndex:index];
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder *)addObjectData:(NSData*)value {
  if (_builderResult.objectDataArray == nil) {
    _builderResult.objectDataArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.objectDataArray addObject:value];
  return self;
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder *)setObjectDataArray:(NSArray *)array {
  _builderResult.objectDataArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder *)setObjectDataValues:(const NSData* *)values count:(NSUInteger)count {
  _builderResult.objectDataArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_ShowcaseHero_Builder *)clearObjectData {
  _builderResult.objectDataArray = nil;
  return self;
}
@end

@interface CMsgDOTAProfileResponse_LeaguePass ()
@property uint32_t leagueId;
@property uint32_t itemDef;
@end

@implementation CMsgDOTAProfileResponse_LeaguePass

- (BOOL) hasLeagueId {
  return !!hasLeagueId_;
}
- (void) setHasLeagueId:(BOOL) value_ {
  hasLeagueId_ = !!value_;
}
@synthesize leagueId;
- (BOOL) hasItemDef {
  return !!hasItemDef_;
}
- (void) setHasItemDef:(BOOL) value_ {
  hasItemDef_ = !!value_;
}
@synthesize itemDef;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.leagueId = 0;
    self.itemDef = 0;
  }
  return self;
}
static CMsgDOTAProfileResponse_LeaguePass* defaultCMsgDOTAProfileResponse_LeaguePassInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAProfileResponse_LeaguePass class]) {
    defaultCMsgDOTAProfileResponse_LeaguePassInstance = [[CMsgDOTAProfileResponse_LeaguePass alloc] init];
  }
}
+ (CMsgDOTAProfileResponse_LeaguePass*) defaultInstance {
  return defaultCMsgDOTAProfileResponse_LeaguePassInstance;
}
- (CMsgDOTAProfileResponse_LeaguePass*) defaultInstance {
  return defaultCMsgDOTAProfileResponse_LeaguePassInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLeagueId) {
    [output writeUInt32:1 value:self.leagueId];
  }
  if (self.hasItemDef) {
    [output writeUInt32:2 value:self.itemDef];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLeagueId) {
    size_ += computeUInt32Size(1, self.leagueId);
  }
  if (self.hasItemDef) {
    size_ += computeUInt32Size(2, self.itemDef);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAProfileResponse_LeaguePass*) parseFromData:(NSData*) data {
  return (CMsgDOTAProfileResponse_LeaguePass*)[[[CMsgDOTAProfileResponse_LeaguePass builder] mergeFromData:data] build];
}
+ (CMsgDOTAProfileResponse_LeaguePass*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_LeaguePass*)[[[CMsgDOTAProfileResponse_LeaguePass builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_LeaguePass*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAProfileResponse_LeaguePass*)[[[CMsgDOTAProfileResponse_LeaguePass builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAProfileResponse_LeaguePass*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_LeaguePass*)[[[CMsgDOTAProfileResponse_LeaguePass builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_LeaguePass*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAProfileResponse_LeaguePass*)[[[CMsgDOTAProfileResponse_LeaguePass builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAProfileResponse_LeaguePass*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_LeaguePass*)[[[CMsgDOTAProfileResponse_LeaguePass builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_LeaguePass_Builder*) builder {
  return [[[CMsgDOTAProfileResponse_LeaguePass_Builder alloc] init] autorelease];
}
+ (CMsgDOTAProfileResponse_LeaguePass_Builder*) builderWithPrototype:(CMsgDOTAProfileResponse_LeaguePass*) prototype {
  return [[CMsgDOTAProfileResponse_LeaguePass builder] mergeFrom:prototype];
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) builder {
  return [CMsgDOTAProfileResponse_LeaguePass builder];
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) toBuilder {
  return [CMsgDOTAProfileResponse_LeaguePass builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLeagueId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueId", [NSNumber numberWithInt:self.leagueId]];
  }
  if (self.hasItemDef) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemDef", [NSNumber numberWithInt:self.itemDef]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAProfileResponse_LeaguePass class]]) {
    return NO;
  }
  CMsgDOTAProfileResponse_LeaguePass *otherMessage = other;
  return
      self.hasLeagueId == otherMessage.hasLeagueId &&
      (!self.hasLeagueId || self.leagueId == otherMessage.leagueId) &&
      self.hasItemDef == otherMessage.hasItemDef &&
      (!self.hasItemDef || self.itemDef == otherMessage.itemDef) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLeagueId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leagueId] hash];
  }
  if (self.hasItemDef) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemDef] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAProfileResponse_LeaguePass_Builder()
@property (retain) CMsgDOTAProfileResponse_LeaguePass* _builderResult;
@end

@implementation CMsgDOTAProfileResponse_LeaguePass_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAProfileResponse_LeaguePass alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) clear {
  _builderResult = [[[CMsgDOTAProfileResponse_LeaguePass alloc] init] autorelease];
  return self;
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) clone {
  return [CMsgDOTAProfileResponse_LeaguePass builderWithPrototype:_builderResult];
}
- (CMsgDOTAProfileResponse_LeaguePass*) defaultInstance {
  return [CMsgDOTAProfileResponse_LeaguePass defaultInstance];
}
- (CMsgDOTAProfileResponse_LeaguePass*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAProfileResponse_LeaguePass*) buildPartial {
  CMsgDOTAProfileResponse_LeaguePass* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) mergeFrom:(CMsgDOTAProfileResponse_LeaguePass*) other {
  if (other == [CMsgDOTAProfileResponse_LeaguePass defaultInstance]) {
    return self;
  }
  if (other.hasLeagueId) {
    [self setLeagueId:other.leagueId];
  }
  if (other.hasItemDef) {
    [self setItemDef:other.itemDef];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLeagueId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setItemDef:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLeagueId {
  return _builderResult.hasLeagueId;
}
- (uint32_t) leagueId {
  return _builderResult.leagueId;
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) setLeagueId:(uint32_t) value {
  _builderResult.hasLeagueId = YES;
  _builderResult.leagueId = value;
  return self;
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) clearLeagueId {
  _builderResult.hasLeagueId = NO;
  _builderResult.leagueId = 0;
  return self;
}
- (BOOL) hasItemDef {
  return _builderResult.hasItemDef;
}
- (uint32_t) itemDef {
  return _builderResult.itemDef;
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) setItemDef:(uint32_t) value {
  _builderResult.hasItemDef = YES;
  _builderResult.itemDef = value;
  return self;
}
- (CMsgDOTAProfileResponse_LeaguePass_Builder*) clearItemDef {
  _builderResult.hasItemDef = NO;
  _builderResult.itemDef = 0;
  return self;
}
@end

@interface CMsgDOTAProfileResponse_EventTicket ()
@property uint32_t eventId;
@end

@implementation CMsgDOTAProfileResponse_EventTicket

- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) value_ {
  hasEventId_ = !!value_;
}
@synthesize eventId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.eventId = 0;
  }
  return self;
}
static CMsgDOTAProfileResponse_EventTicket* defaultCMsgDOTAProfileResponse_EventTicketInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAProfileResponse_EventTicket class]) {
    defaultCMsgDOTAProfileResponse_EventTicketInstance = [[CMsgDOTAProfileResponse_EventTicket alloc] init];
  }
}
+ (CMsgDOTAProfileResponse_EventTicket*) defaultInstance {
  return defaultCMsgDOTAProfileResponse_EventTicketInstance;
}
- (CMsgDOTAProfileResponse_EventTicket*) defaultInstance {
  return defaultCMsgDOTAProfileResponse_EventTicketInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventId) {
    [output writeUInt32:1 value:self.eventId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventId) {
    size_ += computeUInt32Size(1, self.eventId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAProfileResponse_EventTicket*) parseFromData:(NSData*) data {
  return (CMsgDOTAProfileResponse_EventTicket*)[[[CMsgDOTAProfileResponse_EventTicket builder] mergeFromData:data] build];
}
+ (CMsgDOTAProfileResponse_EventTicket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_EventTicket*)[[[CMsgDOTAProfileResponse_EventTicket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_EventTicket*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAProfileResponse_EventTicket*)[[[CMsgDOTAProfileResponse_EventTicket builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAProfileResponse_EventTicket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_EventTicket*)[[[CMsgDOTAProfileResponse_EventTicket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_EventTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAProfileResponse_EventTicket*)[[[CMsgDOTAProfileResponse_EventTicket builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAProfileResponse_EventTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAProfileResponse_EventTicket*)[[[CMsgDOTAProfileResponse_EventTicket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAProfileResponse_EventTicket_Builder*) builder {
  return [[[CMsgDOTAProfileResponse_EventTicket_Builder alloc] init] autorelease];
}
+ (CMsgDOTAProfileResponse_EventTicket_Builder*) builderWithPrototype:(CMsgDOTAProfileResponse_EventTicket*) prototype {
  return [[CMsgDOTAProfileResponse_EventTicket builder] mergeFrom:prototype];
}
- (CMsgDOTAProfileResponse_EventTicket_Builder*) builder {
  return [CMsgDOTAProfileResponse_EventTicket builder];
}
- (CMsgDOTAProfileResponse_EventTicket_Builder*) toBuilder {
  return [CMsgDOTAProfileResponse_EventTicket builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventId", [NSNumber numberWithInt:self.eventId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAProfileResponse_EventTicket class]]) {
    return NO;
  }
  CMsgDOTAProfileResponse_EventTicket *otherMessage = other;
  return
      self.hasEventId == otherMessage.hasEventId &&
      (!self.hasEventId || self.eventId == otherMessage.eventId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasEventId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eventId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAProfileResponse_EventTicket_Builder()
@property (retain) CMsgDOTAProfileResponse_EventTicket* _builderResult;
@end

@implementation CMsgDOTAProfileResponse_EventTicket_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAProfileResponse_EventTicket alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAProfileResponse_EventTicket_Builder*) clear {
  _builderResult = [[[CMsgDOTAProfileResponse_EventTicket alloc] init] autorelease];
  return self;
}
- (CMsgDOTAProfileResponse_EventTicket_Builder*) clone {
  return [CMsgDOTAProfileResponse_EventTicket builderWithPrototype:_builderResult];
}
- (CMsgDOTAProfileResponse_EventTicket*) defaultInstance {
  return [CMsgDOTAProfileResponse_EventTicket defaultInstance];
}
- (CMsgDOTAProfileResponse_EventTicket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAProfileResponse_EventTicket*) buildPartial {
  CMsgDOTAProfileResponse_EventTicket* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAProfileResponse_EventTicket_Builder*) mergeFrom:(CMsgDOTAProfileResponse_EventTicket*) other {
  if (other == [CMsgDOTAProfileResponse_EventTicket defaultInstance]) {
    return self;
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAProfileResponse_EventTicket_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAProfileResponse_EventTicket_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEventId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasEventId {
  return _builderResult.hasEventId;
}
- (uint32_t) eventId {
  return _builderResult.eventId;
}
- (CMsgDOTAProfileResponse_EventTicket_Builder*) setEventId:(uint32_t) value {
  _builderResult.hasEventId = YES;
  _builderResult.eventId = value;
  return self;
}
- (CMsgDOTAProfileResponse_EventTicket_Builder*) clearEventId {
  _builderResult.hasEventId = NO;
  _builderResult.eventId = 0;
  return self;
}
@end

@interface CMsgDOTAProfileResponse_Builder()
@property (retain) CMsgDOTAProfileResponse* _builderResult;
@end

@implementation CMsgDOTAProfileResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAProfileResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAProfileResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAProfileResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) clone {
  return [CMsgDOTAProfileResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAProfileResponse*) defaultInstance {
  return [CMsgDOTAProfileResponse defaultInstance];
}
- (CMsgDOTAProfileResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAProfileResponse*) buildPartial {
  CMsgDOTAProfileResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAProfileResponse_Builder*) mergeFrom:(CMsgDOTAProfileResponse*) other {
  if (other == [CMsgDOTAProfileResponse defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  if (other.hasGameAccountClient) {
    [self mergeGameAccountClient:other.gameAccountClient];
  }
  if (other.latestMatchesArray.count > 0) {
    if (_builderResult.latestMatchesArray == nil) {
      _builderResult.latestMatchesArray = [[other.latestMatchesArray copyWithZone:[other.latestMatchesArray zone]] autorelease];
    } else {
      [_builderResult.latestMatchesArray appendArray:other.latestMatchesArray];
    }
  }
  if (other.heroesArray.count > 0) {
    if (_builderResult.heroesArray == nil) {
      _builderResult.heroesArray = [[other.heroesArray copyWithZone:[other.heroesArray zone]] autorelease];
    } else {
      [_builderResult.heroesArray appendArray:other.heroesArray];
    }
  }
  if (other.hasPlayerName) {
    [self setPlayerName:other.playerName];
  }
  if (other.hasTeamName) {
    [self setTeamName:other.teamName];
  }
  if (other.hasTeamTag) {
    [self setTeamTag:other.teamTag];
  }
  if (other.hasTeamLogo) {
    [self setTeamLogo:other.teamLogo];
  }
  if (other.hasShowcaseHero) {
    [self mergeShowcaseHero:other.showcaseHero];
  }
  if (other.leaguePassesArray.count > 0) {
    if (_builderResult.leaguePassesArray == nil) {
      _builderResult.leaguePassesArray = [[other.leaguePassesArray copyWithZone:[other.leaguePassesArray zone]] autorelease];
    } else {
      [_builderResult.leaguePassesArray appendArray:other.leaguePassesArray];
    }
  }
  if (other.eventTicketsArray.count > 0) {
    if (_builderResult.eventTicketsArray == nil) {
      _builderResult.eventTicketsArray = [[other.eventTicketsArray copyWithZone:[other.eventTicketsArray zone]] autorelease];
    } else {
      [_builderResult.eventTicketsArray appendArray:other.eventTicketsArray];
    }
  }
  if (other.hasTeamId) {
    [self setTeamId:other.teamId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAProfileResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResult:[input readUInt32]];
        break;
      }
      case 18: {
        CSODOTAGameAccountClient_Builder* subBuilder = [CSODOTAGameAccountClient builder];
        if (self.hasGameAccountClient) {
          [subBuilder mergeFrom:self.gameAccountClient];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGameAccountClient:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        CMsgDOTAMatch_Builder* subBuilder = [CMsgDOTAMatch builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLatestMatches:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        CMsgDOTAProfileResponse_PlayedHero_Builder* subBuilder = [CMsgDOTAProfileResponse_PlayedHero builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addHeroes:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setPlayerName:[input readString]];
        break;
      }
      case 50: {
        [self setTeamName:[input readString]];
        break;
      }
      case 58: {
        [self setTeamTag:[input readString]];
        break;
      }
      case 64: {
        [self setTeamLogo:[input readUInt64]];
        break;
      }
      case 74: {
        CMsgDOTAProfileResponse_ShowcaseHero_Builder* subBuilder = [CMsgDOTAProfileResponse_ShowcaseHero builder];
        if (self.hasShowcaseHero) {
          [subBuilder mergeFrom:self.showcaseHero];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setShowcaseHero:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        CMsgDOTAProfileResponse_LeaguePass_Builder* subBuilder = [CMsgDOTAProfileResponse_LeaguePass builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLeaguePasses:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        CMsgDOTAProfileResponse_EventTicket_Builder* subBuilder = [CMsgDOTAProfileResponse_EventTicket builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEventTickets:[subBuilder buildPartial]];
        break;
      }
      case 96: {
        [self setTeamId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return _builderResult.hasResult;
}
- (uint32_t) result {
  return _builderResult.result;
}
- (CMsgDOTAProfileResponse_Builder*) setResult:(uint32_t) value {
  _builderResult.hasResult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) clearResult {
  _builderResult.hasResult = NO;
  _builderResult.result = 0;
  return self;
}
- (BOOL) hasGameAccountClient {
  return _builderResult.hasGameAccountClient;
}
- (CSODOTAGameAccountClient*) gameAccountClient {
  return _builderResult.gameAccountClient;
}
- (CMsgDOTAProfileResponse_Builder*) setGameAccountClient:(CSODOTAGameAccountClient*) value {
  _builderResult.hasGameAccountClient = YES;
  _builderResult.gameAccountClient = value;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) setGameAccountClientBuilder:(CSODOTAGameAccountClient_Builder*) builderForValue {
  return [self setGameAccountClient:[builderForValue build]];
}
- (CMsgDOTAProfileResponse_Builder*) mergeGameAccountClient:(CSODOTAGameAccountClient*) value {
  if (_builderResult.hasGameAccountClient &&
      _builderResult.gameAccountClient != [CSODOTAGameAccountClient defaultInstance]) {
    _builderResult.gameAccountClient =
      [[[CSODOTAGameAccountClient builderWithPrototype:_builderResult.gameAccountClient] mergeFrom:value] buildPartial];
  } else {
    _builderResult.gameAccountClient = value;
  }
  _builderResult.hasGameAccountClient = YES;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) clearGameAccountClient {
  _builderResult.hasGameAccountClient = NO;
  _builderResult.gameAccountClient = [CSODOTAGameAccountClient defaultInstance];
  return self;
}
- (PBAppendableArray *)latestMatches {
  return _builderResult.latestMatchesArray;
}
- (CMsgDOTAMatch*)latestMatchesAtIndex:(NSUInteger)index {
  return [_builderResult latestMatchesAtIndex:index];
}
- (CMsgDOTAProfileResponse_Builder *)addLatestMatches:(CMsgDOTAMatch*)value {
  if (_builderResult.latestMatchesArray == nil) {
    _builderResult.latestMatchesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.latestMatchesArray addObject:value];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)setLatestMatchesArray:(NSArray *)array {
  _builderResult.latestMatchesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)setLatestMatchesValues:(const CMsgDOTAMatch* *)values count:(NSUInteger)count {
  _builderResult.latestMatchesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)clearLatestMatches {
  _builderResult.latestMatchesArray = nil;
  return self;
}
- (PBAppendableArray *)heroes {
  return _builderResult.heroesArray;
}
- (CMsgDOTAProfileResponse_PlayedHero*)heroesAtIndex:(NSUInteger)index {
  return [_builderResult heroesAtIndex:index];
}
- (CMsgDOTAProfileResponse_Builder *)addHeroes:(CMsgDOTAProfileResponse_PlayedHero*)value {
  if (_builderResult.heroesArray == nil) {
    _builderResult.heroesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.heroesArray addObject:value];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)setHeroesArray:(NSArray *)array {
  _builderResult.heroesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)setHeroesValues:(const CMsgDOTAProfileResponse_PlayedHero* *)values count:(NSUInteger)count {
  _builderResult.heroesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)clearHeroes {
  _builderResult.heroesArray = nil;
  return self;
}
- (BOOL) hasPlayerName {
  return _builderResult.hasPlayerName;
}
- (NSString*) playerName {
  return _builderResult.playerName;
}
- (CMsgDOTAProfileResponse_Builder*) setPlayerName:(NSString*) value {
  _builderResult.hasPlayerName = YES;
  _builderResult.playerName = value;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) clearPlayerName {
  _builderResult.hasPlayerName = NO;
  _builderResult.playerName = @"";
  return self;
}
- (BOOL) hasTeamName {
  return _builderResult.hasTeamName;
}
- (NSString*) teamName {
  return _builderResult.teamName;
}
- (CMsgDOTAProfileResponse_Builder*) setTeamName:(NSString*) value {
  _builderResult.hasTeamName = YES;
  _builderResult.teamName = value;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) clearTeamName {
  _builderResult.hasTeamName = NO;
  _builderResult.teamName = @"";
  return self;
}
- (BOOL) hasTeamTag {
  return _builderResult.hasTeamTag;
}
- (NSString*) teamTag {
  return _builderResult.teamTag;
}
- (CMsgDOTAProfileResponse_Builder*) setTeamTag:(NSString*) value {
  _builderResult.hasTeamTag = YES;
  _builderResult.teamTag = value;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) clearTeamTag {
  _builderResult.hasTeamTag = NO;
  _builderResult.teamTag = @"";
  return self;
}
- (BOOL) hasTeamLogo {
  return _builderResult.hasTeamLogo;
}
- (uint64_t) teamLogo {
  return _builderResult.teamLogo;
}
- (CMsgDOTAProfileResponse_Builder*) setTeamLogo:(uint64_t) value {
  _builderResult.hasTeamLogo = YES;
  _builderResult.teamLogo = value;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) clearTeamLogo {
  _builderResult.hasTeamLogo = NO;
  _builderResult.teamLogo = 0L;
  return self;
}
- (BOOL) hasShowcaseHero {
  return _builderResult.hasShowcaseHero;
}
- (CMsgDOTAProfileResponse_ShowcaseHero*) showcaseHero {
  return _builderResult.showcaseHero;
}
- (CMsgDOTAProfileResponse_Builder*) setShowcaseHero:(CMsgDOTAProfileResponse_ShowcaseHero*) value {
  _builderResult.hasShowcaseHero = YES;
  _builderResult.showcaseHero = value;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) setShowcaseHeroBuilder:(CMsgDOTAProfileResponse_ShowcaseHero_Builder*) builderForValue {
  return [self setShowcaseHero:[builderForValue build]];
}
- (CMsgDOTAProfileResponse_Builder*) mergeShowcaseHero:(CMsgDOTAProfileResponse_ShowcaseHero*) value {
  if (_builderResult.hasShowcaseHero &&
      _builderResult.showcaseHero != [CMsgDOTAProfileResponse_ShowcaseHero defaultInstance]) {
    _builderResult.showcaseHero =
      [[[CMsgDOTAProfileResponse_ShowcaseHero builderWithPrototype:_builderResult.showcaseHero] mergeFrom:value] buildPartial];
  } else {
    _builderResult.showcaseHero = value;
  }
  _builderResult.hasShowcaseHero = YES;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) clearShowcaseHero {
  _builderResult.hasShowcaseHero = NO;
  _builderResult.showcaseHero = [CMsgDOTAProfileResponse_ShowcaseHero defaultInstance];
  return self;
}
- (PBAppendableArray *)leaguePasses {
  return _builderResult.leaguePassesArray;
}
- (CMsgDOTAProfileResponse_LeaguePass*)leaguePassesAtIndex:(NSUInteger)index {
  return [_builderResult leaguePassesAtIndex:index];
}
- (CMsgDOTAProfileResponse_Builder *)addLeaguePasses:(CMsgDOTAProfileResponse_LeaguePass*)value {
  if (_builderResult.leaguePassesArray == nil) {
    _builderResult.leaguePassesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.leaguePassesArray addObject:value];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)setLeaguePassesArray:(NSArray *)array {
  _builderResult.leaguePassesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)setLeaguePassesValues:(const CMsgDOTAProfileResponse_LeaguePass* *)values count:(NSUInteger)count {
  _builderResult.leaguePassesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)clearLeaguePasses {
  _builderResult.leaguePassesArray = nil;
  return self;
}
- (PBAppendableArray *)eventTickets {
  return _builderResult.eventTicketsArray;
}
- (CMsgDOTAProfileResponse_EventTicket*)eventTicketsAtIndex:(NSUInteger)index {
  return [_builderResult eventTicketsAtIndex:index];
}
- (CMsgDOTAProfileResponse_Builder *)addEventTickets:(CMsgDOTAProfileResponse_EventTicket*)value {
  if (_builderResult.eventTicketsArray == nil) {
    _builderResult.eventTicketsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.eventTicketsArray addObject:value];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)setEventTicketsArray:(NSArray *)array {
  _builderResult.eventTicketsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)setEventTicketsValues:(const CMsgDOTAProfileResponse_EventTicket* *)values count:(NSUInteger)count {
  _builderResult.eventTicketsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAProfileResponse_Builder *)clearEventTickets {
  _builderResult.eventTicketsArray = nil;
  return self;
}
- (BOOL) hasTeamId {
  return _builderResult.hasTeamId;
}
- (uint32_t) teamId {
  return _builderResult.teamId;
}
- (CMsgDOTAProfileResponse_Builder*) setTeamId:(uint32_t) value {
  _builderResult.hasTeamId = YES;
  _builderResult.teamId = value;
  return self;
}
- (CMsgDOTAProfileResponse_Builder*) clearTeamId {
  _builderResult.hasTeamId = NO;
  _builderResult.teamId = 0;
  return self;
}
@end

@interface CMsgDOTANotifySuccessfulReport ()
@end

@implementation CMsgDOTANotifySuccessfulReport

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTANotifySuccessfulReport* defaultCMsgDOTANotifySuccessfulReportInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTANotifySuccessfulReport class]) {
    defaultCMsgDOTANotifySuccessfulReportInstance = [[CMsgDOTANotifySuccessfulReport alloc] init];
  }
}
+ (CMsgDOTANotifySuccessfulReport*) defaultInstance {
  return defaultCMsgDOTANotifySuccessfulReportInstance;
}
- (CMsgDOTANotifySuccessfulReport*) defaultInstance {
  return defaultCMsgDOTANotifySuccessfulReportInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTANotifySuccessfulReport*) parseFromData:(NSData*) data {
  return (CMsgDOTANotifySuccessfulReport*)[[[CMsgDOTANotifySuccessfulReport builder] mergeFromData:data] build];
}
+ (CMsgDOTANotifySuccessfulReport*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTANotifySuccessfulReport*)[[[CMsgDOTANotifySuccessfulReport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTANotifySuccessfulReport*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTANotifySuccessfulReport*)[[[CMsgDOTANotifySuccessfulReport builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTANotifySuccessfulReport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTANotifySuccessfulReport*)[[[CMsgDOTANotifySuccessfulReport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTANotifySuccessfulReport*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTANotifySuccessfulReport*)[[[CMsgDOTANotifySuccessfulReport builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTANotifySuccessfulReport*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTANotifySuccessfulReport*)[[[CMsgDOTANotifySuccessfulReport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTANotifySuccessfulReport_Builder*) builder {
  return [[[CMsgDOTANotifySuccessfulReport_Builder alloc] init] autorelease];
}
+ (CMsgDOTANotifySuccessfulReport_Builder*) builderWithPrototype:(CMsgDOTANotifySuccessfulReport*) prototype {
  return [[CMsgDOTANotifySuccessfulReport builder] mergeFrom:prototype];
}
- (CMsgDOTANotifySuccessfulReport_Builder*) builder {
  return [CMsgDOTANotifySuccessfulReport builder];
}
- (CMsgDOTANotifySuccessfulReport_Builder*) toBuilder {
  return [CMsgDOTANotifySuccessfulReport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTANotifySuccessfulReport class]]) {
    return NO;
  }
  CMsgDOTANotifySuccessfulReport *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTANotifySuccessfulReport_Builder()
@property (retain) CMsgDOTANotifySuccessfulReport* _builderResult;
@end

@implementation CMsgDOTANotifySuccessfulReport_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTANotifySuccessfulReport alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTANotifySuccessfulReport_Builder*) clear {
  _builderResult = [[[CMsgDOTANotifySuccessfulReport alloc] init] autorelease];
  return self;
}
- (CMsgDOTANotifySuccessfulReport_Builder*) clone {
  return [CMsgDOTANotifySuccessfulReport builderWithPrototype:_builderResult];
}
- (CMsgDOTANotifySuccessfulReport*) defaultInstance {
  return [CMsgDOTANotifySuccessfulReport defaultInstance];
}
- (CMsgDOTANotifySuccessfulReport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTANotifySuccessfulReport*) buildPartial {
  CMsgDOTANotifySuccessfulReport* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTANotifySuccessfulReport_Builder*) mergeFrom:(CMsgDOTANotifySuccessfulReport*) other {
  if (other == [CMsgDOTANotifySuccessfulReport defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTANotifySuccessfulReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTANotifySuccessfulReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTAClearNotifySuccessfulReport ()
@end

@implementation CMsgDOTAClearNotifySuccessfulReport

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAClearNotifySuccessfulReport* defaultCMsgDOTAClearNotifySuccessfulReportInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAClearNotifySuccessfulReport class]) {
    defaultCMsgDOTAClearNotifySuccessfulReportInstance = [[CMsgDOTAClearNotifySuccessfulReport alloc] init];
  }
}
+ (CMsgDOTAClearNotifySuccessfulReport*) defaultInstance {
  return defaultCMsgDOTAClearNotifySuccessfulReportInstance;
}
- (CMsgDOTAClearNotifySuccessfulReport*) defaultInstance {
  return defaultCMsgDOTAClearNotifySuccessfulReportInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAClearNotifySuccessfulReport*) parseFromData:(NSData*) data {
  return (CMsgDOTAClearNotifySuccessfulReport*)[[[CMsgDOTAClearNotifySuccessfulReport builder] mergeFromData:data] build];
}
+ (CMsgDOTAClearNotifySuccessfulReport*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAClearNotifySuccessfulReport*)[[[CMsgDOTAClearNotifySuccessfulReport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAClearNotifySuccessfulReport*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAClearNotifySuccessfulReport*)[[[CMsgDOTAClearNotifySuccessfulReport builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAClearNotifySuccessfulReport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAClearNotifySuccessfulReport*)[[[CMsgDOTAClearNotifySuccessfulReport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAClearNotifySuccessfulReport*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAClearNotifySuccessfulReport*)[[[CMsgDOTAClearNotifySuccessfulReport builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAClearNotifySuccessfulReport*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAClearNotifySuccessfulReport*)[[[CMsgDOTAClearNotifySuccessfulReport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAClearNotifySuccessfulReport_Builder*) builder {
  return [[[CMsgDOTAClearNotifySuccessfulReport_Builder alloc] init] autorelease];
}
+ (CMsgDOTAClearNotifySuccessfulReport_Builder*) builderWithPrototype:(CMsgDOTAClearNotifySuccessfulReport*) prototype {
  return [[CMsgDOTAClearNotifySuccessfulReport builder] mergeFrom:prototype];
}
- (CMsgDOTAClearNotifySuccessfulReport_Builder*) builder {
  return [CMsgDOTAClearNotifySuccessfulReport builder];
}
- (CMsgDOTAClearNotifySuccessfulReport_Builder*) toBuilder {
  return [CMsgDOTAClearNotifySuccessfulReport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAClearNotifySuccessfulReport class]]) {
    return NO;
  }
  CMsgDOTAClearNotifySuccessfulReport *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAClearNotifySuccessfulReport_Builder()
@property (retain) CMsgDOTAClearNotifySuccessfulReport* _builderResult;
@end

@implementation CMsgDOTAClearNotifySuccessfulReport_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAClearNotifySuccessfulReport alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAClearNotifySuccessfulReport_Builder*) clear {
  _builderResult = [[[CMsgDOTAClearNotifySuccessfulReport alloc] init] autorelease];
  return self;
}
- (CMsgDOTAClearNotifySuccessfulReport_Builder*) clone {
  return [CMsgDOTAClearNotifySuccessfulReport builderWithPrototype:_builderResult];
}
- (CMsgDOTAClearNotifySuccessfulReport*) defaultInstance {
  return [CMsgDOTAClearNotifySuccessfulReport defaultInstance];
}
- (CMsgDOTAClearNotifySuccessfulReport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAClearNotifySuccessfulReport*) buildPartial {
  CMsgDOTAClearNotifySuccessfulReport* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAClearNotifySuccessfulReport_Builder*) mergeFrom:(CMsgDOTAClearNotifySuccessfulReport*) other {
  if (other == [CMsgDOTAClearNotifySuccessfulReport defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAClearNotifySuccessfulReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAClearNotifySuccessfulReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgUnpickedHeroListRequest ()
@end

@implementation CMsgUnpickedHeroListRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgUnpickedHeroListRequest* defaultCMsgUnpickedHeroListRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgUnpickedHeroListRequest class]) {
    defaultCMsgUnpickedHeroListRequestInstance = [[CMsgUnpickedHeroListRequest alloc] init];
  }
}
+ (CMsgUnpickedHeroListRequest*) defaultInstance {
  return defaultCMsgUnpickedHeroListRequestInstance;
}
- (CMsgUnpickedHeroListRequest*) defaultInstance {
  return defaultCMsgUnpickedHeroListRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgUnpickedHeroListRequest*) parseFromData:(NSData*) data {
  return (CMsgUnpickedHeroListRequest*)[[[CMsgUnpickedHeroListRequest builder] mergeFromData:data] build];
}
+ (CMsgUnpickedHeroListRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgUnpickedHeroListRequest*)[[[CMsgUnpickedHeroListRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgUnpickedHeroListRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgUnpickedHeroListRequest*)[[[CMsgUnpickedHeroListRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgUnpickedHeroListRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgUnpickedHeroListRequest*)[[[CMsgUnpickedHeroListRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgUnpickedHeroListRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgUnpickedHeroListRequest*)[[[CMsgUnpickedHeroListRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgUnpickedHeroListRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgUnpickedHeroListRequest*)[[[CMsgUnpickedHeroListRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgUnpickedHeroListRequest_Builder*) builder {
  return [[[CMsgUnpickedHeroListRequest_Builder alloc] init] autorelease];
}
+ (CMsgUnpickedHeroListRequest_Builder*) builderWithPrototype:(CMsgUnpickedHeroListRequest*) prototype {
  return [[CMsgUnpickedHeroListRequest builder] mergeFrom:prototype];
}
- (CMsgUnpickedHeroListRequest_Builder*) builder {
  return [CMsgUnpickedHeroListRequest builder];
}
- (CMsgUnpickedHeroListRequest_Builder*) toBuilder {
  return [CMsgUnpickedHeroListRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgUnpickedHeroListRequest class]]) {
    return NO;
  }
  CMsgUnpickedHeroListRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgUnpickedHeroListRequest_Builder()
@property (retain) CMsgUnpickedHeroListRequest* _builderResult;
@end

@implementation CMsgUnpickedHeroListRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgUnpickedHeroListRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgUnpickedHeroListRequest_Builder*) clear {
  _builderResult = [[[CMsgUnpickedHeroListRequest alloc] init] autorelease];
  return self;
}
- (CMsgUnpickedHeroListRequest_Builder*) clone {
  return [CMsgUnpickedHeroListRequest builderWithPrototype:_builderResult];
}
- (CMsgUnpickedHeroListRequest*) defaultInstance {
  return [CMsgUnpickedHeroListRequest defaultInstance];
}
- (CMsgUnpickedHeroListRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgUnpickedHeroListRequest*) buildPartial {
  CMsgUnpickedHeroListRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgUnpickedHeroListRequest_Builder*) mergeFrom:(CMsgUnpickedHeroListRequest*) other {
  if (other == [CMsgUnpickedHeroListRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgUnpickedHeroListRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgUnpickedHeroListRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgUnpickedHeroListResponse ()
@property (retain) PBAppendableArray * heroIdsArray;
@end

@implementation CMsgUnpickedHeroListResponse

@synthesize heroIdsArray;
@dynamic heroIds;
- (void) dealloc {
  self.heroIdsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgUnpickedHeroListResponse* defaultCMsgUnpickedHeroListResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgUnpickedHeroListResponse class]) {
    defaultCMsgUnpickedHeroListResponseInstance = [[CMsgUnpickedHeroListResponse alloc] init];
  }
}
+ (CMsgUnpickedHeroListResponse*) defaultInstance {
  return defaultCMsgUnpickedHeroListResponseInstance;
}
- (CMsgUnpickedHeroListResponse*) defaultInstance {
  return defaultCMsgUnpickedHeroListResponseInstance;
}
- (PBArray *)heroIds {
  return heroIdsArray;
}
- (uint32_t)heroIdsAtIndex:(NSUInteger)index {
  return [heroIdsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger heroIdsArrayCount = self.heroIdsArray.count;
  if (heroIdsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.heroIdsArray.data;
    for (NSUInteger i = 0; i < heroIdsArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.heroIdsArray.count;
    const uint32_t *values = (const uint32_t *)self.heroIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgUnpickedHeroListResponse*) parseFromData:(NSData*) data {
  return (CMsgUnpickedHeroListResponse*)[[[CMsgUnpickedHeroListResponse builder] mergeFromData:data] build];
}
+ (CMsgUnpickedHeroListResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgUnpickedHeroListResponse*)[[[CMsgUnpickedHeroListResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgUnpickedHeroListResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgUnpickedHeroListResponse*)[[[CMsgUnpickedHeroListResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgUnpickedHeroListResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgUnpickedHeroListResponse*)[[[CMsgUnpickedHeroListResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgUnpickedHeroListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgUnpickedHeroListResponse*)[[[CMsgUnpickedHeroListResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgUnpickedHeroListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgUnpickedHeroListResponse*)[[[CMsgUnpickedHeroListResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgUnpickedHeroListResponse_Builder*) builder {
  return [[[CMsgUnpickedHeroListResponse_Builder alloc] init] autorelease];
}
+ (CMsgUnpickedHeroListResponse_Builder*) builderWithPrototype:(CMsgUnpickedHeroListResponse*) prototype {
  return [[CMsgUnpickedHeroListResponse builder] mergeFrom:prototype];
}
- (CMsgUnpickedHeroListResponse_Builder*) builder {
  return [CMsgUnpickedHeroListResponse builder];
}
- (CMsgUnpickedHeroListResponse_Builder*) toBuilder {
  return [CMsgUnpickedHeroListResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.heroIdsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroIds", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgUnpickedHeroListResponse class]]) {
    return NO;
  }
  CMsgUnpickedHeroListResponse *otherMessage = other;
  return
      [self.heroIdsArray isEqualToArray:otherMessage.heroIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.heroIdsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgUnpickedHeroListResponse_Builder()
@property (retain) CMsgUnpickedHeroListResponse* _builderResult;
@end

@implementation CMsgUnpickedHeroListResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgUnpickedHeroListResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgUnpickedHeroListResponse_Builder*) clear {
  _builderResult = [[[CMsgUnpickedHeroListResponse alloc] init] autorelease];
  return self;
}
- (CMsgUnpickedHeroListResponse_Builder*) clone {
  return [CMsgUnpickedHeroListResponse builderWithPrototype:_builderResult];
}
- (CMsgUnpickedHeroListResponse*) defaultInstance {
  return [CMsgUnpickedHeroListResponse defaultInstance];
}
- (CMsgUnpickedHeroListResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgUnpickedHeroListResponse*) buildPartial {
  CMsgUnpickedHeroListResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgUnpickedHeroListResponse_Builder*) mergeFrom:(CMsgUnpickedHeroListResponse*) other {
  if (other == [CMsgUnpickedHeroListResponse defaultInstance]) {
    return self;
  }
  if (other.heroIdsArray.count > 0) {
    if (_builderResult.heroIdsArray == nil) {
      _builderResult.heroIdsArray = [[other.heroIdsArray copyWithZone:[other.heroIdsArray zone]] autorelease];
    } else {
      [_builderResult.heroIdsArray appendArray:other.heroIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgUnpickedHeroListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgUnpickedHeroListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addHeroIds:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)heroIds {
  return _builderResult.heroIdsArray;
}
- (uint32_t)heroIdsAtIndex:(NSUInteger)index {
  return [_builderResult heroIdsAtIndex:index];
}
- (CMsgUnpickedHeroListResponse_Builder *)addHeroIds:(uint32_t)value {
  if (_builderResult.heroIdsArray == nil) {
    _builderResult.heroIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.heroIdsArray addUint32:value];
  return self;
}
- (CMsgUnpickedHeroListResponse_Builder *)setHeroIdsArray:(NSArray *)array {
  _builderResult.heroIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgUnpickedHeroListResponse_Builder *)setHeroIdsValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.heroIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgUnpickedHeroListResponse_Builder *)clearHeroIds {
  _builderResult.heroIdsArray = nil;
  return self;
}
@end

@interface CMsgRemoveFromUnpickedHeroList ()
@property uint32_t heroId;
@end

@implementation CMsgRemoveFromUnpickedHeroList

- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.heroId = 0;
  }
  return self;
}
static CMsgRemoveFromUnpickedHeroList* defaultCMsgRemoveFromUnpickedHeroListInstance = nil;
+ (void) initialize {
  if (self == [CMsgRemoveFromUnpickedHeroList class]) {
    defaultCMsgRemoveFromUnpickedHeroListInstance = [[CMsgRemoveFromUnpickedHeroList alloc] init];
  }
}
+ (CMsgRemoveFromUnpickedHeroList*) defaultInstance {
  return defaultCMsgRemoveFromUnpickedHeroListInstance;
}
- (CMsgRemoveFromUnpickedHeroList*) defaultInstance {
  return defaultCMsgRemoveFromUnpickedHeroListInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHeroId) {
    [output writeUInt32:1 value:self.heroId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHeroId) {
    size_ += computeUInt32Size(1, self.heroId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgRemoveFromUnpickedHeroList*) parseFromData:(NSData*) data {
  return (CMsgRemoveFromUnpickedHeroList*)[[[CMsgRemoveFromUnpickedHeroList builder] mergeFromData:data] build];
}
+ (CMsgRemoveFromUnpickedHeroList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRemoveFromUnpickedHeroList*)[[[CMsgRemoveFromUnpickedHeroList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgRemoveFromUnpickedHeroList*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgRemoveFromUnpickedHeroList*)[[[CMsgRemoveFromUnpickedHeroList builder] mergeFromInputStream:input] build];
}
+ (CMsgRemoveFromUnpickedHeroList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRemoveFromUnpickedHeroList*)[[[CMsgRemoveFromUnpickedHeroList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgRemoveFromUnpickedHeroList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgRemoveFromUnpickedHeroList*)[[[CMsgRemoveFromUnpickedHeroList builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgRemoveFromUnpickedHeroList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRemoveFromUnpickedHeroList*)[[[CMsgRemoveFromUnpickedHeroList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgRemoveFromUnpickedHeroList_Builder*) builder {
  return [[[CMsgRemoveFromUnpickedHeroList_Builder alloc] init] autorelease];
}
+ (CMsgRemoveFromUnpickedHeroList_Builder*) builderWithPrototype:(CMsgRemoveFromUnpickedHeroList*) prototype {
  return [[CMsgRemoveFromUnpickedHeroList builder] mergeFrom:prototype];
}
- (CMsgRemoveFromUnpickedHeroList_Builder*) builder {
  return [CMsgRemoveFromUnpickedHeroList builder];
}
- (CMsgRemoveFromUnpickedHeroList_Builder*) toBuilder {
  return [CMsgRemoveFromUnpickedHeroList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgRemoveFromUnpickedHeroList class]]) {
    return NO;
  }
  CMsgRemoveFromUnpickedHeroList *otherMessage = other;
  return
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgRemoveFromUnpickedHeroList_Builder()
@property (retain) CMsgRemoveFromUnpickedHeroList* _builderResult;
@end

@implementation CMsgRemoveFromUnpickedHeroList_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgRemoveFromUnpickedHeroList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgRemoveFromUnpickedHeroList_Builder*) clear {
  _builderResult = [[[CMsgRemoveFromUnpickedHeroList alloc] init] autorelease];
  return self;
}
- (CMsgRemoveFromUnpickedHeroList_Builder*) clone {
  return [CMsgRemoveFromUnpickedHeroList builderWithPrototype:_builderResult];
}
- (CMsgRemoveFromUnpickedHeroList*) defaultInstance {
  return [CMsgRemoveFromUnpickedHeroList defaultInstance];
}
- (CMsgRemoveFromUnpickedHeroList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgRemoveFromUnpickedHeroList*) buildPartial {
  CMsgRemoveFromUnpickedHeroList* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgRemoveFromUnpickedHeroList_Builder*) mergeFrom:(CMsgRemoveFromUnpickedHeroList*) other {
  if (other == [CMsgRemoveFromUnpickedHeroList defaultInstance]) {
    return self;
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgRemoveFromUnpickedHeroList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgRemoveFromUnpickedHeroList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setHeroId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgRemoveFromUnpickedHeroList_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgRemoveFromUnpickedHeroList_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
@end

@interface CMsgDOTAMatchGroupWaitTimesRequest ()
@end

@implementation CMsgDOTAMatchGroupWaitTimesRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAMatchGroupWaitTimesRequest* defaultCMsgDOTAMatchGroupWaitTimesRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAMatchGroupWaitTimesRequest class]) {
    defaultCMsgDOTAMatchGroupWaitTimesRequestInstance = [[CMsgDOTAMatchGroupWaitTimesRequest alloc] init];
  }
}
+ (CMsgDOTAMatchGroupWaitTimesRequest*) defaultInstance {
  return defaultCMsgDOTAMatchGroupWaitTimesRequestInstance;
}
- (CMsgDOTAMatchGroupWaitTimesRequest*) defaultInstance {
  return defaultCMsgDOTAMatchGroupWaitTimesRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAMatchGroupWaitTimesRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTAMatchGroupWaitTimesRequest*)[[[CMsgDOTAMatchGroupWaitTimesRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTAMatchGroupWaitTimesRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchGroupWaitTimesRequest*)[[[CMsgDOTAMatchGroupWaitTimesRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchGroupWaitTimesRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAMatchGroupWaitTimesRequest*)[[[CMsgDOTAMatchGroupWaitTimesRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAMatchGroupWaitTimesRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchGroupWaitTimesRequest*)[[[CMsgDOTAMatchGroupWaitTimesRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchGroupWaitTimesRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAMatchGroupWaitTimesRequest*)[[[CMsgDOTAMatchGroupWaitTimesRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAMatchGroupWaitTimesRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchGroupWaitTimesRequest*)[[[CMsgDOTAMatchGroupWaitTimesRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchGroupWaitTimesRequest_Builder*) builder {
  return [[[CMsgDOTAMatchGroupWaitTimesRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTAMatchGroupWaitTimesRequest_Builder*) builderWithPrototype:(CMsgDOTAMatchGroupWaitTimesRequest*) prototype {
  return [[CMsgDOTAMatchGroupWaitTimesRequest builder] mergeFrom:prototype];
}
- (CMsgDOTAMatchGroupWaitTimesRequest_Builder*) builder {
  return [CMsgDOTAMatchGroupWaitTimesRequest builder];
}
- (CMsgDOTAMatchGroupWaitTimesRequest_Builder*) toBuilder {
  return [CMsgDOTAMatchGroupWaitTimesRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAMatchGroupWaitTimesRequest class]]) {
    return NO;
  }
  CMsgDOTAMatchGroupWaitTimesRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAMatchGroupWaitTimesRequest_Builder()
@property (retain) CMsgDOTAMatchGroupWaitTimesRequest* _builderResult;
@end

@implementation CMsgDOTAMatchGroupWaitTimesRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAMatchGroupWaitTimesRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAMatchGroupWaitTimesRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTAMatchGroupWaitTimesRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTAMatchGroupWaitTimesRequest_Builder*) clone {
  return [CMsgDOTAMatchGroupWaitTimesRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTAMatchGroupWaitTimesRequest*) defaultInstance {
  return [CMsgDOTAMatchGroupWaitTimesRequest defaultInstance];
}
- (CMsgDOTAMatchGroupWaitTimesRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAMatchGroupWaitTimesRequest*) buildPartial {
  CMsgDOTAMatchGroupWaitTimesRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAMatchGroupWaitTimesRequest_Builder*) mergeFrom:(CMsgDOTAMatchGroupWaitTimesRequest*) other {
  if (other == [CMsgDOTAMatchGroupWaitTimesRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAMatchGroupWaitTimesRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAMatchGroupWaitTimesRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTAMatchGroupWaitTimesResponse ()
@property (retain) PBAppendableArray * waitTimesByGroupArray;
@end

@implementation CMsgDOTAMatchGroupWaitTimesResponse

@synthesize waitTimesByGroupArray;
@dynamic waitTimesByGroup;
- (void) dealloc {
  self.waitTimesByGroupArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAMatchGroupWaitTimesResponse* defaultCMsgDOTAMatchGroupWaitTimesResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAMatchGroupWaitTimesResponse class]) {
    defaultCMsgDOTAMatchGroupWaitTimesResponseInstance = [[CMsgDOTAMatchGroupWaitTimesResponse alloc] init];
  }
}
+ (CMsgDOTAMatchGroupWaitTimesResponse*) defaultInstance {
  return defaultCMsgDOTAMatchGroupWaitTimesResponseInstance;
}
- (CMsgDOTAMatchGroupWaitTimesResponse*) defaultInstance {
  return defaultCMsgDOTAMatchGroupWaitTimesResponseInstance;
}
- (PBArray *)waitTimesByGroup {
  return waitTimesByGroupArray;
}
- (uint32_t)waitTimesByGroupAtIndex:(NSUInteger)index {
  return [waitTimesByGroupArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger waitTimesByGroupArrayCount = self.waitTimesByGroupArray.count;
  if (waitTimesByGroupArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.waitTimesByGroupArray.data;
    for (NSUInteger i = 0; i < waitTimesByGroupArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.waitTimesByGroupArray.count;
    const uint32_t *values = (const uint32_t *)self.waitTimesByGroupArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAMatchGroupWaitTimesResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAMatchGroupWaitTimesResponse*)[[[CMsgDOTAMatchGroupWaitTimesResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAMatchGroupWaitTimesResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchGroupWaitTimesResponse*)[[[CMsgDOTAMatchGroupWaitTimesResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchGroupWaitTimesResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAMatchGroupWaitTimesResponse*)[[[CMsgDOTAMatchGroupWaitTimesResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAMatchGroupWaitTimesResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchGroupWaitTimesResponse*)[[[CMsgDOTAMatchGroupWaitTimesResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchGroupWaitTimesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAMatchGroupWaitTimesResponse*)[[[CMsgDOTAMatchGroupWaitTimesResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAMatchGroupWaitTimesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchGroupWaitTimesResponse*)[[[CMsgDOTAMatchGroupWaitTimesResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchGroupWaitTimesResponse_Builder*) builder {
  return [[[CMsgDOTAMatchGroupWaitTimesResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAMatchGroupWaitTimesResponse_Builder*) builderWithPrototype:(CMsgDOTAMatchGroupWaitTimesResponse*) prototype {
  return [[CMsgDOTAMatchGroupWaitTimesResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder*) builder {
  return [CMsgDOTAMatchGroupWaitTimesResponse builder];
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder*) toBuilder {
  return [CMsgDOTAMatchGroupWaitTimesResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.waitTimesByGroupArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waitTimesByGroup", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAMatchGroupWaitTimesResponse class]]) {
    return NO;
  }
  CMsgDOTAMatchGroupWaitTimesResponse *otherMessage = other;
  return
      [self.waitTimesByGroupArray isEqualToArray:otherMessage.waitTimesByGroupArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.waitTimesByGroupArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAMatchGroupWaitTimesResponse_Builder()
@property (retain) CMsgDOTAMatchGroupWaitTimesResponse* _builderResult;
@end

@implementation CMsgDOTAMatchGroupWaitTimesResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAMatchGroupWaitTimesResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAMatchGroupWaitTimesResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder*) clone {
  return [CMsgDOTAMatchGroupWaitTimesResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAMatchGroupWaitTimesResponse*) defaultInstance {
  return [CMsgDOTAMatchGroupWaitTimesResponse defaultInstance];
}
- (CMsgDOTAMatchGroupWaitTimesResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAMatchGroupWaitTimesResponse*) buildPartial {
  CMsgDOTAMatchGroupWaitTimesResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder*) mergeFrom:(CMsgDOTAMatchGroupWaitTimesResponse*) other {
  if (other == [CMsgDOTAMatchGroupWaitTimesResponse defaultInstance]) {
    return self;
  }
  if (other.waitTimesByGroupArray.count > 0) {
    if (_builderResult.waitTimesByGroupArray == nil) {
      _builderResult.waitTimesByGroupArray = [[other.waitTimesByGroupArray copyWithZone:[other.waitTimesByGroupArray zone]] autorelease];
    } else {
      [_builderResult.waitTimesByGroupArray appendArray:other.waitTimesByGroupArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addWaitTimesByGroup:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)waitTimesByGroup {
  return _builderResult.waitTimesByGroupArray;
}
- (uint32_t)waitTimesByGroupAtIndex:(NSUInteger)index {
  return [_builderResult waitTimesByGroupAtIndex:index];
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder *)addWaitTimesByGroup:(uint32_t)value {
  if (_builderResult.waitTimesByGroupArray == nil) {
    _builderResult.waitTimesByGroupArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.waitTimesByGroupArray addUint32:value];
  return self;
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder *)setWaitTimesByGroupArray:(NSArray *)array {
  _builderResult.waitTimesByGroupArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder *)setWaitTimesByGroupValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.waitTimesByGroupArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAMatchGroupWaitTimesResponse_Builder *)clearWaitTimesByGroup {
  _builderResult.waitTimesByGroupArray = nil;
  return self;
}
@end

@interface CItemDropEvent ()
@property uint32_t accountId;
@property uint32_t timeStamp;
@property uint32_t defIndex;
@property uint64_t itemId;
@property uint32_t gamesPlayedSinceLastDrop;
@property uint32_t timePlayedSinceLastDrop;
@property Float32 dropBonus;
@property uint32_t rarity;
@property uint32_t currentScore;
@property uint32_t nextDropAt;
@property BOOL isCrate;
@property BOOL isLevelReward;
@property uint32_t xp;
@property uint32_t level;
@property uint32_t matchId;
@end

@implementation CItemDropEvent

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasTimeStamp {
  return !!hasTimeStamp_;
}
- (void) setHasTimeStamp:(BOOL) value_ {
  hasTimeStamp_ = !!value_;
}
@synthesize timeStamp;
- (BOOL) hasDefIndex {
  return !!hasDefIndex_;
}
- (void) setHasDefIndex:(BOOL) value_ {
  hasDefIndex_ = !!value_;
}
@synthesize defIndex;
- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value_ {
  hasItemId_ = !!value_;
}
@synthesize itemId;
- (BOOL) hasGamesPlayedSinceLastDrop {
  return !!hasGamesPlayedSinceLastDrop_;
}
- (void) setHasGamesPlayedSinceLastDrop:(BOOL) value_ {
  hasGamesPlayedSinceLastDrop_ = !!value_;
}
@synthesize gamesPlayedSinceLastDrop;
- (BOOL) hasTimePlayedSinceLastDrop {
  return !!hasTimePlayedSinceLastDrop_;
}
- (void) setHasTimePlayedSinceLastDrop:(BOOL) value_ {
  hasTimePlayedSinceLastDrop_ = !!value_;
}
@synthesize timePlayedSinceLastDrop;
- (BOOL) hasDropBonus {
  return !!hasDropBonus_;
}
- (void) setHasDropBonus:(BOOL) value_ {
  hasDropBonus_ = !!value_;
}
@synthesize dropBonus;
- (BOOL) hasRarity {
  return !!hasRarity_;
}
- (void) setHasRarity:(BOOL) value_ {
  hasRarity_ = !!value_;
}
@synthesize rarity;
- (BOOL) hasCurrentScore {
  return !!hasCurrentScore_;
}
- (void) setHasCurrentScore:(BOOL) value_ {
  hasCurrentScore_ = !!value_;
}
@synthesize currentScore;
- (BOOL) hasNextDropAt {
  return !!hasNextDropAt_;
}
- (void) setHasNextDropAt:(BOOL) value_ {
  hasNextDropAt_ = !!value_;
}
@synthesize nextDropAt;
- (BOOL) hasIsCrate {
  return !!hasIsCrate_;
}
- (void) setHasIsCrate:(BOOL) value_ {
  hasIsCrate_ = !!value_;
}
- (BOOL) isCrate {
  return !!isCrate_;
}
- (void) setIsCrate:(BOOL) value_ {
  isCrate_ = !!value_;
}
- (BOOL) hasIsLevelReward {
  return !!hasIsLevelReward_;
}
- (void) setHasIsLevelReward:(BOOL) value_ {
  hasIsLevelReward_ = !!value_;
}
- (BOOL) isLevelReward {
  return !!isLevelReward_;
}
- (void) setIsLevelReward:(BOOL) value_ {
  isLevelReward_ = !!value_;
}
- (BOOL) hasXp {
  return !!hasXp_;
}
- (void) setHasXp:(BOOL) value_ {
  hasXp_ = !!value_;
}
@synthesize xp;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.timeStamp = 0;
    self.defIndex = 0;
    self.itemId = 0L;
    self.gamesPlayedSinceLastDrop = 0;
    self.timePlayedSinceLastDrop = 0;
    self.dropBonus = 0;
    self.rarity = 0;
    self.currentScore = 0;
    self.nextDropAt = 0;
    self.isCrate = NO;
    self.isLevelReward = NO;
    self.xp = 0;
    self.level = 0;
    self.matchId = 0;
  }
  return self;
}
static CItemDropEvent* defaultCItemDropEventInstance = nil;
+ (void) initialize {
  if (self == [CItemDropEvent class]) {
    defaultCItemDropEventInstance = [[CItemDropEvent alloc] init];
  }
}
+ (CItemDropEvent*) defaultInstance {
  return defaultCItemDropEventInstance;
}
- (CItemDropEvent*) defaultInstance {
  return defaultCItemDropEventInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasTimeStamp) {
    [output writeUInt32:2 value:self.timeStamp];
  }
  if (self.hasDefIndex) {
    [output writeUInt32:3 value:self.defIndex];
  }
  if (self.hasItemId) {
    [output writeUInt64:4 value:self.itemId];
  }
  if (self.hasGamesPlayedSinceLastDrop) {
    [output writeUInt32:5 value:self.gamesPlayedSinceLastDrop];
  }
  if (self.hasTimePlayedSinceLastDrop) {
    [output writeUInt32:6 value:self.timePlayedSinceLastDrop];
  }
  if (self.hasDropBonus) {
    [output writeFloat:7 value:self.dropBonus];
  }
  if (self.hasRarity) {
    [output writeUInt32:8 value:self.rarity];
  }
  if (self.hasCurrentScore) {
    [output writeUInt32:9 value:self.currentScore];
  }
  if (self.hasNextDropAt) {
    [output writeUInt32:10 value:self.nextDropAt];
  }
  if (self.hasIsCrate) {
    [output writeBool:11 value:self.isCrate];
  }
  if (self.hasIsLevelReward) {
    [output writeBool:12 value:self.isLevelReward];
  }
  if (self.hasXp) {
    [output writeUInt32:13 value:self.xp];
  }
  if (self.hasLevel) {
    [output writeUInt32:14 value:self.level];
  }
  if (self.hasMatchId) {
    [output writeUInt32:15 value:self.matchId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasTimeStamp) {
    size_ += computeUInt32Size(2, self.timeStamp);
  }
  if (self.hasDefIndex) {
    size_ += computeUInt32Size(3, self.defIndex);
  }
  if (self.hasItemId) {
    size_ += computeUInt64Size(4, self.itemId);
  }
  if (self.hasGamesPlayedSinceLastDrop) {
    size_ += computeUInt32Size(5, self.gamesPlayedSinceLastDrop);
  }
  if (self.hasTimePlayedSinceLastDrop) {
    size_ += computeUInt32Size(6, self.timePlayedSinceLastDrop);
  }
  if (self.hasDropBonus) {
    size_ += computeFloatSize(7, self.dropBonus);
  }
  if (self.hasRarity) {
    size_ += computeUInt32Size(8, self.rarity);
  }
  if (self.hasCurrentScore) {
    size_ += computeUInt32Size(9, self.currentScore);
  }
  if (self.hasNextDropAt) {
    size_ += computeUInt32Size(10, self.nextDropAt);
  }
  if (self.hasIsCrate) {
    size_ += computeBoolSize(11, self.isCrate);
  }
  if (self.hasIsLevelReward) {
    size_ += computeBoolSize(12, self.isLevelReward);
  }
  if (self.hasXp) {
    size_ += computeUInt32Size(13, self.xp);
  }
  if (self.hasLevel) {
    size_ += computeUInt32Size(14, self.level);
  }
  if (self.hasMatchId) {
    size_ += computeUInt32Size(15, self.matchId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CItemDropEvent*) parseFromData:(NSData*) data {
  return (CItemDropEvent*)[[[CItemDropEvent builder] mergeFromData:data] build];
}
+ (CItemDropEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CItemDropEvent*)[[[CItemDropEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CItemDropEvent*) parseFromInputStream:(NSInputStream*) input {
  return (CItemDropEvent*)[[[CItemDropEvent builder] mergeFromInputStream:input] build];
}
+ (CItemDropEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CItemDropEvent*)[[[CItemDropEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CItemDropEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CItemDropEvent*)[[[CItemDropEvent builder] mergeFromCodedInputStream:input] build];
}
+ (CItemDropEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CItemDropEvent*)[[[CItemDropEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CItemDropEvent_Builder*) builder {
  return [[[CItemDropEvent_Builder alloc] init] autorelease];
}
+ (CItemDropEvent_Builder*) builderWithPrototype:(CItemDropEvent*) prototype {
  return [[CItemDropEvent builder] mergeFrom:prototype];
}
- (CItemDropEvent_Builder*) builder {
  return [CItemDropEvent builder];
}
- (CItemDropEvent_Builder*) toBuilder {
  return [CItemDropEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasTimeStamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeStamp", [NSNumber numberWithInt:self.timeStamp]];
  }
  if (self.hasDefIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defIndex", [NSNumber numberWithInt:self.defIndex]];
  }
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", [NSNumber numberWithLongLong:self.itemId]];
  }
  if (self.hasGamesPlayedSinceLastDrop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gamesPlayedSinceLastDrop", [NSNumber numberWithInt:self.gamesPlayedSinceLastDrop]];
  }
  if (self.hasTimePlayedSinceLastDrop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timePlayedSinceLastDrop", [NSNumber numberWithInt:self.timePlayedSinceLastDrop]];
  }
  if (self.hasDropBonus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dropBonus", [NSNumber numberWithFloat:self.dropBonus]];
  }
  if (self.hasRarity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rarity", [NSNumber numberWithInt:self.rarity]];
  }
  if (self.hasCurrentScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentScore", [NSNumber numberWithInt:self.currentScore]];
  }
  if (self.hasNextDropAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextDropAt", [NSNumber numberWithInt:self.nextDropAt]];
  }
  if (self.hasIsCrate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isCrate", [NSNumber numberWithBool:self.isCrate]];
  }
  if (self.hasIsLevelReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isLevelReward", [NSNumber numberWithBool:self.isLevelReward]];
  }
  if (self.hasXp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xp", [NSNumber numberWithInt:self.xp]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInt:self.level]];
  }
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CItemDropEvent class]]) {
    return NO;
  }
  CItemDropEvent *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasTimeStamp == otherMessage.hasTimeStamp &&
      (!self.hasTimeStamp || self.timeStamp == otherMessage.timeStamp) &&
      self.hasDefIndex == otherMessage.hasDefIndex &&
      (!self.hasDefIndex || self.defIndex == otherMessage.defIndex) &&
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || self.itemId == otherMessage.itemId) &&
      self.hasGamesPlayedSinceLastDrop == otherMessage.hasGamesPlayedSinceLastDrop &&
      (!self.hasGamesPlayedSinceLastDrop || self.gamesPlayedSinceLastDrop == otherMessage.gamesPlayedSinceLastDrop) &&
      self.hasTimePlayedSinceLastDrop == otherMessage.hasTimePlayedSinceLastDrop &&
      (!self.hasTimePlayedSinceLastDrop || self.timePlayedSinceLastDrop == otherMessage.timePlayedSinceLastDrop) &&
      self.hasDropBonus == otherMessage.hasDropBonus &&
      (!self.hasDropBonus || self.dropBonus == otherMessage.dropBonus) &&
      self.hasRarity == otherMessage.hasRarity &&
      (!self.hasRarity || self.rarity == otherMessage.rarity) &&
      self.hasCurrentScore == otherMessage.hasCurrentScore &&
      (!self.hasCurrentScore || self.currentScore == otherMessage.currentScore) &&
      self.hasNextDropAt == otherMessage.hasNextDropAt &&
      (!self.hasNextDropAt || self.nextDropAt == otherMessage.nextDropAt) &&
      self.hasIsCrate == otherMessage.hasIsCrate &&
      (!self.hasIsCrate || self.isCrate == otherMessage.isCrate) &&
      self.hasIsLevelReward == otherMessage.hasIsLevelReward &&
      (!self.hasIsLevelReward || self.isLevelReward == otherMessage.isLevelReward) &&
      self.hasXp == otherMessage.hasXp &&
      (!self.hasXp || self.xp == otherMessage.xp) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasTimeStamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeStamp] hash];
  }
  if (self.hasDefIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.defIndex] hash];
  }
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.itemId] hash];
  }
  if (self.hasGamesPlayedSinceLastDrop) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gamesPlayedSinceLastDrop] hash];
  }
  if (self.hasTimePlayedSinceLastDrop) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timePlayedSinceLastDrop] hash];
  }
  if (self.hasDropBonus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.dropBonus] hash];
  }
  if (self.hasRarity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rarity] hash];
  }
  if (self.hasCurrentScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.currentScore] hash];
  }
  if (self.hasNextDropAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.nextDropAt] hash];
  }
  if (self.hasIsCrate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isCrate] hash];
  }
  if (self.hasIsLevelReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isLevelReward] hash];
  }
  if (self.hasXp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.xp] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.level] hash];
  }
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CItemDropEvent_Builder()
@property (retain) CItemDropEvent* _builderResult;
@end

@implementation CItemDropEvent_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CItemDropEvent alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CItemDropEvent_Builder*) clear {
  _builderResult = [[[CItemDropEvent alloc] init] autorelease];
  return self;
}
- (CItemDropEvent_Builder*) clone {
  return [CItemDropEvent builderWithPrototype:_builderResult];
}
- (CItemDropEvent*) defaultInstance {
  return [CItemDropEvent defaultInstance];
}
- (CItemDropEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CItemDropEvent*) buildPartial {
  CItemDropEvent* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CItemDropEvent_Builder*) mergeFrom:(CItemDropEvent*) other {
  if (other == [CItemDropEvent defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasTimeStamp) {
    [self setTimeStamp:other.timeStamp];
  }
  if (other.hasDefIndex) {
    [self setDefIndex:other.defIndex];
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasGamesPlayedSinceLastDrop) {
    [self setGamesPlayedSinceLastDrop:other.gamesPlayedSinceLastDrop];
  }
  if (other.hasTimePlayedSinceLastDrop) {
    [self setTimePlayedSinceLastDrop:other.timePlayedSinceLastDrop];
  }
  if (other.hasDropBonus) {
    [self setDropBonus:other.dropBonus];
  }
  if (other.hasRarity) {
    [self setRarity:other.rarity];
  }
  if (other.hasCurrentScore) {
    [self setCurrentScore:other.currentScore];
  }
  if (other.hasNextDropAt) {
    [self setNextDropAt:other.nextDropAt];
  }
  if (other.hasIsCrate) {
    [self setIsCrate:other.isCrate];
  }
  if (other.hasIsLevelReward) {
    [self setIsLevelReward:other.isLevelReward];
  }
  if (other.hasXp) {
    [self setXp:other.xp];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CItemDropEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CItemDropEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setTimeStamp:[input readUInt32]];
        break;
      }
      case 24: {
        [self setDefIndex:[input readUInt32]];
        break;
      }
      case 32: {
        [self setItemId:[input readUInt64]];
        break;
      }
      case 40: {
        [self setGamesPlayedSinceLastDrop:[input readUInt32]];
        break;
      }
      case 48: {
        [self setTimePlayedSinceLastDrop:[input readUInt32]];
        break;
      }
      case 61: {
        [self setDropBonus:[input readFloat]];
        break;
      }
      case 64: {
        [self setRarity:[input readUInt32]];
        break;
      }
      case 72: {
        [self setCurrentScore:[input readUInt32]];
        break;
      }
      case 80: {
        [self setNextDropAt:[input readUInt32]];
        break;
      }
      case 88: {
        [self setIsCrate:[input readBool]];
        break;
      }
      case 96: {
        [self setIsLevelReward:[input readBool]];
        break;
      }
      case 104: {
        [self setXp:[input readUInt32]];
        break;
      }
      case 112: {
        [self setLevel:[input readUInt32]];
        break;
      }
      case 120: {
        [self setMatchId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CItemDropEvent_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CItemDropEvent_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasTimeStamp {
  return _builderResult.hasTimeStamp;
}
- (uint32_t) timeStamp {
  return _builderResult.timeStamp;
}
- (CItemDropEvent_Builder*) setTimeStamp:(uint32_t) value {
  _builderResult.hasTimeStamp = YES;
  _builderResult.timeStamp = value;
  return self;
}
- (CItemDropEvent_Builder*) clearTimeStamp {
  _builderResult.hasTimeStamp = NO;
  _builderResult.timeStamp = 0;
  return self;
}
- (BOOL) hasDefIndex {
  return _builderResult.hasDefIndex;
}
- (uint32_t) defIndex {
  return _builderResult.defIndex;
}
- (CItemDropEvent_Builder*) setDefIndex:(uint32_t) value {
  _builderResult.hasDefIndex = YES;
  _builderResult.defIndex = value;
  return self;
}
- (CItemDropEvent_Builder*) clearDefIndex {
  _builderResult.hasDefIndex = NO;
  _builderResult.defIndex = 0;
  return self;
}
- (BOOL) hasItemId {
  return _builderResult.hasItemId;
}
- (uint64_t) itemId {
  return _builderResult.itemId;
}
- (CItemDropEvent_Builder*) setItemId:(uint64_t) value {
  _builderResult.hasItemId = YES;
  _builderResult.itemId = value;
  return self;
}
- (CItemDropEvent_Builder*) clearItemId {
  _builderResult.hasItemId = NO;
  _builderResult.itemId = 0L;
  return self;
}
- (BOOL) hasGamesPlayedSinceLastDrop {
  return _builderResult.hasGamesPlayedSinceLastDrop;
}
- (uint32_t) gamesPlayedSinceLastDrop {
  return _builderResult.gamesPlayedSinceLastDrop;
}
- (CItemDropEvent_Builder*) setGamesPlayedSinceLastDrop:(uint32_t) value {
  _builderResult.hasGamesPlayedSinceLastDrop = YES;
  _builderResult.gamesPlayedSinceLastDrop = value;
  return self;
}
- (CItemDropEvent_Builder*) clearGamesPlayedSinceLastDrop {
  _builderResult.hasGamesPlayedSinceLastDrop = NO;
  _builderResult.gamesPlayedSinceLastDrop = 0;
  return self;
}
- (BOOL) hasTimePlayedSinceLastDrop {
  return _builderResult.hasTimePlayedSinceLastDrop;
}
- (uint32_t) timePlayedSinceLastDrop {
  return _builderResult.timePlayedSinceLastDrop;
}
- (CItemDropEvent_Builder*) setTimePlayedSinceLastDrop:(uint32_t) value {
  _builderResult.hasTimePlayedSinceLastDrop = YES;
  _builderResult.timePlayedSinceLastDrop = value;
  return self;
}
- (CItemDropEvent_Builder*) clearTimePlayedSinceLastDrop {
  _builderResult.hasTimePlayedSinceLastDrop = NO;
  _builderResult.timePlayedSinceLastDrop = 0;
  return self;
}
- (BOOL) hasDropBonus {
  return _builderResult.hasDropBonus;
}
- (Float32) dropBonus {
  return _builderResult.dropBonus;
}
- (CItemDropEvent_Builder*) setDropBonus:(Float32) value {
  _builderResult.hasDropBonus = YES;
  _builderResult.dropBonus = value;
  return self;
}
- (CItemDropEvent_Builder*) clearDropBonus {
  _builderResult.hasDropBonus = NO;
  _builderResult.dropBonus = 0;
  return self;
}
- (BOOL) hasRarity {
  return _builderResult.hasRarity;
}
- (uint32_t) rarity {
  return _builderResult.rarity;
}
- (CItemDropEvent_Builder*) setRarity:(uint32_t) value {
  _builderResult.hasRarity = YES;
  _builderResult.rarity = value;
  return self;
}
- (CItemDropEvent_Builder*) clearRarity {
  _builderResult.hasRarity = NO;
  _builderResult.rarity = 0;
  return self;
}
- (BOOL) hasCurrentScore {
  return _builderResult.hasCurrentScore;
}
- (uint32_t) currentScore {
  return _builderResult.currentScore;
}
- (CItemDropEvent_Builder*) setCurrentScore:(uint32_t) value {
  _builderResult.hasCurrentScore = YES;
  _builderResult.currentScore = value;
  return self;
}
- (CItemDropEvent_Builder*) clearCurrentScore {
  _builderResult.hasCurrentScore = NO;
  _builderResult.currentScore = 0;
  return self;
}
- (BOOL) hasNextDropAt {
  return _builderResult.hasNextDropAt;
}
- (uint32_t) nextDropAt {
  return _builderResult.nextDropAt;
}
- (CItemDropEvent_Builder*) setNextDropAt:(uint32_t) value {
  _builderResult.hasNextDropAt = YES;
  _builderResult.nextDropAt = value;
  return self;
}
- (CItemDropEvent_Builder*) clearNextDropAt {
  _builderResult.hasNextDropAt = NO;
  _builderResult.nextDropAt = 0;
  return self;
}
- (BOOL) hasIsCrate {
  return _builderResult.hasIsCrate;
}
- (BOOL) isCrate {
  return _builderResult.isCrate;
}
- (CItemDropEvent_Builder*) setIsCrate:(BOOL) value {
  _builderResult.hasIsCrate = YES;
  _builderResult.isCrate = value;
  return self;
}
- (CItemDropEvent_Builder*) clearIsCrate {
  _builderResult.hasIsCrate = NO;
  _builderResult.isCrate = NO;
  return self;
}
- (BOOL) hasIsLevelReward {
  return _builderResult.hasIsLevelReward;
}
- (BOOL) isLevelReward {
  return _builderResult.isLevelReward;
}
- (CItemDropEvent_Builder*) setIsLevelReward:(BOOL) value {
  _builderResult.hasIsLevelReward = YES;
  _builderResult.isLevelReward = value;
  return self;
}
- (CItemDropEvent_Builder*) clearIsLevelReward {
  _builderResult.hasIsLevelReward = NO;
  _builderResult.isLevelReward = NO;
  return self;
}
- (BOOL) hasXp {
  return _builderResult.hasXp;
}
- (uint32_t) xp {
  return _builderResult.xp;
}
- (CItemDropEvent_Builder*) setXp:(uint32_t) value {
  _builderResult.hasXp = YES;
  _builderResult.xp = value;
  return self;
}
- (CItemDropEvent_Builder*) clearXp {
  _builderResult.hasXp = NO;
  _builderResult.xp = 0;
  return self;
}
- (BOOL) hasLevel {
  return _builderResult.hasLevel;
}
- (uint32_t) level {
  return _builderResult.level;
}
- (CItemDropEvent_Builder*) setLevel:(uint32_t) value {
  _builderResult.hasLevel = YES;
  _builderResult.level = value;
  return self;
}
- (CItemDropEvent_Builder*) clearLevel {
  _builderResult.hasLevel = NO;
  _builderResult.level = 0;
  return self;
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CItemDropEvent_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CItemDropEvent_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
@end

@interface CXPGainEvent ()
@property uint32_t matchId;
@property uint32_t accountId;
@property uint32_t timeStamp;
@property uint32_t duration;
@property uint32_t baseXp;
@property uint32_t timeRewardXp;
@property uint32_t dropRateBonusXp;
@property uint32_t finalXp;
@property Float32 dropRateBonus;
@property BOOL leveledUp;
@end

@implementation CXPGainEvent

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasTimeStamp {
  return !!hasTimeStamp_;
}
- (void) setHasTimeStamp:(BOOL) value_ {
  hasTimeStamp_ = !!value_;
}
@synthesize timeStamp;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value_ {
  hasDuration_ = !!value_;
}
@synthesize duration;
- (BOOL) hasBaseXp {
  return !!hasBaseXp_;
}
- (void) setHasBaseXp:(BOOL) value_ {
  hasBaseXp_ = !!value_;
}
@synthesize baseXp;
- (BOOL) hasTimeRewardXp {
  return !!hasTimeRewardXp_;
}
- (void) setHasTimeRewardXp:(BOOL) value_ {
  hasTimeRewardXp_ = !!value_;
}
@synthesize timeRewardXp;
- (BOOL) hasDropRateBonusXp {
  return !!hasDropRateBonusXp_;
}
- (void) setHasDropRateBonusXp:(BOOL) value_ {
  hasDropRateBonusXp_ = !!value_;
}
@synthesize dropRateBonusXp;
- (BOOL) hasFinalXp {
  return !!hasFinalXp_;
}
- (void) setHasFinalXp:(BOOL) value_ {
  hasFinalXp_ = !!value_;
}
@synthesize finalXp;
- (BOOL) hasDropRateBonus {
  return !!hasDropRateBonus_;
}
- (void) setHasDropRateBonus:(BOOL) value_ {
  hasDropRateBonus_ = !!value_;
}
@synthesize dropRateBonus;
- (BOOL) hasLeveledUp {
  return !!hasLeveledUp_;
}
- (void) setHasLeveledUp:(BOOL) value_ {
  hasLeveledUp_ = !!value_;
}
- (BOOL) leveledUp {
  return !!leveledUp_;
}
- (void) setLeveledUp:(BOOL) value_ {
  leveledUp_ = !!value_;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
    self.accountId = 0;
    self.timeStamp = 0;
    self.duration = 0;
    self.baseXp = 0;
    self.timeRewardXp = 0;
    self.dropRateBonusXp = 0;
    self.finalXp = 0;
    self.dropRateBonus = 0;
    self.leveledUp = NO;
  }
  return self;
}
static CXPGainEvent* defaultCXPGainEventInstance = nil;
+ (void) initialize {
  if (self == [CXPGainEvent class]) {
    defaultCXPGainEventInstance = [[CXPGainEvent alloc] init];
  }
}
+ (CXPGainEvent*) defaultInstance {
  return defaultCXPGainEventInstance;
}
- (CXPGainEvent*) defaultInstance {
  return defaultCXPGainEventInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  if (self.hasAccountId) {
    [output writeUInt32:2 value:self.accountId];
  }
  if (self.hasTimeStamp) {
    [output writeUInt32:3 value:self.timeStamp];
  }
  if (self.hasDuration) {
    [output writeUInt32:4 value:self.duration];
  }
  if (self.hasBaseXp) {
    [output writeUInt32:5 value:self.baseXp];
  }
  if (self.hasTimeRewardXp) {
    [output writeUInt32:6 value:self.timeRewardXp];
  }
  if (self.hasDropRateBonusXp) {
    [output writeUInt32:7 value:self.dropRateBonusXp];
  }
  if (self.hasFinalXp) {
    [output writeUInt32:8 value:self.finalXp];
  }
  if (self.hasDropRateBonus) {
    [output writeFloat:9 value:self.dropRateBonus];
  }
  if (self.hasLeveledUp) {
    [output writeBool:10 value:self.leveledUp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  if (self.hasAccountId) {
    size_ += computeUInt32Size(2, self.accountId);
  }
  if (self.hasTimeStamp) {
    size_ += computeUInt32Size(3, self.timeStamp);
  }
  if (self.hasDuration) {
    size_ += computeUInt32Size(4, self.duration);
  }
  if (self.hasBaseXp) {
    size_ += computeUInt32Size(5, self.baseXp);
  }
  if (self.hasTimeRewardXp) {
    size_ += computeUInt32Size(6, self.timeRewardXp);
  }
  if (self.hasDropRateBonusXp) {
    size_ += computeUInt32Size(7, self.dropRateBonusXp);
  }
  if (self.hasFinalXp) {
    size_ += computeUInt32Size(8, self.finalXp);
  }
  if (self.hasDropRateBonus) {
    size_ += computeFloatSize(9, self.dropRateBonus);
  }
  if (self.hasLeveledUp) {
    size_ += computeBoolSize(10, self.leveledUp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CXPGainEvent*) parseFromData:(NSData*) data {
  return (CXPGainEvent*)[[[CXPGainEvent builder] mergeFromData:data] build];
}
+ (CXPGainEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CXPGainEvent*)[[[CXPGainEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CXPGainEvent*) parseFromInputStream:(NSInputStream*) input {
  return (CXPGainEvent*)[[[CXPGainEvent builder] mergeFromInputStream:input] build];
}
+ (CXPGainEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CXPGainEvent*)[[[CXPGainEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CXPGainEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CXPGainEvent*)[[[CXPGainEvent builder] mergeFromCodedInputStream:input] build];
}
+ (CXPGainEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CXPGainEvent*)[[[CXPGainEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CXPGainEvent_Builder*) builder {
  return [[[CXPGainEvent_Builder alloc] init] autorelease];
}
+ (CXPGainEvent_Builder*) builderWithPrototype:(CXPGainEvent*) prototype {
  return [[CXPGainEvent builder] mergeFrom:prototype];
}
- (CXPGainEvent_Builder*) builder {
  return [CXPGainEvent builder];
}
- (CXPGainEvent_Builder*) toBuilder {
  return [CXPGainEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasTimeStamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeStamp", [NSNumber numberWithInt:self.timeStamp]];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithInt:self.duration]];
  }
  if (self.hasBaseXp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseXp", [NSNumber numberWithInt:self.baseXp]];
  }
  if (self.hasTimeRewardXp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeRewardXp", [NSNumber numberWithInt:self.timeRewardXp]];
  }
  if (self.hasDropRateBonusXp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dropRateBonusXp", [NSNumber numberWithInt:self.dropRateBonusXp]];
  }
  if (self.hasFinalXp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finalXp", [NSNumber numberWithInt:self.finalXp]];
  }
  if (self.hasDropRateBonus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dropRateBonus", [NSNumber numberWithFloat:self.dropRateBonus]];
  }
  if (self.hasLeveledUp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leveledUp", [NSNumber numberWithBool:self.leveledUp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CXPGainEvent class]]) {
    return NO;
  }
  CXPGainEvent *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasTimeStamp == otherMessage.hasTimeStamp &&
      (!self.hasTimeStamp || self.timeStamp == otherMessage.timeStamp) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      self.hasBaseXp == otherMessage.hasBaseXp &&
      (!self.hasBaseXp || self.baseXp == otherMessage.baseXp) &&
      self.hasTimeRewardXp == otherMessage.hasTimeRewardXp &&
      (!self.hasTimeRewardXp || self.timeRewardXp == otherMessage.timeRewardXp) &&
      self.hasDropRateBonusXp == otherMessage.hasDropRateBonusXp &&
      (!self.hasDropRateBonusXp || self.dropRateBonusXp == otherMessage.dropRateBonusXp) &&
      self.hasFinalXp == otherMessage.hasFinalXp &&
      (!self.hasFinalXp || self.finalXp == otherMessage.finalXp) &&
      self.hasDropRateBonus == otherMessage.hasDropRateBonus &&
      (!self.hasDropRateBonus || self.dropRateBonus == otherMessage.dropRateBonus) &&
      self.hasLeveledUp == otherMessage.hasLeveledUp &&
      (!self.hasLeveledUp || self.leveledUp == otherMessage.leveledUp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasTimeStamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeStamp] hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.duration] hash];
  }
  if (self.hasBaseXp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.baseXp] hash];
  }
  if (self.hasTimeRewardXp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeRewardXp] hash];
  }
  if (self.hasDropRateBonusXp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.dropRateBonusXp] hash];
  }
  if (self.hasFinalXp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.finalXp] hash];
  }
  if (self.hasDropRateBonus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.dropRateBonus] hash];
  }
  if (self.hasLeveledUp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.leveledUp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CXPGainEvent_Builder()
@property (retain) CXPGainEvent* _builderResult;
@end

@implementation CXPGainEvent_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CXPGainEvent alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CXPGainEvent_Builder*) clear {
  _builderResult = [[[CXPGainEvent alloc] init] autorelease];
  return self;
}
- (CXPGainEvent_Builder*) clone {
  return [CXPGainEvent builderWithPrototype:_builderResult];
}
- (CXPGainEvent*) defaultInstance {
  return [CXPGainEvent defaultInstance];
}
- (CXPGainEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CXPGainEvent*) buildPartial {
  CXPGainEvent* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CXPGainEvent_Builder*) mergeFrom:(CXPGainEvent*) other {
  if (other == [CXPGainEvent defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasTimeStamp) {
    [self setTimeStamp:other.timeStamp];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasBaseXp) {
    [self setBaseXp:other.baseXp];
  }
  if (other.hasTimeRewardXp) {
    [self setTimeRewardXp:other.timeRewardXp];
  }
  if (other.hasDropRateBonusXp) {
    [self setDropRateBonusXp:other.dropRateBonusXp];
  }
  if (other.hasFinalXp) {
    [self setFinalXp:other.finalXp];
  }
  if (other.hasDropRateBonus) {
    [self setDropRateBonus:other.dropRateBonus];
  }
  if (other.hasLeveledUp) {
    [self setLeveledUp:other.leveledUp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CXPGainEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CXPGainEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTimeStamp:[input readUInt32]];
        break;
      }
      case 32: {
        [self setDuration:[input readUInt32]];
        break;
      }
      case 40: {
        [self setBaseXp:[input readUInt32]];
        break;
      }
      case 48: {
        [self setTimeRewardXp:[input readUInt32]];
        break;
      }
      case 56: {
        [self setDropRateBonusXp:[input readUInt32]];
        break;
      }
      case 64: {
        [self setFinalXp:[input readUInt32]];
        break;
      }
      case 77: {
        [self setDropRateBonus:[input readFloat]];
        break;
      }
      case 80: {
        [self setLeveledUp:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CXPGainEvent_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CXPGainEvent_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CXPGainEvent_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CXPGainEvent_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasTimeStamp {
  return _builderResult.hasTimeStamp;
}
- (uint32_t) timeStamp {
  return _builderResult.timeStamp;
}
- (CXPGainEvent_Builder*) setTimeStamp:(uint32_t) value {
  _builderResult.hasTimeStamp = YES;
  _builderResult.timeStamp = value;
  return self;
}
- (CXPGainEvent_Builder*) clearTimeStamp {
  _builderResult.hasTimeStamp = NO;
  _builderResult.timeStamp = 0;
  return self;
}
- (BOOL) hasDuration {
  return _builderResult.hasDuration;
}
- (uint32_t) duration {
  return _builderResult.duration;
}
- (CXPGainEvent_Builder*) setDuration:(uint32_t) value {
  _builderResult.hasDuration = YES;
  _builderResult.duration = value;
  return self;
}
- (CXPGainEvent_Builder*) clearDuration {
  _builderResult.hasDuration = NO;
  _builderResult.duration = 0;
  return self;
}
- (BOOL) hasBaseXp {
  return _builderResult.hasBaseXp;
}
- (uint32_t) baseXp {
  return _builderResult.baseXp;
}
- (CXPGainEvent_Builder*) setBaseXp:(uint32_t) value {
  _builderResult.hasBaseXp = YES;
  _builderResult.baseXp = value;
  return self;
}
- (CXPGainEvent_Builder*) clearBaseXp {
  _builderResult.hasBaseXp = NO;
  _builderResult.baseXp = 0;
  return self;
}
- (BOOL) hasTimeRewardXp {
  return _builderResult.hasTimeRewardXp;
}
- (uint32_t) timeRewardXp {
  return _builderResult.timeRewardXp;
}
- (CXPGainEvent_Builder*) setTimeRewardXp:(uint32_t) value {
  _builderResult.hasTimeRewardXp = YES;
  _builderResult.timeRewardXp = value;
  return self;
}
- (CXPGainEvent_Builder*) clearTimeRewardXp {
  _builderResult.hasTimeRewardXp = NO;
  _builderResult.timeRewardXp = 0;
  return self;
}
- (BOOL) hasDropRateBonusXp {
  return _builderResult.hasDropRateBonusXp;
}
- (uint32_t) dropRateBonusXp {
  return _builderResult.dropRateBonusXp;
}
- (CXPGainEvent_Builder*) setDropRateBonusXp:(uint32_t) value {
  _builderResult.hasDropRateBonusXp = YES;
  _builderResult.dropRateBonusXp = value;
  return self;
}
- (CXPGainEvent_Builder*) clearDropRateBonusXp {
  _builderResult.hasDropRateBonusXp = NO;
  _builderResult.dropRateBonusXp = 0;
  return self;
}
- (BOOL) hasFinalXp {
  return _builderResult.hasFinalXp;
}
- (uint32_t) finalXp {
  return _builderResult.finalXp;
}
- (CXPGainEvent_Builder*) setFinalXp:(uint32_t) value {
  _builderResult.hasFinalXp = YES;
  _builderResult.finalXp = value;
  return self;
}
- (CXPGainEvent_Builder*) clearFinalXp {
  _builderResult.hasFinalXp = NO;
  _builderResult.finalXp = 0;
  return self;
}
- (BOOL) hasDropRateBonus {
  return _builderResult.hasDropRateBonus;
}
- (Float32) dropRateBonus {
  return _builderResult.dropRateBonus;
}
- (CXPGainEvent_Builder*) setDropRateBonus:(Float32) value {
  _builderResult.hasDropRateBonus = YES;
  _builderResult.dropRateBonus = value;
  return self;
}
- (CXPGainEvent_Builder*) clearDropRateBonus {
  _builderResult.hasDropRateBonus = NO;
  _builderResult.dropRateBonus = 0;
  return self;
}
- (BOOL) hasLeveledUp {
  return _builderResult.hasLeveledUp;
}
- (BOOL) leveledUp {
  return _builderResult.leveledUp;
}
- (CXPGainEvent_Builder*) setLeveledUp:(BOOL) value {
  _builderResult.hasLeveledUp = YES;
  _builderResult.leveledUp = value;
  return self;
}
- (CXPGainEvent_Builder*) clearLeveledUp {
  _builderResult.hasLeveledUp = NO;
  _builderResult.leveledUp = NO;
  return self;
}
@end

@interface CLowPriPenalty ()
@property uint32_t matchId;
@property uint32_t accountId;
@property uint32_t timeStamp;
@property uint32_t gamesSinceReportPenalty;
@property uint32_t pendingInGameReports;
@property uint32_t pendingOutOfGameReports;
@property uint32_t pendingDetectedReports;
@property uint32_t reportPenaltyCount;
@property uint32_t lastPenaltyDate;
@property uint32_t lastAbandonDate;
@property uint32_t abandonPenaltyCount;
@property uint32_t completedGameStreak;
@property uint32_t abandonTimeGiven;
@property uint32_t reportTimeGiven;
@property uint32_t rank;
@end

@implementation CLowPriPenalty

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasTimeStamp {
  return !!hasTimeStamp_;
}
- (void) setHasTimeStamp:(BOOL) value_ {
  hasTimeStamp_ = !!value_;
}
@synthesize timeStamp;
- (BOOL) hasGamesSinceReportPenalty {
  return !!hasGamesSinceReportPenalty_;
}
- (void) setHasGamesSinceReportPenalty:(BOOL) value_ {
  hasGamesSinceReportPenalty_ = !!value_;
}
@synthesize gamesSinceReportPenalty;
- (BOOL) hasPendingInGameReports {
  return !!hasPendingInGameReports_;
}
- (void) setHasPendingInGameReports:(BOOL) value_ {
  hasPendingInGameReports_ = !!value_;
}
@synthesize pendingInGameReports;
- (BOOL) hasPendingOutOfGameReports {
  return !!hasPendingOutOfGameReports_;
}
- (void) setHasPendingOutOfGameReports:(BOOL) value_ {
  hasPendingOutOfGameReports_ = !!value_;
}
@synthesize pendingOutOfGameReports;
- (BOOL) hasPendingDetectedReports {
  return !!hasPendingDetectedReports_;
}
- (void) setHasPendingDetectedReports:(BOOL) value_ {
  hasPendingDetectedReports_ = !!value_;
}
@synthesize pendingDetectedReports;
- (BOOL) hasReportPenaltyCount {
  return !!hasReportPenaltyCount_;
}
- (void) setHasReportPenaltyCount:(BOOL) value_ {
  hasReportPenaltyCount_ = !!value_;
}
@synthesize reportPenaltyCount;
- (BOOL) hasLastPenaltyDate {
  return !!hasLastPenaltyDate_;
}
- (void) setHasLastPenaltyDate:(BOOL) value_ {
  hasLastPenaltyDate_ = !!value_;
}
@synthesize lastPenaltyDate;
- (BOOL) hasLastAbandonDate {
  return !!hasLastAbandonDate_;
}
- (void) setHasLastAbandonDate:(BOOL) value_ {
  hasLastAbandonDate_ = !!value_;
}
@synthesize lastAbandonDate;
- (BOOL) hasAbandonPenaltyCount {
  return !!hasAbandonPenaltyCount_;
}
- (void) setHasAbandonPenaltyCount:(BOOL) value_ {
  hasAbandonPenaltyCount_ = !!value_;
}
@synthesize abandonPenaltyCount;
- (BOOL) hasCompletedGameStreak {
  return !!hasCompletedGameStreak_;
}
- (void) setHasCompletedGameStreak:(BOOL) value_ {
  hasCompletedGameStreak_ = !!value_;
}
@synthesize completedGameStreak;
- (BOOL) hasAbandonTimeGiven {
  return !!hasAbandonTimeGiven_;
}
- (void) setHasAbandonTimeGiven:(BOOL) value_ {
  hasAbandonTimeGiven_ = !!value_;
}
@synthesize abandonTimeGiven;
- (BOOL) hasReportTimeGiven {
  return !!hasReportTimeGiven_;
}
- (void) setHasReportTimeGiven:(BOOL) value_ {
  hasReportTimeGiven_ = !!value_;
}
@synthesize reportTimeGiven;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value_ {
  hasRank_ = !!value_;
}
@synthesize rank;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
    self.accountId = 0;
    self.timeStamp = 0;
    self.gamesSinceReportPenalty = 0;
    self.pendingInGameReports = 0;
    self.pendingOutOfGameReports = 0;
    self.pendingDetectedReports = 0;
    self.reportPenaltyCount = 0;
    self.lastPenaltyDate = 0;
    self.lastAbandonDate = 0;
    self.abandonPenaltyCount = 0;
    self.completedGameStreak = 0;
    self.abandonTimeGiven = 0;
    self.reportTimeGiven = 0;
    self.rank = 0;
  }
  return self;
}
static CLowPriPenalty* defaultCLowPriPenaltyInstance = nil;
+ (void) initialize {
  if (self == [CLowPriPenalty class]) {
    defaultCLowPriPenaltyInstance = [[CLowPriPenalty alloc] init];
  }
}
+ (CLowPriPenalty*) defaultInstance {
  return defaultCLowPriPenaltyInstance;
}
- (CLowPriPenalty*) defaultInstance {
  return defaultCLowPriPenaltyInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  if (self.hasAccountId) {
    [output writeUInt32:2 value:self.accountId];
  }
  if (self.hasTimeStamp) {
    [output writeUInt32:3 value:self.timeStamp];
  }
  if (self.hasGamesSinceReportPenalty) {
    [output writeUInt32:4 value:self.gamesSinceReportPenalty];
  }
  if (self.hasPendingInGameReports) {
    [output writeUInt32:5 value:self.pendingInGameReports];
  }
  if (self.hasPendingOutOfGameReports) {
    [output writeUInt32:6 value:self.pendingOutOfGameReports];
  }
  if (self.hasPendingDetectedReports) {
    [output writeUInt32:7 value:self.pendingDetectedReports];
  }
  if (self.hasReportPenaltyCount) {
    [output writeUInt32:8 value:self.reportPenaltyCount];
  }
  if (self.hasLastPenaltyDate) {
    [output writeUInt32:9 value:self.lastPenaltyDate];
  }
  if (self.hasLastAbandonDate) {
    [output writeUInt32:10 value:self.lastAbandonDate];
  }
  if (self.hasAbandonPenaltyCount) {
    [output writeUInt32:11 value:self.abandonPenaltyCount];
  }
  if (self.hasCompletedGameStreak) {
    [output writeUInt32:12 value:self.completedGameStreak];
  }
  if (self.hasAbandonTimeGiven) {
    [output writeUInt32:13 value:self.abandonTimeGiven];
  }
  if (self.hasReportTimeGiven) {
    [output writeUInt32:14 value:self.reportTimeGiven];
  }
  if (self.hasRank) {
    [output writeUInt32:15 value:self.rank];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  if (self.hasAccountId) {
    size_ += computeUInt32Size(2, self.accountId);
  }
  if (self.hasTimeStamp) {
    size_ += computeUInt32Size(3, self.timeStamp);
  }
  if (self.hasGamesSinceReportPenalty) {
    size_ += computeUInt32Size(4, self.gamesSinceReportPenalty);
  }
  if (self.hasPendingInGameReports) {
    size_ += computeUInt32Size(5, self.pendingInGameReports);
  }
  if (self.hasPendingOutOfGameReports) {
    size_ += computeUInt32Size(6, self.pendingOutOfGameReports);
  }
  if (self.hasPendingDetectedReports) {
    size_ += computeUInt32Size(7, self.pendingDetectedReports);
  }
  if (self.hasReportPenaltyCount) {
    size_ += computeUInt32Size(8, self.reportPenaltyCount);
  }
  if (self.hasLastPenaltyDate) {
    size_ += computeUInt32Size(9, self.lastPenaltyDate);
  }
  if (self.hasLastAbandonDate) {
    size_ += computeUInt32Size(10, self.lastAbandonDate);
  }
  if (self.hasAbandonPenaltyCount) {
    size_ += computeUInt32Size(11, self.abandonPenaltyCount);
  }
  if (self.hasCompletedGameStreak) {
    size_ += computeUInt32Size(12, self.completedGameStreak);
  }
  if (self.hasAbandonTimeGiven) {
    size_ += computeUInt32Size(13, self.abandonTimeGiven);
  }
  if (self.hasReportTimeGiven) {
    size_ += computeUInt32Size(14, self.reportTimeGiven);
  }
  if (self.hasRank) {
    size_ += computeUInt32Size(15, self.rank);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CLowPriPenalty*) parseFromData:(NSData*) data {
  return (CLowPriPenalty*)[[[CLowPriPenalty builder] mergeFromData:data] build];
}
+ (CLowPriPenalty*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLowPriPenalty*)[[[CLowPriPenalty builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CLowPriPenalty*) parseFromInputStream:(NSInputStream*) input {
  return (CLowPriPenalty*)[[[CLowPriPenalty builder] mergeFromInputStream:input] build];
}
+ (CLowPriPenalty*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLowPriPenalty*)[[[CLowPriPenalty builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLowPriPenalty*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CLowPriPenalty*)[[[CLowPriPenalty builder] mergeFromCodedInputStream:input] build];
}
+ (CLowPriPenalty*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLowPriPenalty*)[[[CLowPriPenalty builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLowPriPenalty_Builder*) builder {
  return [[[CLowPriPenalty_Builder alloc] init] autorelease];
}
+ (CLowPriPenalty_Builder*) builderWithPrototype:(CLowPriPenalty*) prototype {
  return [[CLowPriPenalty builder] mergeFrom:prototype];
}
- (CLowPriPenalty_Builder*) builder {
  return [CLowPriPenalty builder];
}
- (CLowPriPenalty_Builder*) toBuilder {
  return [CLowPriPenalty builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasTimeStamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeStamp", [NSNumber numberWithInt:self.timeStamp]];
  }
  if (self.hasGamesSinceReportPenalty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gamesSinceReportPenalty", [NSNumber numberWithInt:self.gamesSinceReportPenalty]];
  }
  if (self.hasPendingInGameReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pendingInGameReports", [NSNumber numberWithInt:self.pendingInGameReports]];
  }
  if (self.hasPendingOutOfGameReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pendingOutOfGameReports", [NSNumber numberWithInt:self.pendingOutOfGameReports]];
  }
  if (self.hasPendingDetectedReports) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pendingDetectedReports", [NSNumber numberWithInt:self.pendingDetectedReports]];
  }
  if (self.hasReportPenaltyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reportPenaltyCount", [NSNumber numberWithInt:self.reportPenaltyCount]];
  }
  if (self.hasLastPenaltyDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastPenaltyDate", [NSNumber numberWithInt:self.lastPenaltyDate]];
  }
  if (self.hasLastAbandonDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastAbandonDate", [NSNumber numberWithInt:self.lastAbandonDate]];
  }
  if (self.hasAbandonPenaltyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abandonPenaltyCount", [NSNumber numberWithInt:self.abandonPenaltyCount]];
  }
  if (self.hasCompletedGameStreak) {
    [output appendFormat:@"%@%@: %@\n", indent, @"completedGameStreak", [NSNumber numberWithInt:self.completedGameStreak]];
  }
  if (self.hasAbandonTimeGiven) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abandonTimeGiven", [NSNumber numberWithInt:self.abandonTimeGiven]];
  }
  if (self.hasReportTimeGiven) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reportTimeGiven", [NSNumber numberWithInt:self.reportTimeGiven]];
  }
  if (self.hasRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rank", [NSNumber numberWithInt:self.rank]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CLowPriPenalty class]]) {
    return NO;
  }
  CLowPriPenalty *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasTimeStamp == otherMessage.hasTimeStamp &&
      (!self.hasTimeStamp || self.timeStamp == otherMessage.timeStamp) &&
      self.hasGamesSinceReportPenalty == otherMessage.hasGamesSinceReportPenalty &&
      (!self.hasGamesSinceReportPenalty || self.gamesSinceReportPenalty == otherMessage.gamesSinceReportPenalty) &&
      self.hasPendingInGameReports == otherMessage.hasPendingInGameReports &&
      (!self.hasPendingInGameReports || self.pendingInGameReports == otherMessage.pendingInGameReports) &&
      self.hasPendingOutOfGameReports == otherMessage.hasPendingOutOfGameReports &&
      (!self.hasPendingOutOfGameReports || self.pendingOutOfGameReports == otherMessage.pendingOutOfGameReports) &&
      self.hasPendingDetectedReports == otherMessage.hasPendingDetectedReports &&
      (!self.hasPendingDetectedReports || self.pendingDetectedReports == otherMessage.pendingDetectedReports) &&
      self.hasReportPenaltyCount == otherMessage.hasReportPenaltyCount &&
      (!self.hasReportPenaltyCount || self.reportPenaltyCount == otherMessage.reportPenaltyCount) &&
      self.hasLastPenaltyDate == otherMessage.hasLastPenaltyDate &&
      (!self.hasLastPenaltyDate || self.lastPenaltyDate == otherMessage.lastPenaltyDate) &&
      self.hasLastAbandonDate == otherMessage.hasLastAbandonDate &&
      (!self.hasLastAbandonDate || self.lastAbandonDate == otherMessage.lastAbandonDate) &&
      self.hasAbandonPenaltyCount == otherMessage.hasAbandonPenaltyCount &&
      (!self.hasAbandonPenaltyCount || self.abandonPenaltyCount == otherMessage.abandonPenaltyCount) &&
      self.hasCompletedGameStreak == otherMessage.hasCompletedGameStreak &&
      (!self.hasCompletedGameStreak || self.completedGameStreak == otherMessage.completedGameStreak) &&
      self.hasAbandonTimeGiven == otherMessage.hasAbandonTimeGiven &&
      (!self.hasAbandonTimeGiven || self.abandonTimeGiven == otherMessage.abandonTimeGiven) &&
      self.hasReportTimeGiven == otherMessage.hasReportTimeGiven &&
      (!self.hasReportTimeGiven || self.reportTimeGiven == otherMessage.reportTimeGiven) &&
      self.hasRank == otherMessage.hasRank &&
      (!self.hasRank || self.rank == otherMessage.rank) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasTimeStamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.timeStamp] hash];
  }
  if (self.hasGamesSinceReportPenalty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gamesSinceReportPenalty] hash];
  }
  if (self.hasPendingInGameReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.pendingInGameReports] hash];
  }
  if (self.hasPendingOutOfGameReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.pendingOutOfGameReports] hash];
  }
  if (self.hasPendingDetectedReports) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.pendingDetectedReports] hash];
  }
  if (self.hasReportPenaltyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reportPenaltyCount] hash];
  }
  if (self.hasLastPenaltyDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lastPenaltyDate] hash];
  }
  if (self.hasLastAbandonDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lastAbandonDate] hash];
  }
  if (self.hasAbandonPenaltyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.abandonPenaltyCount] hash];
  }
  if (self.hasCompletedGameStreak) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.completedGameStreak] hash];
  }
  if (self.hasAbandonTimeGiven) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.abandonTimeGiven] hash];
  }
  if (self.hasReportTimeGiven) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reportTimeGiven] hash];
  }
  if (self.hasRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rank] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CLowPriPenalty_Builder()
@property (retain) CLowPriPenalty* _builderResult;
@end

@implementation CLowPriPenalty_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CLowPriPenalty alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CLowPriPenalty_Builder*) clear {
  _builderResult = [[[CLowPriPenalty alloc] init] autorelease];
  return self;
}
- (CLowPriPenalty_Builder*) clone {
  return [CLowPriPenalty builderWithPrototype:_builderResult];
}
- (CLowPriPenalty*) defaultInstance {
  return [CLowPriPenalty defaultInstance];
}
- (CLowPriPenalty*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CLowPriPenalty*) buildPartial {
  CLowPriPenalty* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CLowPriPenalty_Builder*) mergeFrom:(CLowPriPenalty*) other {
  if (other == [CLowPriPenalty defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasTimeStamp) {
    [self setTimeStamp:other.timeStamp];
  }
  if (other.hasGamesSinceReportPenalty) {
    [self setGamesSinceReportPenalty:other.gamesSinceReportPenalty];
  }
  if (other.hasPendingInGameReports) {
    [self setPendingInGameReports:other.pendingInGameReports];
  }
  if (other.hasPendingOutOfGameReports) {
    [self setPendingOutOfGameReports:other.pendingOutOfGameReports];
  }
  if (other.hasPendingDetectedReports) {
    [self setPendingDetectedReports:other.pendingDetectedReports];
  }
  if (other.hasReportPenaltyCount) {
    [self setReportPenaltyCount:other.reportPenaltyCount];
  }
  if (other.hasLastPenaltyDate) {
    [self setLastPenaltyDate:other.lastPenaltyDate];
  }
  if (other.hasLastAbandonDate) {
    [self setLastAbandonDate:other.lastAbandonDate];
  }
  if (other.hasAbandonPenaltyCount) {
    [self setAbandonPenaltyCount:other.abandonPenaltyCount];
  }
  if (other.hasCompletedGameStreak) {
    [self setCompletedGameStreak:other.completedGameStreak];
  }
  if (other.hasAbandonTimeGiven) {
    [self setAbandonTimeGiven:other.abandonTimeGiven];
  }
  if (other.hasReportTimeGiven) {
    [self setReportTimeGiven:other.reportTimeGiven];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CLowPriPenalty_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CLowPriPenalty_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTimeStamp:[input readUInt32]];
        break;
      }
      case 32: {
        [self setGamesSinceReportPenalty:[input readUInt32]];
        break;
      }
      case 40: {
        [self setPendingInGameReports:[input readUInt32]];
        break;
      }
      case 48: {
        [self setPendingOutOfGameReports:[input readUInt32]];
        break;
      }
      case 56: {
        [self setPendingDetectedReports:[input readUInt32]];
        break;
      }
      case 64: {
        [self setReportPenaltyCount:[input readUInt32]];
        break;
      }
      case 72: {
        [self setLastPenaltyDate:[input readUInt32]];
        break;
      }
      case 80: {
        [self setLastAbandonDate:[input readUInt32]];
        break;
      }
      case 88: {
        [self setAbandonPenaltyCount:[input readUInt32]];
        break;
      }
      case 96: {
        [self setCompletedGameStreak:[input readUInt32]];
        break;
      }
      case 104: {
        [self setAbandonTimeGiven:[input readUInt32]];
        break;
      }
      case 112: {
        [self setReportTimeGiven:[input readUInt32]];
        break;
      }
      case 120: {
        [self setRank:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CLowPriPenalty_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CLowPriPenalty_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasTimeStamp {
  return _builderResult.hasTimeStamp;
}
- (uint32_t) timeStamp {
  return _builderResult.timeStamp;
}
- (CLowPriPenalty_Builder*) setTimeStamp:(uint32_t) value {
  _builderResult.hasTimeStamp = YES;
  _builderResult.timeStamp = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearTimeStamp {
  _builderResult.hasTimeStamp = NO;
  _builderResult.timeStamp = 0;
  return self;
}
- (BOOL) hasGamesSinceReportPenalty {
  return _builderResult.hasGamesSinceReportPenalty;
}
- (uint32_t) gamesSinceReportPenalty {
  return _builderResult.gamesSinceReportPenalty;
}
- (CLowPriPenalty_Builder*) setGamesSinceReportPenalty:(uint32_t) value {
  _builderResult.hasGamesSinceReportPenalty = YES;
  _builderResult.gamesSinceReportPenalty = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearGamesSinceReportPenalty {
  _builderResult.hasGamesSinceReportPenalty = NO;
  _builderResult.gamesSinceReportPenalty = 0;
  return self;
}
- (BOOL) hasPendingInGameReports {
  return _builderResult.hasPendingInGameReports;
}
- (uint32_t) pendingInGameReports {
  return _builderResult.pendingInGameReports;
}
- (CLowPriPenalty_Builder*) setPendingInGameReports:(uint32_t) value {
  _builderResult.hasPendingInGameReports = YES;
  _builderResult.pendingInGameReports = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearPendingInGameReports {
  _builderResult.hasPendingInGameReports = NO;
  _builderResult.pendingInGameReports = 0;
  return self;
}
- (BOOL) hasPendingOutOfGameReports {
  return _builderResult.hasPendingOutOfGameReports;
}
- (uint32_t) pendingOutOfGameReports {
  return _builderResult.pendingOutOfGameReports;
}
- (CLowPriPenalty_Builder*) setPendingOutOfGameReports:(uint32_t) value {
  _builderResult.hasPendingOutOfGameReports = YES;
  _builderResult.pendingOutOfGameReports = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearPendingOutOfGameReports {
  _builderResult.hasPendingOutOfGameReports = NO;
  _builderResult.pendingOutOfGameReports = 0;
  return self;
}
- (BOOL) hasPendingDetectedReports {
  return _builderResult.hasPendingDetectedReports;
}
- (uint32_t) pendingDetectedReports {
  return _builderResult.pendingDetectedReports;
}
- (CLowPriPenalty_Builder*) setPendingDetectedReports:(uint32_t) value {
  _builderResult.hasPendingDetectedReports = YES;
  _builderResult.pendingDetectedReports = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearPendingDetectedReports {
  _builderResult.hasPendingDetectedReports = NO;
  _builderResult.pendingDetectedReports = 0;
  return self;
}
- (BOOL) hasReportPenaltyCount {
  return _builderResult.hasReportPenaltyCount;
}
- (uint32_t) reportPenaltyCount {
  return _builderResult.reportPenaltyCount;
}
- (CLowPriPenalty_Builder*) setReportPenaltyCount:(uint32_t) value {
  _builderResult.hasReportPenaltyCount = YES;
  _builderResult.reportPenaltyCount = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearReportPenaltyCount {
  _builderResult.hasReportPenaltyCount = NO;
  _builderResult.reportPenaltyCount = 0;
  return self;
}
- (BOOL) hasLastPenaltyDate {
  return _builderResult.hasLastPenaltyDate;
}
- (uint32_t) lastPenaltyDate {
  return _builderResult.lastPenaltyDate;
}
- (CLowPriPenalty_Builder*) setLastPenaltyDate:(uint32_t) value {
  _builderResult.hasLastPenaltyDate = YES;
  _builderResult.lastPenaltyDate = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearLastPenaltyDate {
  _builderResult.hasLastPenaltyDate = NO;
  _builderResult.lastPenaltyDate = 0;
  return self;
}
- (BOOL) hasLastAbandonDate {
  return _builderResult.hasLastAbandonDate;
}
- (uint32_t) lastAbandonDate {
  return _builderResult.lastAbandonDate;
}
- (CLowPriPenalty_Builder*) setLastAbandonDate:(uint32_t) value {
  _builderResult.hasLastAbandonDate = YES;
  _builderResult.lastAbandonDate = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearLastAbandonDate {
  _builderResult.hasLastAbandonDate = NO;
  _builderResult.lastAbandonDate = 0;
  return self;
}
- (BOOL) hasAbandonPenaltyCount {
  return _builderResult.hasAbandonPenaltyCount;
}
- (uint32_t) abandonPenaltyCount {
  return _builderResult.abandonPenaltyCount;
}
- (CLowPriPenalty_Builder*) setAbandonPenaltyCount:(uint32_t) value {
  _builderResult.hasAbandonPenaltyCount = YES;
  _builderResult.abandonPenaltyCount = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearAbandonPenaltyCount {
  _builderResult.hasAbandonPenaltyCount = NO;
  _builderResult.abandonPenaltyCount = 0;
  return self;
}
- (BOOL) hasCompletedGameStreak {
  return _builderResult.hasCompletedGameStreak;
}
- (uint32_t) completedGameStreak {
  return _builderResult.completedGameStreak;
}
- (CLowPriPenalty_Builder*) setCompletedGameStreak:(uint32_t) value {
  _builderResult.hasCompletedGameStreak = YES;
  _builderResult.completedGameStreak = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearCompletedGameStreak {
  _builderResult.hasCompletedGameStreak = NO;
  _builderResult.completedGameStreak = 0;
  return self;
}
- (BOOL) hasAbandonTimeGiven {
  return _builderResult.hasAbandonTimeGiven;
}
- (uint32_t) abandonTimeGiven {
  return _builderResult.abandonTimeGiven;
}
- (CLowPriPenalty_Builder*) setAbandonTimeGiven:(uint32_t) value {
  _builderResult.hasAbandonTimeGiven = YES;
  _builderResult.abandonTimeGiven = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearAbandonTimeGiven {
  _builderResult.hasAbandonTimeGiven = NO;
  _builderResult.abandonTimeGiven = 0;
  return self;
}
- (BOOL) hasReportTimeGiven {
  return _builderResult.hasReportTimeGiven;
}
- (uint32_t) reportTimeGiven {
  return _builderResult.reportTimeGiven;
}
- (CLowPriPenalty_Builder*) setReportTimeGiven:(uint32_t) value {
  _builderResult.hasReportTimeGiven = YES;
  _builderResult.reportTimeGiven = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearReportTimeGiven {
  _builderResult.hasReportTimeGiven = NO;
  _builderResult.reportTimeGiven = 0;
  return self;
}
- (BOOL) hasRank {
  return _builderResult.hasRank;
}
- (uint32_t) rank {
  return _builderResult.rank;
}
- (CLowPriPenalty_Builder*) setRank:(uint32_t) value {
  _builderResult.hasRank = YES;
  _builderResult.rank = value;
  return self;
}
- (CLowPriPenalty_Builder*) clearRank {
  _builderResult.hasRank = NO;
  _builderResult.rank = 0;
  return self;
}
@end

@interface CMsgDOTAWelcome ()
@property BOOL spectatorOnly;
@property BOOL allowTeamCreation;
@property BOOL tournamentAdmin;
@property BOOL tournamentBroadcaster;
@property uint32_t storeItemHash;
@end

@implementation CMsgDOTAWelcome

- (BOOL) hasSpectatorOnly {
  return !!hasSpectatorOnly_;
}
- (void) setHasSpectatorOnly:(BOOL) value_ {
  hasSpectatorOnly_ = !!value_;
}
- (BOOL) spectatorOnly {
  return !!spectatorOnly_;
}
- (void) setSpectatorOnly:(BOOL) value_ {
  spectatorOnly_ = !!value_;
}
- (BOOL) hasAllowTeamCreation {
  return !!hasAllowTeamCreation_;
}
- (void) setHasAllowTeamCreation:(BOOL) value_ {
  hasAllowTeamCreation_ = !!value_;
}
- (BOOL) allowTeamCreation {
  return !!allowTeamCreation_;
}
- (void) setAllowTeamCreation:(BOOL) value_ {
  allowTeamCreation_ = !!value_;
}
- (BOOL) hasTournamentAdmin {
  return !!hasTournamentAdmin_;
}
- (void) setHasTournamentAdmin:(BOOL) value_ {
  hasTournamentAdmin_ = !!value_;
}
- (BOOL) tournamentAdmin {
  return !!tournamentAdmin_;
}
- (void) setTournamentAdmin:(BOOL) value_ {
  tournamentAdmin_ = !!value_;
}
- (BOOL) hasTournamentBroadcaster {
  return !!hasTournamentBroadcaster_;
}
- (void) setHasTournamentBroadcaster:(BOOL) value_ {
  hasTournamentBroadcaster_ = !!value_;
}
- (BOOL) tournamentBroadcaster {
  return !!tournamentBroadcaster_;
}
- (void) setTournamentBroadcaster:(BOOL) value_ {
  tournamentBroadcaster_ = !!value_;
}
- (BOOL) hasStoreItemHash {
  return !!hasStoreItemHash_;
}
- (void) setHasStoreItemHash:(BOOL) value_ {
  hasStoreItemHash_ = !!value_;
}
@synthesize storeItemHash;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.spectatorOnly = NO;
    self.allowTeamCreation = NO;
    self.tournamentAdmin = NO;
    self.tournamentBroadcaster = NO;
    self.storeItemHash = 0;
  }
  return self;
}
static CMsgDOTAWelcome* defaultCMsgDOTAWelcomeInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAWelcome class]) {
    defaultCMsgDOTAWelcomeInstance = [[CMsgDOTAWelcome alloc] init];
  }
}
+ (CMsgDOTAWelcome*) defaultInstance {
  return defaultCMsgDOTAWelcomeInstance;
}
- (CMsgDOTAWelcome*) defaultInstance {
  return defaultCMsgDOTAWelcomeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSpectatorOnly) {
    [output writeBool:1 value:self.spectatorOnly];
  }
  if (self.hasAllowTeamCreation) {
    [output writeBool:2 value:self.allowTeamCreation];
  }
  if (self.hasTournamentAdmin) {
    [output writeBool:3 value:self.tournamentAdmin];
  }
  if (self.hasTournamentBroadcaster) {
    [output writeBool:4 value:self.tournamentBroadcaster];
  }
  if (self.hasStoreItemHash) {
    [output writeUInt32:5 value:self.storeItemHash];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSpectatorOnly) {
    size_ += computeBoolSize(1, self.spectatorOnly);
  }
  if (self.hasAllowTeamCreation) {
    size_ += computeBoolSize(2, self.allowTeamCreation);
  }
  if (self.hasTournamentAdmin) {
    size_ += computeBoolSize(3, self.tournamentAdmin);
  }
  if (self.hasTournamentBroadcaster) {
    size_ += computeBoolSize(4, self.tournamentBroadcaster);
  }
  if (self.hasStoreItemHash) {
    size_ += computeUInt32Size(5, self.storeItemHash);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAWelcome*) parseFromData:(NSData*) data {
  return (CMsgDOTAWelcome*)[[[CMsgDOTAWelcome builder] mergeFromData:data] build];
}
+ (CMsgDOTAWelcome*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAWelcome*)[[[CMsgDOTAWelcome builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAWelcome*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAWelcome*)[[[CMsgDOTAWelcome builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAWelcome*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAWelcome*)[[[CMsgDOTAWelcome builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAWelcome*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAWelcome*)[[[CMsgDOTAWelcome builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAWelcome*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAWelcome*)[[[CMsgDOTAWelcome builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAWelcome_Builder*) builder {
  return [[[CMsgDOTAWelcome_Builder alloc] init] autorelease];
}
+ (CMsgDOTAWelcome_Builder*) builderWithPrototype:(CMsgDOTAWelcome*) prototype {
  return [[CMsgDOTAWelcome builder] mergeFrom:prototype];
}
- (CMsgDOTAWelcome_Builder*) builder {
  return [CMsgDOTAWelcome builder];
}
- (CMsgDOTAWelcome_Builder*) toBuilder {
  return [CMsgDOTAWelcome builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSpectatorOnly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spectatorOnly", [NSNumber numberWithBool:self.spectatorOnly]];
  }
  if (self.hasAllowTeamCreation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"allowTeamCreation", [NSNumber numberWithBool:self.allowTeamCreation]];
  }
  if (self.hasTournamentAdmin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentAdmin", [NSNumber numberWithBool:self.tournamentAdmin]];
  }
  if (self.hasTournamentBroadcaster) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tournamentBroadcaster", [NSNumber numberWithBool:self.tournamentBroadcaster]];
  }
  if (self.hasStoreItemHash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"storeItemHash", [NSNumber numberWithInt:self.storeItemHash]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAWelcome class]]) {
    return NO;
  }
  CMsgDOTAWelcome *otherMessage = other;
  return
      self.hasSpectatorOnly == otherMessage.hasSpectatorOnly &&
      (!self.hasSpectatorOnly || self.spectatorOnly == otherMessage.spectatorOnly) &&
      self.hasAllowTeamCreation == otherMessage.hasAllowTeamCreation &&
      (!self.hasAllowTeamCreation || self.allowTeamCreation == otherMessage.allowTeamCreation) &&
      self.hasTournamentAdmin == otherMessage.hasTournamentAdmin &&
      (!self.hasTournamentAdmin || self.tournamentAdmin == otherMessage.tournamentAdmin) &&
      self.hasTournamentBroadcaster == otherMessage.hasTournamentBroadcaster &&
      (!self.hasTournamentBroadcaster || self.tournamentBroadcaster == otherMessage.tournamentBroadcaster) &&
      self.hasStoreItemHash == otherMessage.hasStoreItemHash &&
      (!self.hasStoreItemHash || self.storeItemHash == otherMessage.storeItemHash) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSpectatorOnly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.spectatorOnly] hash];
  }
  if (self.hasAllowTeamCreation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.allowTeamCreation] hash];
  }
  if (self.hasTournamentAdmin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tournamentAdmin] hash];
  }
  if (self.hasTournamentBroadcaster) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tournamentBroadcaster] hash];
  }
  if (self.hasStoreItemHash) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.storeItemHash] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAWelcome_Builder()
@property (retain) CMsgDOTAWelcome* _builderResult;
@end

@implementation CMsgDOTAWelcome_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAWelcome alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAWelcome_Builder*) clear {
  _builderResult = [[[CMsgDOTAWelcome alloc] init] autorelease];
  return self;
}
- (CMsgDOTAWelcome_Builder*) clone {
  return [CMsgDOTAWelcome builderWithPrototype:_builderResult];
}
- (CMsgDOTAWelcome*) defaultInstance {
  return [CMsgDOTAWelcome defaultInstance];
}
- (CMsgDOTAWelcome*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAWelcome*) buildPartial {
  CMsgDOTAWelcome* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAWelcome_Builder*) mergeFrom:(CMsgDOTAWelcome*) other {
  if (other == [CMsgDOTAWelcome defaultInstance]) {
    return self;
  }
  if (other.hasSpectatorOnly) {
    [self setSpectatorOnly:other.spectatorOnly];
  }
  if (other.hasAllowTeamCreation) {
    [self setAllowTeamCreation:other.allowTeamCreation];
  }
  if (other.hasTournamentAdmin) {
    [self setTournamentAdmin:other.tournamentAdmin];
  }
  if (other.hasTournamentBroadcaster) {
    [self setTournamentBroadcaster:other.tournamentBroadcaster];
  }
  if (other.hasStoreItemHash) {
    [self setStoreItemHash:other.storeItemHash];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAWelcome_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAWelcome_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSpectatorOnly:[input readBool]];
        break;
      }
      case 16: {
        [self setAllowTeamCreation:[input readBool]];
        break;
      }
      case 24: {
        [self setTournamentAdmin:[input readBool]];
        break;
      }
      case 32: {
        [self setTournamentBroadcaster:[input readBool]];
        break;
      }
      case 40: {
        [self setStoreItemHash:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSpectatorOnly {
  return _builderResult.hasSpectatorOnly;
}
- (BOOL) spectatorOnly {
  return _builderResult.spectatorOnly;
}
- (CMsgDOTAWelcome_Builder*) setSpectatorOnly:(BOOL) value {
  _builderResult.hasSpectatorOnly = YES;
  _builderResult.spectatorOnly = value;
  return self;
}
- (CMsgDOTAWelcome_Builder*) clearSpectatorOnly {
  _builderResult.hasSpectatorOnly = NO;
  _builderResult.spectatorOnly = NO;
  return self;
}
- (BOOL) hasAllowTeamCreation {
  return _builderResult.hasAllowTeamCreation;
}
- (BOOL) allowTeamCreation {
  return _builderResult.allowTeamCreation;
}
- (CMsgDOTAWelcome_Builder*) setAllowTeamCreation:(BOOL) value {
  _builderResult.hasAllowTeamCreation = YES;
  _builderResult.allowTeamCreation = value;
  return self;
}
- (CMsgDOTAWelcome_Builder*) clearAllowTeamCreation {
  _builderResult.hasAllowTeamCreation = NO;
  _builderResult.allowTeamCreation = NO;
  return self;
}
- (BOOL) hasTournamentAdmin {
  return _builderResult.hasTournamentAdmin;
}
- (BOOL) tournamentAdmin {
  return _builderResult.tournamentAdmin;
}
- (CMsgDOTAWelcome_Builder*) setTournamentAdmin:(BOOL) value {
  _builderResult.hasTournamentAdmin = YES;
  _builderResult.tournamentAdmin = value;
  return self;
}
- (CMsgDOTAWelcome_Builder*) clearTournamentAdmin {
  _builderResult.hasTournamentAdmin = NO;
  _builderResult.tournamentAdmin = NO;
  return self;
}
- (BOOL) hasTournamentBroadcaster {
  return _builderResult.hasTournamentBroadcaster;
}
- (BOOL) tournamentBroadcaster {
  return _builderResult.tournamentBroadcaster;
}
- (CMsgDOTAWelcome_Builder*) setTournamentBroadcaster:(BOOL) value {
  _builderResult.hasTournamentBroadcaster = YES;
  _builderResult.tournamentBroadcaster = value;
  return self;
}
- (CMsgDOTAWelcome_Builder*) clearTournamentBroadcaster {
  _builderResult.hasTournamentBroadcaster = NO;
  _builderResult.tournamentBroadcaster = NO;
  return self;
}
- (BOOL) hasStoreItemHash {
  return _builderResult.hasStoreItemHash;
}
- (uint32_t) storeItemHash {
  return _builderResult.storeItemHash;
}
- (CMsgDOTAWelcome_Builder*) setStoreItemHash:(uint32_t) value {
  _builderResult.hasStoreItemHash = YES;
  _builderResult.storeItemHash = value;
  return self;
}
- (CMsgDOTAWelcome_Builder*) clearStoreItemHash {
  _builderResult.hasStoreItemHash = NO;
  _builderResult.storeItemHash = 0;
  return self;
}
@end

@interface CSODOTAGameHeroFavorites ()
@property uint32_t accountId;
@property uint32_t heroId;
@end

@implementation CSODOTAGameHeroFavorites

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.heroId = 0;
  }
  return self;
}
static CSODOTAGameHeroFavorites* defaultCSODOTAGameHeroFavoritesInstance = nil;
+ (void) initialize {
  if (self == [CSODOTAGameHeroFavorites class]) {
    defaultCSODOTAGameHeroFavoritesInstance = [[CSODOTAGameHeroFavorites alloc] init];
  }
}
+ (CSODOTAGameHeroFavorites*) defaultInstance {
  return defaultCSODOTAGameHeroFavoritesInstance;
}
- (CSODOTAGameHeroFavorites*) defaultInstance {
  return defaultCSODOTAGameHeroFavoritesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasHeroId) {
    [output writeUInt32:2 value:self.heroId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(2, self.heroId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSODOTAGameHeroFavorites*) parseFromData:(NSData*) data {
  return (CSODOTAGameHeroFavorites*)[[[CSODOTAGameHeroFavorites builder] mergeFromData:data] build];
}
+ (CSODOTAGameHeroFavorites*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameHeroFavorites*)[[[CSODOTAGameHeroFavorites builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameHeroFavorites*) parseFromInputStream:(NSInputStream*) input {
  return (CSODOTAGameHeroFavorites*)[[[CSODOTAGameHeroFavorites builder] mergeFromInputStream:input] build];
}
+ (CSODOTAGameHeroFavorites*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameHeroFavorites*)[[[CSODOTAGameHeroFavorites builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameHeroFavorites*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSODOTAGameHeroFavorites*)[[[CSODOTAGameHeroFavorites builder] mergeFromCodedInputStream:input] build];
}
+ (CSODOTAGameHeroFavorites*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSODOTAGameHeroFavorites*)[[[CSODOTAGameHeroFavorites builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSODOTAGameHeroFavorites_Builder*) builder {
  return [[[CSODOTAGameHeroFavorites_Builder alloc] init] autorelease];
}
+ (CSODOTAGameHeroFavorites_Builder*) builderWithPrototype:(CSODOTAGameHeroFavorites*) prototype {
  return [[CSODOTAGameHeroFavorites builder] mergeFrom:prototype];
}
- (CSODOTAGameHeroFavorites_Builder*) builder {
  return [CSODOTAGameHeroFavorites builder];
}
- (CSODOTAGameHeroFavorites_Builder*) toBuilder {
  return [CSODOTAGameHeroFavorites builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSODOTAGameHeroFavorites class]]) {
    return NO;
  }
  CSODOTAGameHeroFavorites *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSODOTAGameHeroFavorites_Builder()
@property (retain) CSODOTAGameHeroFavorites* _builderResult;
@end

@implementation CSODOTAGameHeroFavorites_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CSODOTAGameHeroFavorites alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CSODOTAGameHeroFavorites_Builder*) clear {
  _builderResult = [[[CSODOTAGameHeroFavorites alloc] init] autorelease];
  return self;
}
- (CSODOTAGameHeroFavorites_Builder*) clone {
  return [CSODOTAGameHeroFavorites builderWithPrototype:_builderResult];
}
- (CSODOTAGameHeroFavorites*) defaultInstance {
  return [CSODOTAGameHeroFavorites defaultInstance];
}
- (CSODOTAGameHeroFavorites*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSODOTAGameHeroFavorites*) buildPartial {
  CSODOTAGameHeroFavorites* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CSODOTAGameHeroFavorites_Builder*) mergeFrom:(CSODOTAGameHeroFavorites*) other {
  if (other == [CSODOTAGameHeroFavorites defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSODOTAGameHeroFavorites_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSODOTAGameHeroFavorites_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setHeroId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CSODOTAGameHeroFavorites_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CSODOTAGameHeroFavorites_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CSODOTAGameHeroFavorites_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CSODOTAGameHeroFavorites_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
@end

@interface CMsgDOTAHeroFavoritesAdd ()
@property uint32_t heroId;
@end

@implementation CMsgDOTAHeroFavoritesAdd

- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.heroId = 0;
  }
  return self;
}
static CMsgDOTAHeroFavoritesAdd* defaultCMsgDOTAHeroFavoritesAddInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAHeroFavoritesAdd class]) {
    defaultCMsgDOTAHeroFavoritesAddInstance = [[CMsgDOTAHeroFavoritesAdd alloc] init];
  }
}
+ (CMsgDOTAHeroFavoritesAdd*) defaultInstance {
  return defaultCMsgDOTAHeroFavoritesAddInstance;
}
- (CMsgDOTAHeroFavoritesAdd*) defaultInstance {
  return defaultCMsgDOTAHeroFavoritesAddInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHeroId) {
    [output writeUInt32:1 value:self.heroId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHeroId) {
    size_ += computeUInt32Size(1, self.heroId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAHeroFavoritesAdd*) parseFromData:(NSData*) data {
  return (CMsgDOTAHeroFavoritesAdd*)[[[CMsgDOTAHeroFavoritesAdd builder] mergeFromData:data] build];
}
+ (CMsgDOTAHeroFavoritesAdd*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHeroFavoritesAdd*)[[[CMsgDOTAHeroFavoritesAdd builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHeroFavoritesAdd*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAHeroFavoritesAdd*)[[[CMsgDOTAHeroFavoritesAdd builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAHeroFavoritesAdd*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHeroFavoritesAdd*)[[[CMsgDOTAHeroFavoritesAdd builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHeroFavoritesAdd*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAHeroFavoritesAdd*)[[[CMsgDOTAHeroFavoritesAdd builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAHeroFavoritesAdd*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHeroFavoritesAdd*)[[[CMsgDOTAHeroFavoritesAdd builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHeroFavoritesAdd_Builder*) builder {
  return [[[CMsgDOTAHeroFavoritesAdd_Builder alloc] init] autorelease];
}
+ (CMsgDOTAHeroFavoritesAdd_Builder*) builderWithPrototype:(CMsgDOTAHeroFavoritesAdd*) prototype {
  return [[CMsgDOTAHeroFavoritesAdd builder] mergeFrom:prototype];
}
- (CMsgDOTAHeroFavoritesAdd_Builder*) builder {
  return [CMsgDOTAHeroFavoritesAdd builder];
}
- (CMsgDOTAHeroFavoritesAdd_Builder*) toBuilder {
  return [CMsgDOTAHeroFavoritesAdd builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAHeroFavoritesAdd class]]) {
    return NO;
  }
  CMsgDOTAHeroFavoritesAdd *otherMessage = other;
  return
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAHeroFavoritesAdd_Builder()
@property (retain) CMsgDOTAHeroFavoritesAdd* _builderResult;
@end

@implementation CMsgDOTAHeroFavoritesAdd_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAHeroFavoritesAdd alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAHeroFavoritesAdd_Builder*) clear {
  _builderResult = [[[CMsgDOTAHeroFavoritesAdd alloc] init] autorelease];
  return self;
}
- (CMsgDOTAHeroFavoritesAdd_Builder*) clone {
  return [CMsgDOTAHeroFavoritesAdd builderWithPrototype:_builderResult];
}
- (CMsgDOTAHeroFavoritesAdd*) defaultInstance {
  return [CMsgDOTAHeroFavoritesAdd defaultInstance];
}
- (CMsgDOTAHeroFavoritesAdd*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAHeroFavoritesAdd*) buildPartial {
  CMsgDOTAHeroFavoritesAdd* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAHeroFavoritesAdd_Builder*) mergeFrom:(CMsgDOTAHeroFavoritesAdd*) other {
  if (other == [CMsgDOTAHeroFavoritesAdd defaultInstance]) {
    return self;
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAHeroFavoritesAdd_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAHeroFavoritesAdd_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setHeroId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTAHeroFavoritesAdd_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTAHeroFavoritesAdd_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
@end

@interface CMsgDOTAHeroFavoritesRemove ()
@property uint32_t heroId;
@end

@implementation CMsgDOTAHeroFavoritesRemove

- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.heroId = 0;
  }
  return self;
}
static CMsgDOTAHeroFavoritesRemove* defaultCMsgDOTAHeroFavoritesRemoveInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAHeroFavoritesRemove class]) {
    defaultCMsgDOTAHeroFavoritesRemoveInstance = [[CMsgDOTAHeroFavoritesRemove alloc] init];
  }
}
+ (CMsgDOTAHeroFavoritesRemove*) defaultInstance {
  return defaultCMsgDOTAHeroFavoritesRemoveInstance;
}
- (CMsgDOTAHeroFavoritesRemove*) defaultInstance {
  return defaultCMsgDOTAHeroFavoritesRemoveInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHeroId) {
    [output writeUInt32:1 value:self.heroId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHeroId) {
    size_ += computeUInt32Size(1, self.heroId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAHeroFavoritesRemove*) parseFromData:(NSData*) data {
  return (CMsgDOTAHeroFavoritesRemove*)[[[CMsgDOTAHeroFavoritesRemove builder] mergeFromData:data] build];
}
+ (CMsgDOTAHeroFavoritesRemove*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHeroFavoritesRemove*)[[[CMsgDOTAHeroFavoritesRemove builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHeroFavoritesRemove*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAHeroFavoritesRemove*)[[[CMsgDOTAHeroFavoritesRemove builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAHeroFavoritesRemove*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHeroFavoritesRemove*)[[[CMsgDOTAHeroFavoritesRemove builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHeroFavoritesRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAHeroFavoritesRemove*)[[[CMsgDOTAHeroFavoritesRemove builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAHeroFavoritesRemove*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHeroFavoritesRemove*)[[[CMsgDOTAHeroFavoritesRemove builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHeroFavoritesRemove_Builder*) builder {
  return [[[CMsgDOTAHeroFavoritesRemove_Builder alloc] init] autorelease];
}
+ (CMsgDOTAHeroFavoritesRemove_Builder*) builderWithPrototype:(CMsgDOTAHeroFavoritesRemove*) prototype {
  return [[CMsgDOTAHeroFavoritesRemove builder] mergeFrom:prototype];
}
- (CMsgDOTAHeroFavoritesRemove_Builder*) builder {
  return [CMsgDOTAHeroFavoritesRemove builder];
}
- (CMsgDOTAHeroFavoritesRemove_Builder*) toBuilder {
  return [CMsgDOTAHeroFavoritesRemove builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAHeroFavoritesRemove class]]) {
    return NO;
  }
  CMsgDOTAHeroFavoritesRemove *otherMessage = other;
  return
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAHeroFavoritesRemove_Builder()
@property (retain) CMsgDOTAHeroFavoritesRemove* _builderResult;
@end

@implementation CMsgDOTAHeroFavoritesRemove_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAHeroFavoritesRemove alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAHeroFavoritesRemove_Builder*) clear {
  _builderResult = [[[CMsgDOTAHeroFavoritesRemove alloc] init] autorelease];
  return self;
}
- (CMsgDOTAHeroFavoritesRemove_Builder*) clone {
  return [CMsgDOTAHeroFavoritesRemove builderWithPrototype:_builderResult];
}
- (CMsgDOTAHeroFavoritesRemove*) defaultInstance {
  return [CMsgDOTAHeroFavoritesRemove defaultInstance];
}
- (CMsgDOTAHeroFavoritesRemove*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAHeroFavoritesRemove*) buildPartial {
  CMsgDOTAHeroFavoritesRemove* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAHeroFavoritesRemove_Builder*) mergeFrom:(CMsgDOTAHeroFavoritesRemove*) other {
  if (other == [CMsgDOTAHeroFavoritesRemove defaultInstance]) {
    return self;
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAHeroFavoritesRemove_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAHeroFavoritesRemove_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setHeroId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTAHeroFavoritesRemove_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTAHeroFavoritesRemove_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
@end

@interface CMsgDOTAPlayerHeroesRecentRequest ()
@end

@implementation CMsgDOTAPlayerHeroesRecentRequest

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAPlayerHeroesRecentRequest* defaultCMsgDOTAPlayerHeroesRecentRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAPlayerHeroesRecentRequest class]) {
    defaultCMsgDOTAPlayerHeroesRecentRequestInstance = [[CMsgDOTAPlayerHeroesRecentRequest alloc] init];
  }
}
+ (CMsgDOTAPlayerHeroesRecentRequest*) defaultInstance {
  return defaultCMsgDOTAPlayerHeroesRecentRequestInstance;
}
- (CMsgDOTAPlayerHeroesRecentRequest*) defaultInstance {
  return defaultCMsgDOTAPlayerHeroesRecentRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAPlayerHeroesRecentRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTAPlayerHeroesRecentRequest*)[[[CMsgDOTAPlayerHeroesRecentRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTAPlayerHeroesRecentRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerHeroesRecentRequest*)[[[CMsgDOTAPlayerHeroesRecentRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerHeroesRecentRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAPlayerHeroesRecentRequest*)[[[CMsgDOTAPlayerHeroesRecentRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAPlayerHeroesRecentRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerHeroesRecentRequest*)[[[CMsgDOTAPlayerHeroesRecentRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerHeroesRecentRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAPlayerHeroesRecentRequest*)[[[CMsgDOTAPlayerHeroesRecentRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAPlayerHeroesRecentRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerHeroesRecentRequest*)[[[CMsgDOTAPlayerHeroesRecentRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerHeroesRecentRequest_Builder*) builder {
  return [[[CMsgDOTAPlayerHeroesRecentRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTAPlayerHeroesRecentRequest_Builder*) builderWithPrototype:(CMsgDOTAPlayerHeroesRecentRequest*) prototype {
  return [[CMsgDOTAPlayerHeroesRecentRequest builder] mergeFrom:prototype];
}
- (CMsgDOTAPlayerHeroesRecentRequest_Builder*) builder {
  return [CMsgDOTAPlayerHeroesRecentRequest builder];
}
- (CMsgDOTAPlayerHeroesRecentRequest_Builder*) toBuilder {
  return [CMsgDOTAPlayerHeroesRecentRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAPlayerHeroesRecentRequest class]]) {
    return NO;
  }
  CMsgDOTAPlayerHeroesRecentRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAPlayerHeroesRecentRequest_Builder()
@property (retain) CMsgDOTAPlayerHeroesRecentRequest* _builderResult;
@end

@implementation CMsgDOTAPlayerHeroesRecentRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAPlayerHeroesRecentRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAPlayerHeroesRecentRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTAPlayerHeroesRecentRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTAPlayerHeroesRecentRequest_Builder*) clone {
  return [CMsgDOTAPlayerHeroesRecentRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTAPlayerHeroesRecentRequest*) defaultInstance {
  return [CMsgDOTAPlayerHeroesRecentRequest defaultInstance];
}
- (CMsgDOTAPlayerHeroesRecentRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAPlayerHeroesRecentRequest*) buildPartial {
  CMsgDOTAPlayerHeroesRecentRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAPlayerHeroesRecentRequest_Builder*) mergeFrom:(CMsgDOTAPlayerHeroesRecentRequest*) other {
  if (other == [CMsgDOTAPlayerHeroesRecentRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAPlayerHeroesRecentRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAPlayerHeroesRecentRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgDOTAPlayerHeroesRecentResponse ()
@property uint32_t result;
@property (retain) PBAppendableArray * heroIdsArray;
@end

@implementation CMsgDOTAPlayerHeroesRecentResponse

- (BOOL) hasResult {
  return !!hasResult_;
}
- (void) setHasResult:(BOOL) value_ {
  hasResult_ = !!value_;
}
@synthesize result;
@synthesize heroIdsArray;
@dynamic heroIds;
- (void) dealloc {
  self.heroIdsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = 0;
  }
  return self;
}
static CMsgDOTAPlayerHeroesRecentResponse* defaultCMsgDOTAPlayerHeroesRecentResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAPlayerHeroesRecentResponse class]) {
    defaultCMsgDOTAPlayerHeroesRecentResponseInstance = [[CMsgDOTAPlayerHeroesRecentResponse alloc] init];
  }
}
+ (CMsgDOTAPlayerHeroesRecentResponse*) defaultInstance {
  return defaultCMsgDOTAPlayerHeroesRecentResponseInstance;
}
- (CMsgDOTAPlayerHeroesRecentResponse*) defaultInstance {
  return defaultCMsgDOTAPlayerHeroesRecentResponseInstance;
}
- (PBArray *)heroIds {
  return heroIdsArray;
}
- (uint32_t)heroIdsAtIndex:(NSUInteger)index {
  return [heroIdsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResult) {
    [output writeUInt32:1 value:self.result];
  }
  const NSUInteger heroIdsArrayCount = self.heroIdsArray.count;
  if (heroIdsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.heroIdsArray.data;
    for (NSUInteger i = 0; i < heroIdsArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResult) {
    size_ += computeUInt32Size(1, self.result);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.heroIdsArray.count;
    const uint32_t *values = (const uint32_t *)self.heroIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAPlayerHeroesRecentResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAPlayerHeroesRecentResponse*)[[[CMsgDOTAPlayerHeroesRecentResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAPlayerHeroesRecentResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerHeroesRecentResponse*)[[[CMsgDOTAPlayerHeroesRecentResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerHeroesRecentResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAPlayerHeroesRecentResponse*)[[[CMsgDOTAPlayerHeroesRecentResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAPlayerHeroesRecentResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerHeroesRecentResponse*)[[[CMsgDOTAPlayerHeroesRecentResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerHeroesRecentResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAPlayerHeroesRecentResponse*)[[[CMsgDOTAPlayerHeroesRecentResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAPlayerHeroesRecentResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAPlayerHeroesRecentResponse*)[[[CMsgDOTAPlayerHeroesRecentResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAPlayerHeroesRecentResponse_Builder*) builder {
  return [[[CMsgDOTAPlayerHeroesRecentResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAPlayerHeroesRecentResponse_Builder*) builderWithPrototype:(CMsgDOTAPlayerHeroesRecentResponse*) prototype {
  return [[CMsgDOTAPlayerHeroesRecentResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder*) builder {
  return [CMsgDOTAPlayerHeroesRecentResponse builder];
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder*) toBuilder {
  return [CMsgDOTAPlayerHeroesRecentResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"result", [NSNumber numberWithInt:self.result]];
  }
  for (NSNumber* value in self.heroIdsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroIds", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAPlayerHeroesRecentResponse class]]) {
    return NO;
  }
  CMsgDOTAPlayerHeroesRecentResponse *otherMessage = other;
  return
      self.hasResult == otherMessage.hasResult &&
      (!self.hasResult || self.result == otherMessage.result) &&
      [self.heroIdsArray isEqualToArray:otherMessage.heroIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasResult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.result] hash];
  }
  for (NSNumber* value in self.heroIdsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAPlayerHeroesRecentResponse_Builder()
@property (retain) CMsgDOTAPlayerHeroesRecentResponse* _builderResult;
@end

@implementation CMsgDOTAPlayerHeroesRecentResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAPlayerHeroesRecentResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAPlayerHeroesRecentResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder*) clone {
  return [CMsgDOTAPlayerHeroesRecentResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAPlayerHeroesRecentResponse*) defaultInstance {
  return [CMsgDOTAPlayerHeroesRecentResponse defaultInstance];
}
- (CMsgDOTAPlayerHeroesRecentResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAPlayerHeroesRecentResponse*) buildPartial {
  CMsgDOTAPlayerHeroesRecentResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder*) mergeFrom:(CMsgDOTAPlayerHeroesRecentResponse*) other {
  if (other == [CMsgDOTAPlayerHeroesRecentResponse defaultInstance]) {
    return self;
  }
  if (other.hasResult) {
    [self setResult:other.result];
  }
  if (other.heroIdsArray.count > 0) {
    if (_builderResult.heroIdsArray == nil) {
      _builderResult.heroIdsArray = [[other.heroIdsArray copyWithZone:[other.heroIdsArray zone]] autorelease];
    } else {
      [_builderResult.heroIdsArray appendArray:other.heroIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setResult:[input readUInt32]];
        break;
      }
      case 16: {
        [self addHeroIds:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasResult {
  return _builderResult.hasResult;
}
- (uint32_t) result {
  return _builderResult.result;
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder*) setResult:(uint32_t) value {
  _builderResult.hasResult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder*) clearResult {
  _builderResult.hasResult = NO;
  _builderResult.result = 0;
  return self;
}
- (PBAppendableArray *)heroIds {
  return _builderResult.heroIdsArray;
}
- (uint32_t)heroIdsAtIndex:(NSUInteger)index {
  return [_builderResult heroIdsAtIndex:index];
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder *)addHeroIds:(uint32_t)value {
  if (_builderResult.heroIdsArray == nil) {
    _builderResult.heroIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.heroIdsArray addUint32:value];
  return self;
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder *)setHeroIdsArray:(NSArray *)array {
  _builderResult.heroIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder *)setHeroIdsValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.heroIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAPlayerHeroesRecentResponse_Builder *)clearHeroIds {
  _builderResult.heroIdsArray = nil;
  return self;
}
@end

@interface CDOTAOverview ()
@property (retain) PBAppendableArray * playersByRegionArray;
@property (retain) PBAppendableArray * gameServersByRegionArray;
@property (retain) PBAppendableArray * proxyServersByRegionArray;
@end

@implementation CDOTAOverview

@synthesize playersByRegionArray;
@dynamic playersByRegion;
@synthesize gameServersByRegionArray;
@dynamic gameServersByRegion;
@synthesize proxyServersByRegionArray;
@dynamic proxyServersByRegion;
- (void) dealloc {
  self.playersByRegionArray = nil;
  self.gameServersByRegionArray = nil;
  self.proxyServersByRegionArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CDOTAOverview* defaultCDOTAOverviewInstance = nil;
+ (void) initialize {
  if (self == [CDOTAOverview class]) {
    defaultCDOTAOverviewInstance = [[CDOTAOverview alloc] init];
  }
}
+ (CDOTAOverview*) defaultInstance {
  return defaultCDOTAOverviewInstance;
}
- (CDOTAOverview*) defaultInstance {
  return defaultCDOTAOverviewInstance;
}
- (PBArray *)playersByRegion {
  return playersByRegionArray;
}
- (CDOTAOverview_PlayersByRegion*)playersByRegionAtIndex:(NSUInteger)index {
  return [playersByRegionArray objectAtIndex:index];
}
- (PBArray *)gameServersByRegion {
  return gameServersByRegionArray;
}
- (CDOTAOverview_ServersByRegion*)gameServersByRegionAtIndex:(NSUInteger)index {
  return [gameServersByRegionArray objectAtIndex:index];
}
- (PBArray *)proxyServersByRegion {
  return proxyServersByRegionArray;
}
- (CDOTAOverview_ServersByRegion*)proxyServersByRegionAtIndex:(NSUInteger)index {
  return [proxyServersByRegionArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CDOTAOverview_PlayersByRegion *element in self.playersByRegionArray) {
    [output writeMessage:1 value:element];
  }
  for (CDOTAOverview_ServersByRegion *element in self.gameServersByRegionArray) {
    [output writeMessage:2 value:element];
  }
  for (CDOTAOverview_ServersByRegion *element in self.proxyServersByRegionArray) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CDOTAOverview_PlayersByRegion *element in self.playersByRegionArray) {
    size_ += computeMessageSize(1, element);
  }
  for (CDOTAOverview_ServersByRegion *element in self.gameServersByRegionArray) {
    size_ += computeMessageSize(2, element);
  }
  for (CDOTAOverview_ServersByRegion *element in self.proxyServersByRegionArray) {
    size_ += computeMessageSize(3, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CDOTAOverview*) parseFromData:(NSData*) data {
  return (CDOTAOverview*)[[[CDOTAOverview builder] mergeFromData:data] build];
}
+ (CDOTAOverview*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTAOverview*)[[[CDOTAOverview builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CDOTAOverview*) parseFromInputStream:(NSInputStream*) input {
  return (CDOTAOverview*)[[[CDOTAOverview builder] mergeFromInputStream:input] build];
}
+ (CDOTAOverview*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTAOverview*)[[[CDOTAOverview builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CDOTAOverview*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CDOTAOverview*)[[[CDOTAOverview builder] mergeFromCodedInputStream:input] build];
}
+ (CDOTAOverview*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTAOverview*)[[[CDOTAOverview builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CDOTAOverview_Builder*) builder {
  return [[[CDOTAOverview_Builder alloc] init] autorelease];
}
+ (CDOTAOverview_Builder*) builderWithPrototype:(CDOTAOverview*) prototype {
  return [[CDOTAOverview builder] mergeFrom:prototype];
}
- (CDOTAOverview_Builder*) builder {
  return [CDOTAOverview builder];
}
- (CDOTAOverview_Builder*) toBuilder {
  return [CDOTAOverview builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CDOTAOverview_PlayersByRegion* element in self.playersByRegionArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"playersByRegion"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CDOTAOverview_ServersByRegion* element in self.gameServersByRegionArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"gameServersByRegion"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CDOTAOverview_ServersByRegion* element in self.proxyServersByRegionArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"proxyServersByRegion"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CDOTAOverview class]]) {
    return NO;
  }
  CDOTAOverview *otherMessage = other;
  return
      [self.playersByRegionArray isEqualToArray:otherMessage.playersByRegionArray] &&
      [self.gameServersByRegionArray isEqualToArray:otherMessage.gameServersByRegionArray] &&
      [self.proxyServersByRegionArray isEqualToArray:otherMessage.proxyServersByRegionArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CDOTAOverview_PlayersByRegion* element in self.playersByRegionArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CDOTAOverview_ServersByRegion* element in self.gameServersByRegionArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CDOTAOverview_ServersByRegion* element in self.proxyServersByRegionArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CDOTAOverview_PlayersByRegion ()
@property int32_t region;
@property int32_t total;
@property int32_t inQueue;
@property int32_t inMatch;
@property int32_t inPractice;
@property int32_t inTournament;
@property int32_t inTutorial;
@property int32_t inCoop;
@property int32_t inTeamMatch;
@property int32_t spectating;
@property int32_t idle;
@end

@implementation CDOTAOverview_PlayersByRegion

- (BOOL) hasRegion {
  return !!hasRegion_;
}
- (void) setHasRegion:(BOOL) value_ {
  hasRegion_ = !!value_;
}
@synthesize region;
- (BOOL) hasTotal {
  return !!hasTotal_;
}
- (void) setHasTotal:(BOOL) value_ {
  hasTotal_ = !!value_;
}
@synthesize total;
- (BOOL) hasInQueue {
  return !!hasInQueue_;
}
- (void) setHasInQueue:(BOOL) value_ {
  hasInQueue_ = !!value_;
}
@synthesize inQueue;
- (BOOL) hasInMatch {
  return !!hasInMatch_;
}
- (void) setHasInMatch:(BOOL) value_ {
  hasInMatch_ = !!value_;
}
@synthesize inMatch;
- (BOOL) hasInPractice {
  return !!hasInPractice_;
}
- (void) setHasInPractice:(BOOL) value_ {
  hasInPractice_ = !!value_;
}
@synthesize inPractice;
- (BOOL) hasInTournament {
  return !!hasInTournament_;
}
- (void) setHasInTournament:(BOOL) value_ {
  hasInTournament_ = !!value_;
}
@synthesize inTournament;
- (BOOL) hasInTutorial {
  return !!hasInTutorial_;
}
- (void) setHasInTutorial:(BOOL) value_ {
  hasInTutorial_ = !!value_;
}
@synthesize inTutorial;
- (BOOL) hasInCoop {
  return !!hasInCoop_;
}
- (void) setHasInCoop:(BOOL) value_ {
  hasInCoop_ = !!value_;
}
@synthesize inCoop;
- (BOOL) hasInTeamMatch {
  return !!hasInTeamMatch_;
}
- (void) setHasInTeamMatch:(BOOL) value_ {
  hasInTeamMatch_ = !!value_;
}
@synthesize inTeamMatch;
- (BOOL) hasSpectating {
  return !!hasSpectating_;
}
- (void) setHasSpectating:(BOOL) value_ {
  hasSpectating_ = !!value_;
}
@synthesize spectating;
- (BOOL) hasIdle {
  return !!hasIdle_;
}
- (void) setHasIdle:(BOOL) value_ {
  hasIdle_ = !!value_;
}
@synthesize idle;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.region = 0;
    self.total = 0;
    self.inQueue = 0;
    self.inMatch = 0;
    self.inPractice = 0;
    self.inTournament = 0;
    self.inTutorial = 0;
    self.inCoop = 0;
    self.inTeamMatch = 0;
    self.spectating = 0;
    self.idle = 0;
  }
  return self;
}
static CDOTAOverview_PlayersByRegion* defaultCDOTAOverview_PlayersByRegionInstance = nil;
+ (void) initialize {
  if (self == [CDOTAOverview_PlayersByRegion class]) {
    defaultCDOTAOverview_PlayersByRegionInstance = [[CDOTAOverview_PlayersByRegion alloc] init];
  }
}
+ (CDOTAOverview_PlayersByRegion*) defaultInstance {
  return defaultCDOTAOverview_PlayersByRegionInstance;
}
- (CDOTAOverview_PlayersByRegion*) defaultInstance {
  return defaultCDOTAOverview_PlayersByRegionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRegion) {
    [output writeInt32:1 value:self.region];
  }
  if (self.hasTotal) {
    [output writeInt32:2 value:self.total];
  }
  if (self.hasInQueue) {
    [output writeInt32:3 value:self.inQueue];
  }
  if (self.hasInMatch) {
    [output writeInt32:4 value:self.inMatch];
  }
  if (self.hasInPractice) {
    [output writeInt32:5 value:self.inPractice];
  }
  if (self.hasInTournament) {
    [output writeInt32:6 value:self.inTournament];
  }
  if (self.hasInTutorial) {
    [output writeInt32:7 value:self.inTutorial];
  }
  if (self.hasInCoop) {
    [output writeInt32:8 value:self.inCoop];
  }
  if (self.hasInTeamMatch) {
    [output writeInt32:9 value:self.inTeamMatch];
  }
  if (self.hasSpectating) {
    [output writeInt32:10 value:self.spectating];
  }
  if (self.hasIdle) {
    [output writeInt32:11 value:self.idle];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRegion) {
    size_ += computeInt32Size(1, self.region);
  }
  if (self.hasTotal) {
    size_ += computeInt32Size(2, self.total);
  }
  if (self.hasInQueue) {
    size_ += computeInt32Size(3, self.inQueue);
  }
  if (self.hasInMatch) {
    size_ += computeInt32Size(4, self.inMatch);
  }
  if (self.hasInPractice) {
    size_ += computeInt32Size(5, self.inPractice);
  }
  if (self.hasInTournament) {
    size_ += computeInt32Size(6, self.inTournament);
  }
  if (self.hasInTutorial) {
    size_ += computeInt32Size(7, self.inTutorial);
  }
  if (self.hasInCoop) {
    size_ += computeInt32Size(8, self.inCoop);
  }
  if (self.hasInTeamMatch) {
    size_ += computeInt32Size(9, self.inTeamMatch);
  }
  if (self.hasSpectating) {
    size_ += computeInt32Size(10, self.spectating);
  }
  if (self.hasIdle) {
    size_ += computeInt32Size(11, self.idle);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CDOTAOverview_PlayersByRegion*) parseFromData:(NSData*) data {
  return (CDOTAOverview_PlayersByRegion*)[[[CDOTAOverview_PlayersByRegion builder] mergeFromData:data] build];
}
+ (CDOTAOverview_PlayersByRegion*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTAOverview_PlayersByRegion*)[[[CDOTAOverview_PlayersByRegion builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CDOTAOverview_PlayersByRegion*) parseFromInputStream:(NSInputStream*) input {
  return (CDOTAOverview_PlayersByRegion*)[[[CDOTAOverview_PlayersByRegion builder] mergeFromInputStream:input] build];
}
+ (CDOTAOverview_PlayersByRegion*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTAOverview_PlayersByRegion*)[[[CDOTAOverview_PlayersByRegion builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CDOTAOverview_PlayersByRegion*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CDOTAOverview_PlayersByRegion*)[[[CDOTAOverview_PlayersByRegion builder] mergeFromCodedInputStream:input] build];
}
+ (CDOTAOverview_PlayersByRegion*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTAOverview_PlayersByRegion*)[[[CDOTAOverview_PlayersByRegion builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CDOTAOverview_PlayersByRegion_Builder*) builder {
  return [[[CDOTAOverview_PlayersByRegion_Builder alloc] init] autorelease];
}
+ (CDOTAOverview_PlayersByRegion_Builder*) builderWithPrototype:(CDOTAOverview_PlayersByRegion*) prototype {
  return [[CDOTAOverview_PlayersByRegion builder] mergeFrom:prototype];
}
- (CDOTAOverview_PlayersByRegion_Builder*) builder {
  return [CDOTAOverview_PlayersByRegion builder];
}
- (CDOTAOverview_PlayersByRegion_Builder*) toBuilder {
  return [CDOTAOverview_PlayersByRegion builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRegion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"region", [NSNumber numberWithInt:self.region]];
  }
  if (self.hasTotal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"total", [NSNumber numberWithInt:self.total]];
  }
  if (self.hasInQueue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inQueue", [NSNumber numberWithInt:self.inQueue]];
  }
  if (self.hasInMatch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inMatch", [NSNumber numberWithInt:self.inMatch]];
  }
  if (self.hasInPractice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inPractice", [NSNumber numberWithInt:self.inPractice]];
  }
  if (self.hasInTournament) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inTournament", [NSNumber numberWithInt:self.inTournament]];
  }
  if (self.hasInTutorial) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inTutorial", [NSNumber numberWithInt:self.inTutorial]];
  }
  if (self.hasInCoop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inCoop", [NSNumber numberWithInt:self.inCoop]];
  }
  if (self.hasInTeamMatch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inTeamMatch", [NSNumber numberWithInt:self.inTeamMatch]];
  }
  if (self.hasSpectating) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spectating", [NSNumber numberWithInt:self.spectating]];
  }
  if (self.hasIdle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idle", [NSNumber numberWithInt:self.idle]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CDOTAOverview_PlayersByRegion class]]) {
    return NO;
  }
  CDOTAOverview_PlayersByRegion *otherMessage = other;
  return
      self.hasRegion == otherMessage.hasRegion &&
      (!self.hasRegion || self.region == otherMessage.region) &&
      self.hasTotal == otherMessage.hasTotal &&
      (!self.hasTotal || self.total == otherMessage.total) &&
      self.hasInQueue == otherMessage.hasInQueue &&
      (!self.hasInQueue || self.inQueue == otherMessage.inQueue) &&
      self.hasInMatch == otherMessage.hasInMatch &&
      (!self.hasInMatch || self.inMatch == otherMessage.inMatch) &&
      self.hasInPractice == otherMessage.hasInPractice &&
      (!self.hasInPractice || self.inPractice == otherMessage.inPractice) &&
      self.hasInTournament == otherMessage.hasInTournament &&
      (!self.hasInTournament || self.inTournament == otherMessage.inTournament) &&
      self.hasInTutorial == otherMessage.hasInTutorial &&
      (!self.hasInTutorial || self.inTutorial == otherMessage.inTutorial) &&
      self.hasInCoop == otherMessage.hasInCoop &&
      (!self.hasInCoop || self.inCoop == otherMessage.inCoop) &&
      self.hasInTeamMatch == otherMessage.hasInTeamMatch &&
      (!self.hasInTeamMatch || self.inTeamMatch == otherMessage.inTeamMatch) &&
      self.hasSpectating == otherMessage.hasSpectating &&
      (!self.hasSpectating || self.spectating == otherMessage.spectating) &&
      self.hasIdle == otherMessage.hasIdle &&
      (!self.hasIdle || self.idle == otherMessage.idle) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasRegion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.region] hash];
  }
  if (self.hasTotal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.total] hash];
  }
  if (self.hasInQueue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inQueue] hash];
  }
  if (self.hasInMatch) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inMatch] hash];
  }
  if (self.hasInPractice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inPractice] hash];
  }
  if (self.hasInTournament) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inTournament] hash];
  }
  if (self.hasInTutorial) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inTutorial] hash];
  }
  if (self.hasInCoop) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inCoop] hash];
  }
  if (self.hasInTeamMatch) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inTeamMatch] hash];
  }
  if (self.hasSpectating) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.spectating] hash];
  }
  if (self.hasIdle) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.idle] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CDOTAOverview_PlayersByRegion_Builder()
@property (retain) CDOTAOverview_PlayersByRegion* _builderResult;
@end

@implementation CDOTAOverview_PlayersByRegion_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CDOTAOverview_PlayersByRegion alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clear {
  _builderResult = [[[CDOTAOverview_PlayersByRegion alloc] init] autorelease];
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clone {
  return [CDOTAOverview_PlayersByRegion builderWithPrototype:_builderResult];
}
- (CDOTAOverview_PlayersByRegion*) defaultInstance {
  return [CDOTAOverview_PlayersByRegion defaultInstance];
}
- (CDOTAOverview_PlayersByRegion*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CDOTAOverview_PlayersByRegion*) buildPartial {
  CDOTAOverview_PlayersByRegion* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CDOTAOverview_PlayersByRegion_Builder*) mergeFrom:(CDOTAOverview_PlayersByRegion*) other {
  if (other == [CDOTAOverview_PlayersByRegion defaultInstance]) {
    return self;
  }
  if (other.hasRegion) {
    [self setRegion:other.region];
  }
  if (other.hasTotal) {
    [self setTotal:other.total];
  }
  if (other.hasInQueue) {
    [self setInQueue:other.inQueue];
  }
  if (other.hasInMatch) {
    [self setInMatch:other.inMatch];
  }
  if (other.hasInPractice) {
    [self setInPractice:other.inPractice];
  }
  if (other.hasInTournament) {
    [self setInTournament:other.inTournament];
  }
  if (other.hasInTutorial) {
    [self setInTutorial:other.inTutorial];
  }
  if (other.hasInCoop) {
    [self setInCoop:other.inCoop];
  }
  if (other.hasInTeamMatch) {
    [self setInTeamMatch:other.inTeamMatch];
  }
  if (other.hasSpectating) {
    [self setSpectating:other.spectating];
  }
  if (other.hasIdle) {
    [self setIdle:other.idle];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CDOTAOverview_PlayersByRegion_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRegion:[input readInt32]];
        break;
      }
      case 16: {
        [self setTotal:[input readInt32]];
        break;
      }
      case 24: {
        [self setInQueue:[input readInt32]];
        break;
      }
      case 32: {
        [self setInMatch:[input readInt32]];
        break;
      }
      case 40: {
        [self setInPractice:[input readInt32]];
        break;
      }
      case 48: {
        [self setInTournament:[input readInt32]];
        break;
      }
      case 56: {
        [self setInTutorial:[input readInt32]];
        break;
      }
      case 64: {
        [self setInCoop:[input readInt32]];
        break;
      }
      case 72: {
        [self setInTeamMatch:[input readInt32]];
        break;
      }
      case 80: {
        [self setSpectating:[input readInt32]];
        break;
      }
      case 88: {
        [self setIdle:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRegion {
  return _builderResult.hasRegion;
}
- (int32_t) region {
  return _builderResult.region;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setRegion:(int32_t) value {
  _builderResult.hasRegion = YES;
  _builderResult.region = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearRegion {
  _builderResult.hasRegion = NO;
  _builderResult.region = 0;
  return self;
}
- (BOOL) hasTotal {
  return _builderResult.hasTotal;
}
- (int32_t) total {
  return _builderResult.total;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setTotal:(int32_t) value {
  _builderResult.hasTotal = YES;
  _builderResult.total = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearTotal {
  _builderResult.hasTotal = NO;
  _builderResult.total = 0;
  return self;
}
- (BOOL) hasInQueue {
  return _builderResult.hasInQueue;
}
- (int32_t) inQueue {
  return _builderResult.inQueue;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setInQueue:(int32_t) value {
  _builderResult.hasInQueue = YES;
  _builderResult.inQueue = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearInQueue {
  _builderResult.hasInQueue = NO;
  _builderResult.inQueue = 0;
  return self;
}
- (BOOL) hasInMatch {
  return _builderResult.hasInMatch;
}
- (int32_t) inMatch {
  return _builderResult.inMatch;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setInMatch:(int32_t) value {
  _builderResult.hasInMatch = YES;
  _builderResult.inMatch = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearInMatch {
  _builderResult.hasInMatch = NO;
  _builderResult.inMatch = 0;
  return self;
}
- (BOOL) hasInPractice {
  return _builderResult.hasInPractice;
}
- (int32_t) inPractice {
  return _builderResult.inPractice;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setInPractice:(int32_t) value {
  _builderResult.hasInPractice = YES;
  _builderResult.inPractice = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearInPractice {
  _builderResult.hasInPractice = NO;
  _builderResult.inPractice = 0;
  return self;
}
- (BOOL) hasInTournament {
  return _builderResult.hasInTournament;
}
- (int32_t) inTournament {
  return _builderResult.inTournament;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setInTournament:(int32_t) value {
  _builderResult.hasInTournament = YES;
  _builderResult.inTournament = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearInTournament {
  _builderResult.hasInTournament = NO;
  _builderResult.inTournament = 0;
  return self;
}
- (BOOL) hasInTutorial {
  return _builderResult.hasInTutorial;
}
- (int32_t) inTutorial {
  return _builderResult.inTutorial;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setInTutorial:(int32_t) value {
  _builderResult.hasInTutorial = YES;
  _builderResult.inTutorial = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearInTutorial {
  _builderResult.hasInTutorial = NO;
  _builderResult.inTutorial = 0;
  return self;
}
- (BOOL) hasInCoop {
  return _builderResult.hasInCoop;
}
- (int32_t) inCoop {
  return _builderResult.inCoop;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setInCoop:(int32_t) value {
  _builderResult.hasInCoop = YES;
  _builderResult.inCoop = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearInCoop {
  _builderResult.hasInCoop = NO;
  _builderResult.inCoop = 0;
  return self;
}
- (BOOL) hasInTeamMatch {
  return _builderResult.hasInTeamMatch;
}
- (int32_t) inTeamMatch {
  return _builderResult.inTeamMatch;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setInTeamMatch:(int32_t) value {
  _builderResult.hasInTeamMatch = YES;
  _builderResult.inTeamMatch = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearInTeamMatch {
  _builderResult.hasInTeamMatch = NO;
  _builderResult.inTeamMatch = 0;
  return self;
}
- (BOOL) hasSpectating {
  return _builderResult.hasSpectating;
}
- (int32_t) spectating {
  return _builderResult.spectating;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setSpectating:(int32_t) value {
  _builderResult.hasSpectating = YES;
  _builderResult.spectating = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearSpectating {
  _builderResult.hasSpectating = NO;
  _builderResult.spectating = 0;
  return self;
}
- (BOOL) hasIdle {
  return _builderResult.hasIdle;
}
- (int32_t) idle {
  return _builderResult.idle;
}
- (CDOTAOverview_PlayersByRegion_Builder*) setIdle:(int32_t) value {
  _builderResult.hasIdle = YES;
  _builderResult.idle = value;
  return self;
}
- (CDOTAOverview_PlayersByRegion_Builder*) clearIdle {
  _builderResult.hasIdle = NO;
  _builderResult.idle = 0;
  return self;
}
@end

@interface CDOTAOverview_ServersByRegion ()
@property int32_t region;
@property int32_t inUse;
@property int32_t available;
@end

@implementation CDOTAOverview_ServersByRegion

- (BOOL) hasRegion {
  return !!hasRegion_;
}
- (void) setHasRegion:(BOOL) value_ {
  hasRegion_ = !!value_;
}
@synthesize region;
- (BOOL) hasInUse {
  return !!hasInUse_;
}
- (void) setHasInUse:(BOOL) value_ {
  hasInUse_ = !!value_;
}
@synthesize inUse;
- (BOOL) hasAvailable {
  return !!hasAvailable_;
}
- (void) setHasAvailable:(BOOL) value_ {
  hasAvailable_ = !!value_;
}
@synthesize available;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.region = 0;
    self.inUse = 0;
    self.available = 0;
  }
  return self;
}
static CDOTAOverview_ServersByRegion* defaultCDOTAOverview_ServersByRegionInstance = nil;
+ (void) initialize {
  if (self == [CDOTAOverview_ServersByRegion class]) {
    defaultCDOTAOverview_ServersByRegionInstance = [[CDOTAOverview_ServersByRegion alloc] init];
  }
}
+ (CDOTAOverview_ServersByRegion*) defaultInstance {
  return defaultCDOTAOverview_ServersByRegionInstance;
}
- (CDOTAOverview_ServersByRegion*) defaultInstance {
  return defaultCDOTAOverview_ServersByRegionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRegion) {
    [output writeInt32:1 value:self.region];
  }
  if (self.hasInUse) {
    [output writeInt32:2 value:self.inUse];
  }
  if (self.hasAvailable) {
    [output writeInt32:3 value:self.available];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRegion) {
    size_ += computeInt32Size(1, self.region);
  }
  if (self.hasInUse) {
    size_ += computeInt32Size(2, self.inUse);
  }
  if (self.hasAvailable) {
    size_ += computeInt32Size(3, self.available);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CDOTAOverview_ServersByRegion*) parseFromData:(NSData*) data {
  return (CDOTAOverview_ServersByRegion*)[[[CDOTAOverview_ServersByRegion builder] mergeFromData:data] build];
}
+ (CDOTAOverview_ServersByRegion*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTAOverview_ServersByRegion*)[[[CDOTAOverview_ServersByRegion builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CDOTAOverview_ServersByRegion*) parseFromInputStream:(NSInputStream*) input {
  return (CDOTAOverview_ServersByRegion*)[[[CDOTAOverview_ServersByRegion builder] mergeFromInputStream:input] build];
}
+ (CDOTAOverview_ServersByRegion*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTAOverview_ServersByRegion*)[[[CDOTAOverview_ServersByRegion builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CDOTAOverview_ServersByRegion*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CDOTAOverview_ServersByRegion*)[[[CDOTAOverview_ServersByRegion builder] mergeFromCodedInputStream:input] build];
}
+ (CDOTAOverview_ServersByRegion*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CDOTAOverview_ServersByRegion*)[[[CDOTAOverview_ServersByRegion builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CDOTAOverview_ServersByRegion_Builder*) builder {
  return [[[CDOTAOverview_ServersByRegion_Builder alloc] init] autorelease];
}
+ (CDOTAOverview_ServersByRegion_Builder*) builderWithPrototype:(CDOTAOverview_ServersByRegion*) prototype {
  return [[CDOTAOverview_ServersByRegion builder] mergeFrom:prototype];
}
- (CDOTAOverview_ServersByRegion_Builder*) builder {
  return [CDOTAOverview_ServersByRegion builder];
}
- (CDOTAOverview_ServersByRegion_Builder*) toBuilder {
  return [CDOTAOverview_ServersByRegion builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRegion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"region", [NSNumber numberWithInt:self.region]];
  }
  if (self.hasInUse) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inUse", [NSNumber numberWithInt:self.inUse]];
  }
  if (self.hasAvailable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"available", [NSNumber numberWithInt:self.available]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CDOTAOverview_ServersByRegion class]]) {
    return NO;
  }
  CDOTAOverview_ServersByRegion *otherMessage = other;
  return
      self.hasRegion == otherMessage.hasRegion &&
      (!self.hasRegion || self.region == otherMessage.region) &&
      self.hasInUse == otherMessage.hasInUse &&
      (!self.hasInUse || self.inUse == otherMessage.inUse) &&
      self.hasAvailable == otherMessage.hasAvailable &&
      (!self.hasAvailable || self.available == otherMessage.available) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasRegion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.region] hash];
  }
  if (self.hasInUse) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inUse] hash];
  }
  if (self.hasAvailable) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.available] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CDOTAOverview_ServersByRegion_Builder()
@property (retain) CDOTAOverview_ServersByRegion* _builderResult;
@end

@implementation CDOTAOverview_ServersByRegion_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CDOTAOverview_ServersByRegion alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CDOTAOverview_ServersByRegion_Builder*) clear {
  _builderResult = [[[CDOTAOverview_ServersByRegion alloc] init] autorelease];
  return self;
}
- (CDOTAOverview_ServersByRegion_Builder*) clone {
  return [CDOTAOverview_ServersByRegion builderWithPrototype:_builderResult];
}
- (CDOTAOverview_ServersByRegion*) defaultInstance {
  return [CDOTAOverview_ServersByRegion defaultInstance];
}
- (CDOTAOverview_ServersByRegion*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CDOTAOverview_ServersByRegion*) buildPartial {
  CDOTAOverview_ServersByRegion* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CDOTAOverview_ServersByRegion_Builder*) mergeFrom:(CDOTAOverview_ServersByRegion*) other {
  if (other == [CDOTAOverview_ServersByRegion defaultInstance]) {
    return self;
  }
  if (other.hasRegion) {
    [self setRegion:other.region];
  }
  if (other.hasInUse) {
    [self setInUse:other.inUse];
  }
  if (other.hasAvailable) {
    [self setAvailable:other.available];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CDOTAOverview_ServersByRegion_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CDOTAOverview_ServersByRegion_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRegion:[input readInt32]];
        break;
      }
      case 16: {
        [self setInUse:[input readInt32]];
        break;
      }
      case 24: {
        [self setAvailable:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRegion {
  return _builderResult.hasRegion;
}
- (int32_t) region {
  return _builderResult.region;
}
- (CDOTAOverview_ServersByRegion_Builder*) setRegion:(int32_t) value {
  _builderResult.hasRegion = YES;
  _builderResult.region = value;
  return self;
}
- (CDOTAOverview_ServersByRegion_Builder*) clearRegion {
  _builderResult.hasRegion = NO;
  _builderResult.region = 0;
  return self;
}
- (BOOL) hasInUse {
  return _builderResult.hasInUse;
}
- (int32_t) inUse {
  return _builderResult.inUse;
}
- (CDOTAOverview_ServersByRegion_Builder*) setInUse:(int32_t) value {
  _builderResult.hasInUse = YES;
  _builderResult.inUse = value;
  return self;
}
- (CDOTAOverview_ServersByRegion_Builder*) clearInUse {
  _builderResult.hasInUse = NO;
  _builderResult.inUse = 0;
  return self;
}
- (BOOL) hasAvailable {
  return _builderResult.hasAvailable;
}
- (int32_t) available {
  return _builderResult.available;
}
- (CDOTAOverview_ServersByRegion_Builder*) setAvailable:(int32_t) value {
  _builderResult.hasAvailable = YES;
  _builderResult.available = value;
  return self;
}
- (CDOTAOverview_ServersByRegion_Builder*) clearAvailable {
  _builderResult.hasAvailable = NO;
  _builderResult.available = 0;
  return self;
}
@end

@interface CDOTAOverview_Builder()
@property (retain) CDOTAOverview* _builderResult;
@end

@implementation CDOTAOverview_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CDOTAOverview alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CDOTAOverview_Builder*) clear {
  _builderResult = [[[CDOTAOverview alloc] init] autorelease];
  return self;
}
- (CDOTAOverview_Builder*) clone {
  return [CDOTAOverview builderWithPrototype:_builderResult];
}
- (CDOTAOverview*) defaultInstance {
  return [CDOTAOverview defaultInstance];
}
- (CDOTAOverview*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CDOTAOverview*) buildPartial {
  CDOTAOverview* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CDOTAOverview_Builder*) mergeFrom:(CDOTAOverview*) other {
  if (other == [CDOTAOverview defaultInstance]) {
    return self;
  }
  if (other.playersByRegionArray.count > 0) {
    if (_builderResult.playersByRegionArray == nil) {
      _builderResult.playersByRegionArray = [[other.playersByRegionArray copyWithZone:[other.playersByRegionArray zone]] autorelease];
    } else {
      [_builderResult.playersByRegionArray appendArray:other.playersByRegionArray];
    }
  }
  if (other.gameServersByRegionArray.count > 0) {
    if (_builderResult.gameServersByRegionArray == nil) {
      _builderResult.gameServersByRegionArray = [[other.gameServersByRegionArray copyWithZone:[other.gameServersByRegionArray zone]] autorelease];
    } else {
      [_builderResult.gameServersByRegionArray appendArray:other.gameServersByRegionArray];
    }
  }
  if (other.proxyServersByRegionArray.count > 0) {
    if (_builderResult.proxyServersByRegionArray == nil) {
      _builderResult.proxyServersByRegionArray = [[other.proxyServersByRegionArray copyWithZone:[other.proxyServersByRegionArray zone]] autorelease];
    } else {
      [_builderResult.proxyServersByRegionArray appendArray:other.proxyServersByRegionArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CDOTAOverview_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CDOTAOverview_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CDOTAOverview_PlayersByRegion_Builder* subBuilder = [CDOTAOverview_PlayersByRegion builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlayersByRegion:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CDOTAOverview_ServersByRegion_Builder* subBuilder = [CDOTAOverview_ServersByRegion builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGameServersByRegion:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        CDOTAOverview_ServersByRegion_Builder* subBuilder = [CDOTAOverview_ServersByRegion builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProxyServersByRegion:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)playersByRegion {
  return _builderResult.playersByRegionArray;
}
- (CDOTAOverview_PlayersByRegion*)playersByRegionAtIndex:(NSUInteger)index {
  return [_builderResult playersByRegionAtIndex:index];
}
- (CDOTAOverview_Builder *)addPlayersByRegion:(CDOTAOverview_PlayersByRegion*)value {
  if (_builderResult.playersByRegionArray == nil) {
    _builderResult.playersByRegionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.playersByRegionArray addObject:value];
  return self;
}
- (CDOTAOverview_Builder *)setPlayersByRegionArray:(NSArray *)array {
  _builderResult.playersByRegionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CDOTAOverview_Builder *)setPlayersByRegionValues:(const CDOTAOverview_PlayersByRegion* *)values count:(NSUInteger)count {
  _builderResult.playersByRegionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CDOTAOverview_Builder *)clearPlayersByRegion {
  _builderResult.playersByRegionArray = nil;
  return self;
}
- (PBAppendableArray *)gameServersByRegion {
  return _builderResult.gameServersByRegionArray;
}
- (CDOTAOverview_ServersByRegion*)gameServersByRegionAtIndex:(NSUInteger)index {
  return [_builderResult gameServersByRegionAtIndex:index];
}
- (CDOTAOverview_Builder *)addGameServersByRegion:(CDOTAOverview_ServersByRegion*)value {
  if (_builderResult.gameServersByRegionArray == nil) {
    _builderResult.gameServersByRegionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.gameServersByRegionArray addObject:value];
  return self;
}
- (CDOTAOverview_Builder *)setGameServersByRegionArray:(NSArray *)array {
  _builderResult.gameServersByRegionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CDOTAOverview_Builder *)setGameServersByRegionValues:(const CDOTAOverview_ServersByRegion* *)values count:(NSUInteger)count {
  _builderResult.gameServersByRegionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CDOTAOverview_Builder *)clearGameServersByRegion {
  _builderResult.gameServersByRegionArray = nil;
  return self;
}
- (PBAppendableArray *)proxyServersByRegion {
  return _builderResult.proxyServersByRegionArray;
}
- (CDOTAOverview_ServersByRegion*)proxyServersByRegionAtIndex:(NSUInteger)index {
  return [_builderResult proxyServersByRegionAtIndex:index];
}
- (CDOTAOverview_Builder *)addProxyServersByRegion:(CDOTAOverview_ServersByRegion*)value {
  if (_builderResult.proxyServersByRegionArray == nil) {
    _builderResult.proxyServersByRegionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.proxyServersByRegionArray addObject:value];
  return self;
}
- (CDOTAOverview_Builder *)setProxyServersByRegionArray:(NSArray *)array {
  _builderResult.proxyServersByRegionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CDOTAOverview_Builder *)setProxyServersByRegionValues:(const CDOTAOverview_ServersByRegion* *)values count:(NSUInteger)count {
  _builderResult.proxyServersByRegionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CDOTAOverview_Builder *)clearProxyServersByRegion {
  _builderResult.proxyServersByRegionArray = nil;
  return self;
}
@end

@interface CMsgSetShowcaseHero ()
@property uint32_t showcaseHeroId;
@end

@implementation CMsgSetShowcaseHero

- (BOOL) hasShowcaseHeroId {
  return !!hasShowcaseHeroId_;
}
- (void) setHasShowcaseHeroId:(BOOL) value_ {
  hasShowcaseHeroId_ = !!value_;
}
@synthesize showcaseHeroId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.showcaseHeroId = 0;
  }
  return self;
}
static CMsgSetShowcaseHero* defaultCMsgSetShowcaseHeroInstance = nil;
+ (void) initialize {
  if (self == [CMsgSetShowcaseHero class]) {
    defaultCMsgSetShowcaseHeroInstance = [[CMsgSetShowcaseHero alloc] init];
  }
}
+ (CMsgSetShowcaseHero*) defaultInstance {
  return defaultCMsgSetShowcaseHeroInstance;
}
- (CMsgSetShowcaseHero*) defaultInstance {
  return defaultCMsgSetShowcaseHeroInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasShowcaseHeroId) {
    [output writeUInt32:1 value:self.showcaseHeroId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasShowcaseHeroId) {
    size_ += computeUInt32Size(1, self.showcaseHeroId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgSetShowcaseHero*) parseFromData:(NSData*) data {
  return (CMsgSetShowcaseHero*)[[[CMsgSetShowcaseHero builder] mergeFromData:data] build];
}
+ (CMsgSetShowcaseHero*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSetShowcaseHero*)[[[CMsgSetShowcaseHero builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgSetShowcaseHero*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgSetShowcaseHero*)[[[CMsgSetShowcaseHero builder] mergeFromInputStream:input] build];
}
+ (CMsgSetShowcaseHero*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSetShowcaseHero*)[[[CMsgSetShowcaseHero builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSetShowcaseHero*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgSetShowcaseHero*)[[[CMsgSetShowcaseHero builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgSetShowcaseHero*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSetShowcaseHero*)[[[CMsgSetShowcaseHero builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSetShowcaseHero_Builder*) builder {
  return [[[CMsgSetShowcaseHero_Builder alloc] init] autorelease];
}
+ (CMsgSetShowcaseHero_Builder*) builderWithPrototype:(CMsgSetShowcaseHero*) prototype {
  return [[CMsgSetShowcaseHero builder] mergeFrom:prototype];
}
- (CMsgSetShowcaseHero_Builder*) builder {
  return [CMsgSetShowcaseHero builder];
}
- (CMsgSetShowcaseHero_Builder*) toBuilder {
  return [CMsgSetShowcaseHero builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasShowcaseHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showcaseHeroId", [NSNumber numberWithInt:self.showcaseHeroId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgSetShowcaseHero class]]) {
    return NO;
  }
  CMsgSetShowcaseHero *otherMessage = other;
  return
      self.hasShowcaseHeroId == otherMessage.hasShowcaseHeroId &&
      (!self.hasShowcaseHeroId || self.showcaseHeroId == otherMessage.showcaseHeroId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasShowcaseHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.showcaseHeroId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgSetShowcaseHero_Builder()
@property (retain) CMsgSetShowcaseHero* _builderResult;
@end

@implementation CMsgSetShowcaseHero_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgSetShowcaseHero alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgSetShowcaseHero_Builder*) clear {
  _builderResult = [[[CMsgSetShowcaseHero alloc] init] autorelease];
  return self;
}
- (CMsgSetShowcaseHero_Builder*) clone {
  return [CMsgSetShowcaseHero builderWithPrototype:_builderResult];
}
- (CMsgSetShowcaseHero*) defaultInstance {
  return [CMsgSetShowcaseHero defaultInstance];
}
- (CMsgSetShowcaseHero*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgSetShowcaseHero*) buildPartial {
  CMsgSetShowcaseHero* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgSetShowcaseHero_Builder*) mergeFrom:(CMsgSetShowcaseHero*) other {
  if (other == [CMsgSetShowcaseHero defaultInstance]) {
    return self;
  }
  if (other.hasShowcaseHeroId) {
    [self setShowcaseHeroId:other.showcaseHeroId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgSetShowcaseHero_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgSetShowcaseHero_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setShowcaseHeroId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasShowcaseHeroId {
  return _builderResult.hasShowcaseHeroId;
}
- (uint32_t) showcaseHeroId {
  return _builderResult.showcaseHeroId;
}
- (CMsgSetShowcaseHero_Builder*) setShowcaseHeroId:(uint32_t) value {
  _builderResult.hasShowcaseHeroId = YES;
  _builderResult.showcaseHeroId = value;
  return self;
}
- (CMsgSetShowcaseHero_Builder*) clearShowcaseHeroId {
  _builderResult.hasShowcaseHeroId = NO;
  _builderResult.showcaseHeroId = 0;
  return self;
}
@end

@interface CMsgRequestLeagueInfo ()
@end

@implementation CMsgRequestLeagueInfo

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgRequestLeagueInfo* defaultCMsgRequestLeagueInfoInstance = nil;
+ (void) initialize {
  if (self == [CMsgRequestLeagueInfo class]) {
    defaultCMsgRequestLeagueInfoInstance = [[CMsgRequestLeagueInfo alloc] init];
  }
}
+ (CMsgRequestLeagueInfo*) defaultInstance {
  return defaultCMsgRequestLeagueInfoInstance;
}
- (CMsgRequestLeagueInfo*) defaultInstance {
  return defaultCMsgRequestLeagueInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgRequestLeagueInfo*) parseFromData:(NSData*) data {
  return (CMsgRequestLeagueInfo*)[[[CMsgRequestLeagueInfo builder] mergeFromData:data] build];
}
+ (CMsgRequestLeagueInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRequestLeagueInfo*)[[[CMsgRequestLeagueInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgRequestLeagueInfo*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgRequestLeagueInfo*)[[[CMsgRequestLeagueInfo builder] mergeFromInputStream:input] build];
}
+ (CMsgRequestLeagueInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRequestLeagueInfo*)[[[CMsgRequestLeagueInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgRequestLeagueInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgRequestLeagueInfo*)[[[CMsgRequestLeagueInfo builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgRequestLeagueInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRequestLeagueInfo*)[[[CMsgRequestLeagueInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgRequestLeagueInfo_Builder*) builder {
  return [[[CMsgRequestLeagueInfo_Builder alloc] init] autorelease];
}
+ (CMsgRequestLeagueInfo_Builder*) builderWithPrototype:(CMsgRequestLeagueInfo*) prototype {
  return [[CMsgRequestLeagueInfo builder] mergeFrom:prototype];
}
- (CMsgRequestLeagueInfo_Builder*) builder {
  return [CMsgRequestLeagueInfo builder];
}
- (CMsgRequestLeagueInfo_Builder*) toBuilder {
  return [CMsgRequestLeagueInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgRequestLeagueInfo class]]) {
    return NO;
  }
  CMsgRequestLeagueInfo *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgRequestLeagueInfo_Builder()
@property (retain) CMsgRequestLeagueInfo* _builderResult;
@end

@implementation CMsgRequestLeagueInfo_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgRequestLeagueInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgRequestLeagueInfo_Builder*) clear {
  _builderResult = [[[CMsgRequestLeagueInfo alloc] init] autorelease];
  return self;
}
- (CMsgRequestLeagueInfo_Builder*) clone {
  return [CMsgRequestLeagueInfo builderWithPrototype:_builderResult];
}
- (CMsgRequestLeagueInfo*) defaultInstance {
  return [CMsgRequestLeagueInfo defaultInstance];
}
- (CMsgRequestLeagueInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgRequestLeagueInfo*) buildPartial {
  CMsgRequestLeagueInfo* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgRequestLeagueInfo_Builder*) mergeFrom:(CMsgRequestLeagueInfo*) other {
  if (other == [CMsgRequestLeagueInfo defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgRequestLeagueInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgRequestLeagueInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CLeague ()
@property uint32_t leagueid;
@property BOOL live;
@property BOOL freeleague;
@end

@implementation CLeague

- (BOOL) hasLeagueid {
  return !!hasLeagueid_;
}
- (void) setHasLeagueid:(BOOL) value_ {
  hasLeagueid_ = !!value_;
}
@synthesize leagueid;
- (BOOL) hasLive {
  return !!hasLive_;
}
- (void) setHasLive:(BOOL) value_ {
  hasLive_ = !!value_;
}
- (BOOL) live {
  return !!live_;
}
- (void) setLive:(BOOL) value_ {
  live_ = !!value_;
}
- (BOOL) hasFreeleague {
  return !!hasFreeleague_;
}
- (void) setHasFreeleague:(BOOL) value_ {
  hasFreeleague_ = !!value_;
}
- (BOOL) freeleague {
  return !!freeleague_;
}
- (void) setFreeleague:(BOOL) value_ {
  freeleague_ = !!value_;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.leagueid = 0;
    self.live = NO;
    self.freeleague = NO;
  }
  return self;
}
static CLeague* defaultCLeagueInstance = nil;
+ (void) initialize {
  if (self == [CLeague class]) {
    defaultCLeagueInstance = [[CLeague alloc] init];
  }
}
+ (CLeague*) defaultInstance {
  return defaultCLeagueInstance;
}
- (CLeague*) defaultInstance {
  return defaultCLeagueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLeagueid) {
    [output writeUInt32:1 value:self.leagueid];
  }
  if (self.hasLive) {
    [output writeBool:2 value:self.live];
  }
  if (self.hasFreeleague) {
    [output writeBool:3 value:self.freeleague];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLeagueid) {
    size_ += computeUInt32Size(1, self.leagueid);
  }
  if (self.hasLive) {
    size_ += computeBoolSize(2, self.live);
  }
  if (self.hasFreeleague) {
    size_ += computeBoolSize(3, self.freeleague);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CLeague*) parseFromData:(NSData*) data {
  return (CLeague*)[[[CLeague builder] mergeFromData:data] build];
}
+ (CLeague*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLeague*)[[[CLeague builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CLeague*) parseFromInputStream:(NSInputStream*) input {
  return (CLeague*)[[[CLeague builder] mergeFromInputStream:input] build];
}
+ (CLeague*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLeague*)[[[CLeague builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLeague*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CLeague*)[[[CLeague builder] mergeFromCodedInputStream:input] build];
}
+ (CLeague*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CLeague*)[[[CLeague builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CLeague_Builder*) builder {
  return [[[CLeague_Builder alloc] init] autorelease];
}
+ (CLeague_Builder*) builderWithPrototype:(CLeague*) prototype {
  return [[CLeague builder] mergeFrom:prototype];
}
- (CLeague_Builder*) builder {
  return [CLeague builder];
}
- (CLeague_Builder*) toBuilder {
  return [CLeague builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLeagueid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueid", [NSNumber numberWithInt:self.leagueid]];
  }
  if (self.hasLive) {
    [output appendFormat:@"%@%@: %@\n", indent, @"live", [NSNumber numberWithBool:self.live]];
  }
  if (self.hasFreeleague) {
    [output appendFormat:@"%@%@: %@\n", indent, @"freeleague", [NSNumber numberWithBool:self.freeleague]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CLeague class]]) {
    return NO;
  }
  CLeague *otherMessage = other;
  return
      self.hasLeagueid == otherMessage.hasLeagueid &&
      (!self.hasLeagueid || self.leagueid == otherMessage.leagueid) &&
      self.hasLive == otherMessage.hasLive &&
      (!self.hasLive || self.live == otherMessage.live) &&
      self.hasFreeleague == otherMessage.hasFreeleague &&
      (!self.hasFreeleague || self.freeleague == otherMessage.freeleague) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLeagueid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.leagueid] hash];
  }
  if (self.hasLive) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.live] hash];
  }
  if (self.hasFreeleague) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.freeleague] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CLeague_Builder()
@property (retain) CLeague* _builderResult;
@end

@implementation CLeague_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CLeague alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CLeague_Builder*) clear {
  _builderResult = [[[CLeague alloc] init] autorelease];
  return self;
}
- (CLeague_Builder*) clone {
  return [CLeague builderWithPrototype:_builderResult];
}
- (CLeague*) defaultInstance {
  return [CLeague defaultInstance];
}
- (CLeague*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CLeague*) buildPartial {
  CLeague* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CLeague_Builder*) mergeFrom:(CLeague*) other {
  if (other == [CLeague defaultInstance]) {
    return self;
  }
  if (other.hasLeagueid) {
    [self setLeagueid:other.leagueid];
  }
  if (other.hasLive) {
    [self setLive:other.live];
  }
  if (other.hasFreeleague) {
    [self setFreeleague:other.freeleague];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CLeague_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CLeague_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLeagueid:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLive:[input readBool]];
        break;
      }
      case 24: {
        [self setFreeleague:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasLeagueid {
  return _builderResult.hasLeagueid;
}
- (uint32_t) leagueid {
  return _builderResult.leagueid;
}
- (CLeague_Builder*) setLeagueid:(uint32_t) value {
  _builderResult.hasLeagueid = YES;
  _builderResult.leagueid = value;
  return self;
}
- (CLeague_Builder*) clearLeagueid {
  _builderResult.hasLeagueid = NO;
  _builderResult.leagueid = 0;
  return self;
}
- (BOOL) hasLive {
  return _builderResult.hasLive;
}
- (BOOL) live {
  return _builderResult.live;
}
- (CLeague_Builder*) setLive:(BOOL) value {
  _builderResult.hasLive = YES;
  _builderResult.live = value;
  return self;
}
- (CLeague_Builder*) clearLive {
  _builderResult.hasLive = NO;
  _builderResult.live = NO;
  return self;
}
- (BOOL) hasFreeleague {
  return _builderResult.hasFreeleague;
}
- (BOOL) freeleague {
  return _builderResult.freeleague;
}
- (CLeague_Builder*) setFreeleague:(BOOL) value {
  _builderResult.hasFreeleague = YES;
  _builderResult.freeleague = value;
  return self;
}
- (CLeague_Builder*) clearFreeleague {
  _builderResult.hasFreeleague = NO;
  _builderResult.freeleague = NO;
  return self;
}
@end

@interface CMsgResponseLeagueInfo ()
@property (retain) PBAppendableArray * leaguesArray;
@end

@implementation CMsgResponseLeagueInfo

@synthesize leaguesArray;
@dynamic leagues;
- (void) dealloc {
  self.leaguesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgResponseLeagueInfo* defaultCMsgResponseLeagueInfoInstance = nil;
+ (void) initialize {
  if (self == [CMsgResponseLeagueInfo class]) {
    defaultCMsgResponseLeagueInfoInstance = [[CMsgResponseLeagueInfo alloc] init];
  }
}
+ (CMsgResponseLeagueInfo*) defaultInstance {
  return defaultCMsgResponseLeagueInfoInstance;
}
- (CMsgResponseLeagueInfo*) defaultInstance {
  return defaultCMsgResponseLeagueInfoInstance;
}
- (PBArray *)leagues {
  return leaguesArray;
}
- (CLeague*)leaguesAtIndex:(NSUInteger)index {
  return [leaguesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CLeague *element in self.leaguesArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CLeague *element in self.leaguesArray) {
    size_ += computeMessageSize(1, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgResponseLeagueInfo*) parseFromData:(NSData*) data {
  return (CMsgResponseLeagueInfo*)[[[CMsgResponseLeagueInfo builder] mergeFromData:data] build];
}
+ (CMsgResponseLeagueInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgResponseLeagueInfo*)[[[CMsgResponseLeagueInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgResponseLeagueInfo*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgResponseLeagueInfo*)[[[CMsgResponseLeagueInfo builder] mergeFromInputStream:input] build];
}
+ (CMsgResponseLeagueInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgResponseLeagueInfo*)[[[CMsgResponseLeagueInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgResponseLeagueInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgResponseLeagueInfo*)[[[CMsgResponseLeagueInfo builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgResponseLeagueInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgResponseLeagueInfo*)[[[CMsgResponseLeagueInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgResponseLeagueInfo_Builder*) builder {
  return [[[CMsgResponseLeagueInfo_Builder alloc] init] autorelease];
}
+ (CMsgResponseLeagueInfo_Builder*) builderWithPrototype:(CMsgResponseLeagueInfo*) prototype {
  return [[CMsgResponseLeagueInfo builder] mergeFrom:prototype];
}
- (CMsgResponseLeagueInfo_Builder*) builder {
  return [CMsgResponseLeagueInfo builder];
}
- (CMsgResponseLeagueInfo_Builder*) toBuilder {
  return [CMsgResponseLeagueInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CLeague* element in self.leaguesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"leagues"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgResponseLeagueInfo class]]) {
    return NO;
  }
  CMsgResponseLeagueInfo *otherMessage = other;
  return
      [self.leaguesArray isEqualToArray:otherMessage.leaguesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CLeague* element in self.leaguesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgResponseLeagueInfo_Builder()
@property (retain) CMsgResponseLeagueInfo* _builderResult;
@end

@implementation CMsgResponseLeagueInfo_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgResponseLeagueInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgResponseLeagueInfo_Builder*) clear {
  _builderResult = [[[CMsgResponseLeagueInfo alloc] init] autorelease];
  return self;
}
- (CMsgResponseLeagueInfo_Builder*) clone {
  return [CMsgResponseLeagueInfo builderWithPrototype:_builderResult];
}
- (CMsgResponseLeagueInfo*) defaultInstance {
  return [CMsgResponseLeagueInfo defaultInstance];
}
- (CMsgResponseLeagueInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgResponseLeagueInfo*) buildPartial {
  CMsgResponseLeagueInfo* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgResponseLeagueInfo_Builder*) mergeFrom:(CMsgResponseLeagueInfo*) other {
  if (other == [CMsgResponseLeagueInfo defaultInstance]) {
    return self;
  }
  if (other.leaguesArray.count > 0) {
    if (_builderResult.leaguesArray == nil) {
      _builderResult.leaguesArray = [[other.leaguesArray copyWithZone:[other.leaguesArray zone]] autorelease];
    } else {
      [_builderResult.leaguesArray appendArray:other.leaguesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgResponseLeagueInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgResponseLeagueInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CLeague_Builder* subBuilder = [CLeague builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLeagues:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)leagues {
  return _builderResult.leaguesArray;
}
- (CLeague*)leaguesAtIndex:(NSUInteger)index {
  return [_builderResult leaguesAtIndex:index];
}
- (CMsgResponseLeagueInfo_Builder *)addLeagues:(CLeague*)value {
  if (_builderResult.leaguesArray == nil) {
    _builderResult.leaguesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.leaguesArray addObject:value];
  return self;
}
- (CMsgResponseLeagueInfo_Builder *)setLeaguesArray:(NSArray *)array {
  _builderResult.leaguesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgResponseLeagueInfo_Builder *)setLeaguesValues:(const CLeague* *)values count:(NSUInteger)count {
  _builderResult.leaguesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgResponseLeagueInfo_Builder *)clearLeagues {
  _builderResult.leaguesArray = nil;
  return self;
}
@end

@interface CMsgTournamentItemEvent ()
@property uint32_t killerAccountId;
@property uint32_t victimAccountId;
@property DOTA_TournamentEvents event_type;
@property int32_t tvDelay;
@property int32_t dotaTime;
@property Float32 replayTime;
@property (retain) NSString* lootList;
@property uint32_t eventTeam;
@property uint32_t multiKillCount;
@property uint32_t winnerScore;
@property uint32_t loserScore;
@end

@implementation CMsgTournamentItemEvent

- (BOOL) hasKillerAccountId {
  return !!hasKillerAccountId_;
}
- (void) setHasKillerAccountId:(BOOL) value_ {
  hasKillerAccountId_ = !!value_;
}
@synthesize killerAccountId;
- (BOOL) hasVictimAccountId {
  return !!hasVictimAccountId_;
}
- (void) setHasVictimAccountId:(BOOL) value_ {
  hasVictimAccountId_ = !!value_;
}
@synthesize victimAccountId;
- (BOOL) hasevent_type {
  return !!hasevent_type_;
}
- (void) setHasevent_type:(BOOL) value_ {
  hasevent_type_ = !!value_;
}
@synthesize event_type;
- (BOOL) hasTvDelay {
  return !!hasTvDelay_;
}
- (void) setHasTvDelay:(BOOL) value_ {
  hasTvDelay_ = !!value_;
}
@synthesize tvDelay;
- (BOOL) hasDotaTime {
  return !!hasDotaTime_;
}
- (void) setHasDotaTime:(BOOL) value_ {
  hasDotaTime_ = !!value_;
}
@synthesize dotaTime;
- (BOOL) hasReplayTime {
  return !!hasReplayTime_;
}
- (void) setHasReplayTime:(BOOL) value_ {
  hasReplayTime_ = !!value_;
}
@synthesize replayTime;
- (BOOL) hasLootList {
  return !!hasLootList_;
}
- (void) setHasLootList:(BOOL) value_ {
  hasLootList_ = !!value_;
}
@synthesize lootList;
- (BOOL) hasEventTeam {
  return !!hasEventTeam_;
}
- (void) setHasEventTeam:(BOOL) value_ {
  hasEventTeam_ = !!value_;
}
@synthesize eventTeam;
- (BOOL) hasMultiKillCount {
  return !!hasMultiKillCount_;
}
- (void) setHasMultiKillCount:(BOOL) value_ {
  hasMultiKillCount_ = !!value_;
}
@synthesize multiKillCount;
- (BOOL) hasWinnerScore {
  return !!hasWinnerScore_;
}
- (void) setHasWinnerScore:(BOOL) value_ {
  hasWinnerScore_ = !!value_;
}
@synthesize winnerScore;
- (BOOL) hasLoserScore {
  return !!hasLoserScore_;
}
- (void) setHasLoserScore:(BOOL) value_ {
  hasLoserScore_ = !!value_;
}
@synthesize loserScore;
- (void) dealloc {
  self.lootList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.killerAccountId = 0;
    self.victimAccountId = 0;
    self.event_type = DOTA_TournamentEventsTE_FIRST_BLOOD;
    self.tvDelay = 0;
    self.dotaTime = 0;
    self.replayTime = 0;
    self.lootList = @"";
    self.eventTeam = 0;
    self.multiKillCount = 0;
    self.winnerScore = 0;
    self.loserScore = 0;
  }
  return self;
}
static CMsgTournamentItemEvent* defaultCMsgTournamentItemEventInstance = nil;
+ (void) initialize {
  if (self == [CMsgTournamentItemEvent class]) {
    defaultCMsgTournamentItemEventInstance = [[CMsgTournamentItemEvent alloc] init];
  }
}
+ (CMsgTournamentItemEvent*) defaultInstance {
  return defaultCMsgTournamentItemEventInstance;
}
- (CMsgTournamentItemEvent*) defaultInstance {
  return defaultCMsgTournamentItemEventInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKillerAccountId) {
    [output writeFixed32:1 value:self.killerAccountId];
  }
  if (self.hasVictimAccountId) {
    [output writeFixed32:2 value:self.victimAccountId];
  }
  if (self.hasevent_type) {
    [output writeEnum:3 value:self.event_type];
  }
  if (self.hasTvDelay) {
    [output writeInt32:4 value:self.tvDelay];
  }
  if (self.hasDotaTime) {
    [output writeInt32:5 value:self.dotaTime];
  }
  if (self.hasReplayTime) {
    [output writeFloat:6 value:self.replayTime];
  }
  if (self.hasLootList) {
    [output writeString:7 value:self.lootList];
  }
  if (self.hasEventTeam) {
    [output writeUInt32:8 value:self.eventTeam];
  }
  if (self.hasMultiKillCount) {
    [output writeUInt32:9 value:self.multiKillCount];
  }
  if (self.hasWinnerScore) {
    [output writeUInt32:10 value:self.winnerScore];
  }
  if (self.hasLoserScore) {
    [output writeUInt32:11 value:self.loserScore];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKillerAccountId) {
    size_ += computeFixed32Size(1, self.killerAccountId);
  }
  if (self.hasVictimAccountId) {
    size_ += computeFixed32Size(2, self.victimAccountId);
  }
  if (self.hasevent_type) {
    size_ += computeEnumSize(3, self.event_type);
  }
  if (self.hasTvDelay) {
    size_ += computeInt32Size(4, self.tvDelay);
  }
  if (self.hasDotaTime) {
    size_ += computeInt32Size(5, self.dotaTime);
  }
  if (self.hasReplayTime) {
    size_ += computeFloatSize(6, self.replayTime);
  }
  if (self.hasLootList) {
    size_ += computeStringSize(7, self.lootList);
  }
  if (self.hasEventTeam) {
    size_ += computeUInt32Size(8, self.eventTeam);
  }
  if (self.hasMultiKillCount) {
    size_ += computeUInt32Size(9, self.multiKillCount);
  }
  if (self.hasWinnerScore) {
    size_ += computeUInt32Size(10, self.winnerScore);
  }
  if (self.hasLoserScore) {
    size_ += computeUInt32Size(11, self.loserScore);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgTournamentItemEvent*) parseFromData:(NSData*) data {
  return (CMsgTournamentItemEvent*)[[[CMsgTournamentItemEvent builder] mergeFromData:data] build];
}
+ (CMsgTournamentItemEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTournamentItemEvent*)[[[CMsgTournamentItemEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgTournamentItemEvent*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgTournamentItemEvent*)[[[CMsgTournamentItemEvent builder] mergeFromInputStream:input] build];
}
+ (CMsgTournamentItemEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTournamentItemEvent*)[[[CMsgTournamentItemEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTournamentItemEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgTournamentItemEvent*)[[[CMsgTournamentItemEvent builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgTournamentItemEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTournamentItemEvent*)[[[CMsgTournamentItemEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTournamentItemEvent_Builder*) builder {
  return [[[CMsgTournamentItemEvent_Builder alloc] init] autorelease];
}
+ (CMsgTournamentItemEvent_Builder*) builderWithPrototype:(CMsgTournamentItemEvent*) prototype {
  return [[CMsgTournamentItemEvent builder] mergeFrom:prototype];
}
- (CMsgTournamentItemEvent_Builder*) builder {
  return [CMsgTournamentItemEvent builder];
}
- (CMsgTournamentItemEvent_Builder*) toBuilder {
  return [CMsgTournamentItemEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKillerAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"killerAccountId", [NSNumber numberWithInt:self.killerAccountId]];
  }
  if (self.hasVictimAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"victimAccountId", [NSNumber numberWithInt:self.victimAccountId]];
  }
  if (self.hasevent_type) {
    [output appendFormat:@"%@%@: %d\n", indent, @"event_type", self.event_type];
  }
  if (self.hasTvDelay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tvDelay", [NSNumber numberWithInt:self.tvDelay]];
  }
  if (self.hasDotaTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dotaTime", [NSNumber numberWithInt:self.dotaTime]];
  }
  if (self.hasReplayTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replayTime", [NSNumber numberWithFloat:self.replayTime]];
  }
  if (self.hasLootList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lootList", self.lootList];
  }
  if (self.hasEventTeam) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventTeam", [NSNumber numberWithInt:self.eventTeam]];
  }
  if (self.hasMultiKillCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"multiKillCount", [NSNumber numberWithInt:self.multiKillCount]];
  }
  if (self.hasWinnerScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"winnerScore", [NSNumber numberWithInt:self.winnerScore]];
  }
  if (self.hasLoserScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loserScore", [NSNumber numberWithInt:self.loserScore]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgTournamentItemEvent class]]) {
    return NO;
  }
  CMsgTournamentItemEvent *otherMessage = other;
  return
      self.hasKillerAccountId == otherMessage.hasKillerAccountId &&
      (!self.hasKillerAccountId || self.killerAccountId == otherMessage.killerAccountId) &&
      self.hasVictimAccountId == otherMessage.hasVictimAccountId &&
      (!self.hasVictimAccountId || self.victimAccountId == otherMessage.victimAccountId) &&
      self.hasevent_type == otherMessage.hasevent_type &&
      (!self.hasevent_type || self.event_type == otherMessage.event_type) &&
      self.hasTvDelay == otherMessage.hasTvDelay &&
      (!self.hasTvDelay || self.tvDelay == otherMessage.tvDelay) &&
      self.hasDotaTime == otherMessage.hasDotaTime &&
      (!self.hasDotaTime || self.dotaTime == otherMessage.dotaTime) &&
      self.hasReplayTime == otherMessage.hasReplayTime &&
      (!self.hasReplayTime || self.replayTime == otherMessage.replayTime) &&
      self.hasLootList == otherMessage.hasLootList &&
      (!self.hasLootList || [self.lootList isEqual:otherMessage.lootList]) &&
      self.hasEventTeam == otherMessage.hasEventTeam &&
      (!self.hasEventTeam || self.eventTeam == otherMessage.eventTeam) &&
      self.hasMultiKillCount == otherMessage.hasMultiKillCount &&
      (!self.hasMultiKillCount || self.multiKillCount == otherMessage.multiKillCount) &&
      self.hasWinnerScore == otherMessage.hasWinnerScore &&
      (!self.hasWinnerScore || self.winnerScore == otherMessage.winnerScore) &&
      self.hasLoserScore == otherMessage.hasLoserScore &&
      (!self.hasLoserScore || self.loserScore == otherMessage.loserScore) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasKillerAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.killerAccountId] hash];
  }
  if (self.hasVictimAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.victimAccountId] hash];
  }
  if (self.hasevent_type) {
    hashCode = hashCode * 31 + self.event_type;
  }
  if (self.hasTvDelay) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tvDelay] hash];
  }
  if (self.hasDotaTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.dotaTime] hash];
  }
  if (self.hasReplayTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.replayTime] hash];
  }
  if (self.hasLootList) {
    hashCode = hashCode * 31 + [self.lootList hash];
  }
  if (self.hasEventTeam) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eventTeam] hash];
  }
  if (self.hasMultiKillCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.multiKillCount] hash];
  }
  if (self.hasWinnerScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.winnerScore] hash];
  }
  if (self.hasLoserScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.loserScore] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgTournamentItemEvent_Builder()
@property (retain) CMsgTournamentItemEvent* _builderResult;
@end

@implementation CMsgTournamentItemEvent_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgTournamentItemEvent alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgTournamentItemEvent_Builder*) clear {
  _builderResult = [[[CMsgTournamentItemEvent alloc] init] autorelease];
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clone {
  return [CMsgTournamentItemEvent builderWithPrototype:_builderResult];
}
- (CMsgTournamentItemEvent*) defaultInstance {
  return [CMsgTournamentItemEvent defaultInstance];
}
- (CMsgTournamentItemEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgTournamentItemEvent*) buildPartial {
  CMsgTournamentItemEvent* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgTournamentItemEvent_Builder*) mergeFrom:(CMsgTournamentItemEvent*) other {
  if (other == [CMsgTournamentItemEvent defaultInstance]) {
    return self;
  }
  if (other.hasKillerAccountId) {
    [self setKillerAccountId:other.killerAccountId];
  }
  if (other.hasVictimAccountId) {
    [self setVictimAccountId:other.victimAccountId];
  }
  if (other.hasevent_type) {
    [self setevent_type:other.event_type];
  }
  if (other.hasTvDelay) {
    [self setTvDelay:other.tvDelay];
  }
  if (other.hasDotaTime) {
    [self setDotaTime:other.dotaTime];
  }
  if (other.hasReplayTime) {
    [self setReplayTime:other.replayTime];
  }
  if (other.hasLootList) {
    [self setLootList:other.lootList];
  }
  if (other.hasEventTeam) {
    [self setEventTeam:other.eventTeam];
  }
  if (other.hasMultiKillCount) {
    [self setMultiKillCount:other.multiKillCount];
  }
  if (other.hasWinnerScore) {
    [self setWinnerScore:other.winnerScore];
  }
  if (other.hasLoserScore) {
    [self setLoserScore:other.loserScore];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgTournamentItemEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgTournamentItemEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setKillerAccountId:[input readFixed32]];
        break;
      }
      case 21: {
        [self setVictimAccountId:[input readFixed32]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (DOTA_TournamentEventsIsValidValue(value)) {
          [self setevent_type:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setTvDelay:[input readInt32]];
        break;
      }
      case 40: {
        [self setDotaTime:[input readInt32]];
        break;
      }
      case 53: {
        [self setReplayTime:[input readFloat]];
        break;
      }
      case 58: {
        [self setLootList:[input readString]];
        break;
      }
      case 64: {
        [self setEventTeam:[input readUInt32]];
        break;
      }
      case 72: {
        [self setMultiKillCount:[input readUInt32]];
        break;
      }
      case 80: {
        [self setWinnerScore:[input readUInt32]];
        break;
      }
      case 88: {
        [self setLoserScore:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasKillerAccountId {
  return _builderResult.hasKillerAccountId;
}
- (uint32_t) killerAccountId {
  return _builderResult.killerAccountId;
}
- (CMsgTournamentItemEvent_Builder*) setKillerAccountId:(uint32_t) value {
  _builderResult.hasKillerAccountId = YES;
  _builderResult.killerAccountId = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearKillerAccountId {
  _builderResult.hasKillerAccountId = NO;
  _builderResult.killerAccountId = 0;
  return self;
}
- (BOOL) hasVictimAccountId {
  return _builderResult.hasVictimAccountId;
}
- (uint32_t) victimAccountId {
  return _builderResult.victimAccountId;
}
- (CMsgTournamentItemEvent_Builder*) setVictimAccountId:(uint32_t) value {
  _builderResult.hasVictimAccountId = YES;
  _builderResult.victimAccountId = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearVictimAccountId {
  _builderResult.hasVictimAccountId = NO;
  _builderResult.victimAccountId = 0;
  return self;
}
- (BOOL) hasevent_type {
  return _builderResult.hasevent_type;
}
- (DOTA_TournamentEvents) event_type {
  return _builderResult.event_type;
}
- (CMsgTournamentItemEvent_Builder*) setevent_type:(DOTA_TournamentEvents) value {
  _builderResult.hasevent_type = YES;
  _builderResult.event_type = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearevent_type {
  _builderResult.hasevent_type = NO;
  _builderResult.event_type = DOTA_TournamentEventsTE_FIRST_BLOOD;
  return self;
}
- (BOOL) hasTvDelay {
  return _builderResult.hasTvDelay;
}
- (int32_t) tvDelay {
  return _builderResult.tvDelay;
}
- (CMsgTournamentItemEvent_Builder*) setTvDelay:(int32_t) value {
  _builderResult.hasTvDelay = YES;
  _builderResult.tvDelay = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearTvDelay {
  _builderResult.hasTvDelay = NO;
  _builderResult.tvDelay = 0;
  return self;
}
- (BOOL) hasDotaTime {
  return _builderResult.hasDotaTime;
}
- (int32_t) dotaTime {
  return _builderResult.dotaTime;
}
- (CMsgTournamentItemEvent_Builder*) setDotaTime:(int32_t) value {
  _builderResult.hasDotaTime = YES;
  _builderResult.dotaTime = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearDotaTime {
  _builderResult.hasDotaTime = NO;
  _builderResult.dotaTime = 0;
  return self;
}
- (BOOL) hasReplayTime {
  return _builderResult.hasReplayTime;
}
- (Float32) replayTime {
  return _builderResult.replayTime;
}
- (CMsgTournamentItemEvent_Builder*) setReplayTime:(Float32) value {
  _builderResult.hasReplayTime = YES;
  _builderResult.replayTime = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearReplayTime {
  _builderResult.hasReplayTime = NO;
  _builderResult.replayTime = 0;
  return self;
}
- (BOOL) hasLootList {
  return _builderResult.hasLootList;
}
- (NSString*) lootList {
  return _builderResult.lootList;
}
- (CMsgTournamentItemEvent_Builder*) setLootList:(NSString*) value {
  _builderResult.hasLootList = YES;
  _builderResult.lootList = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearLootList {
  _builderResult.hasLootList = NO;
  _builderResult.lootList = @"";
  return self;
}
- (BOOL) hasEventTeam {
  return _builderResult.hasEventTeam;
}
- (uint32_t) eventTeam {
  return _builderResult.eventTeam;
}
- (CMsgTournamentItemEvent_Builder*) setEventTeam:(uint32_t) value {
  _builderResult.hasEventTeam = YES;
  _builderResult.eventTeam = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearEventTeam {
  _builderResult.hasEventTeam = NO;
  _builderResult.eventTeam = 0;
  return self;
}
- (BOOL) hasMultiKillCount {
  return _builderResult.hasMultiKillCount;
}
- (uint32_t) multiKillCount {
  return _builderResult.multiKillCount;
}
- (CMsgTournamentItemEvent_Builder*) setMultiKillCount:(uint32_t) value {
  _builderResult.hasMultiKillCount = YES;
  _builderResult.multiKillCount = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearMultiKillCount {
  _builderResult.hasMultiKillCount = NO;
  _builderResult.multiKillCount = 0;
  return self;
}
- (BOOL) hasWinnerScore {
  return _builderResult.hasWinnerScore;
}
- (uint32_t) winnerScore {
  return _builderResult.winnerScore;
}
- (CMsgTournamentItemEvent_Builder*) setWinnerScore:(uint32_t) value {
  _builderResult.hasWinnerScore = YES;
  _builderResult.winnerScore = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearWinnerScore {
  _builderResult.hasWinnerScore = NO;
  _builderResult.winnerScore = 0;
  return self;
}
- (BOOL) hasLoserScore {
  return _builderResult.hasLoserScore;
}
- (uint32_t) loserScore {
  return _builderResult.loserScore;
}
- (CMsgTournamentItemEvent_Builder*) setLoserScore:(uint32_t) value {
  _builderResult.hasLoserScore = YES;
  _builderResult.loserScore = value;
  return self;
}
- (CMsgTournamentItemEvent_Builder*) clearLoserScore {
  _builderResult.hasLoserScore = NO;
  _builderResult.loserScore = 0;
  return self;
}
@end

@interface CMsgTournamentItemEventResponse ()
@property DOTA_TournamentEvents event_type;
@property (retain) NSString* winnerName;
@end

@implementation CMsgTournamentItemEventResponse

- (BOOL) hasevent_type {
  return !!hasevent_type_;
}
- (void) setHasevent_type:(BOOL) value_ {
  hasevent_type_ = !!value_;
}
@synthesize event_type;
- (BOOL) hasWinnerName {
  return !!hasWinnerName_;
}
- (void) setHasWinnerName:(BOOL) value_ {
  hasWinnerName_ = !!value_;
}
@synthesize winnerName;
- (void) dealloc {
  self.winnerName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.event_type = DOTA_TournamentEventsTE_FIRST_BLOOD;
    self.winnerName = @"";
  }
  return self;
}
static CMsgTournamentItemEventResponse* defaultCMsgTournamentItemEventResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgTournamentItemEventResponse class]) {
    defaultCMsgTournamentItemEventResponseInstance = [[CMsgTournamentItemEventResponse alloc] init];
  }
}
+ (CMsgTournamentItemEventResponse*) defaultInstance {
  return defaultCMsgTournamentItemEventResponseInstance;
}
- (CMsgTournamentItemEventResponse*) defaultInstance {
  return defaultCMsgTournamentItemEventResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasevent_type) {
    [output writeEnum:1 value:self.event_type];
  }
  if (self.hasWinnerName) {
    [output writeString:2 value:self.winnerName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasevent_type) {
    size_ += computeEnumSize(1, self.event_type);
  }
  if (self.hasWinnerName) {
    size_ += computeStringSize(2, self.winnerName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgTournamentItemEventResponse*) parseFromData:(NSData*) data {
  return (CMsgTournamentItemEventResponse*)[[[CMsgTournamentItemEventResponse builder] mergeFromData:data] build];
}
+ (CMsgTournamentItemEventResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTournamentItemEventResponse*)[[[CMsgTournamentItemEventResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgTournamentItemEventResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgTournamentItemEventResponse*)[[[CMsgTournamentItemEventResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgTournamentItemEventResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTournamentItemEventResponse*)[[[CMsgTournamentItemEventResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTournamentItemEventResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgTournamentItemEventResponse*)[[[CMsgTournamentItemEventResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgTournamentItemEventResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTournamentItemEventResponse*)[[[CMsgTournamentItemEventResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTournamentItemEventResponse_Builder*) builder {
  return [[[CMsgTournamentItemEventResponse_Builder alloc] init] autorelease];
}
+ (CMsgTournamentItemEventResponse_Builder*) builderWithPrototype:(CMsgTournamentItemEventResponse*) prototype {
  return [[CMsgTournamentItemEventResponse builder] mergeFrom:prototype];
}
- (CMsgTournamentItemEventResponse_Builder*) builder {
  return [CMsgTournamentItemEventResponse builder];
}
- (CMsgTournamentItemEventResponse_Builder*) toBuilder {
  return [CMsgTournamentItemEventResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasevent_type) {
    [output appendFormat:@"%@%@: %d\n", indent, @"event_type", self.event_type];
  }
  if (self.hasWinnerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"winnerName", self.winnerName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgTournamentItemEventResponse class]]) {
    return NO;
  }
  CMsgTournamentItemEventResponse *otherMessage = other;
  return
      self.hasevent_type == otherMessage.hasevent_type &&
      (!self.hasevent_type || self.event_type == otherMessage.event_type) &&
      self.hasWinnerName == otherMessage.hasWinnerName &&
      (!self.hasWinnerName || [self.winnerName isEqual:otherMessage.winnerName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasevent_type) {
    hashCode = hashCode * 31 + self.event_type;
  }
  if (self.hasWinnerName) {
    hashCode = hashCode * 31 + [self.winnerName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgTournamentItemEventResponse_Builder()
@property (retain) CMsgTournamentItemEventResponse* _builderResult;
@end

@implementation CMsgTournamentItemEventResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgTournamentItemEventResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgTournamentItemEventResponse_Builder*) clear {
  _builderResult = [[[CMsgTournamentItemEventResponse alloc] init] autorelease];
  return self;
}
- (CMsgTournamentItemEventResponse_Builder*) clone {
  return [CMsgTournamentItemEventResponse builderWithPrototype:_builderResult];
}
- (CMsgTournamentItemEventResponse*) defaultInstance {
  return [CMsgTournamentItemEventResponse defaultInstance];
}
- (CMsgTournamentItemEventResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgTournamentItemEventResponse*) buildPartial {
  CMsgTournamentItemEventResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgTournamentItemEventResponse_Builder*) mergeFrom:(CMsgTournamentItemEventResponse*) other {
  if (other == [CMsgTournamentItemEventResponse defaultInstance]) {
    return self;
  }
  if (other.hasevent_type) {
    [self setevent_type:other.event_type];
  }
  if (other.hasWinnerName) {
    [self setWinnerName:other.winnerName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgTournamentItemEventResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgTournamentItemEventResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (DOTA_TournamentEventsIsValidValue(value)) {
          [self setevent_type:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setWinnerName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasevent_type {
  return _builderResult.hasevent_type;
}
- (DOTA_TournamentEvents) event_type {
  return _builderResult.event_type;
}
- (CMsgTournamentItemEventResponse_Builder*) setevent_type:(DOTA_TournamentEvents) value {
  _builderResult.hasevent_type = YES;
  _builderResult.event_type = value;
  return self;
}
- (CMsgTournamentItemEventResponse_Builder*) clearevent_type {
  _builderResult.hasevent_type = NO;
  _builderResult.event_type = DOTA_TournamentEventsTE_FIRST_BLOOD;
  return self;
}
- (BOOL) hasWinnerName {
  return _builderResult.hasWinnerName;
}
- (NSString*) winnerName {
  return _builderResult.winnerName;
}
- (CMsgTournamentItemEventResponse_Builder*) setWinnerName:(NSString*) value {
  _builderResult.hasWinnerName = YES;
  _builderResult.winnerName = value;
  return self;
}
- (CMsgTournamentItemEventResponse_Builder*) clearWinnerName {
  _builderResult.hasWinnerName = NO;
  _builderResult.winnerName = @"";
  return self;
}
@end

@interface CMsgDOTAMatchVotes ()
@property uint32_t matchId;
@property (retain) PBAppendableArray * votesArray;
@end

@implementation CMsgDOTAMatchVotes

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
@synthesize votesArray;
@dynamic votes;
- (void) dealloc {
  self.votesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
  }
  return self;
}
static CMsgDOTAMatchVotes* defaultCMsgDOTAMatchVotesInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAMatchVotes class]) {
    defaultCMsgDOTAMatchVotesInstance = [[CMsgDOTAMatchVotes alloc] init];
  }
}
+ (CMsgDOTAMatchVotes*) defaultInstance {
  return defaultCMsgDOTAMatchVotesInstance;
}
- (CMsgDOTAMatchVotes*) defaultInstance {
  return defaultCMsgDOTAMatchVotesInstance;
}
- (PBArray *)votes {
  return votesArray;
}
- (CMsgDOTAMatchVotes_PlayerVote*)votesAtIndex:(NSUInteger)index {
  return [votesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  for (CMsgDOTAMatchVotes_PlayerVote *element in self.votesArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  for (CMsgDOTAMatchVotes_PlayerVote *element in self.votesArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAMatchVotes*) parseFromData:(NSData*) data {
  return (CMsgDOTAMatchVotes*)[[[CMsgDOTAMatchVotes builder] mergeFromData:data] build];
}
+ (CMsgDOTAMatchVotes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchVotes*)[[[CMsgDOTAMatchVotes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchVotes*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAMatchVotes*)[[[CMsgDOTAMatchVotes builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAMatchVotes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchVotes*)[[[CMsgDOTAMatchVotes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchVotes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAMatchVotes*)[[[CMsgDOTAMatchVotes builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAMatchVotes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchVotes*)[[[CMsgDOTAMatchVotes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchVotes_Builder*) builder {
  return [[[CMsgDOTAMatchVotes_Builder alloc] init] autorelease];
}
+ (CMsgDOTAMatchVotes_Builder*) builderWithPrototype:(CMsgDOTAMatchVotes*) prototype {
  return [[CMsgDOTAMatchVotes builder] mergeFrom:prototype];
}
- (CMsgDOTAMatchVotes_Builder*) builder {
  return [CMsgDOTAMatchVotes builder];
}
- (CMsgDOTAMatchVotes_Builder*) toBuilder {
  return [CMsgDOTAMatchVotes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  for (CMsgDOTAMatchVotes_PlayerVote* element in self.votesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"votes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAMatchVotes class]]) {
    return NO;
  }
  CMsgDOTAMatchVotes *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      [self.votesArray isEqualToArray:otherMessage.votesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  for (CMsgDOTAMatchVotes_PlayerVote* element in self.votesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAMatchVotes_PlayerVote ()
@property uint32_t accountId;
@property uint32_t vote;
@end

@implementation CMsgDOTAMatchVotes_PlayerVote

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasVote {
  return !!hasVote_;
}
- (void) setHasVote:(BOOL) value_ {
  hasVote_ = !!value_;
}
@synthesize vote;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.vote = 0;
  }
  return self;
}
static CMsgDOTAMatchVotes_PlayerVote* defaultCMsgDOTAMatchVotes_PlayerVoteInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAMatchVotes_PlayerVote class]) {
    defaultCMsgDOTAMatchVotes_PlayerVoteInstance = [[CMsgDOTAMatchVotes_PlayerVote alloc] init];
  }
}
+ (CMsgDOTAMatchVotes_PlayerVote*) defaultInstance {
  return defaultCMsgDOTAMatchVotes_PlayerVoteInstance;
}
- (CMsgDOTAMatchVotes_PlayerVote*) defaultInstance {
  return defaultCMsgDOTAMatchVotes_PlayerVoteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasVote) {
    [output writeUInt32:2 value:self.vote];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasVote) {
    size_ += computeUInt32Size(2, self.vote);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAMatchVotes_PlayerVote*) parseFromData:(NSData*) data {
  return (CMsgDOTAMatchVotes_PlayerVote*)[[[CMsgDOTAMatchVotes_PlayerVote builder] mergeFromData:data] build];
}
+ (CMsgDOTAMatchVotes_PlayerVote*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchVotes_PlayerVote*)[[[CMsgDOTAMatchVotes_PlayerVote builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchVotes_PlayerVote*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAMatchVotes_PlayerVote*)[[[CMsgDOTAMatchVotes_PlayerVote builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAMatchVotes_PlayerVote*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchVotes_PlayerVote*)[[[CMsgDOTAMatchVotes_PlayerVote builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchVotes_PlayerVote*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAMatchVotes_PlayerVote*)[[[CMsgDOTAMatchVotes_PlayerVote builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAMatchVotes_PlayerVote*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAMatchVotes_PlayerVote*)[[[CMsgDOTAMatchVotes_PlayerVote builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAMatchVotes_PlayerVote_Builder*) builder {
  return [[[CMsgDOTAMatchVotes_PlayerVote_Builder alloc] init] autorelease];
}
+ (CMsgDOTAMatchVotes_PlayerVote_Builder*) builderWithPrototype:(CMsgDOTAMatchVotes_PlayerVote*) prototype {
  return [[CMsgDOTAMatchVotes_PlayerVote builder] mergeFrom:prototype];
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) builder {
  return [CMsgDOTAMatchVotes_PlayerVote builder];
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) toBuilder {
  return [CMsgDOTAMatchVotes_PlayerVote builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasVote) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vote", [NSNumber numberWithInt:self.vote]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAMatchVotes_PlayerVote class]]) {
    return NO;
  }
  CMsgDOTAMatchVotes_PlayerVote *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasVote == otherMessage.hasVote &&
      (!self.hasVote || self.vote == otherMessage.vote) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasVote) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.vote] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAMatchVotes_PlayerVote_Builder()
@property (retain) CMsgDOTAMatchVotes_PlayerVote* _builderResult;
@end

@implementation CMsgDOTAMatchVotes_PlayerVote_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAMatchVotes_PlayerVote alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) clear {
  _builderResult = [[[CMsgDOTAMatchVotes_PlayerVote alloc] init] autorelease];
  return self;
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) clone {
  return [CMsgDOTAMatchVotes_PlayerVote builderWithPrototype:_builderResult];
}
- (CMsgDOTAMatchVotes_PlayerVote*) defaultInstance {
  return [CMsgDOTAMatchVotes_PlayerVote defaultInstance];
}
- (CMsgDOTAMatchVotes_PlayerVote*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAMatchVotes_PlayerVote*) buildPartial {
  CMsgDOTAMatchVotes_PlayerVote* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) mergeFrom:(CMsgDOTAMatchVotes_PlayerVote*) other {
  if (other == [CMsgDOTAMatchVotes_PlayerVote defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasVote) {
    [self setVote:other.vote];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setVote:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasVote {
  return _builderResult.hasVote;
}
- (uint32_t) vote {
  return _builderResult.vote;
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) setVote:(uint32_t) value {
  _builderResult.hasVote = YES;
  _builderResult.vote = value;
  return self;
}
- (CMsgDOTAMatchVotes_PlayerVote_Builder*) clearVote {
  _builderResult.hasVote = NO;
  _builderResult.vote = 0;
  return self;
}
@end

@interface CMsgDOTAMatchVotes_Builder()
@property (retain) CMsgDOTAMatchVotes* _builderResult;
@end

@implementation CMsgDOTAMatchVotes_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAMatchVotes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAMatchVotes_Builder*) clear {
  _builderResult = [[[CMsgDOTAMatchVotes alloc] init] autorelease];
  return self;
}
- (CMsgDOTAMatchVotes_Builder*) clone {
  return [CMsgDOTAMatchVotes builderWithPrototype:_builderResult];
}
- (CMsgDOTAMatchVotes*) defaultInstance {
  return [CMsgDOTAMatchVotes defaultInstance];
}
- (CMsgDOTAMatchVotes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAMatchVotes*) buildPartial {
  CMsgDOTAMatchVotes* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAMatchVotes_Builder*) mergeFrom:(CMsgDOTAMatchVotes*) other {
  if (other == [CMsgDOTAMatchVotes defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.votesArray.count > 0) {
    if (_builderResult.votesArray == nil) {
      _builderResult.votesArray = [[other.votesArray copyWithZone:[other.votesArray zone]] autorelease];
    } else {
      [_builderResult.votesArray appendArray:other.votesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAMatchVotes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAMatchVotes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 18: {
        CMsgDOTAMatchVotes_PlayerVote_Builder* subBuilder = [CMsgDOTAMatchVotes_PlayerVote builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addVotes:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgDOTAMatchVotes_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgDOTAMatchVotes_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (PBAppendableArray *)votes {
  return _builderResult.votesArray;
}
- (CMsgDOTAMatchVotes_PlayerVote*)votesAtIndex:(NSUInteger)index {
  return [_builderResult votesAtIndex:index];
}
- (CMsgDOTAMatchVotes_Builder *)addVotes:(CMsgDOTAMatchVotes_PlayerVote*)value {
  if (_builderResult.votesArray == nil) {
    _builderResult.votesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.votesArray addObject:value];
  return self;
}
- (CMsgDOTAMatchVotes_Builder *)setVotesArray:(NSArray *)array {
  _builderResult.votesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAMatchVotes_Builder *)setVotesValues:(const CMsgDOTAMatchVotes_PlayerVote* *)values count:(NSUInteger)count {
  _builderResult.votesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAMatchVotes_Builder *)clearVotes {
  _builderResult.votesArray = nil;
  return self;
}
@end

@interface CMsgCastMatchVote ()
@property uint32_t matchId;
@property DOTAMatchVote vote;
@end

@implementation CMsgCastMatchVote

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (BOOL) hasvote {
  return !!hasvote_;
}
- (void) setHasvote:(BOOL) value_ {
  hasvote_ = !!value_;
}
@synthesize vote;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
    self.vote = DOTAMatchVoteDOTAMatchVote_INVALID;
  }
  return self;
}
static CMsgCastMatchVote* defaultCMsgCastMatchVoteInstance = nil;
+ (void) initialize {
  if (self == [CMsgCastMatchVote class]) {
    defaultCMsgCastMatchVoteInstance = [[CMsgCastMatchVote alloc] init];
  }
}
+ (CMsgCastMatchVote*) defaultInstance {
  return defaultCMsgCastMatchVoteInstance;
}
- (CMsgCastMatchVote*) defaultInstance {
  return defaultCMsgCastMatchVoteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  if (self.hasvote) {
    [output writeEnum:2 value:self.vote];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  if (self.hasvote) {
    size_ += computeEnumSize(2, self.vote);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgCastMatchVote*) parseFromData:(NSData*) data {
  return (CMsgCastMatchVote*)[[[CMsgCastMatchVote builder] mergeFromData:data] build];
}
+ (CMsgCastMatchVote*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCastMatchVote*)[[[CMsgCastMatchVote builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgCastMatchVote*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgCastMatchVote*)[[[CMsgCastMatchVote builder] mergeFromInputStream:input] build];
}
+ (CMsgCastMatchVote*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCastMatchVote*)[[[CMsgCastMatchVote builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgCastMatchVote*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgCastMatchVote*)[[[CMsgCastMatchVote builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgCastMatchVote*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCastMatchVote*)[[[CMsgCastMatchVote builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgCastMatchVote_Builder*) builder {
  return [[[CMsgCastMatchVote_Builder alloc] init] autorelease];
}
+ (CMsgCastMatchVote_Builder*) builderWithPrototype:(CMsgCastMatchVote*) prototype {
  return [[CMsgCastMatchVote builder] mergeFrom:prototype];
}
- (CMsgCastMatchVote_Builder*) builder {
  return [CMsgCastMatchVote builder];
}
- (CMsgCastMatchVote_Builder*) toBuilder {
  return [CMsgCastMatchVote builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  if (self.hasvote) {
    [output appendFormat:@"%@%@: %d\n", indent, @"vote", self.vote];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgCastMatchVote class]]) {
    return NO;
  }
  CMsgCastMatchVote *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      self.hasvote == otherMessage.hasvote &&
      (!self.hasvote || self.vote == otherMessage.vote) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  if (self.hasvote) {
    hashCode = hashCode * 31 + self.vote;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgCastMatchVote_Builder()
@property (retain) CMsgCastMatchVote* _builderResult;
@end

@implementation CMsgCastMatchVote_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgCastMatchVote alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgCastMatchVote_Builder*) clear {
  _builderResult = [[[CMsgCastMatchVote alloc] init] autorelease];
  return self;
}
- (CMsgCastMatchVote_Builder*) clone {
  return [CMsgCastMatchVote builderWithPrototype:_builderResult];
}
- (CMsgCastMatchVote*) defaultInstance {
  return [CMsgCastMatchVote defaultInstance];
}
- (CMsgCastMatchVote*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgCastMatchVote*) buildPartial {
  CMsgCastMatchVote* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgCastMatchVote_Builder*) mergeFrom:(CMsgCastMatchVote*) other {
  if (other == [CMsgCastMatchVote defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.hasvote) {
    [self setvote:other.vote];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgCastMatchVote_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgCastMatchVote_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (DOTAMatchVoteIsValidValue(value)) {
          [self setvote:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgCastMatchVote_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgCastMatchVote_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (BOOL) hasvote {
  return _builderResult.hasvote;
}
- (DOTAMatchVote) vote {
  return _builderResult.vote;
}
- (CMsgCastMatchVote_Builder*) setvote:(DOTAMatchVote) value {
  _builderResult.hasvote = YES;
  _builderResult.vote = value;
  return self;
}
- (CMsgCastMatchVote_Builder*) clearvote {
  _builderResult.hasvote = NO;
  _builderResult.vote = DOTAMatchVoteDOTAMatchVote_INVALID;
  return self;
}
@end

@interface CMsgRetrieveMatchVote ()
@property uint32_t matchId;
@property uint32_t incremental;
@end

@implementation CMsgRetrieveMatchVote

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (BOOL) hasIncremental {
  return !!hasIncremental_;
}
- (void) setHasIncremental:(BOOL) value_ {
  hasIncremental_ = !!value_;
}
@synthesize incremental;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
    self.incremental = 0;
  }
  return self;
}
static CMsgRetrieveMatchVote* defaultCMsgRetrieveMatchVoteInstance = nil;
+ (void) initialize {
  if (self == [CMsgRetrieveMatchVote class]) {
    defaultCMsgRetrieveMatchVoteInstance = [[CMsgRetrieveMatchVote alloc] init];
  }
}
+ (CMsgRetrieveMatchVote*) defaultInstance {
  return defaultCMsgRetrieveMatchVoteInstance;
}
- (CMsgRetrieveMatchVote*) defaultInstance {
  return defaultCMsgRetrieveMatchVoteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  if (self.hasIncremental) {
    [output writeUInt32:2 value:self.incremental];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  if (self.hasIncremental) {
    size_ += computeUInt32Size(2, self.incremental);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgRetrieveMatchVote*) parseFromData:(NSData*) data {
  return (CMsgRetrieveMatchVote*)[[[CMsgRetrieveMatchVote builder] mergeFromData:data] build];
}
+ (CMsgRetrieveMatchVote*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRetrieveMatchVote*)[[[CMsgRetrieveMatchVote builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgRetrieveMatchVote*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgRetrieveMatchVote*)[[[CMsgRetrieveMatchVote builder] mergeFromInputStream:input] build];
}
+ (CMsgRetrieveMatchVote*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRetrieveMatchVote*)[[[CMsgRetrieveMatchVote builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgRetrieveMatchVote*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgRetrieveMatchVote*)[[[CMsgRetrieveMatchVote builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgRetrieveMatchVote*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgRetrieveMatchVote*)[[[CMsgRetrieveMatchVote builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgRetrieveMatchVote_Builder*) builder {
  return [[[CMsgRetrieveMatchVote_Builder alloc] init] autorelease];
}
+ (CMsgRetrieveMatchVote_Builder*) builderWithPrototype:(CMsgRetrieveMatchVote*) prototype {
  return [[CMsgRetrieveMatchVote builder] mergeFrom:prototype];
}
- (CMsgRetrieveMatchVote_Builder*) builder {
  return [CMsgRetrieveMatchVote builder];
}
- (CMsgRetrieveMatchVote_Builder*) toBuilder {
  return [CMsgRetrieveMatchVote builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  if (self.hasIncremental) {
    [output appendFormat:@"%@%@: %@\n", indent, @"incremental", [NSNumber numberWithInt:self.incremental]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgRetrieveMatchVote class]]) {
    return NO;
  }
  CMsgRetrieveMatchVote *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      self.hasIncremental == otherMessage.hasIncremental &&
      (!self.hasIncremental || self.incremental == otherMessage.incremental) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  if (self.hasIncremental) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.incremental] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgRetrieveMatchVote_Builder()
@property (retain) CMsgRetrieveMatchVote* _builderResult;
@end

@implementation CMsgRetrieveMatchVote_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgRetrieveMatchVote alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgRetrieveMatchVote_Builder*) clear {
  _builderResult = [[[CMsgRetrieveMatchVote alloc] init] autorelease];
  return self;
}
- (CMsgRetrieveMatchVote_Builder*) clone {
  return [CMsgRetrieveMatchVote builderWithPrototype:_builderResult];
}
- (CMsgRetrieveMatchVote*) defaultInstance {
  return [CMsgRetrieveMatchVote defaultInstance];
}
- (CMsgRetrieveMatchVote*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgRetrieveMatchVote*) buildPartial {
  CMsgRetrieveMatchVote* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgRetrieveMatchVote_Builder*) mergeFrom:(CMsgRetrieveMatchVote*) other {
  if (other == [CMsgRetrieveMatchVote defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  if (other.hasIncremental) {
    [self setIncremental:other.incremental];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgRetrieveMatchVote_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgRetrieveMatchVote_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setIncremental:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgRetrieveMatchVote_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgRetrieveMatchVote_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
- (BOOL) hasIncremental {
  return _builderResult.hasIncremental;
}
- (uint32_t) incremental {
  return _builderResult.incremental;
}
- (CMsgRetrieveMatchVote_Builder*) setIncremental:(uint32_t) value {
  _builderResult.hasIncremental = YES;
  _builderResult.incremental = value;
  return self;
}
- (CMsgRetrieveMatchVote_Builder*) clearIncremental {
  _builderResult.hasIncremental = NO;
  _builderResult.incremental = 0;
  return self;
}
@end

@interface CMsgMatchVoteResponse ()
@property uint32_t eresult;
@property DOTAMatchVote vote;
@property uint32_t positiveVotes;
@property uint32_t negativeVotes;
@end

@implementation CMsgMatchVoteResponse

- (BOOL) hasEresult {
  return !!hasEresult_;
}
- (void) setHasEresult:(BOOL) value_ {
  hasEresult_ = !!value_;
}
@synthesize eresult;
- (BOOL) hasvote {
  return !!hasvote_;
}
- (void) setHasvote:(BOOL) value_ {
  hasvote_ = !!value_;
}
@synthesize vote;
- (BOOL) hasPositiveVotes {
  return !!hasPositiveVotes_;
}
- (void) setHasPositiveVotes:(BOOL) value_ {
  hasPositiveVotes_ = !!value_;
}
@synthesize positiveVotes;
- (BOOL) hasNegativeVotes {
  return !!hasNegativeVotes_;
}
- (void) setHasNegativeVotes:(BOOL) value_ {
  hasNegativeVotes_ = !!value_;
}
@synthesize negativeVotes;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.eresult = 2;
    self.vote = DOTAMatchVoteDOTAMatchVote_INVALID;
    self.positiveVotes = 0;
    self.negativeVotes = 0;
  }
  return self;
}
static CMsgMatchVoteResponse* defaultCMsgMatchVoteResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgMatchVoteResponse class]) {
    defaultCMsgMatchVoteResponseInstance = [[CMsgMatchVoteResponse alloc] init];
  }
}
+ (CMsgMatchVoteResponse*) defaultInstance {
  return defaultCMsgMatchVoteResponseInstance;
}
- (CMsgMatchVoteResponse*) defaultInstance {
  return defaultCMsgMatchVoteResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEresult) {
    [output writeUInt32:1 value:self.eresult];
  }
  if (self.hasvote) {
    [output writeEnum:2 value:self.vote];
  }
  if (self.hasPositiveVotes) {
    [output writeUInt32:3 value:self.positiveVotes];
  }
  if (self.hasNegativeVotes) {
    [output writeUInt32:4 value:self.negativeVotes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEresult) {
    size_ += computeUInt32Size(1, self.eresult);
  }
  if (self.hasvote) {
    size_ += computeEnumSize(2, self.vote);
  }
  if (self.hasPositiveVotes) {
    size_ += computeUInt32Size(3, self.positiveVotes);
  }
  if (self.hasNegativeVotes) {
    size_ += computeUInt32Size(4, self.negativeVotes);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgMatchVoteResponse*) parseFromData:(NSData*) data {
  return (CMsgMatchVoteResponse*)[[[CMsgMatchVoteResponse builder] mergeFromData:data] build];
}
+ (CMsgMatchVoteResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgMatchVoteResponse*)[[[CMsgMatchVoteResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgMatchVoteResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgMatchVoteResponse*)[[[CMsgMatchVoteResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgMatchVoteResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgMatchVoteResponse*)[[[CMsgMatchVoteResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgMatchVoteResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgMatchVoteResponse*)[[[CMsgMatchVoteResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgMatchVoteResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgMatchVoteResponse*)[[[CMsgMatchVoteResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgMatchVoteResponse_Builder*) builder {
  return [[[CMsgMatchVoteResponse_Builder alloc] init] autorelease];
}
+ (CMsgMatchVoteResponse_Builder*) builderWithPrototype:(CMsgMatchVoteResponse*) prototype {
  return [[CMsgMatchVoteResponse builder] mergeFrom:prototype];
}
- (CMsgMatchVoteResponse_Builder*) builder {
  return [CMsgMatchVoteResponse builder];
}
- (CMsgMatchVoteResponse_Builder*) toBuilder {
  return [CMsgMatchVoteResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEresult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eresult", [NSNumber numberWithInt:self.eresult]];
  }
  if (self.hasvote) {
    [output appendFormat:@"%@%@: %d\n", indent, @"vote", self.vote];
  }
  if (self.hasPositiveVotes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"positiveVotes", [NSNumber numberWithInt:self.positiveVotes]];
  }
  if (self.hasNegativeVotes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negativeVotes", [NSNumber numberWithInt:self.negativeVotes]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgMatchVoteResponse class]]) {
    return NO;
  }
  CMsgMatchVoteResponse *otherMessage = other;
  return
      self.hasEresult == otherMessage.hasEresult &&
      (!self.hasEresult || self.eresult == otherMessage.eresult) &&
      self.hasvote == otherMessage.hasvote &&
      (!self.hasvote || self.vote == otherMessage.vote) &&
      self.hasPositiveVotes == otherMessage.hasPositiveVotes &&
      (!self.hasPositiveVotes || self.positiveVotes == otherMessage.positiveVotes) &&
      self.hasNegativeVotes == otherMessage.hasNegativeVotes &&
      (!self.hasNegativeVotes || self.negativeVotes == otherMessage.negativeVotes) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasEresult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eresult] hash];
  }
  if (self.hasvote) {
    hashCode = hashCode * 31 + self.vote;
  }
  if (self.hasPositiveVotes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.positiveVotes] hash];
  }
  if (self.hasNegativeVotes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.negativeVotes] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgMatchVoteResponse_Builder()
@property (retain) CMsgMatchVoteResponse* _builderResult;
@end

@implementation CMsgMatchVoteResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgMatchVoteResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgMatchVoteResponse_Builder*) clear {
  _builderResult = [[[CMsgMatchVoteResponse alloc] init] autorelease];
  return self;
}
- (CMsgMatchVoteResponse_Builder*) clone {
  return [CMsgMatchVoteResponse builderWithPrototype:_builderResult];
}
- (CMsgMatchVoteResponse*) defaultInstance {
  return [CMsgMatchVoteResponse defaultInstance];
}
- (CMsgMatchVoteResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgMatchVoteResponse*) buildPartial {
  CMsgMatchVoteResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgMatchVoteResponse_Builder*) mergeFrom:(CMsgMatchVoteResponse*) other {
  if (other == [CMsgMatchVoteResponse defaultInstance]) {
    return self;
  }
  if (other.hasEresult) {
    [self setEresult:other.eresult];
  }
  if (other.hasvote) {
    [self setvote:other.vote];
  }
  if (other.hasPositiveVotes) {
    [self setPositiveVotes:other.positiveVotes];
  }
  if (other.hasNegativeVotes) {
    [self setNegativeVotes:other.negativeVotes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgMatchVoteResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgMatchVoteResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEresult:[input readUInt32]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (DOTAMatchVoteIsValidValue(value)) {
          [self setvote:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setPositiveVotes:[input readUInt32]];
        break;
      }
      case 32: {
        [self setNegativeVotes:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasEresult {
  return _builderResult.hasEresult;
}
- (uint32_t) eresult {
  return _builderResult.eresult;
}
- (CMsgMatchVoteResponse_Builder*) setEresult:(uint32_t) value {
  _builderResult.hasEresult = YES;
  _builderResult.eresult = value;
  return self;
}
- (CMsgMatchVoteResponse_Builder*) clearEresult {
  _builderResult.hasEresult = NO;
  _builderResult.eresult = 2;
  return self;
}
- (BOOL) hasvote {
  return _builderResult.hasvote;
}
- (DOTAMatchVote) vote {
  return _builderResult.vote;
}
- (CMsgMatchVoteResponse_Builder*) setvote:(DOTAMatchVote) value {
  _builderResult.hasvote = YES;
  _builderResult.vote = value;
  return self;
}
- (CMsgMatchVoteResponse_Builder*) clearvote {
  _builderResult.hasvote = NO;
  _builderResult.vote = DOTAMatchVoteDOTAMatchVote_INVALID;
  return self;
}
- (BOOL) hasPositiveVotes {
  return _builderResult.hasPositiveVotes;
}
- (uint32_t) positiveVotes {
  return _builderResult.positiveVotes;
}
- (CMsgMatchVoteResponse_Builder*) setPositiveVotes:(uint32_t) value {
  _builderResult.hasPositiveVotes = YES;
  _builderResult.positiveVotes = value;
  return self;
}
- (CMsgMatchVoteResponse_Builder*) clearPositiveVotes {
  _builderResult.hasPositiveVotes = NO;
  _builderResult.positiveVotes = 0;
  return self;
}
- (BOOL) hasNegativeVotes {
  return _builderResult.hasNegativeVotes;
}
- (uint32_t) negativeVotes {
  return _builderResult.negativeVotes;
}
- (CMsgMatchVoteResponse_Builder*) setNegativeVotes:(uint32_t) value {
  _builderResult.hasNegativeVotes = YES;
  _builderResult.negativeVotes = value;
  return self;
}
- (CMsgMatchVoteResponse_Builder*) clearNegativeVotes {
  _builderResult.hasNegativeVotes = NO;
  _builderResult.negativeVotes = 0;
  return self;
}
@end

@interface CMsgTeamFanfare ()
@property uint32_t matchId;
@end

@implementation CMsgTeamFanfare

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
  }
  return self;
}
static CMsgTeamFanfare* defaultCMsgTeamFanfareInstance = nil;
+ (void) initialize {
  if (self == [CMsgTeamFanfare class]) {
    defaultCMsgTeamFanfareInstance = [[CMsgTeamFanfare alloc] init];
  }
}
+ (CMsgTeamFanfare*) defaultInstance {
  return defaultCMsgTeamFanfareInstance;
}
- (CMsgTeamFanfare*) defaultInstance {
  return defaultCMsgTeamFanfareInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgTeamFanfare*) parseFromData:(NSData*) data {
  return (CMsgTeamFanfare*)[[[CMsgTeamFanfare builder] mergeFromData:data] build];
}
+ (CMsgTeamFanfare*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTeamFanfare*)[[[CMsgTeamFanfare builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgTeamFanfare*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgTeamFanfare*)[[[CMsgTeamFanfare builder] mergeFromInputStream:input] build];
}
+ (CMsgTeamFanfare*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTeamFanfare*)[[[CMsgTeamFanfare builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTeamFanfare*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgTeamFanfare*)[[[CMsgTeamFanfare builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgTeamFanfare*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgTeamFanfare*)[[[CMsgTeamFanfare builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgTeamFanfare_Builder*) builder {
  return [[[CMsgTeamFanfare_Builder alloc] init] autorelease];
}
+ (CMsgTeamFanfare_Builder*) builderWithPrototype:(CMsgTeamFanfare*) prototype {
  return [[CMsgTeamFanfare builder] mergeFrom:prototype];
}
- (CMsgTeamFanfare_Builder*) builder {
  return [CMsgTeamFanfare builder];
}
- (CMsgTeamFanfare_Builder*) toBuilder {
  return [CMsgTeamFanfare builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgTeamFanfare class]]) {
    return NO;
  }
  CMsgTeamFanfare *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgTeamFanfare_Builder()
@property (retain) CMsgTeamFanfare* _builderResult;
@end

@implementation CMsgTeamFanfare_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgTeamFanfare alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgTeamFanfare_Builder*) clear {
  _builderResult = [[[CMsgTeamFanfare alloc] init] autorelease];
  return self;
}
- (CMsgTeamFanfare_Builder*) clone {
  return [CMsgTeamFanfare builderWithPrototype:_builderResult];
}
- (CMsgTeamFanfare*) defaultInstance {
  return [CMsgTeamFanfare defaultInstance];
}
- (CMsgTeamFanfare*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgTeamFanfare*) buildPartial {
  CMsgTeamFanfare* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgTeamFanfare_Builder*) mergeFrom:(CMsgTeamFanfare*) other {
  if (other == [CMsgTeamFanfare defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgTeamFanfare_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgTeamFanfare_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgTeamFanfare_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgTeamFanfare_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
@end

@interface CMsgResponseTeamFanfare ()
@property uint32_t fanfareGoodguys;
@property uint32_t fanfareBadguys;
@end

@implementation CMsgResponseTeamFanfare

- (BOOL) hasFanfareGoodguys {
  return !!hasFanfareGoodguys_;
}
- (void) setHasFanfareGoodguys:(BOOL) value_ {
  hasFanfareGoodguys_ = !!value_;
}
@synthesize fanfareGoodguys;
- (BOOL) hasFanfareBadguys {
  return !!hasFanfareBadguys_;
}
- (void) setHasFanfareBadguys:(BOOL) value_ {
  hasFanfareBadguys_ = !!value_;
}
@synthesize fanfareBadguys;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.fanfareGoodguys = 0;
    self.fanfareBadguys = 0;
  }
  return self;
}
static CMsgResponseTeamFanfare* defaultCMsgResponseTeamFanfareInstance = nil;
+ (void) initialize {
  if (self == [CMsgResponseTeamFanfare class]) {
    defaultCMsgResponseTeamFanfareInstance = [[CMsgResponseTeamFanfare alloc] init];
  }
}
+ (CMsgResponseTeamFanfare*) defaultInstance {
  return defaultCMsgResponseTeamFanfareInstance;
}
- (CMsgResponseTeamFanfare*) defaultInstance {
  return defaultCMsgResponseTeamFanfareInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFanfareGoodguys) {
    [output writeUInt32:1 value:self.fanfareGoodguys];
  }
  if (self.hasFanfareBadguys) {
    [output writeUInt32:2 value:self.fanfareBadguys];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFanfareGoodguys) {
    size_ += computeUInt32Size(1, self.fanfareGoodguys);
  }
  if (self.hasFanfareBadguys) {
    size_ += computeUInt32Size(2, self.fanfareBadguys);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgResponseTeamFanfare*) parseFromData:(NSData*) data {
  return (CMsgResponseTeamFanfare*)[[[CMsgResponseTeamFanfare builder] mergeFromData:data] build];
}
+ (CMsgResponseTeamFanfare*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgResponseTeamFanfare*)[[[CMsgResponseTeamFanfare builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgResponseTeamFanfare*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgResponseTeamFanfare*)[[[CMsgResponseTeamFanfare builder] mergeFromInputStream:input] build];
}
+ (CMsgResponseTeamFanfare*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgResponseTeamFanfare*)[[[CMsgResponseTeamFanfare builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgResponseTeamFanfare*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgResponseTeamFanfare*)[[[CMsgResponseTeamFanfare builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgResponseTeamFanfare*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgResponseTeamFanfare*)[[[CMsgResponseTeamFanfare builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgResponseTeamFanfare_Builder*) builder {
  return [[[CMsgResponseTeamFanfare_Builder alloc] init] autorelease];
}
+ (CMsgResponseTeamFanfare_Builder*) builderWithPrototype:(CMsgResponseTeamFanfare*) prototype {
  return [[CMsgResponseTeamFanfare builder] mergeFrom:prototype];
}
- (CMsgResponseTeamFanfare_Builder*) builder {
  return [CMsgResponseTeamFanfare builder];
}
- (CMsgResponseTeamFanfare_Builder*) toBuilder {
  return [CMsgResponseTeamFanfare builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFanfareGoodguys) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fanfareGoodguys", [NSNumber numberWithInt:self.fanfareGoodguys]];
  }
  if (self.hasFanfareBadguys) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fanfareBadguys", [NSNumber numberWithInt:self.fanfareBadguys]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgResponseTeamFanfare class]]) {
    return NO;
  }
  CMsgResponseTeamFanfare *otherMessage = other;
  return
      self.hasFanfareGoodguys == otherMessage.hasFanfareGoodguys &&
      (!self.hasFanfareGoodguys || self.fanfareGoodguys == otherMessage.fanfareGoodguys) &&
      self.hasFanfareBadguys == otherMessage.hasFanfareBadguys &&
      (!self.hasFanfareBadguys || self.fanfareBadguys == otherMessage.fanfareBadguys) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasFanfareGoodguys) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.fanfareGoodguys] hash];
  }
  if (self.hasFanfareBadguys) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.fanfareBadguys] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgResponseTeamFanfare_Builder()
@property (retain) CMsgResponseTeamFanfare* _builderResult;
@end

@implementation CMsgResponseTeamFanfare_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgResponseTeamFanfare alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgResponseTeamFanfare_Builder*) clear {
  _builderResult = [[[CMsgResponseTeamFanfare alloc] init] autorelease];
  return self;
}
- (CMsgResponseTeamFanfare_Builder*) clone {
  return [CMsgResponseTeamFanfare builderWithPrototype:_builderResult];
}
- (CMsgResponseTeamFanfare*) defaultInstance {
  return [CMsgResponseTeamFanfare defaultInstance];
}
- (CMsgResponseTeamFanfare*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgResponseTeamFanfare*) buildPartial {
  CMsgResponseTeamFanfare* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgResponseTeamFanfare_Builder*) mergeFrom:(CMsgResponseTeamFanfare*) other {
  if (other == [CMsgResponseTeamFanfare defaultInstance]) {
    return self;
  }
  if (other.hasFanfareGoodguys) {
    [self setFanfareGoodguys:other.fanfareGoodguys];
  }
  if (other.hasFanfareBadguys) {
    [self setFanfareBadguys:other.fanfareBadguys];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgResponseTeamFanfare_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgResponseTeamFanfare_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFanfareGoodguys:[input readUInt32]];
        break;
      }
      case 16: {
        [self setFanfareBadguys:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasFanfareGoodguys {
  return _builderResult.hasFanfareGoodguys;
}
- (uint32_t) fanfareGoodguys {
  return _builderResult.fanfareGoodguys;
}
- (CMsgResponseTeamFanfare_Builder*) setFanfareGoodguys:(uint32_t) value {
  _builderResult.hasFanfareGoodguys = YES;
  _builderResult.fanfareGoodguys = value;
  return self;
}
- (CMsgResponseTeamFanfare_Builder*) clearFanfareGoodguys {
  _builderResult.hasFanfareGoodguys = NO;
  _builderResult.fanfareGoodguys = 0;
  return self;
}
- (BOOL) hasFanfareBadguys {
  return _builderResult.hasFanfareBadguys;
}
- (uint32_t) fanfareBadguys {
  return _builderResult.fanfareBadguys;
}
- (CMsgResponseTeamFanfare_Builder*) setFanfareBadguys:(uint32_t) value {
  _builderResult.hasFanfareBadguys = YES;
  _builderResult.fanfareBadguys = value;
  return self;
}
- (CMsgResponseTeamFanfare_Builder*) clearFanfareBadguys {
  _builderResult.hasFanfareBadguys = NO;
  _builderResult.fanfareBadguys = 0;
  return self;
}
@end

@interface CMsgSpectatorConnect ()
@property uint64_t spectatorId;
@end

@implementation CMsgSpectatorConnect

- (BOOL) hasSpectatorId {
  return !!hasSpectatorId_;
}
- (void) setHasSpectatorId:(BOOL) value_ {
  hasSpectatorId_ = !!value_;
}
@synthesize spectatorId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.spectatorId = 0L;
  }
  return self;
}
static CMsgSpectatorConnect* defaultCMsgSpectatorConnectInstance = nil;
+ (void) initialize {
  if (self == [CMsgSpectatorConnect class]) {
    defaultCMsgSpectatorConnectInstance = [[CMsgSpectatorConnect alloc] init];
  }
}
+ (CMsgSpectatorConnect*) defaultInstance {
  return defaultCMsgSpectatorConnectInstance;
}
- (CMsgSpectatorConnect*) defaultInstance {
  return defaultCMsgSpectatorConnectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSpectatorId) {
    [output writeFixed64:1 value:self.spectatorId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSpectatorId) {
    size_ += computeFixed64Size(1, self.spectatorId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgSpectatorConnect*) parseFromData:(NSData*) data {
  return (CMsgSpectatorConnect*)[[[CMsgSpectatorConnect builder] mergeFromData:data] build];
}
+ (CMsgSpectatorConnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectatorConnect*)[[[CMsgSpectatorConnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectatorConnect*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgSpectatorConnect*)[[[CMsgSpectatorConnect builder] mergeFromInputStream:input] build];
}
+ (CMsgSpectatorConnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectatorConnect*)[[[CMsgSpectatorConnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectatorConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgSpectatorConnect*)[[[CMsgSpectatorConnect builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgSpectatorConnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectatorConnect*)[[[CMsgSpectatorConnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectatorConnect_Builder*) builder {
  return [[[CMsgSpectatorConnect_Builder alloc] init] autorelease];
}
+ (CMsgSpectatorConnect_Builder*) builderWithPrototype:(CMsgSpectatorConnect*) prototype {
  return [[CMsgSpectatorConnect builder] mergeFrom:prototype];
}
- (CMsgSpectatorConnect_Builder*) builder {
  return [CMsgSpectatorConnect builder];
}
- (CMsgSpectatorConnect_Builder*) toBuilder {
  return [CMsgSpectatorConnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSpectatorId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spectatorId", [NSNumber numberWithLongLong:self.spectatorId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgSpectatorConnect class]]) {
    return NO;
  }
  CMsgSpectatorConnect *otherMessage = other;
  return
      self.hasSpectatorId == otherMessage.hasSpectatorId &&
      (!self.hasSpectatorId || self.spectatorId == otherMessage.spectatorId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSpectatorId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.spectatorId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgSpectatorConnect_Builder()
@property (retain) CMsgSpectatorConnect* _builderResult;
@end

@implementation CMsgSpectatorConnect_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgSpectatorConnect alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgSpectatorConnect_Builder*) clear {
  _builderResult = [[[CMsgSpectatorConnect alloc] init] autorelease];
  return self;
}
- (CMsgSpectatorConnect_Builder*) clone {
  return [CMsgSpectatorConnect builderWithPrototype:_builderResult];
}
- (CMsgSpectatorConnect*) defaultInstance {
  return [CMsgSpectatorConnect defaultInstance];
}
- (CMsgSpectatorConnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgSpectatorConnect*) buildPartial {
  CMsgSpectatorConnect* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgSpectatorConnect_Builder*) mergeFrom:(CMsgSpectatorConnect*) other {
  if (other == [CMsgSpectatorConnect defaultInstance]) {
    return self;
  }
  if (other.hasSpectatorId) {
    [self setSpectatorId:other.spectatorId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgSpectatorConnect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgSpectatorConnect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSpectatorId:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasSpectatorId {
  return _builderResult.hasSpectatorId;
}
- (uint64_t) spectatorId {
  return _builderResult.spectatorId;
}
- (CMsgSpectatorConnect_Builder*) setSpectatorId:(uint64_t) value {
  _builderResult.hasSpectatorId = YES;
  _builderResult.spectatorId = value;
  return self;
}
- (CMsgSpectatorConnect_Builder*) clearSpectatorId {
  _builderResult.hasSpectatorId = NO;
  _builderResult.spectatorId = 0L;
  return self;
}
@end

@interface CMsgSpectatorDisconnect ()
@property uint64_t spectatorId;
@end

@implementation CMsgSpectatorDisconnect

- (BOOL) hasSpectatorId {
  return !!hasSpectatorId_;
}
- (void) setHasSpectatorId:(BOOL) value_ {
  hasSpectatorId_ = !!value_;
}
@synthesize spectatorId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.spectatorId = 0L;
  }
  return self;
}
static CMsgSpectatorDisconnect* defaultCMsgSpectatorDisconnectInstance = nil;
+ (void) initialize {
  if (self == [CMsgSpectatorDisconnect class]) {
    defaultCMsgSpectatorDisconnectInstance = [[CMsgSpectatorDisconnect alloc] init];
  }
}
+ (CMsgSpectatorDisconnect*) defaultInstance {
  return defaultCMsgSpectatorDisconnectInstance;
}
- (CMsgSpectatorDisconnect*) defaultInstance {
  return defaultCMsgSpectatorDisconnectInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSpectatorId) {
    [output writeFixed64:1 value:self.spectatorId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSpectatorId) {
    size_ += computeFixed64Size(1, self.spectatorId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgSpectatorDisconnect*) parseFromData:(NSData*) data {
  return (CMsgSpectatorDisconnect*)[[[CMsgSpectatorDisconnect builder] mergeFromData:data] build];
}
+ (CMsgSpectatorDisconnect*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectatorDisconnect*)[[[CMsgSpectatorDisconnect builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectatorDisconnect*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgSpectatorDisconnect*)[[[CMsgSpectatorDisconnect builder] mergeFromInputStream:input] build];
}
+ (CMsgSpectatorDisconnect*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectatorDisconnect*)[[[CMsgSpectatorDisconnect builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectatorDisconnect*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgSpectatorDisconnect*)[[[CMsgSpectatorDisconnect builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgSpectatorDisconnect*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgSpectatorDisconnect*)[[[CMsgSpectatorDisconnect builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgSpectatorDisconnect_Builder*) builder {
  return [[[CMsgSpectatorDisconnect_Builder alloc] init] autorelease];
}
+ (CMsgSpectatorDisconnect_Builder*) builderWithPrototype:(CMsgSpectatorDisconnect*) prototype {
  return [[CMsgSpectatorDisconnect builder] mergeFrom:prototype];
}
- (CMsgSpectatorDisconnect_Builder*) builder {
  return [CMsgSpectatorDisconnect builder];
}
- (CMsgSpectatorDisconnect_Builder*) toBuilder {
  return [CMsgSpectatorDisconnect builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSpectatorId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spectatorId", [NSNumber numberWithLongLong:self.spectatorId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgSpectatorDisconnect class]]) {
    return NO;
  }
  CMsgSpectatorDisconnect *otherMessage = other;
  return
      self.hasSpectatorId == otherMessage.hasSpectatorId &&
      (!self.hasSpectatorId || self.spectatorId == otherMessage.spectatorId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSpectatorId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.spectatorId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgSpectatorDisconnect_Builder()
@property (retain) CMsgSpectatorDisconnect* _builderResult;
@end

@implementation CMsgSpectatorDisconnect_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgSpectatorDisconnect alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgSpectatorDisconnect_Builder*) clear {
  _builderResult = [[[CMsgSpectatorDisconnect alloc] init] autorelease];
  return self;
}
- (CMsgSpectatorDisconnect_Builder*) clone {
  return [CMsgSpectatorDisconnect builderWithPrototype:_builderResult];
}
- (CMsgSpectatorDisconnect*) defaultInstance {
  return [CMsgSpectatorDisconnect defaultInstance];
}
- (CMsgSpectatorDisconnect*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgSpectatorDisconnect*) buildPartial {
  CMsgSpectatorDisconnect* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgSpectatorDisconnect_Builder*) mergeFrom:(CMsgSpectatorDisconnect*) other {
  if (other == [CMsgSpectatorDisconnect defaultInstance]) {
    return self;
  }
  if (other.hasSpectatorId) {
    [self setSpectatorId:other.spectatorId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgSpectatorDisconnect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgSpectatorDisconnect_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setSpectatorId:[input readFixed64]];
        break;
      }
    }
  }
}
- (BOOL) hasSpectatorId {
  return _builderResult.hasSpectatorId;
}
- (uint64_t) spectatorId {
  return _builderResult.spectatorId;
}
- (CMsgSpectatorDisconnect_Builder*) setSpectatorId:(uint64_t) value {
  _builderResult.hasSpectatorId = YES;
  _builderResult.spectatorId = value;
  return self;
}
- (CMsgSpectatorDisconnect_Builder*) clearSpectatorId {
  _builderResult.hasSpectatorId = NO;
  _builderResult.spectatorId = 0L;
  return self;
}
@end

@interface CMsgGameServerUploadSaveGame ()
@property uint32_t gameTime;
@property (retain) NSData* saveGameData;
@property uint64_t lobbyId;
@property (retain) PBAppendableArray * playerSteamIdsArray;
@end

@implementation CMsgGameServerUploadSaveGame

- (BOOL) hasGameTime {
  return !!hasGameTime_;
}
- (void) setHasGameTime:(BOOL) value_ {
  hasGameTime_ = !!value_;
}
@synthesize gameTime;
- (BOOL) hasSaveGameData {
  return !!hasSaveGameData_;
}
- (void) setHasSaveGameData:(BOOL) value_ {
  hasSaveGameData_ = !!value_;
}
@synthesize saveGameData;
- (BOOL) hasLobbyId {
  return !!hasLobbyId_;
}
- (void) setHasLobbyId:(BOOL) value_ {
  hasLobbyId_ = !!value_;
}
@synthesize lobbyId;
@synthesize playerSteamIdsArray;
@dynamic playerSteamIds;
- (void) dealloc {
  self.saveGameData = nil;
  self.playerSteamIdsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.gameTime = 0;
    self.saveGameData = [NSData data];
    self.lobbyId = 0L;
  }
  return self;
}
static CMsgGameServerUploadSaveGame* defaultCMsgGameServerUploadSaveGameInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameServerUploadSaveGame class]) {
    defaultCMsgGameServerUploadSaveGameInstance = [[CMsgGameServerUploadSaveGame alloc] init];
  }
}
+ (CMsgGameServerUploadSaveGame*) defaultInstance {
  return defaultCMsgGameServerUploadSaveGameInstance;
}
- (CMsgGameServerUploadSaveGame*) defaultInstance {
  return defaultCMsgGameServerUploadSaveGameInstance;
}
- (PBArray *)playerSteamIds {
  return playerSteamIdsArray;
}
- (uint64_t)playerSteamIdsAtIndex:(NSUInteger)index {
  return [playerSteamIdsArray uint64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGameTime) {
    [output writeUInt32:1 value:self.gameTime];
  }
  if (self.hasSaveGameData) {
    [output writeData:2 value:self.saveGameData];
  }
  if (self.hasLobbyId) {
    [output writeUInt64:3 value:self.lobbyId];
  }
  const NSUInteger playerSteamIdsArrayCount = self.playerSteamIdsArray.count;
  if (playerSteamIdsArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.playerSteamIdsArray.data;
    for (NSUInteger i = 0; i < playerSteamIdsArrayCount; ++i) {
      [output writeUInt64:4 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGameTime) {
    size_ += computeUInt32Size(1, self.gameTime);
  }
  if (self.hasSaveGameData) {
    size_ += computeDataSize(2, self.saveGameData);
  }
  if (self.hasLobbyId) {
    size_ += computeUInt64Size(3, self.lobbyId);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.playerSteamIdsArray.count;
    const uint64_t *values = (const uint64_t *)self.playerSteamIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameServerUploadSaveGame*) parseFromData:(NSData*) data {
  return (CMsgGameServerUploadSaveGame*)[[[CMsgGameServerUploadSaveGame builder] mergeFromData:data] build];
}
+ (CMsgGameServerUploadSaveGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerUploadSaveGame*)[[[CMsgGameServerUploadSaveGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerUploadSaveGame*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameServerUploadSaveGame*)[[[CMsgGameServerUploadSaveGame builder] mergeFromInputStream:input] build];
}
+ (CMsgGameServerUploadSaveGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerUploadSaveGame*)[[[CMsgGameServerUploadSaveGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerUploadSaveGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameServerUploadSaveGame*)[[[CMsgGameServerUploadSaveGame builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameServerUploadSaveGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerUploadSaveGame*)[[[CMsgGameServerUploadSaveGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerUploadSaveGame_Builder*) builder {
  return [[[CMsgGameServerUploadSaveGame_Builder alloc] init] autorelease];
}
+ (CMsgGameServerUploadSaveGame_Builder*) builderWithPrototype:(CMsgGameServerUploadSaveGame*) prototype {
  return [[CMsgGameServerUploadSaveGame builder] mergeFrom:prototype];
}
- (CMsgGameServerUploadSaveGame_Builder*) builder {
  return [CMsgGameServerUploadSaveGame builder];
}
- (CMsgGameServerUploadSaveGame_Builder*) toBuilder {
  return [CMsgGameServerUploadSaveGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGameTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameTime", [NSNumber numberWithInt:self.gameTime]];
  }
  if (self.hasSaveGameData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saveGameData", self.saveGameData];
  }
  if (self.hasLobbyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lobbyId", [NSNumber numberWithLongLong:self.lobbyId]];
  }
  for (NSNumber* value in self.playerSteamIdsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerSteamIds", value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameServerUploadSaveGame class]]) {
    return NO;
  }
  CMsgGameServerUploadSaveGame *otherMessage = other;
  return
      self.hasGameTime == otherMessage.hasGameTime &&
      (!self.hasGameTime || self.gameTime == otherMessage.gameTime) &&
      self.hasSaveGameData == otherMessage.hasSaveGameData &&
      (!self.hasSaveGameData || [self.saveGameData isEqual:otherMessage.saveGameData]) &&
      self.hasLobbyId == otherMessage.hasLobbyId &&
      (!self.hasLobbyId || self.lobbyId == otherMessage.lobbyId) &&
      [self.playerSteamIdsArray isEqualToArray:otherMessage.playerSteamIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasGameTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.gameTime] hash];
  }
  if (self.hasSaveGameData) {
    hashCode = hashCode * 31 + [self.saveGameData hash];
  }
  if (self.hasLobbyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lobbyId] hash];
  }
  for (NSNumber* value in self.playerSteamIdsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGameServerUploadSaveGame_Builder()
@property (retain) CMsgGameServerUploadSaveGame* _builderResult;
@end

@implementation CMsgGameServerUploadSaveGame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameServerUploadSaveGame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameServerUploadSaveGame_Builder*) clear {
  _builderResult = [[[CMsgGameServerUploadSaveGame alloc] init] autorelease];
  return self;
}
- (CMsgGameServerUploadSaveGame_Builder*) clone {
  return [CMsgGameServerUploadSaveGame builderWithPrototype:_builderResult];
}
- (CMsgGameServerUploadSaveGame*) defaultInstance {
  return [CMsgGameServerUploadSaveGame defaultInstance];
}
- (CMsgGameServerUploadSaveGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameServerUploadSaveGame*) buildPartial {
  CMsgGameServerUploadSaveGame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameServerUploadSaveGame_Builder*) mergeFrom:(CMsgGameServerUploadSaveGame*) other {
  if (other == [CMsgGameServerUploadSaveGame defaultInstance]) {
    return self;
  }
  if (other.hasGameTime) {
    [self setGameTime:other.gameTime];
  }
  if (other.hasSaveGameData) {
    [self setSaveGameData:other.saveGameData];
  }
  if (other.hasLobbyId) {
    [self setLobbyId:other.lobbyId];
  }
  if (other.playerSteamIdsArray.count > 0) {
    if (_builderResult.playerSteamIdsArray == nil) {
      _builderResult.playerSteamIdsArray = [[other.playerSteamIdsArray copyWithZone:[other.playerSteamIdsArray zone]] autorelease];
    } else {
      [_builderResult.playerSteamIdsArray appendArray:other.playerSteamIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameServerUploadSaveGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameServerUploadSaveGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setGameTime:[input readUInt32]];
        break;
      }
      case 18: {
        [self setSaveGameData:[input readData]];
        break;
      }
      case 24: {
        [self setLobbyId:[input readUInt64]];
        break;
      }
      case 32: {
        [self addPlayerSteamIds:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasGameTime {
  return _builderResult.hasGameTime;
}
- (uint32_t) gameTime {
  return _builderResult.gameTime;
}
- (CMsgGameServerUploadSaveGame_Builder*) setGameTime:(uint32_t) value {
  _builderResult.hasGameTime = YES;
  _builderResult.gameTime = value;
  return self;
}
- (CMsgGameServerUploadSaveGame_Builder*) clearGameTime {
  _builderResult.hasGameTime = NO;
  _builderResult.gameTime = 0;
  return self;
}
- (BOOL) hasSaveGameData {
  return _builderResult.hasSaveGameData;
}
- (NSData*) saveGameData {
  return _builderResult.saveGameData;
}
- (CMsgGameServerUploadSaveGame_Builder*) setSaveGameData:(NSData*) value {
  _builderResult.hasSaveGameData = YES;
  _builderResult.saveGameData = value;
  return self;
}
- (CMsgGameServerUploadSaveGame_Builder*) clearSaveGameData {
  _builderResult.hasSaveGameData = NO;
  _builderResult.saveGameData = [NSData data];
  return self;
}
- (BOOL) hasLobbyId {
  return _builderResult.hasLobbyId;
}
- (uint64_t) lobbyId {
  return _builderResult.lobbyId;
}
- (CMsgGameServerUploadSaveGame_Builder*) setLobbyId:(uint64_t) value {
  _builderResult.hasLobbyId = YES;
  _builderResult.lobbyId = value;
  return self;
}
- (CMsgGameServerUploadSaveGame_Builder*) clearLobbyId {
  _builderResult.hasLobbyId = NO;
  _builderResult.lobbyId = 0L;
  return self;
}
- (PBAppendableArray *)playerSteamIds {
  return _builderResult.playerSteamIdsArray;
}
- (uint64_t)playerSteamIdsAtIndex:(NSUInteger)index {
  return [_builderResult playerSteamIdsAtIndex:index];
}
- (CMsgGameServerUploadSaveGame_Builder *)addPlayerSteamIds:(uint64_t)value {
  if (_builderResult.playerSteamIdsArray == nil) {
    _builderResult.playerSteamIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_builderResult.playerSteamIdsArray addUint64:value];
  return self;
}
- (CMsgGameServerUploadSaveGame_Builder *)setPlayerSteamIdsArray:(NSArray *)array {
  _builderResult.playerSteamIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgGameServerUploadSaveGame_Builder *)setPlayerSteamIdsValues:(const uint64_t *)values count:(NSUInteger)count {
  _builderResult.playerSteamIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgGameServerUploadSaveGame_Builder *)clearPlayerSteamIds {
  _builderResult.playerSteamIdsArray = nil;
  return self;
}
@end

@interface CMsgGameServerSaveGameResult ()
@property CMsgGameServerSaveGameResult_Result result;
@end

@implementation CMsgGameServerSaveGameResult

- (BOOL) hasresult {
  return !!hasresult_;
}
- (void) setHasresult:(BOOL) value_ {
  hasresult_ = !!value_;
}
@synthesize result;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = CMsgGameServerSaveGameResult_ResultSaveSuccessful;
  }
  return self;
}
static CMsgGameServerSaveGameResult* defaultCMsgGameServerSaveGameResultInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameServerSaveGameResult class]) {
    defaultCMsgGameServerSaveGameResultInstance = [[CMsgGameServerSaveGameResult alloc] init];
  }
}
+ (CMsgGameServerSaveGameResult*) defaultInstance {
  return defaultCMsgGameServerSaveGameResultInstance;
}
- (CMsgGameServerSaveGameResult*) defaultInstance {
  return defaultCMsgGameServerSaveGameResultInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasresult) {
    [output writeEnum:1 value:self.result];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasresult) {
    size_ += computeEnumSize(1, self.result);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameServerSaveGameResult*) parseFromData:(NSData*) data {
  return (CMsgGameServerSaveGameResult*)[[[CMsgGameServerSaveGameResult builder] mergeFromData:data] build];
}
+ (CMsgGameServerSaveGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerSaveGameResult*)[[[CMsgGameServerSaveGameResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerSaveGameResult*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameServerSaveGameResult*)[[[CMsgGameServerSaveGameResult builder] mergeFromInputStream:input] build];
}
+ (CMsgGameServerSaveGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerSaveGameResult*)[[[CMsgGameServerSaveGameResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerSaveGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameServerSaveGameResult*)[[[CMsgGameServerSaveGameResult builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameServerSaveGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerSaveGameResult*)[[[CMsgGameServerSaveGameResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerSaveGameResult_Builder*) builder {
  return [[[CMsgGameServerSaveGameResult_Builder alloc] init] autorelease];
}
+ (CMsgGameServerSaveGameResult_Builder*) builderWithPrototype:(CMsgGameServerSaveGameResult*) prototype {
  return [[CMsgGameServerSaveGameResult builder] mergeFrom:prototype];
}
- (CMsgGameServerSaveGameResult_Builder*) builder {
  return [CMsgGameServerSaveGameResult builder];
}
- (CMsgGameServerSaveGameResult_Builder*) toBuilder {
  return [CMsgGameServerSaveGameResult builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasresult) {
    [output appendFormat:@"%@%@: %d\n", indent, @"result", self.result];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameServerSaveGameResult class]]) {
    return NO;
  }
  CMsgGameServerSaveGameResult *otherMessage = other;
  return
      self.hasresult == otherMessage.hasresult &&
      (!self.hasresult || self.result == otherMessage.result) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasresult) {
    hashCode = hashCode * 31 + self.result;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL CMsgGameServerSaveGameResult_ResultIsValidValue(CMsgGameServerSaveGameResult_Result value) {
  switch (value) {
    case CMsgGameServerSaveGameResult_ResultSaveSuccessful:
    case CMsgGameServerSaveGameResult_ResultSessionNotFound:
    case CMsgGameServerSaveGameResult_ResultDatabaseError:
    case CMsgGameServerSaveGameResult_ResultTooBig:
      return YES;
    default:
      return NO;
  }
}
@interface CMsgGameServerSaveGameResult_Builder()
@property (retain) CMsgGameServerSaveGameResult* _builderResult;
@end

@implementation CMsgGameServerSaveGameResult_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameServerSaveGameResult alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameServerSaveGameResult_Builder*) clear {
  _builderResult = [[[CMsgGameServerSaveGameResult alloc] init] autorelease];
  return self;
}
- (CMsgGameServerSaveGameResult_Builder*) clone {
  return [CMsgGameServerSaveGameResult builderWithPrototype:_builderResult];
}
- (CMsgGameServerSaveGameResult*) defaultInstance {
  return [CMsgGameServerSaveGameResult defaultInstance];
}
- (CMsgGameServerSaveGameResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameServerSaveGameResult*) buildPartial {
  CMsgGameServerSaveGameResult* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameServerSaveGameResult_Builder*) mergeFrom:(CMsgGameServerSaveGameResult*) other {
  if (other == [CMsgGameServerSaveGameResult defaultInstance]) {
    return self;
  }
  if (other.hasresult) {
    [self setresult:other.result];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameServerSaveGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameServerSaveGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (CMsgGameServerSaveGameResult_ResultIsValidValue(value)) {
          [self setresult:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasresult {
  return _builderResult.hasresult;
}
- (CMsgGameServerSaveGameResult_Result) result {
  return _builderResult.result;
}
- (CMsgGameServerSaveGameResult_Builder*) setresult:(CMsgGameServerSaveGameResult_Result) value {
  _builderResult.hasresult = YES;
  _builderResult.result = value;
  return self;
}
- (CMsgGameServerSaveGameResult_Builder*) clearresult {
  _builderResult.hasresult = NO;
  _builderResult.result = CMsgGameServerSaveGameResult_ResultSaveSuccessful;
  return self;
}
@end

@interface CMsgGameServerGetLoadGame ()
@property uint32_t saveId;
@end

@implementation CMsgGameServerGetLoadGame

- (BOOL) hasSaveId {
  return !!hasSaveId_;
}
- (void) setHasSaveId:(BOOL) value_ {
  hasSaveId_ = !!value_;
}
@synthesize saveId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.saveId = 0;
  }
  return self;
}
static CMsgGameServerGetLoadGame* defaultCMsgGameServerGetLoadGameInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameServerGetLoadGame class]) {
    defaultCMsgGameServerGetLoadGameInstance = [[CMsgGameServerGetLoadGame alloc] init];
  }
}
+ (CMsgGameServerGetLoadGame*) defaultInstance {
  return defaultCMsgGameServerGetLoadGameInstance;
}
- (CMsgGameServerGetLoadGame*) defaultInstance {
  return defaultCMsgGameServerGetLoadGameInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSaveId) {
    [output writeUInt32:1 value:self.saveId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSaveId) {
    size_ += computeUInt32Size(1, self.saveId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameServerGetLoadGame*) parseFromData:(NSData*) data {
  return (CMsgGameServerGetLoadGame*)[[[CMsgGameServerGetLoadGame builder] mergeFromData:data] build];
}
+ (CMsgGameServerGetLoadGame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerGetLoadGame*)[[[CMsgGameServerGetLoadGame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerGetLoadGame*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameServerGetLoadGame*)[[[CMsgGameServerGetLoadGame builder] mergeFromInputStream:input] build];
}
+ (CMsgGameServerGetLoadGame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerGetLoadGame*)[[[CMsgGameServerGetLoadGame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerGetLoadGame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameServerGetLoadGame*)[[[CMsgGameServerGetLoadGame builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameServerGetLoadGame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerGetLoadGame*)[[[CMsgGameServerGetLoadGame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerGetLoadGame_Builder*) builder {
  return [[[CMsgGameServerGetLoadGame_Builder alloc] init] autorelease];
}
+ (CMsgGameServerGetLoadGame_Builder*) builderWithPrototype:(CMsgGameServerGetLoadGame*) prototype {
  return [[CMsgGameServerGetLoadGame builder] mergeFrom:prototype];
}
- (CMsgGameServerGetLoadGame_Builder*) builder {
  return [CMsgGameServerGetLoadGame builder];
}
- (CMsgGameServerGetLoadGame_Builder*) toBuilder {
  return [CMsgGameServerGetLoadGame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSaveId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saveId", [NSNumber numberWithInt:self.saveId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameServerGetLoadGame class]]) {
    return NO;
  }
  CMsgGameServerGetLoadGame *otherMessage = other;
  return
      self.hasSaveId == otherMessage.hasSaveId &&
      (!self.hasSaveId || self.saveId == otherMessage.saveId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSaveId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.saveId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGameServerGetLoadGame_Builder()
@property (retain) CMsgGameServerGetLoadGame* _builderResult;
@end

@implementation CMsgGameServerGetLoadGame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameServerGetLoadGame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameServerGetLoadGame_Builder*) clear {
  _builderResult = [[[CMsgGameServerGetLoadGame alloc] init] autorelease];
  return self;
}
- (CMsgGameServerGetLoadGame_Builder*) clone {
  return [CMsgGameServerGetLoadGame builderWithPrototype:_builderResult];
}
- (CMsgGameServerGetLoadGame*) defaultInstance {
  return [CMsgGameServerGetLoadGame defaultInstance];
}
- (CMsgGameServerGetLoadGame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameServerGetLoadGame*) buildPartial {
  CMsgGameServerGetLoadGame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameServerGetLoadGame_Builder*) mergeFrom:(CMsgGameServerGetLoadGame*) other {
  if (other == [CMsgGameServerGetLoadGame defaultInstance]) {
    return self;
  }
  if (other.hasSaveId) {
    [self setSaveId:other.saveId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameServerGetLoadGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameServerGetLoadGame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSaveId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSaveId {
  return _builderResult.hasSaveId;
}
- (uint32_t) saveId {
  return _builderResult.saveId;
}
- (CMsgGameServerGetLoadGame_Builder*) setSaveId:(uint32_t) value {
  _builderResult.hasSaveId = YES;
  _builderResult.saveId = value;
  return self;
}
- (CMsgGameServerGetLoadGame_Builder*) clearSaveId {
  _builderResult.hasSaveId = NO;
  _builderResult.saveId = 0;
  return self;
}
@end

@interface CMsgGameServerGetLoadGameResult ()
@property (retain) NSData* saveGameData;
@end

@implementation CMsgGameServerGetLoadGameResult

- (BOOL) hasSaveGameData {
  return !!hasSaveGameData_;
}
- (void) setHasSaveGameData:(BOOL) value_ {
  hasSaveGameData_ = !!value_;
}
@synthesize saveGameData;
- (void) dealloc {
  self.saveGameData = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.saveGameData = [NSData data];
  }
  return self;
}
static CMsgGameServerGetLoadGameResult* defaultCMsgGameServerGetLoadGameResultInstance = nil;
+ (void) initialize {
  if (self == [CMsgGameServerGetLoadGameResult class]) {
    defaultCMsgGameServerGetLoadGameResultInstance = [[CMsgGameServerGetLoadGameResult alloc] init];
  }
}
+ (CMsgGameServerGetLoadGameResult*) defaultInstance {
  return defaultCMsgGameServerGetLoadGameResultInstance;
}
- (CMsgGameServerGetLoadGameResult*) defaultInstance {
  return defaultCMsgGameServerGetLoadGameResultInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSaveGameData) {
    [output writeData:1 value:self.saveGameData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSaveGameData) {
    size_ += computeDataSize(1, self.saveGameData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgGameServerGetLoadGameResult*) parseFromData:(NSData*) data {
  return (CMsgGameServerGetLoadGameResult*)[[[CMsgGameServerGetLoadGameResult builder] mergeFromData:data] build];
}
+ (CMsgGameServerGetLoadGameResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerGetLoadGameResult*)[[[CMsgGameServerGetLoadGameResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerGetLoadGameResult*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgGameServerGetLoadGameResult*)[[[CMsgGameServerGetLoadGameResult builder] mergeFromInputStream:input] build];
}
+ (CMsgGameServerGetLoadGameResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerGetLoadGameResult*)[[[CMsgGameServerGetLoadGameResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerGetLoadGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgGameServerGetLoadGameResult*)[[[CMsgGameServerGetLoadGameResult builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgGameServerGetLoadGameResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgGameServerGetLoadGameResult*)[[[CMsgGameServerGetLoadGameResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgGameServerGetLoadGameResult_Builder*) builder {
  return [[[CMsgGameServerGetLoadGameResult_Builder alloc] init] autorelease];
}
+ (CMsgGameServerGetLoadGameResult_Builder*) builderWithPrototype:(CMsgGameServerGetLoadGameResult*) prototype {
  return [[CMsgGameServerGetLoadGameResult builder] mergeFrom:prototype];
}
- (CMsgGameServerGetLoadGameResult_Builder*) builder {
  return [CMsgGameServerGetLoadGameResult builder];
}
- (CMsgGameServerGetLoadGameResult_Builder*) toBuilder {
  return [CMsgGameServerGetLoadGameResult builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSaveGameData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saveGameData", self.saveGameData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgGameServerGetLoadGameResult class]]) {
    return NO;
  }
  CMsgGameServerGetLoadGameResult *otherMessage = other;
  return
      self.hasSaveGameData == otherMessage.hasSaveGameData &&
      (!self.hasSaveGameData || [self.saveGameData isEqual:otherMessage.saveGameData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSaveGameData) {
    hashCode = hashCode * 31 + [self.saveGameData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgGameServerGetLoadGameResult_Builder()
@property (retain) CMsgGameServerGetLoadGameResult* _builderResult;
@end

@implementation CMsgGameServerGetLoadGameResult_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgGameServerGetLoadGameResult alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgGameServerGetLoadGameResult_Builder*) clear {
  _builderResult = [[[CMsgGameServerGetLoadGameResult alloc] init] autorelease];
  return self;
}
- (CMsgGameServerGetLoadGameResult_Builder*) clone {
  return [CMsgGameServerGetLoadGameResult builderWithPrototype:_builderResult];
}
- (CMsgGameServerGetLoadGameResult*) defaultInstance {
  return [CMsgGameServerGetLoadGameResult defaultInstance];
}
- (CMsgGameServerGetLoadGameResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgGameServerGetLoadGameResult*) buildPartial {
  CMsgGameServerGetLoadGameResult* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgGameServerGetLoadGameResult_Builder*) mergeFrom:(CMsgGameServerGetLoadGameResult*) other {
  if (other == [CMsgGameServerGetLoadGameResult defaultInstance]) {
    return self;
  }
  if (other.hasSaveGameData) {
    [self setSaveGameData:other.saveGameData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgGameServerGetLoadGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgGameServerGetLoadGameResult_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSaveGameData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasSaveGameData {
  return _builderResult.hasSaveGameData;
}
- (NSData*) saveGameData {
  return _builderResult.saveGameData;
}
- (CMsgGameServerGetLoadGameResult_Builder*) setSaveGameData:(NSData*) value {
  _builderResult.hasSaveGameData = YES;
  _builderResult.saveGameData = value;
  return self;
}
- (CMsgGameServerGetLoadGameResult_Builder*) clearSaveGameData {
  _builderResult.hasSaveGameData = NO;
  _builderResult.saveGameData = [NSData data];
  return self;
}
@end

@interface CMsgCheckSpectatorOnly ()
@end

@implementation CMsgCheckSpectatorOnly

- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgCheckSpectatorOnly* defaultCMsgCheckSpectatorOnlyInstance = nil;
+ (void) initialize {
  if (self == [CMsgCheckSpectatorOnly class]) {
    defaultCMsgCheckSpectatorOnlyInstance = [[CMsgCheckSpectatorOnly alloc] init];
  }
}
+ (CMsgCheckSpectatorOnly*) defaultInstance {
  return defaultCMsgCheckSpectatorOnlyInstance;
}
- (CMsgCheckSpectatorOnly*) defaultInstance {
  return defaultCMsgCheckSpectatorOnlyInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgCheckSpectatorOnly*) parseFromData:(NSData*) data {
  return (CMsgCheckSpectatorOnly*)[[[CMsgCheckSpectatorOnly builder] mergeFromData:data] build];
}
+ (CMsgCheckSpectatorOnly*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCheckSpectatorOnly*)[[[CMsgCheckSpectatorOnly builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgCheckSpectatorOnly*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgCheckSpectatorOnly*)[[[CMsgCheckSpectatorOnly builder] mergeFromInputStream:input] build];
}
+ (CMsgCheckSpectatorOnly*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCheckSpectatorOnly*)[[[CMsgCheckSpectatorOnly builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgCheckSpectatorOnly*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgCheckSpectatorOnly*)[[[CMsgCheckSpectatorOnly builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgCheckSpectatorOnly*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCheckSpectatorOnly*)[[[CMsgCheckSpectatorOnly builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgCheckSpectatorOnly_Builder*) builder {
  return [[[CMsgCheckSpectatorOnly_Builder alloc] init] autorelease];
}
+ (CMsgCheckSpectatorOnly_Builder*) builderWithPrototype:(CMsgCheckSpectatorOnly*) prototype {
  return [[CMsgCheckSpectatorOnly builder] mergeFrom:prototype];
}
- (CMsgCheckSpectatorOnly_Builder*) builder {
  return [CMsgCheckSpectatorOnly builder];
}
- (CMsgCheckSpectatorOnly_Builder*) toBuilder {
  return [CMsgCheckSpectatorOnly builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgCheckSpectatorOnly class]]) {
    return NO;
  }
  CMsgCheckSpectatorOnly *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgCheckSpectatorOnly_Builder()
@property (retain) CMsgCheckSpectatorOnly* _builderResult;
@end

@implementation CMsgCheckSpectatorOnly_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgCheckSpectatorOnly alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgCheckSpectatorOnly_Builder*) clear {
  _builderResult = [[[CMsgCheckSpectatorOnly alloc] init] autorelease];
  return self;
}
- (CMsgCheckSpectatorOnly_Builder*) clone {
  return [CMsgCheckSpectatorOnly builderWithPrototype:_builderResult];
}
- (CMsgCheckSpectatorOnly*) defaultInstance {
  return [CMsgCheckSpectatorOnly defaultInstance];
}
- (CMsgCheckSpectatorOnly*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgCheckSpectatorOnly*) buildPartial {
  CMsgCheckSpectatorOnly* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgCheckSpectatorOnly_Builder*) mergeFrom:(CMsgCheckSpectatorOnly*) other {
  if (other == [CMsgCheckSpectatorOnly defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgCheckSpectatorOnly_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgCheckSpectatorOnly_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface CMsgCheckSpectatorOnlyResponse ()
@property uint32_t eresult;
@property BOOL spectatorOnly;
@end

@implementation CMsgCheckSpectatorOnlyResponse

- (BOOL) hasEresult {
  return !!hasEresult_;
}
- (void) setHasEresult:(BOOL) value_ {
  hasEresult_ = !!value_;
}
@synthesize eresult;
- (BOOL) hasSpectatorOnly {
  return !!hasSpectatorOnly_;
}
- (void) setHasSpectatorOnly:(BOOL) value_ {
  hasSpectatorOnly_ = !!value_;
}
- (BOOL) spectatorOnly {
  return !!spectatorOnly_;
}
- (void) setSpectatorOnly:(BOOL) value_ {
  spectatorOnly_ = !!value_;
}
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.eresult = 2;
    self.spectatorOnly = NO;
  }
  return self;
}
static CMsgCheckSpectatorOnlyResponse* defaultCMsgCheckSpectatorOnlyResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgCheckSpectatorOnlyResponse class]) {
    defaultCMsgCheckSpectatorOnlyResponseInstance = [[CMsgCheckSpectatorOnlyResponse alloc] init];
  }
}
+ (CMsgCheckSpectatorOnlyResponse*) defaultInstance {
  return defaultCMsgCheckSpectatorOnlyResponseInstance;
}
- (CMsgCheckSpectatorOnlyResponse*) defaultInstance {
  return defaultCMsgCheckSpectatorOnlyResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEresult) {
    [output writeUInt32:1 value:self.eresult];
  }
  if (self.hasSpectatorOnly) {
    [output writeBool:2 value:self.spectatorOnly];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEresult) {
    size_ += computeUInt32Size(1, self.eresult);
  }
  if (self.hasSpectatorOnly) {
    size_ += computeBoolSize(2, self.spectatorOnly);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgCheckSpectatorOnlyResponse*) parseFromData:(NSData*) data {
  return (CMsgCheckSpectatorOnlyResponse*)[[[CMsgCheckSpectatorOnlyResponse builder] mergeFromData:data] build];
}
+ (CMsgCheckSpectatorOnlyResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCheckSpectatorOnlyResponse*)[[[CMsgCheckSpectatorOnlyResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgCheckSpectatorOnlyResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgCheckSpectatorOnlyResponse*)[[[CMsgCheckSpectatorOnlyResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgCheckSpectatorOnlyResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCheckSpectatorOnlyResponse*)[[[CMsgCheckSpectatorOnlyResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgCheckSpectatorOnlyResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgCheckSpectatorOnlyResponse*)[[[CMsgCheckSpectatorOnlyResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgCheckSpectatorOnlyResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgCheckSpectatorOnlyResponse*)[[[CMsgCheckSpectatorOnlyResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgCheckSpectatorOnlyResponse_Builder*) builder {
  return [[[CMsgCheckSpectatorOnlyResponse_Builder alloc] init] autorelease];
}
+ (CMsgCheckSpectatorOnlyResponse_Builder*) builderWithPrototype:(CMsgCheckSpectatorOnlyResponse*) prototype {
  return [[CMsgCheckSpectatorOnlyResponse builder] mergeFrom:prototype];
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) builder {
  return [CMsgCheckSpectatorOnlyResponse builder];
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) toBuilder {
  return [CMsgCheckSpectatorOnlyResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEresult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eresult", [NSNumber numberWithInt:self.eresult]];
  }
  if (self.hasSpectatorOnly) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spectatorOnly", [NSNumber numberWithBool:self.spectatorOnly]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgCheckSpectatorOnlyResponse class]]) {
    return NO;
  }
  CMsgCheckSpectatorOnlyResponse *otherMessage = other;
  return
      self.hasEresult == otherMessage.hasEresult &&
      (!self.hasEresult || self.eresult == otherMessage.eresult) &&
      self.hasSpectatorOnly == otherMessage.hasSpectatorOnly &&
      (!self.hasSpectatorOnly || self.spectatorOnly == otherMessage.spectatorOnly) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasEresult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eresult] hash];
  }
  if (self.hasSpectatorOnly) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.spectatorOnly] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgCheckSpectatorOnlyResponse_Builder()
@property (retain) CMsgCheckSpectatorOnlyResponse* _builderResult;
@end

@implementation CMsgCheckSpectatorOnlyResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgCheckSpectatorOnlyResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) clear {
  _builderResult = [[[CMsgCheckSpectatorOnlyResponse alloc] init] autorelease];
  return self;
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) clone {
  return [CMsgCheckSpectatorOnlyResponse builderWithPrototype:_builderResult];
}
- (CMsgCheckSpectatorOnlyResponse*) defaultInstance {
  return [CMsgCheckSpectatorOnlyResponse defaultInstance];
}
- (CMsgCheckSpectatorOnlyResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgCheckSpectatorOnlyResponse*) buildPartial {
  CMsgCheckSpectatorOnlyResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) mergeFrom:(CMsgCheckSpectatorOnlyResponse*) other {
  if (other == [CMsgCheckSpectatorOnlyResponse defaultInstance]) {
    return self;
  }
  if (other.hasEresult) {
    [self setEresult:other.eresult];
  }
  if (other.hasSpectatorOnly) {
    [self setSpectatorOnly:other.spectatorOnly];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEresult:[input readUInt32]];
        break;
      }
      case 16: {
        [self setSpectatorOnly:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasEresult {
  return _builderResult.hasEresult;
}
- (uint32_t) eresult {
  return _builderResult.eresult;
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) setEresult:(uint32_t) value {
  _builderResult.hasEresult = YES;
  _builderResult.eresult = value;
  return self;
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) clearEresult {
  _builderResult.hasEresult = NO;
  _builderResult.eresult = 2;
  return self;
}
- (BOOL) hasSpectatorOnly {
  return _builderResult.hasSpectatorOnly;
}
- (BOOL) spectatorOnly {
  return _builderResult.spectatorOnly;
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) setSpectatorOnly:(BOOL) value {
  _builderResult.hasSpectatorOnly = YES;
  _builderResult.spectatorOnly = value;
  return self;
}
- (CMsgCheckSpectatorOnlyResponse_Builder*) clearSpectatorOnly {
  _builderResult.hasSpectatorOnly = NO;
  _builderResult.spectatorOnly = NO;
  return self;
}
@end

@interface CMsgDOTAHallOfFame ()
@property uint32_t week;
@property (retain) PBAppendableArray * featuredPlayersArray;
@property (retain) CMsgDOTAHallOfFame_FeaturedFarmer* featuredFarmer;
@end

@implementation CMsgDOTAHallOfFame

- (BOOL) hasWeek {
  return !!hasWeek_;
}
- (void) setHasWeek:(BOOL) value_ {
  hasWeek_ = !!value_;
}
@synthesize week;
@synthesize featuredPlayersArray;
@dynamic featuredPlayers;
- (BOOL) hasFeaturedFarmer {
  return !!hasFeaturedFarmer_;
}
- (void) setHasFeaturedFarmer:(BOOL) value_ {
  hasFeaturedFarmer_ = !!value_;
}
@synthesize featuredFarmer;
- (void) dealloc {
  self.featuredPlayersArray = nil;
  self.featuredFarmer = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.week = 0;
    self.featuredFarmer = [CMsgDOTAHallOfFame_FeaturedFarmer defaultInstance];
  }
  return self;
}
static CMsgDOTAHallOfFame* defaultCMsgDOTAHallOfFameInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAHallOfFame class]) {
    defaultCMsgDOTAHallOfFameInstance = [[CMsgDOTAHallOfFame alloc] init];
  }
}
+ (CMsgDOTAHallOfFame*) defaultInstance {
  return defaultCMsgDOTAHallOfFameInstance;
}
- (CMsgDOTAHallOfFame*) defaultInstance {
  return defaultCMsgDOTAHallOfFameInstance;
}
- (PBArray *)featuredPlayers {
  return featuredPlayersArray;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer*)featuredPlayersAtIndex:(NSUInteger)index {
  return [featuredPlayersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWeek) {
    [output writeUInt32:1 value:self.week];
  }
  for (CMsgDOTAHallOfFame_FeaturedPlayer *element in self.featuredPlayersArray) {
    [output writeMessage:2 value:element];
  }
  if (self.hasFeaturedFarmer) {
    [output writeMessage:3 value:self.featuredFarmer];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWeek) {
    size_ += computeUInt32Size(1, self.week);
  }
  for (CMsgDOTAHallOfFame_FeaturedPlayer *element in self.featuredPlayersArray) {
    size_ += computeMessageSize(2, element);
  }
  if (self.hasFeaturedFarmer) {
    size_ += computeMessageSize(3, self.featuredFarmer);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAHallOfFame*) parseFromData:(NSData*) data {
  return (CMsgDOTAHallOfFame*)[[[CMsgDOTAHallOfFame builder] mergeFromData:data] build];
}
+ (CMsgDOTAHallOfFame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFame*)[[[CMsgDOTAHallOfFame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFame*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAHallOfFame*)[[[CMsgDOTAHallOfFame builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAHallOfFame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFame*)[[[CMsgDOTAHallOfFame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAHallOfFame*)[[[CMsgDOTAHallOfFame builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAHallOfFame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFame*)[[[CMsgDOTAHallOfFame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFame_Builder*) builder {
  return [[[CMsgDOTAHallOfFame_Builder alloc] init] autorelease];
}
+ (CMsgDOTAHallOfFame_Builder*) builderWithPrototype:(CMsgDOTAHallOfFame*) prototype {
  return [[CMsgDOTAHallOfFame builder] mergeFrom:prototype];
}
- (CMsgDOTAHallOfFame_Builder*) builder {
  return [CMsgDOTAHallOfFame builder];
}
- (CMsgDOTAHallOfFame_Builder*) toBuilder {
  return [CMsgDOTAHallOfFame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWeek) {
    [output appendFormat:@"%@%@: %@\n", indent, @"week", [NSNumber numberWithInt:self.week]];
  }
  for (CMsgDOTAHallOfFame_FeaturedPlayer* element in self.featuredPlayersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"featuredPlayers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFeaturedFarmer) {
    [output appendFormat:@"%@%@ {\n", indent, @"featuredFarmer"];
    [self.featuredFarmer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAHallOfFame class]]) {
    return NO;
  }
  CMsgDOTAHallOfFame *otherMessage = other;
  return
      self.hasWeek == otherMessage.hasWeek &&
      (!self.hasWeek || self.week == otherMessage.week) &&
      [self.featuredPlayersArray isEqualToArray:otherMessage.featuredPlayersArray] &&
      self.hasFeaturedFarmer == otherMessage.hasFeaturedFarmer &&
      (!self.hasFeaturedFarmer || [self.featuredFarmer isEqual:otherMessage.featuredFarmer]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasWeek) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.week] hash];
  }
  for (CMsgDOTAHallOfFame_FeaturedPlayer* element in self.featuredPlayersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasFeaturedFarmer) {
    hashCode = hashCode * 31 + [self.featuredFarmer hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAHallOfFame_FeaturedPlayer ()
@property uint32_t accountId;
@property uint32_t heroId;
@property Float32 averageScaledMetric;
@property uint32_t numGames;
@end

@implementation CMsgDOTAHallOfFame_FeaturedPlayer

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (BOOL) hasAverageScaledMetric {
  return !!hasAverageScaledMetric_;
}
- (void) setHasAverageScaledMetric:(BOOL) value_ {
  hasAverageScaledMetric_ = !!value_;
}
@synthesize averageScaledMetric;
- (BOOL) hasNumGames {
  return !!hasNumGames_;
}
- (void) setHasNumGames:(BOOL) value_ {
  hasNumGames_ = !!value_;
}
@synthesize numGames;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.heroId = 0;
    self.averageScaledMetric = 0;
    self.numGames = 0;
  }
  return self;
}
static CMsgDOTAHallOfFame_FeaturedPlayer* defaultCMsgDOTAHallOfFame_FeaturedPlayerInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAHallOfFame_FeaturedPlayer class]) {
    defaultCMsgDOTAHallOfFame_FeaturedPlayerInstance = [[CMsgDOTAHallOfFame_FeaturedPlayer alloc] init];
  }
}
+ (CMsgDOTAHallOfFame_FeaturedPlayer*) defaultInstance {
  return defaultCMsgDOTAHallOfFame_FeaturedPlayerInstance;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer*) defaultInstance {
  return defaultCMsgDOTAHallOfFame_FeaturedPlayerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasHeroId) {
    [output writeUInt32:2 value:self.heroId];
  }
  if (self.hasAverageScaledMetric) {
    [output writeFloat:3 value:self.averageScaledMetric];
  }
  if (self.hasNumGames) {
    [output writeUInt32:4 value:self.numGames];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(2, self.heroId);
  }
  if (self.hasAverageScaledMetric) {
    size_ += computeFloatSize(3, self.averageScaledMetric);
  }
  if (self.hasNumGames) {
    size_ += computeUInt32Size(4, self.numGames);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAHallOfFame_FeaturedPlayer*) parseFromData:(NSData*) data {
  return (CMsgDOTAHallOfFame_FeaturedPlayer*)[[[CMsgDOTAHallOfFame_FeaturedPlayer builder] mergeFromData:data] build];
}
+ (CMsgDOTAHallOfFame_FeaturedPlayer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFame_FeaturedPlayer*)[[[CMsgDOTAHallOfFame_FeaturedPlayer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFame_FeaturedPlayer*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAHallOfFame_FeaturedPlayer*)[[[CMsgDOTAHallOfFame_FeaturedPlayer builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAHallOfFame_FeaturedPlayer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFame_FeaturedPlayer*)[[[CMsgDOTAHallOfFame_FeaturedPlayer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFame_FeaturedPlayer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAHallOfFame_FeaturedPlayer*)[[[CMsgDOTAHallOfFame_FeaturedPlayer builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAHallOfFame_FeaturedPlayer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFame_FeaturedPlayer*)[[[CMsgDOTAHallOfFame_FeaturedPlayer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) builder {
  return [[[CMsgDOTAHallOfFame_FeaturedPlayer_Builder alloc] init] autorelease];
}
+ (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) builderWithPrototype:(CMsgDOTAHallOfFame_FeaturedPlayer*) prototype {
  return [[CMsgDOTAHallOfFame_FeaturedPlayer builder] mergeFrom:prototype];
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) builder {
  return [CMsgDOTAHallOfFame_FeaturedPlayer builder];
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) toBuilder {
  return [CMsgDOTAHallOfFame_FeaturedPlayer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  if (self.hasAverageScaledMetric) {
    [output appendFormat:@"%@%@: %@\n", indent, @"averageScaledMetric", [NSNumber numberWithFloat:self.averageScaledMetric]];
  }
  if (self.hasNumGames) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numGames", [NSNumber numberWithInt:self.numGames]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAHallOfFame_FeaturedPlayer class]]) {
    return NO;
  }
  CMsgDOTAHallOfFame_FeaturedPlayer *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      self.hasAverageScaledMetric == otherMessage.hasAverageScaledMetric &&
      (!self.hasAverageScaledMetric || self.averageScaledMetric == otherMessage.averageScaledMetric) &&
      self.hasNumGames == otherMessage.hasNumGames &&
      (!self.hasNumGames || self.numGames == otherMessage.numGames) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  if (self.hasAverageScaledMetric) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.averageScaledMetric] hash];
  }
  if (self.hasNumGames) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.numGames] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAHallOfFame_FeaturedPlayer_Builder()
@property (retain) CMsgDOTAHallOfFame_FeaturedPlayer* _builderResult;
@end

@implementation CMsgDOTAHallOfFame_FeaturedPlayer_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAHallOfFame_FeaturedPlayer alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) clear {
  _builderResult = [[[CMsgDOTAHallOfFame_FeaturedPlayer alloc] init] autorelease];
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) clone {
  return [CMsgDOTAHallOfFame_FeaturedPlayer builderWithPrototype:_builderResult];
}
- (CMsgDOTAHallOfFame_FeaturedPlayer*) defaultInstance {
  return [CMsgDOTAHallOfFame_FeaturedPlayer defaultInstance];
}
- (CMsgDOTAHallOfFame_FeaturedPlayer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAHallOfFame_FeaturedPlayer*) buildPartial {
  CMsgDOTAHallOfFame_FeaturedPlayer* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) mergeFrom:(CMsgDOTAHallOfFame_FeaturedPlayer*) other {
  if (other == [CMsgDOTAHallOfFame_FeaturedPlayer defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.hasAverageScaledMetric) {
    [self setAverageScaledMetric:other.averageScaledMetric];
  }
  if (other.hasNumGames) {
    [self setNumGames:other.numGames];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 29: {
        [self setAverageScaledMetric:[input readFloat]];
        break;
      }
      case 32: {
        [self setNumGames:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (BOOL) hasAverageScaledMetric {
  return _builderResult.hasAverageScaledMetric;
}
- (Float32) averageScaledMetric {
  return _builderResult.averageScaledMetric;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) setAverageScaledMetric:(Float32) value {
  _builderResult.hasAverageScaledMetric = YES;
  _builderResult.averageScaledMetric = value;
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) clearAverageScaledMetric {
  _builderResult.hasAverageScaledMetric = NO;
  _builderResult.averageScaledMetric = 0;
  return self;
}
- (BOOL) hasNumGames {
  return _builderResult.hasNumGames;
}
- (uint32_t) numGames {
  return _builderResult.numGames;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) setNumGames:(uint32_t) value {
  _builderResult.hasNumGames = YES;
  _builderResult.numGames = value;
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer_Builder*) clearNumGames {
  _builderResult.hasNumGames = NO;
  _builderResult.numGames = 0;
  return self;
}
@end

@interface CMsgDOTAHallOfFame_FeaturedFarmer ()
@property uint32_t accountId;
@property uint32_t heroId;
@property uint32_t goldPerMin;
@property uint32_t matchId;
@end

@implementation CMsgDOTAHallOfFame_FeaturedFarmer

- (BOOL) hasAccountId {
  return !!hasAccountId_;
}
- (void) setHasAccountId:(BOOL) value_ {
  hasAccountId_ = !!value_;
}
@synthesize accountId;
- (BOOL) hasHeroId {
  return !!hasHeroId_;
}
- (void) setHasHeroId:(BOOL) value_ {
  hasHeroId_ = !!value_;
}
@synthesize heroId;
- (BOOL) hasGoldPerMin {
  return !!hasGoldPerMin_;
}
- (void) setHasGoldPerMin:(BOOL) value_ {
  hasGoldPerMin_ = !!value_;
}
@synthesize goldPerMin;
- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.accountId = 0;
    self.heroId = 0;
    self.goldPerMin = 0;
    self.matchId = 0;
  }
  return self;
}
static CMsgDOTAHallOfFame_FeaturedFarmer* defaultCMsgDOTAHallOfFame_FeaturedFarmerInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAHallOfFame_FeaturedFarmer class]) {
    defaultCMsgDOTAHallOfFame_FeaturedFarmerInstance = [[CMsgDOTAHallOfFame_FeaturedFarmer alloc] init];
  }
}
+ (CMsgDOTAHallOfFame_FeaturedFarmer*) defaultInstance {
  return defaultCMsgDOTAHallOfFame_FeaturedFarmerInstance;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer*) defaultInstance {
  return defaultCMsgDOTAHallOfFame_FeaturedFarmerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAccountId) {
    [output writeUInt32:1 value:self.accountId];
  }
  if (self.hasHeroId) {
    [output writeUInt32:2 value:self.heroId];
  }
  if (self.hasGoldPerMin) {
    [output writeUInt32:3 value:self.goldPerMin];
  }
  if (self.hasMatchId) {
    [output writeUInt32:4 value:self.matchId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAccountId) {
    size_ += computeUInt32Size(1, self.accountId);
  }
  if (self.hasHeroId) {
    size_ += computeUInt32Size(2, self.heroId);
  }
  if (self.hasGoldPerMin) {
    size_ += computeUInt32Size(3, self.goldPerMin);
  }
  if (self.hasMatchId) {
    size_ += computeUInt32Size(4, self.matchId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAHallOfFame_FeaturedFarmer*) parseFromData:(NSData*) data {
  return (CMsgDOTAHallOfFame_FeaturedFarmer*)[[[CMsgDOTAHallOfFame_FeaturedFarmer builder] mergeFromData:data] build];
}
+ (CMsgDOTAHallOfFame_FeaturedFarmer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFame_FeaturedFarmer*)[[[CMsgDOTAHallOfFame_FeaturedFarmer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFame_FeaturedFarmer*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAHallOfFame_FeaturedFarmer*)[[[CMsgDOTAHallOfFame_FeaturedFarmer builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAHallOfFame_FeaturedFarmer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFame_FeaturedFarmer*)[[[CMsgDOTAHallOfFame_FeaturedFarmer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFame_FeaturedFarmer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAHallOfFame_FeaturedFarmer*)[[[CMsgDOTAHallOfFame_FeaturedFarmer builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAHallOfFame_FeaturedFarmer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFame_FeaturedFarmer*)[[[CMsgDOTAHallOfFame_FeaturedFarmer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) builder {
  return [[[CMsgDOTAHallOfFame_FeaturedFarmer_Builder alloc] init] autorelease];
}
+ (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) builderWithPrototype:(CMsgDOTAHallOfFame_FeaturedFarmer*) prototype {
  return [[CMsgDOTAHallOfFame_FeaturedFarmer builder] mergeFrom:prototype];
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) builder {
  return [CMsgDOTAHallOfFame_FeaturedFarmer builder];
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) toBuilder {
  return [CMsgDOTAHallOfFame_FeaturedFarmer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAccountId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accountId", [NSNumber numberWithInt:self.accountId]];
  }
  if (self.hasHeroId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"heroId", [NSNumber numberWithInt:self.heroId]];
  }
  if (self.hasGoldPerMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goldPerMin", [NSNumber numberWithInt:self.goldPerMin]];
  }
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAHallOfFame_FeaturedFarmer class]]) {
    return NO;
  }
  CMsgDOTAHallOfFame_FeaturedFarmer *otherMessage = other;
  return
      self.hasAccountId == otherMessage.hasAccountId &&
      (!self.hasAccountId || self.accountId == otherMessage.accountId) &&
      self.hasHeroId == otherMessage.hasHeroId &&
      (!self.hasHeroId || self.heroId == otherMessage.heroId) &&
      self.hasGoldPerMin == otherMessage.hasGoldPerMin &&
      (!self.hasGoldPerMin || self.goldPerMin == otherMessage.goldPerMin) &&
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAccountId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accountId] hash];
  }
  if (self.hasHeroId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.heroId] hash];
  }
  if (self.hasGoldPerMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.goldPerMin] hash];
  }
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAHallOfFame_FeaturedFarmer_Builder()
@property (retain) CMsgDOTAHallOfFame_FeaturedFarmer* _builderResult;
@end

@implementation CMsgDOTAHallOfFame_FeaturedFarmer_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAHallOfFame_FeaturedFarmer alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) clear {
  _builderResult = [[[CMsgDOTAHallOfFame_FeaturedFarmer alloc] init] autorelease];
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) clone {
  return [CMsgDOTAHallOfFame_FeaturedFarmer builderWithPrototype:_builderResult];
}
- (CMsgDOTAHallOfFame_FeaturedFarmer*) defaultInstance {
  return [CMsgDOTAHallOfFame_FeaturedFarmer defaultInstance];
}
- (CMsgDOTAHallOfFame_FeaturedFarmer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAHallOfFame_FeaturedFarmer*) buildPartial {
  CMsgDOTAHallOfFame_FeaturedFarmer* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) mergeFrom:(CMsgDOTAHallOfFame_FeaturedFarmer*) other {
  if (other == [CMsgDOTAHallOfFame_FeaturedFarmer defaultInstance]) {
    return self;
  }
  if (other.hasAccountId) {
    [self setAccountId:other.accountId];
  }
  if (other.hasHeroId) {
    [self setHeroId:other.heroId];
  }
  if (other.hasGoldPerMin) {
    [self setGoldPerMin:other.goldPerMin];
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAccountId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setHeroId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setGoldPerMin:[input readUInt32]];
        break;
      }
      case 32: {
        [self setMatchId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAccountId {
  return _builderResult.hasAccountId;
}
- (uint32_t) accountId {
  return _builderResult.accountId;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) setAccountId:(uint32_t) value {
  _builderResult.hasAccountId = YES;
  _builderResult.accountId = value;
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) clearAccountId {
  _builderResult.hasAccountId = NO;
  _builderResult.accountId = 0;
  return self;
}
- (BOOL) hasHeroId {
  return _builderResult.hasHeroId;
}
- (uint32_t) heroId {
  return _builderResult.heroId;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) setHeroId:(uint32_t) value {
  _builderResult.hasHeroId = YES;
  _builderResult.heroId = value;
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) clearHeroId {
  _builderResult.hasHeroId = NO;
  _builderResult.heroId = 0;
  return self;
}
- (BOOL) hasGoldPerMin {
  return _builderResult.hasGoldPerMin;
}
- (uint32_t) goldPerMin {
  return _builderResult.goldPerMin;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) setGoldPerMin:(uint32_t) value {
  _builderResult.hasGoldPerMin = YES;
  _builderResult.goldPerMin = value;
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) clearGoldPerMin {
  _builderResult.hasGoldPerMin = NO;
  _builderResult.goldPerMin = 0;
  return self;
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
@end

@interface CMsgDOTAHallOfFame_Builder()
@property (retain) CMsgDOTAHallOfFame* _builderResult;
@end

@implementation CMsgDOTAHallOfFame_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAHallOfFame alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAHallOfFame_Builder*) clear {
  _builderResult = [[[CMsgDOTAHallOfFame alloc] init] autorelease];
  return self;
}
- (CMsgDOTAHallOfFame_Builder*) clone {
  return [CMsgDOTAHallOfFame builderWithPrototype:_builderResult];
}
- (CMsgDOTAHallOfFame*) defaultInstance {
  return [CMsgDOTAHallOfFame defaultInstance];
}
- (CMsgDOTAHallOfFame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAHallOfFame*) buildPartial {
  CMsgDOTAHallOfFame* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAHallOfFame_Builder*) mergeFrom:(CMsgDOTAHallOfFame*) other {
  if (other == [CMsgDOTAHallOfFame defaultInstance]) {
    return self;
  }
  if (other.hasWeek) {
    [self setWeek:other.week];
  }
  if (other.featuredPlayersArray.count > 0) {
    if (_builderResult.featuredPlayersArray == nil) {
      _builderResult.featuredPlayersArray = [[other.featuredPlayersArray copyWithZone:[other.featuredPlayersArray zone]] autorelease];
    } else {
      [_builderResult.featuredPlayersArray appendArray:other.featuredPlayersArray];
    }
  }
  if (other.hasFeaturedFarmer) {
    [self mergeFeaturedFarmer:other.featuredFarmer];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAHallOfFame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAHallOfFame_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setWeek:[input readUInt32]];
        break;
      }
      case 18: {
        CMsgDOTAHallOfFame_FeaturedPlayer_Builder* subBuilder = [CMsgDOTAHallOfFame_FeaturedPlayer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeaturedPlayers:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        CMsgDOTAHallOfFame_FeaturedFarmer_Builder* subBuilder = [CMsgDOTAHallOfFame_FeaturedFarmer builder];
        if (self.hasFeaturedFarmer) {
          [subBuilder mergeFrom:self.featuredFarmer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFeaturedFarmer:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasWeek {
  return _builderResult.hasWeek;
}
- (uint32_t) week {
  return _builderResult.week;
}
- (CMsgDOTAHallOfFame_Builder*) setWeek:(uint32_t) value {
  _builderResult.hasWeek = YES;
  _builderResult.week = value;
  return self;
}
- (CMsgDOTAHallOfFame_Builder*) clearWeek {
  _builderResult.hasWeek = NO;
  _builderResult.week = 0;
  return self;
}
- (PBAppendableArray *)featuredPlayers {
  return _builderResult.featuredPlayersArray;
}
- (CMsgDOTAHallOfFame_FeaturedPlayer*)featuredPlayersAtIndex:(NSUInteger)index {
  return [_builderResult featuredPlayersAtIndex:index];
}
- (CMsgDOTAHallOfFame_Builder *)addFeaturedPlayers:(CMsgDOTAHallOfFame_FeaturedPlayer*)value {
  if (_builderResult.featuredPlayersArray == nil) {
    _builderResult.featuredPlayersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.featuredPlayersArray addObject:value];
  return self;
}
- (CMsgDOTAHallOfFame_Builder *)setFeaturedPlayersArray:(NSArray *)array {
  _builderResult.featuredPlayersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAHallOfFame_Builder *)setFeaturedPlayersValues:(const CMsgDOTAHallOfFame_FeaturedPlayer* *)values count:(NSUInteger)count {
  _builderResult.featuredPlayersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAHallOfFame_Builder *)clearFeaturedPlayers {
  _builderResult.featuredPlayersArray = nil;
  return self;
}
- (BOOL) hasFeaturedFarmer {
  return _builderResult.hasFeaturedFarmer;
}
- (CMsgDOTAHallOfFame_FeaturedFarmer*) featuredFarmer {
  return _builderResult.featuredFarmer;
}
- (CMsgDOTAHallOfFame_Builder*) setFeaturedFarmer:(CMsgDOTAHallOfFame_FeaturedFarmer*) value {
  _builderResult.hasFeaturedFarmer = YES;
  _builderResult.featuredFarmer = value;
  return self;
}
- (CMsgDOTAHallOfFame_Builder*) setFeaturedFarmerBuilder:(CMsgDOTAHallOfFame_FeaturedFarmer_Builder*) builderForValue {
  return [self setFeaturedFarmer:[builderForValue build]];
}
- (CMsgDOTAHallOfFame_Builder*) mergeFeaturedFarmer:(CMsgDOTAHallOfFame_FeaturedFarmer*) value {
  if (_builderResult.hasFeaturedFarmer &&
      _builderResult.featuredFarmer != [CMsgDOTAHallOfFame_FeaturedFarmer defaultInstance]) {
    _builderResult.featuredFarmer =
      [[[CMsgDOTAHallOfFame_FeaturedFarmer builderWithPrototype:_builderResult.featuredFarmer] mergeFrom:value] buildPartial];
  } else {
    _builderResult.featuredFarmer = value;
  }
  _builderResult.hasFeaturedFarmer = YES;
  return self;
}
- (CMsgDOTAHallOfFame_Builder*) clearFeaturedFarmer {
  _builderResult.hasFeaturedFarmer = NO;
  _builderResult.featuredFarmer = [CMsgDOTAHallOfFame_FeaturedFarmer defaultInstance];
  return self;
}
@end

@interface CMsgDOTAHallOfFameRequest ()
@property uint32_t week;
@end

@implementation CMsgDOTAHallOfFameRequest

- (BOOL) hasWeek {
  return !!hasWeek_;
}
- (void) setHasWeek:(BOOL) value_ {
  hasWeek_ = !!value_;
}
@synthesize week;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.week = 0;
  }
  return self;
}
static CMsgDOTAHallOfFameRequest* defaultCMsgDOTAHallOfFameRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAHallOfFameRequest class]) {
    defaultCMsgDOTAHallOfFameRequestInstance = [[CMsgDOTAHallOfFameRequest alloc] init];
  }
}
+ (CMsgDOTAHallOfFameRequest*) defaultInstance {
  return defaultCMsgDOTAHallOfFameRequestInstance;
}
- (CMsgDOTAHallOfFameRequest*) defaultInstance {
  return defaultCMsgDOTAHallOfFameRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWeek) {
    [output writeUInt32:1 value:self.week];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWeek) {
    size_ += computeUInt32Size(1, self.week);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAHallOfFameRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTAHallOfFameRequest*)[[[CMsgDOTAHallOfFameRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTAHallOfFameRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFameRequest*)[[[CMsgDOTAHallOfFameRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFameRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAHallOfFameRequest*)[[[CMsgDOTAHallOfFameRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAHallOfFameRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFameRequest*)[[[CMsgDOTAHallOfFameRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAHallOfFameRequest*)[[[CMsgDOTAHallOfFameRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAHallOfFameRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFameRequest*)[[[CMsgDOTAHallOfFameRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFameRequest_Builder*) builder {
  return [[[CMsgDOTAHallOfFameRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTAHallOfFameRequest_Builder*) builderWithPrototype:(CMsgDOTAHallOfFameRequest*) prototype {
  return [[CMsgDOTAHallOfFameRequest builder] mergeFrom:prototype];
}
- (CMsgDOTAHallOfFameRequest_Builder*) builder {
  return [CMsgDOTAHallOfFameRequest builder];
}
- (CMsgDOTAHallOfFameRequest_Builder*) toBuilder {
  return [CMsgDOTAHallOfFameRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWeek) {
    [output appendFormat:@"%@%@: %@\n", indent, @"week", [NSNumber numberWithInt:self.week]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAHallOfFameRequest class]]) {
    return NO;
  }
  CMsgDOTAHallOfFameRequest *otherMessage = other;
  return
      self.hasWeek == otherMessage.hasWeek &&
      (!self.hasWeek || self.week == otherMessage.week) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasWeek) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.week] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAHallOfFameRequest_Builder()
@property (retain) CMsgDOTAHallOfFameRequest* _builderResult;
@end

@implementation CMsgDOTAHallOfFameRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAHallOfFameRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAHallOfFameRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTAHallOfFameRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTAHallOfFameRequest_Builder*) clone {
  return [CMsgDOTAHallOfFameRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTAHallOfFameRequest*) defaultInstance {
  return [CMsgDOTAHallOfFameRequest defaultInstance];
}
- (CMsgDOTAHallOfFameRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAHallOfFameRequest*) buildPartial {
  CMsgDOTAHallOfFameRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAHallOfFameRequest_Builder*) mergeFrom:(CMsgDOTAHallOfFameRequest*) other {
  if (other == [CMsgDOTAHallOfFameRequest defaultInstance]) {
    return self;
  }
  if (other.hasWeek) {
    [self setWeek:other.week];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAHallOfFameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAHallOfFameRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setWeek:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasWeek {
  return _builderResult.hasWeek;
}
- (uint32_t) week {
  return _builderResult.week;
}
- (CMsgDOTAHallOfFameRequest_Builder*) setWeek:(uint32_t) value {
  _builderResult.hasWeek = YES;
  _builderResult.week = value;
  return self;
}
- (CMsgDOTAHallOfFameRequest_Builder*) clearWeek {
  _builderResult.hasWeek = NO;
  _builderResult.week = 0;
  return self;
}
@end

@interface CMsgDOTAHallOfFameResponse ()
@property (retain) CMsgDOTAHallOfFame* hallOfFame;
@property uint32_t eresult;
@end

@implementation CMsgDOTAHallOfFameResponse

- (BOOL) hasHallOfFame {
  return !!hasHallOfFame_;
}
- (void) setHasHallOfFame:(BOOL) value_ {
  hasHallOfFame_ = !!value_;
}
@synthesize hallOfFame;
- (BOOL) hasEresult {
  return !!hasEresult_;
}
- (void) setHasEresult:(BOOL) value_ {
  hasEresult_ = !!value_;
}
@synthesize eresult;
- (void) dealloc {
  self.hallOfFame = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.hallOfFame = [CMsgDOTAHallOfFame defaultInstance];
    self.eresult = 2;
  }
  return self;
}
static CMsgDOTAHallOfFameResponse* defaultCMsgDOTAHallOfFameResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAHallOfFameResponse class]) {
    defaultCMsgDOTAHallOfFameResponseInstance = [[CMsgDOTAHallOfFameResponse alloc] init];
  }
}
+ (CMsgDOTAHallOfFameResponse*) defaultInstance {
  return defaultCMsgDOTAHallOfFameResponseInstance;
}
- (CMsgDOTAHallOfFameResponse*) defaultInstance {
  return defaultCMsgDOTAHallOfFameResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHallOfFame) {
    [output writeMessage:1 value:self.hallOfFame];
  }
  if (self.hasEresult) {
    [output writeUInt32:2 value:self.eresult];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHallOfFame) {
    size_ += computeMessageSize(1, self.hallOfFame);
  }
  if (self.hasEresult) {
    size_ += computeUInt32Size(2, self.eresult);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAHallOfFameResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAHallOfFameResponse*)[[[CMsgDOTAHallOfFameResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAHallOfFameResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFameResponse*)[[[CMsgDOTAHallOfFameResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFameResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAHallOfFameResponse*)[[[CMsgDOTAHallOfFameResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAHallOfFameResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFameResponse*)[[[CMsgDOTAHallOfFameResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAHallOfFameResponse*)[[[CMsgDOTAHallOfFameResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAHallOfFameResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHallOfFameResponse*)[[[CMsgDOTAHallOfFameResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHallOfFameResponse_Builder*) builder {
  return [[[CMsgDOTAHallOfFameResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAHallOfFameResponse_Builder*) builderWithPrototype:(CMsgDOTAHallOfFameResponse*) prototype {
  return [[CMsgDOTAHallOfFameResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAHallOfFameResponse_Builder*) builder {
  return [CMsgDOTAHallOfFameResponse builder];
}
- (CMsgDOTAHallOfFameResponse_Builder*) toBuilder {
  return [CMsgDOTAHallOfFameResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHallOfFame) {
    [output appendFormat:@"%@%@ {\n", indent, @"hallOfFame"];
    [self.hallOfFame writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasEresult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eresult", [NSNumber numberWithInt:self.eresult]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAHallOfFameResponse class]]) {
    return NO;
  }
  CMsgDOTAHallOfFameResponse *otherMessage = other;
  return
      self.hasHallOfFame == otherMessage.hasHallOfFame &&
      (!self.hasHallOfFame || [self.hallOfFame isEqual:otherMessage.hallOfFame]) &&
      self.hasEresult == otherMessage.hasEresult &&
      (!self.hasEresult || self.eresult == otherMessage.eresult) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasHallOfFame) {
    hashCode = hashCode * 31 + [self.hallOfFame hash];
  }
  if (self.hasEresult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eresult] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAHallOfFameResponse_Builder()
@property (retain) CMsgDOTAHallOfFameResponse* _builderResult;
@end

@implementation CMsgDOTAHallOfFameResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAHallOfFameResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAHallOfFameResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAHallOfFameResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAHallOfFameResponse_Builder*) clone {
  return [CMsgDOTAHallOfFameResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAHallOfFameResponse*) defaultInstance {
  return [CMsgDOTAHallOfFameResponse defaultInstance];
}
- (CMsgDOTAHallOfFameResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAHallOfFameResponse*) buildPartial {
  CMsgDOTAHallOfFameResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAHallOfFameResponse_Builder*) mergeFrom:(CMsgDOTAHallOfFameResponse*) other {
  if (other == [CMsgDOTAHallOfFameResponse defaultInstance]) {
    return self;
  }
  if (other.hasHallOfFame) {
    [self mergeHallOfFame:other.hallOfFame];
  }
  if (other.hasEresult) {
    [self setEresult:other.eresult];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAHallOfFameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAHallOfFameResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTAHallOfFame_Builder* subBuilder = [CMsgDOTAHallOfFame builder];
        if (self.hasHallOfFame) {
          [subBuilder mergeFrom:self.hallOfFame];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHallOfFame:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setEresult:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasHallOfFame {
  return _builderResult.hasHallOfFame;
}
- (CMsgDOTAHallOfFame*) hallOfFame {
  return _builderResult.hallOfFame;
}
- (CMsgDOTAHallOfFameResponse_Builder*) setHallOfFame:(CMsgDOTAHallOfFame*) value {
  _builderResult.hasHallOfFame = YES;
  _builderResult.hallOfFame = value;
  return self;
}
- (CMsgDOTAHallOfFameResponse_Builder*) setHallOfFameBuilder:(CMsgDOTAHallOfFame_Builder*) builderForValue {
  return [self setHallOfFame:[builderForValue build]];
}
- (CMsgDOTAHallOfFameResponse_Builder*) mergeHallOfFame:(CMsgDOTAHallOfFame*) value {
  if (_builderResult.hasHallOfFame &&
      _builderResult.hallOfFame != [CMsgDOTAHallOfFame defaultInstance]) {
    _builderResult.hallOfFame =
      [[[CMsgDOTAHallOfFame builderWithPrototype:_builderResult.hallOfFame] mergeFrom:value] buildPartial];
  } else {
    _builderResult.hallOfFame = value;
  }
  _builderResult.hasHallOfFame = YES;
  return self;
}
- (CMsgDOTAHallOfFameResponse_Builder*) clearHallOfFame {
  _builderResult.hasHallOfFame = NO;
  _builderResult.hallOfFame = [CMsgDOTAHallOfFame defaultInstance];
  return self;
}
- (BOOL) hasEresult {
  return _builderResult.hasEresult;
}
- (uint32_t) eresult {
  return _builderResult.eresult;
}
- (CMsgDOTAHallOfFameResponse_Builder*) setEresult:(uint32_t) value {
  _builderResult.hasEresult = YES;
  _builderResult.eresult = value;
  return self;
}
- (CMsgDOTAHallOfFameResponse_Builder*) clearEresult {
  _builderResult.hasEresult = NO;
  _builderResult.eresult = 2;
  return self;
}
@end

@interface CMsgDOTAGenerateDiretidePrizeList ()
@property uint32_t prizeList;
@end

@implementation CMsgDOTAGenerateDiretidePrizeList

- (BOOL) hasPrizeList {
  return !!hasPrizeList_;
}
- (void) setHasPrizeList:(BOOL) value_ {
  hasPrizeList_ = !!value_;
}
@synthesize prizeList;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.prizeList = 0;
  }
  return self;
}
static CMsgDOTAGenerateDiretidePrizeList* defaultCMsgDOTAGenerateDiretidePrizeListInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAGenerateDiretidePrizeList class]) {
    defaultCMsgDOTAGenerateDiretidePrizeListInstance = [[CMsgDOTAGenerateDiretidePrizeList alloc] init];
  }
}
+ (CMsgDOTAGenerateDiretidePrizeList*) defaultInstance {
  return defaultCMsgDOTAGenerateDiretidePrizeListInstance;
}
- (CMsgDOTAGenerateDiretidePrizeList*) defaultInstance {
  return defaultCMsgDOTAGenerateDiretidePrizeListInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrizeList) {
    [output writeUInt32:1 value:self.prizeList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPrizeList) {
    size_ += computeUInt32Size(1, self.prizeList);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAGenerateDiretidePrizeList*) parseFromData:(NSData*) data {
  return (CMsgDOTAGenerateDiretidePrizeList*)[[[CMsgDOTAGenerateDiretidePrizeList builder] mergeFromData:data] build];
}
+ (CMsgDOTAGenerateDiretidePrizeList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGenerateDiretidePrizeList*)[[[CMsgDOTAGenerateDiretidePrizeList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGenerateDiretidePrizeList*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAGenerateDiretidePrizeList*)[[[CMsgDOTAGenerateDiretidePrizeList builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAGenerateDiretidePrizeList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGenerateDiretidePrizeList*)[[[CMsgDOTAGenerateDiretidePrizeList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGenerateDiretidePrizeList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAGenerateDiretidePrizeList*)[[[CMsgDOTAGenerateDiretidePrizeList builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAGenerateDiretidePrizeList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGenerateDiretidePrizeList*)[[[CMsgDOTAGenerateDiretidePrizeList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGenerateDiretidePrizeList_Builder*) builder {
  return [[[CMsgDOTAGenerateDiretidePrizeList_Builder alloc] init] autorelease];
}
+ (CMsgDOTAGenerateDiretidePrizeList_Builder*) builderWithPrototype:(CMsgDOTAGenerateDiretidePrizeList*) prototype {
  return [[CMsgDOTAGenerateDiretidePrizeList builder] mergeFrom:prototype];
}
- (CMsgDOTAGenerateDiretidePrizeList_Builder*) builder {
  return [CMsgDOTAGenerateDiretidePrizeList builder];
}
- (CMsgDOTAGenerateDiretidePrizeList_Builder*) toBuilder {
  return [CMsgDOTAGenerateDiretidePrizeList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPrizeList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prizeList", [NSNumber numberWithInt:self.prizeList]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAGenerateDiretidePrizeList class]]) {
    return NO;
  }
  CMsgDOTAGenerateDiretidePrizeList *otherMessage = other;
  return
      self.hasPrizeList == otherMessage.hasPrizeList &&
      (!self.hasPrizeList || self.prizeList == otherMessage.prizeList) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPrizeList) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.prizeList] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAGenerateDiretidePrizeList_Builder()
@property (retain) CMsgDOTAGenerateDiretidePrizeList* _builderResult;
@end

@implementation CMsgDOTAGenerateDiretidePrizeList_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAGenerateDiretidePrizeList alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAGenerateDiretidePrizeList_Builder*) clear {
  _builderResult = [[[CMsgDOTAGenerateDiretidePrizeList alloc] init] autorelease];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeList_Builder*) clone {
  return [CMsgDOTAGenerateDiretidePrizeList builderWithPrototype:_builderResult];
}
- (CMsgDOTAGenerateDiretidePrizeList*) defaultInstance {
  return [CMsgDOTAGenerateDiretidePrizeList defaultInstance];
}
- (CMsgDOTAGenerateDiretidePrizeList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAGenerateDiretidePrizeList*) buildPartial {
  CMsgDOTAGenerateDiretidePrizeList* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAGenerateDiretidePrizeList_Builder*) mergeFrom:(CMsgDOTAGenerateDiretidePrizeList*) other {
  if (other == [CMsgDOTAGenerateDiretidePrizeList defaultInstance]) {
    return self;
  }
  if (other.hasPrizeList) {
    [self setPrizeList:other.prizeList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAGenerateDiretidePrizeList_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrizeList:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPrizeList {
  return _builderResult.hasPrizeList;
}
- (uint32_t) prizeList {
  return _builderResult.prizeList;
}
- (CMsgDOTAGenerateDiretidePrizeList_Builder*) setPrizeList:(uint32_t) value {
  _builderResult.hasPrizeList = YES;
  _builderResult.prizeList = value;
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeList_Builder*) clearPrizeList {
  _builderResult.hasPrizeList = NO;
  _builderResult.prizeList = 0;
  return self;
}
@end

@interface CMsgDOTAGenerateDiretidePrizeListResponse ()
@property (retain) PBAppendableArray * itemDefsArray;
@property (retain) PBAppendableArray * steamIdsArray;
@property uint32_t prizeList;
@end

@implementation CMsgDOTAGenerateDiretidePrizeListResponse

@synthesize itemDefsArray;
@dynamic itemDefs;
@synthesize steamIdsArray;
@dynamic steamIds;
- (BOOL) hasPrizeList {
  return !!hasPrizeList_;
}
- (void) setHasPrizeList:(BOOL) value_ {
  hasPrizeList_ = !!value_;
}
@synthesize prizeList;
- (void) dealloc {
  self.itemDefsArray = nil;
  self.steamIdsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.prizeList = 0;
  }
  return self;
}
static CMsgDOTAGenerateDiretidePrizeListResponse* defaultCMsgDOTAGenerateDiretidePrizeListResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAGenerateDiretidePrizeListResponse class]) {
    defaultCMsgDOTAGenerateDiretidePrizeListResponseInstance = [[CMsgDOTAGenerateDiretidePrizeListResponse alloc] init];
  }
}
+ (CMsgDOTAGenerateDiretidePrizeListResponse*) defaultInstance {
  return defaultCMsgDOTAGenerateDiretidePrizeListResponseInstance;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse*) defaultInstance {
  return defaultCMsgDOTAGenerateDiretidePrizeListResponseInstance;
}
- (PBArray *)itemDefs {
  return itemDefsArray;
}
- (uint32_t)itemDefsAtIndex:(NSUInteger)index {
  return [itemDefsArray uint32AtIndex:index];
}
- (PBArray *)steamIds {
  return steamIdsArray;
}
- (uint64_t)steamIdsAtIndex:(NSUInteger)index {
  return [steamIdsArray uint64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger itemDefsArrayCount = self.itemDefsArray.count;
  if (itemDefsArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.itemDefsArray.data;
    for (NSUInteger i = 0; i < itemDefsArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  const NSUInteger steamIdsArrayCount = self.steamIdsArray.count;
  if (steamIdsArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.steamIdsArray.data;
    for (NSUInteger i = 0; i < steamIdsArrayCount; ++i) {
      [output writeFixed64:2 value:values[i]];
    }
  }
  if (self.hasPrizeList) {
    [output writeUInt32:3 value:self.prizeList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.itemDefsArray.count;
    const uint32_t *values = (const uint32_t *)self.itemDefsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.steamIdsArray.count;
    dataSize = 8 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasPrizeList) {
    size_ += computeUInt32Size(3, self.prizeList);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAGenerateDiretidePrizeListResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAGenerateDiretidePrizeListResponse*)[[[CMsgDOTAGenerateDiretidePrizeListResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAGenerateDiretidePrizeListResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGenerateDiretidePrizeListResponse*)[[[CMsgDOTAGenerateDiretidePrizeListResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGenerateDiretidePrizeListResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAGenerateDiretidePrizeListResponse*)[[[CMsgDOTAGenerateDiretidePrizeListResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAGenerateDiretidePrizeListResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGenerateDiretidePrizeListResponse*)[[[CMsgDOTAGenerateDiretidePrizeListResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGenerateDiretidePrizeListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAGenerateDiretidePrizeListResponse*)[[[CMsgDOTAGenerateDiretidePrizeListResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAGenerateDiretidePrizeListResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGenerateDiretidePrizeListResponse*)[[[CMsgDOTAGenerateDiretidePrizeListResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) builder {
  return [[[CMsgDOTAGenerateDiretidePrizeListResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) builderWithPrototype:(CMsgDOTAGenerateDiretidePrizeListResponse*) prototype {
  return [[CMsgDOTAGenerateDiretidePrizeListResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) builder {
  return [CMsgDOTAGenerateDiretidePrizeListResponse builder];
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) toBuilder {
  return [CMsgDOTAGenerateDiretidePrizeListResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.itemDefsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemDefs", value];
  }
  for (NSNumber* value in self.steamIdsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"steamIds", value];
  }
  if (self.hasPrizeList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prizeList", [NSNumber numberWithInt:self.prizeList]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAGenerateDiretidePrizeListResponse class]]) {
    return NO;
  }
  CMsgDOTAGenerateDiretidePrizeListResponse *otherMessage = other;
  return
      [self.itemDefsArray isEqualToArray:otherMessage.itemDefsArray] &&
      [self.steamIdsArray isEqualToArray:otherMessage.steamIdsArray] &&
      self.hasPrizeList == otherMessage.hasPrizeList &&
      (!self.hasPrizeList || self.prizeList == otherMessage.prizeList) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.itemDefsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  for (NSNumber* value in self.steamIdsArray) {
    hashCode = hashCode * 31 + [value intValue];
  }
  if (self.hasPrizeList) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.prizeList] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAGenerateDiretidePrizeListResponse_Builder()
@property (retain) CMsgDOTAGenerateDiretidePrizeListResponse* _builderResult;
@end

@implementation CMsgDOTAGenerateDiretidePrizeListResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAGenerateDiretidePrizeListResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAGenerateDiretidePrizeListResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) clone {
  return [CMsgDOTAGenerateDiretidePrizeListResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAGenerateDiretidePrizeListResponse*) defaultInstance {
  return [CMsgDOTAGenerateDiretidePrizeListResponse defaultInstance];
}
- (CMsgDOTAGenerateDiretidePrizeListResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAGenerateDiretidePrizeListResponse*) buildPartial {
  CMsgDOTAGenerateDiretidePrizeListResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) mergeFrom:(CMsgDOTAGenerateDiretidePrizeListResponse*) other {
  if (other == [CMsgDOTAGenerateDiretidePrizeListResponse defaultInstance]) {
    return self;
  }
  if (other.itemDefsArray.count > 0) {
    if (_builderResult.itemDefsArray == nil) {
      _builderResult.itemDefsArray = [[other.itemDefsArray copyWithZone:[other.itemDefsArray zone]] autorelease];
    } else {
      [_builderResult.itemDefsArray appendArray:other.itemDefsArray];
    }
  }
  if (other.steamIdsArray.count > 0) {
    if (_builderResult.steamIdsArray == nil) {
      _builderResult.steamIdsArray = [[other.steamIdsArray copyWithZone:[other.steamIdsArray zone]] autorelease];
    } else {
      [_builderResult.steamIdsArray appendArray:other.steamIdsArray];
    }
  }
  if (other.hasPrizeList) {
    [self setPrizeList:other.prizeList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addItemDefs:[input readUInt32]];
        break;
      }
      case 17: {
        [self addSteamIds:[input readFixed64]];
        break;
      }
      case 24: {
        [self setPrizeList:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)itemDefs {
  return _builderResult.itemDefsArray;
}
- (uint32_t)itemDefsAtIndex:(NSUInteger)index {
  return [_builderResult itemDefsAtIndex:index];
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder *)addItemDefs:(uint32_t)value {
  if (_builderResult.itemDefsArray == nil) {
    _builderResult.itemDefsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_builderResult.itemDefsArray addUint32:value];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder *)setItemDefsArray:(NSArray *)array {
  _builderResult.itemDefsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder *)setItemDefsValues:(const uint32_t *)values count:(NSUInteger)count {
  _builderResult.itemDefsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder *)clearItemDefs {
  _builderResult.itemDefsArray = nil;
  return self;
}
- (PBAppendableArray *)steamIds {
  return _builderResult.steamIdsArray;
}
- (uint64_t)steamIdsAtIndex:(NSUInteger)index {
  return [_builderResult steamIdsAtIndex:index];
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder *)addSteamIds:(uint64_t)value {
  if (_builderResult.steamIdsArray == nil) {
    _builderResult.steamIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_builderResult.steamIdsArray addUint64:value];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder *)setSteamIdsArray:(NSArray *)array {
  _builderResult.steamIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder *)setSteamIdsValues:(const uint64_t *)values count:(NSUInteger)count {
  _builderResult.steamIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder *)clearSteamIds {
  _builderResult.steamIdsArray = nil;
  return self;
}
- (BOOL) hasPrizeList {
  return _builderResult.hasPrizeList;
}
- (uint32_t) prizeList {
  return _builderResult.prizeList;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) setPrizeList:(uint32_t) value {
  _builderResult.hasPrizeList = YES;
  _builderResult.prizeList = value;
  return self;
}
- (CMsgDOTAGenerateDiretidePrizeListResponse_Builder*) clearPrizeList {
  _builderResult.hasPrizeList = NO;
  _builderResult.prizeList = 0;
  return self;
}
@end

@interface CMsgDOTARewardDiretidePrizes ()
@property uint32_t team;
@property uint32_t prizeList;
@end

@implementation CMsgDOTARewardDiretidePrizes

- (BOOL) hasTeam {
  return !!hasTeam_;
}
- (void) setHasTeam:(BOOL) value_ {
  hasTeam_ = !!value_;
}
@synthesize team;
- (BOOL) hasPrizeList {
  return !!hasPrizeList_;
}
- (void) setHasPrizeList:(BOOL) value_ {
  hasPrizeList_ = !!value_;
}
@synthesize prizeList;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.team = 0;
    self.prizeList = 0;
  }
  return self;
}
static CMsgDOTARewardDiretidePrizes* defaultCMsgDOTARewardDiretidePrizesInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTARewardDiretidePrizes class]) {
    defaultCMsgDOTARewardDiretidePrizesInstance = [[CMsgDOTARewardDiretidePrizes alloc] init];
  }
}
+ (CMsgDOTARewardDiretidePrizes*) defaultInstance {
  return defaultCMsgDOTARewardDiretidePrizesInstance;
}
- (CMsgDOTARewardDiretidePrizes*) defaultInstance {
  return defaultCMsgDOTARewardDiretidePrizesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTeam) {
    [output writeUInt32:1 value:self.team];
  }
  if (self.hasPrizeList) {
    [output writeUInt32:2 value:self.prizeList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTeam) {
    size_ += computeUInt32Size(1, self.team);
  }
  if (self.hasPrizeList) {
    size_ += computeUInt32Size(2, self.prizeList);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTARewardDiretidePrizes*) parseFromData:(NSData*) data {
  return (CMsgDOTARewardDiretidePrizes*)[[[CMsgDOTARewardDiretidePrizes builder] mergeFromData:data] build];
}
+ (CMsgDOTARewardDiretidePrizes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARewardDiretidePrizes*)[[[CMsgDOTARewardDiretidePrizes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARewardDiretidePrizes*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTARewardDiretidePrizes*)[[[CMsgDOTARewardDiretidePrizes builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTARewardDiretidePrizes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARewardDiretidePrizes*)[[[CMsgDOTARewardDiretidePrizes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARewardDiretidePrizes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTARewardDiretidePrizes*)[[[CMsgDOTARewardDiretidePrizes builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTARewardDiretidePrizes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTARewardDiretidePrizes*)[[[CMsgDOTARewardDiretidePrizes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTARewardDiretidePrizes_Builder*) builder {
  return [[[CMsgDOTARewardDiretidePrizes_Builder alloc] init] autorelease];
}
+ (CMsgDOTARewardDiretidePrizes_Builder*) builderWithPrototype:(CMsgDOTARewardDiretidePrizes*) prototype {
  return [[CMsgDOTARewardDiretidePrizes builder] mergeFrom:prototype];
}
- (CMsgDOTARewardDiretidePrizes_Builder*) builder {
  return [CMsgDOTARewardDiretidePrizes builder];
}
- (CMsgDOTARewardDiretidePrizes_Builder*) toBuilder {
  return [CMsgDOTARewardDiretidePrizes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTeam) {
    [output appendFormat:@"%@%@: %@\n", indent, @"team", [NSNumber numberWithInt:self.team]];
  }
  if (self.hasPrizeList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prizeList", [NSNumber numberWithInt:self.prizeList]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTARewardDiretidePrizes class]]) {
    return NO;
  }
  CMsgDOTARewardDiretidePrizes *otherMessage = other;
  return
      self.hasTeam == otherMessage.hasTeam &&
      (!self.hasTeam || self.team == otherMessage.team) &&
      self.hasPrizeList == otherMessage.hasPrizeList &&
      (!self.hasPrizeList || self.prizeList == otherMessage.prizeList) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTeam) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.team] hash];
  }
  if (self.hasPrizeList) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.prizeList] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTARewardDiretidePrizes_Builder()
@property (retain) CMsgDOTARewardDiretidePrizes* _builderResult;
@end

@implementation CMsgDOTARewardDiretidePrizes_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTARewardDiretidePrizes alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTARewardDiretidePrizes_Builder*) clear {
  _builderResult = [[[CMsgDOTARewardDiretidePrizes alloc] init] autorelease];
  return self;
}
- (CMsgDOTARewardDiretidePrizes_Builder*) clone {
  return [CMsgDOTARewardDiretidePrizes builderWithPrototype:_builderResult];
}
- (CMsgDOTARewardDiretidePrizes*) defaultInstance {
  return [CMsgDOTARewardDiretidePrizes defaultInstance];
}
- (CMsgDOTARewardDiretidePrizes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTARewardDiretidePrizes*) buildPartial {
  CMsgDOTARewardDiretidePrizes* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTARewardDiretidePrizes_Builder*) mergeFrom:(CMsgDOTARewardDiretidePrizes*) other {
  if (other == [CMsgDOTARewardDiretidePrizes defaultInstance]) {
    return self;
  }
  if (other.hasTeam) {
    [self setTeam:other.team];
  }
  if (other.hasPrizeList) {
    [self setPrizeList:other.prizeList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTARewardDiretidePrizes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTARewardDiretidePrizes_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTeam:[input readUInt32]];
        break;
      }
      case 16: {
        [self setPrizeList:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTeam {
  return _builderResult.hasTeam;
}
- (uint32_t) team {
  return _builderResult.team;
}
- (CMsgDOTARewardDiretidePrizes_Builder*) setTeam:(uint32_t) value {
  _builderResult.hasTeam = YES;
  _builderResult.team = value;
  return self;
}
- (CMsgDOTARewardDiretidePrizes_Builder*) clearTeam {
  _builderResult.hasTeam = NO;
  _builderResult.team = 0;
  return self;
}
- (BOOL) hasPrizeList {
  return _builderResult.hasPrizeList;
}
- (uint32_t) prizeList {
  return _builderResult.prizeList;
}
- (CMsgDOTARewardDiretidePrizes_Builder*) setPrizeList:(uint32_t) value {
  _builderResult.hasPrizeList = YES;
  _builderResult.prizeList = value;
  return self;
}
- (CMsgDOTARewardDiretidePrizes_Builder*) clearPrizeList {
  _builderResult.hasPrizeList = NO;
  _builderResult.prizeList = 0;
  return self;
}
@end

@interface CMsgDOTADiretidePrizesRewardedResponse ()
@property uint32_t prizeList;
@end

@implementation CMsgDOTADiretidePrizesRewardedResponse

- (BOOL) hasPrizeList {
  return !!hasPrizeList_;
}
- (void) setHasPrizeList:(BOOL) value_ {
  hasPrizeList_ = !!value_;
}
@synthesize prizeList;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.prizeList = 0;
  }
  return self;
}
static CMsgDOTADiretidePrizesRewardedResponse* defaultCMsgDOTADiretidePrizesRewardedResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTADiretidePrizesRewardedResponse class]) {
    defaultCMsgDOTADiretidePrizesRewardedResponseInstance = [[CMsgDOTADiretidePrizesRewardedResponse alloc] init];
  }
}
+ (CMsgDOTADiretidePrizesRewardedResponse*) defaultInstance {
  return defaultCMsgDOTADiretidePrizesRewardedResponseInstance;
}
- (CMsgDOTADiretidePrizesRewardedResponse*) defaultInstance {
  return defaultCMsgDOTADiretidePrizesRewardedResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrizeList) {
    [output writeUInt32:1 value:self.prizeList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPrizeList) {
    size_ += computeUInt32Size(1, self.prizeList);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTADiretidePrizesRewardedResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTADiretidePrizesRewardedResponse*)[[[CMsgDOTADiretidePrizesRewardedResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTADiretidePrizesRewardedResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADiretidePrizesRewardedResponse*)[[[CMsgDOTADiretidePrizesRewardedResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADiretidePrizesRewardedResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTADiretidePrizesRewardedResponse*)[[[CMsgDOTADiretidePrizesRewardedResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTADiretidePrizesRewardedResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADiretidePrizesRewardedResponse*)[[[CMsgDOTADiretidePrizesRewardedResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADiretidePrizesRewardedResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTADiretidePrizesRewardedResponse*)[[[CMsgDOTADiretidePrizesRewardedResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTADiretidePrizesRewardedResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADiretidePrizesRewardedResponse*)[[[CMsgDOTADiretidePrizesRewardedResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADiretidePrizesRewardedResponse_Builder*) builder {
  return [[[CMsgDOTADiretidePrizesRewardedResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTADiretidePrizesRewardedResponse_Builder*) builderWithPrototype:(CMsgDOTADiretidePrizesRewardedResponse*) prototype {
  return [[CMsgDOTADiretidePrizesRewardedResponse builder] mergeFrom:prototype];
}
- (CMsgDOTADiretidePrizesRewardedResponse_Builder*) builder {
  return [CMsgDOTADiretidePrizesRewardedResponse builder];
}
- (CMsgDOTADiretidePrizesRewardedResponse_Builder*) toBuilder {
  return [CMsgDOTADiretidePrizesRewardedResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPrizeList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prizeList", [NSNumber numberWithInt:self.prizeList]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTADiretidePrizesRewardedResponse class]]) {
    return NO;
  }
  CMsgDOTADiretidePrizesRewardedResponse *otherMessage = other;
  return
      self.hasPrizeList == otherMessage.hasPrizeList &&
      (!self.hasPrizeList || self.prizeList == otherMessage.prizeList) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPrizeList) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.prizeList] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTADiretidePrizesRewardedResponse_Builder()
@property (retain) CMsgDOTADiretidePrizesRewardedResponse* _builderResult;
@end

@implementation CMsgDOTADiretidePrizesRewardedResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTADiretidePrizesRewardedResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTADiretidePrizesRewardedResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTADiretidePrizesRewardedResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTADiretidePrizesRewardedResponse_Builder*) clone {
  return [CMsgDOTADiretidePrizesRewardedResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTADiretidePrizesRewardedResponse*) defaultInstance {
  return [CMsgDOTADiretidePrizesRewardedResponse defaultInstance];
}
- (CMsgDOTADiretidePrizesRewardedResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTADiretidePrizesRewardedResponse*) buildPartial {
  CMsgDOTADiretidePrizesRewardedResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTADiretidePrizesRewardedResponse_Builder*) mergeFrom:(CMsgDOTADiretidePrizesRewardedResponse*) other {
  if (other == [CMsgDOTADiretidePrizesRewardedResponse defaultInstance]) {
    return self;
  }
  if (other.hasPrizeList) {
    [self setPrizeList:other.prizeList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTADiretidePrizesRewardedResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTADiretidePrizesRewardedResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrizeList:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPrizeList {
  return _builderResult.hasPrizeList;
}
- (uint32_t) prizeList {
  return _builderResult.prizeList;
}
- (CMsgDOTADiretidePrizesRewardedResponse_Builder*) setPrizeList:(uint32_t) value {
  _builderResult.hasPrizeList = YES;
  _builderResult.prizeList = value;
  return self;
}
- (CMsgDOTADiretidePrizesRewardedResponse_Builder*) clearPrizeList {
  _builderResult.hasPrizeList = NO;
  _builderResult.prizeList = 0;
  return self;
}
@end

@interface CMsgDOTADiretidePrizeResponse ()
@property uint32_t itemDef;
@property uint32_t prizeList;
@end

@implementation CMsgDOTADiretidePrizeResponse

- (BOOL) hasItemDef {
  return !!hasItemDef_;
}
- (void) setHasItemDef:(BOOL) value_ {
  hasItemDef_ = !!value_;
}
@synthesize itemDef;
- (BOOL) hasPrizeList {
  return !!hasPrizeList_;
}
- (void) setHasPrizeList:(BOOL) value_ {
  hasPrizeList_ = !!value_;
}
@synthesize prizeList;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.itemDef = 0;
    self.prizeList = 0;
  }
  return self;
}
static CMsgDOTADiretidePrizeResponse* defaultCMsgDOTADiretidePrizeResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTADiretidePrizeResponse class]) {
    defaultCMsgDOTADiretidePrizeResponseInstance = [[CMsgDOTADiretidePrizeResponse alloc] init];
  }
}
+ (CMsgDOTADiretidePrizeResponse*) defaultInstance {
  return defaultCMsgDOTADiretidePrizeResponseInstance;
}
- (CMsgDOTADiretidePrizeResponse*) defaultInstance {
  return defaultCMsgDOTADiretidePrizeResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemDef) {
    [output writeUInt32:1 value:self.itemDef];
  }
  if (self.hasPrizeList) {
    [output writeUInt32:2 value:self.prizeList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItemDef) {
    size_ += computeUInt32Size(1, self.itemDef);
  }
  if (self.hasPrizeList) {
    size_ += computeUInt32Size(2, self.prizeList);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTADiretidePrizeResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTADiretidePrizeResponse*)[[[CMsgDOTADiretidePrizeResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTADiretidePrizeResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADiretidePrizeResponse*)[[[CMsgDOTADiretidePrizeResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADiretidePrizeResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTADiretidePrizeResponse*)[[[CMsgDOTADiretidePrizeResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTADiretidePrizeResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADiretidePrizeResponse*)[[[CMsgDOTADiretidePrizeResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADiretidePrizeResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTADiretidePrizeResponse*)[[[CMsgDOTADiretidePrizeResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTADiretidePrizeResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTADiretidePrizeResponse*)[[[CMsgDOTADiretidePrizeResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTADiretidePrizeResponse_Builder*) builder {
  return [[[CMsgDOTADiretidePrizeResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTADiretidePrizeResponse_Builder*) builderWithPrototype:(CMsgDOTADiretidePrizeResponse*) prototype {
  return [[CMsgDOTADiretidePrizeResponse builder] mergeFrom:prototype];
}
- (CMsgDOTADiretidePrizeResponse_Builder*) builder {
  return [CMsgDOTADiretidePrizeResponse builder];
}
- (CMsgDOTADiretidePrizeResponse_Builder*) toBuilder {
  return [CMsgDOTADiretidePrizeResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItemDef) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemDef", [NSNumber numberWithInt:self.itemDef]];
  }
  if (self.hasPrizeList) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prizeList", [NSNumber numberWithInt:self.prizeList]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTADiretidePrizeResponse class]]) {
    return NO;
  }
  CMsgDOTADiretidePrizeResponse *otherMessage = other;
  return
      self.hasItemDef == otherMessage.hasItemDef &&
      (!self.hasItemDef || self.itemDef == otherMessage.itemDef) &&
      self.hasPrizeList == otherMessage.hasPrizeList &&
      (!self.hasPrizeList || self.prizeList == otherMessage.prizeList) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasItemDef) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemDef] hash];
  }
  if (self.hasPrizeList) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.prizeList] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTADiretidePrizeResponse_Builder()
@property (retain) CMsgDOTADiretidePrizeResponse* _builderResult;
@end

@implementation CMsgDOTADiretidePrizeResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTADiretidePrizeResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTADiretidePrizeResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTADiretidePrizeResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTADiretidePrizeResponse_Builder*) clone {
  return [CMsgDOTADiretidePrizeResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTADiretidePrizeResponse*) defaultInstance {
  return [CMsgDOTADiretidePrizeResponse defaultInstance];
}
- (CMsgDOTADiretidePrizeResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTADiretidePrizeResponse*) buildPartial {
  CMsgDOTADiretidePrizeResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTADiretidePrizeResponse_Builder*) mergeFrom:(CMsgDOTADiretidePrizeResponse*) other {
  if (other == [CMsgDOTADiretidePrizeResponse defaultInstance]) {
    return self;
  }
  if (other.hasItemDef) {
    [self setItemDef:other.itemDef];
  }
  if (other.hasPrizeList) {
    [self setPrizeList:other.prizeList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTADiretidePrizeResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTADiretidePrizeResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemDef:[input readUInt32]];
        break;
      }
      case 16: {
        [self setPrizeList:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemDef {
  return _builderResult.hasItemDef;
}
- (uint32_t) itemDef {
  return _builderResult.itemDef;
}
- (CMsgDOTADiretidePrizeResponse_Builder*) setItemDef:(uint32_t) value {
  _builderResult.hasItemDef = YES;
  _builderResult.itemDef = value;
  return self;
}
- (CMsgDOTADiretidePrizeResponse_Builder*) clearItemDef {
  _builderResult.hasItemDef = NO;
  _builderResult.itemDef = 0;
  return self;
}
- (BOOL) hasPrizeList {
  return _builderResult.hasPrizeList;
}
- (uint32_t) prizeList {
  return _builderResult.prizeList;
}
- (CMsgDOTADiretidePrizeResponse_Builder*) setPrizeList:(uint32_t) value {
  _builderResult.hasPrizeList = YES;
  _builderResult.prizeList = value;
  return self;
}
- (CMsgDOTADiretidePrizeResponse_Builder*) clearPrizeList {
  _builderResult.hasPrizeList = NO;
  _builderResult.prizeList = 0;
  return self;
}
@end

@interface CMsgDOTAHalloweenHighScoreRequest ()
@property int32_t round;
@end

@implementation CMsgDOTAHalloweenHighScoreRequest

- (BOOL) hasRound {
  return !!hasRound_;
}
- (void) setHasRound:(BOOL) value_ {
  hasRound_ = !!value_;
}
@synthesize round;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.round = -1;
  }
  return self;
}
static CMsgDOTAHalloweenHighScoreRequest* defaultCMsgDOTAHalloweenHighScoreRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAHalloweenHighScoreRequest class]) {
    defaultCMsgDOTAHalloweenHighScoreRequestInstance = [[CMsgDOTAHalloweenHighScoreRequest alloc] init];
  }
}
+ (CMsgDOTAHalloweenHighScoreRequest*) defaultInstance {
  return defaultCMsgDOTAHalloweenHighScoreRequestInstance;
}
- (CMsgDOTAHalloweenHighScoreRequest*) defaultInstance {
  return defaultCMsgDOTAHalloweenHighScoreRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRound) {
    [output writeInt32:1 value:self.round];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRound) {
    size_ += computeInt32Size(1, self.round);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAHalloweenHighScoreRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTAHalloweenHighScoreRequest*)[[[CMsgDOTAHalloweenHighScoreRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTAHalloweenHighScoreRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHalloweenHighScoreRequest*)[[[CMsgDOTAHalloweenHighScoreRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHalloweenHighScoreRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAHalloweenHighScoreRequest*)[[[CMsgDOTAHalloweenHighScoreRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAHalloweenHighScoreRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHalloweenHighScoreRequest*)[[[CMsgDOTAHalloweenHighScoreRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHalloweenHighScoreRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAHalloweenHighScoreRequest*)[[[CMsgDOTAHalloweenHighScoreRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAHalloweenHighScoreRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHalloweenHighScoreRequest*)[[[CMsgDOTAHalloweenHighScoreRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHalloweenHighScoreRequest_Builder*) builder {
  return [[[CMsgDOTAHalloweenHighScoreRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTAHalloweenHighScoreRequest_Builder*) builderWithPrototype:(CMsgDOTAHalloweenHighScoreRequest*) prototype {
  return [[CMsgDOTAHalloweenHighScoreRequest builder] mergeFrom:prototype];
}
- (CMsgDOTAHalloweenHighScoreRequest_Builder*) builder {
  return [CMsgDOTAHalloweenHighScoreRequest builder];
}
- (CMsgDOTAHalloweenHighScoreRequest_Builder*) toBuilder {
  return [CMsgDOTAHalloweenHighScoreRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"round", [NSNumber numberWithInt:self.round]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAHalloweenHighScoreRequest class]]) {
    return NO;
  }
  CMsgDOTAHalloweenHighScoreRequest *otherMessage = other;
  return
      self.hasRound == otherMessage.hasRound &&
      (!self.hasRound || self.round == otherMessage.round) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasRound) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.round] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAHalloweenHighScoreRequest_Builder()
@property (retain) CMsgDOTAHalloweenHighScoreRequest* _builderResult;
@end

@implementation CMsgDOTAHalloweenHighScoreRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAHalloweenHighScoreRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAHalloweenHighScoreRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTAHalloweenHighScoreRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTAHalloweenHighScoreRequest_Builder*) clone {
  return [CMsgDOTAHalloweenHighScoreRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTAHalloweenHighScoreRequest*) defaultInstance {
  return [CMsgDOTAHalloweenHighScoreRequest defaultInstance];
}
- (CMsgDOTAHalloweenHighScoreRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAHalloweenHighScoreRequest*) buildPartial {
  CMsgDOTAHalloweenHighScoreRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAHalloweenHighScoreRequest_Builder*) mergeFrom:(CMsgDOTAHalloweenHighScoreRequest*) other {
  if (other == [CMsgDOTAHalloweenHighScoreRequest defaultInstance]) {
    return self;
  }
  if (other.hasRound) {
    [self setRound:other.round];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAHalloweenHighScoreRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAHalloweenHighScoreRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRound:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRound {
  return _builderResult.hasRound;
}
- (int32_t) round {
  return _builderResult.round;
}
- (CMsgDOTAHalloweenHighScoreRequest_Builder*) setRound:(int32_t) value {
  _builderResult.hasRound = YES;
  _builderResult.round = value;
  return self;
}
- (CMsgDOTAHalloweenHighScoreRequest_Builder*) clearRound {
  _builderResult.hasRound = NO;
  _builderResult.round = -1;
  return self;
}
@end

@interface CMsgDOTAHalloweenHighScoreResponse ()
@property uint32_t score;
@property (retain) CMsgDOTAMatch* match;
@property uint32_t eresult;
@property int32_t round;
@end

@implementation CMsgDOTAHalloweenHighScoreResponse

- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) value_ {
  hasScore_ = !!value_;
}
@synthesize score;
- (BOOL) hasMatch {
  return !!hasMatch_;
}
- (void) setHasMatch:(BOOL) value_ {
  hasMatch_ = !!value_;
}
@synthesize match;
- (BOOL) hasEresult {
  return !!hasEresult_;
}
- (void) setHasEresult:(BOOL) value_ {
  hasEresult_ = !!value_;
}
@synthesize eresult;
- (BOOL) hasRound {
  return !!hasRound_;
}
- (void) setHasRound:(BOOL) value_ {
  hasRound_ = !!value_;
}
@synthesize round;
- (void) dealloc {
  self.match = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.score = 0;
    self.match = [CMsgDOTAMatch defaultInstance];
    self.eresult = 0;
    self.round = 0;
  }
  return self;
}
static CMsgDOTAHalloweenHighScoreResponse* defaultCMsgDOTAHalloweenHighScoreResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAHalloweenHighScoreResponse class]) {
    defaultCMsgDOTAHalloweenHighScoreResponseInstance = [[CMsgDOTAHalloweenHighScoreResponse alloc] init];
  }
}
+ (CMsgDOTAHalloweenHighScoreResponse*) defaultInstance {
  return defaultCMsgDOTAHalloweenHighScoreResponseInstance;
}
- (CMsgDOTAHalloweenHighScoreResponse*) defaultInstance {
  return defaultCMsgDOTAHalloweenHighScoreResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasScore) {
    [output writeUInt32:1 value:self.score];
  }
  if (self.hasMatch) {
    [output writeMessage:2 value:self.match];
  }
  if (self.hasEresult) {
    [output writeUInt32:3 value:self.eresult];
  }
  if (self.hasRound) {
    [output writeInt32:4 value:self.round];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasScore) {
    size_ += computeUInt32Size(1, self.score);
  }
  if (self.hasMatch) {
    size_ += computeMessageSize(2, self.match);
  }
  if (self.hasEresult) {
    size_ += computeUInt32Size(3, self.eresult);
  }
  if (self.hasRound) {
    size_ += computeInt32Size(4, self.round);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAHalloweenHighScoreResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAHalloweenHighScoreResponse*)[[[CMsgDOTAHalloweenHighScoreResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAHalloweenHighScoreResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHalloweenHighScoreResponse*)[[[CMsgDOTAHalloweenHighScoreResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHalloweenHighScoreResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAHalloweenHighScoreResponse*)[[[CMsgDOTAHalloweenHighScoreResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAHalloweenHighScoreResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHalloweenHighScoreResponse*)[[[CMsgDOTAHalloweenHighScoreResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHalloweenHighScoreResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAHalloweenHighScoreResponse*)[[[CMsgDOTAHalloweenHighScoreResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAHalloweenHighScoreResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAHalloweenHighScoreResponse*)[[[CMsgDOTAHalloweenHighScoreResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAHalloweenHighScoreResponse_Builder*) builder {
  return [[[CMsgDOTAHalloweenHighScoreResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAHalloweenHighScoreResponse_Builder*) builderWithPrototype:(CMsgDOTAHalloweenHighScoreResponse*) prototype {
  return [[CMsgDOTAHalloweenHighScoreResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) builder {
  return [CMsgDOTAHalloweenHighScoreResponse builder];
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) toBuilder {
  return [CMsgDOTAHalloweenHighScoreResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithInt:self.score]];
  }
  if (self.hasMatch) {
    [output appendFormat:@"%@%@ {\n", indent, @"match"];
    [self.match writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasEresult) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eresult", [NSNumber numberWithInt:self.eresult]];
  }
  if (self.hasRound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"round", [NSNumber numberWithInt:self.round]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAHalloweenHighScoreResponse class]]) {
    return NO;
  }
  CMsgDOTAHalloweenHighScoreResponse *otherMessage = other;
  return
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      self.hasMatch == otherMessage.hasMatch &&
      (!self.hasMatch || [self.match isEqual:otherMessage.match]) &&
      self.hasEresult == otherMessage.hasEresult &&
      (!self.hasEresult || self.eresult == otherMessage.eresult) &&
      self.hasRound == otherMessage.hasRound &&
      (!self.hasRound || self.round == otherMessage.round) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.score] hash];
  }
  if (self.hasMatch) {
    hashCode = hashCode * 31 + [self.match hash];
  }
  if (self.hasEresult) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.eresult] hash];
  }
  if (self.hasRound) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.round] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAHalloweenHighScoreResponse_Builder()
@property (retain) CMsgDOTAHalloweenHighScoreResponse* _builderResult;
@end

@implementation CMsgDOTAHalloweenHighScoreResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAHalloweenHighScoreResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAHalloweenHighScoreResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) clone {
  return [CMsgDOTAHalloweenHighScoreResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAHalloweenHighScoreResponse*) defaultInstance {
  return [CMsgDOTAHalloweenHighScoreResponse defaultInstance];
}
- (CMsgDOTAHalloweenHighScoreResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAHalloweenHighScoreResponse*) buildPartial {
  CMsgDOTAHalloweenHighScoreResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) mergeFrom:(CMsgDOTAHalloweenHighScoreResponse*) other {
  if (other == [CMsgDOTAHalloweenHighScoreResponse defaultInstance]) {
    return self;
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasMatch) {
    [self mergeMatch:other.match];
  }
  if (other.hasEresult) {
    [self setEresult:other.eresult];
  }
  if (other.hasRound) {
    [self setRound:other.round];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setScore:[input readUInt32]];
        break;
      }
      case 18: {
        CMsgDOTAMatch_Builder* subBuilder = [CMsgDOTAMatch builder];
        if (self.hasMatch) {
          [subBuilder mergeFrom:self.match];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMatch:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setEresult:[input readUInt32]];
        break;
      }
      case 32: {
        [self setRound:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasScore {
  return _builderResult.hasScore;
}
- (uint32_t) score {
  return _builderResult.score;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) setScore:(uint32_t) value {
  _builderResult.hasScore = YES;
  _builderResult.score = value;
  return self;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) clearScore {
  _builderResult.hasScore = NO;
  _builderResult.score = 0;
  return self;
}
- (BOOL) hasMatch {
  return _builderResult.hasMatch;
}
- (CMsgDOTAMatch*) match {
  return _builderResult.match;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) setMatch:(CMsgDOTAMatch*) value {
  _builderResult.hasMatch = YES;
  _builderResult.match = value;
  return self;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) setMatchBuilder:(CMsgDOTAMatch_Builder*) builderForValue {
  return [self setMatch:[builderForValue build]];
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) mergeMatch:(CMsgDOTAMatch*) value {
  if (_builderResult.hasMatch &&
      _builderResult.match != [CMsgDOTAMatch defaultInstance]) {
    _builderResult.match =
      [[[CMsgDOTAMatch builderWithPrototype:_builderResult.match] mergeFrom:value] buildPartial];
  } else {
    _builderResult.match = value;
  }
  _builderResult.hasMatch = YES;
  return self;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) clearMatch {
  _builderResult.hasMatch = NO;
  _builderResult.match = [CMsgDOTAMatch defaultInstance];
  return self;
}
- (BOOL) hasEresult {
  return _builderResult.hasEresult;
}
- (uint32_t) eresult {
  return _builderResult.eresult;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) setEresult:(uint32_t) value {
  _builderResult.hasEresult = YES;
  _builderResult.eresult = value;
  return self;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) clearEresult {
  _builderResult.hasEresult = NO;
  _builderResult.eresult = 0;
  return self;
}
- (BOOL) hasRound {
  return _builderResult.hasRound;
}
- (int32_t) round {
  return _builderResult.round;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) setRound:(int32_t) value {
  _builderResult.hasRound = YES;
  _builderResult.round = value;
  return self;
}
- (CMsgDOTAHalloweenHighScoreResponse_Builder*) clearRound {
  _builderResult.hasRound = NO;
  _builderResult.round = 0;
  return self;
}
@end

@interface CMsgDOTANotifyResetKeybindings ()
@property uint32_t keybindTemplate;
@end

@implementation CMsgDOTANotifyResetKeybindings

- (BOOL) hasKeybindTemplate {
  return !!hasKeybindTemplate_;
}
- (void) setHasKeybindTemplate:(BOOL) value_ {
  hasKeybindTemplate_ = !!value_;
}
@synthesize keybindTemplate;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.keybindTemplate = 0;
  }
  return self;
}
static CMsgDOTANotifyResetKeybindings* defaultCMsgDOTANotifyResetKeybindingsInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTANotifyResetKeybindings class]) {
    defaultCMsgDOTANotifyResetKeybindingsInstance = [[CMsgDOTANotifyResetKeybindings alloc] init];
  }
}
+ (CMsgDOTANotifyResetKeybindings*) defaultInstance {
  return defaultCMsgDOTANotifyResetKeybindingsInstance;
}
- (CMsgDOTANotifyResetKeybindings*) defaultInstance {
  return defaultCMsgDOTANotifyResetKeybindingsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKeybindTemplate) {
    [output writeUInt32:1 value:self.keybindTemplate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKeybindTemplate) {
    size_ += computeUInt32Size(1, self.keybindTemplate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTANotifyResetKeybindings*) parseFromData:(NSData*) data {
  return (CMsgDOTANotifyResetKeybindings*)[[[CMsgDOTANotifyResetKeybindings builder] mergeFromData:data] build];
}
+ (CMsgDOTANotifyResetKeybindings*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTANotifyResetKeybindings*)[[[CMsgDOTANotifyResetKeybindings builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTANotifyResetKeybindings*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTANotifyResetKeybindings*)[[[CMsgDOTANotifyResetKeybindings builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTANotifyResetKeybindings*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTANotifyResetKeybindings*)[[[CMsgDOTANotifyResetKeybindings builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTANotifyResetKeybindings*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTANotifyResetKeybindings*)[[[CMsgDOTANotifyResetKeybindings builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTANotifyResetKeybindings*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTANotifyResetKeybindings*)[[[CMsgDOTANotifyResetKeybindings builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTANotifyResetKeybindings_Builder*) builder {
  return [[[CMsgDOTANotifyResetKeybindings_Builder alloc] init] autorelease];
}
+ (CMsgDOTANotifyResetKeybindings_Builder*) builderWithPrototype:(CMsgDOTANotifyResetKeybindings*) prototype {
  return [[CMsgDOTANotifyResetKeybindings builder] mergeFrom:prototype];
}
- (CMsgDOTANotifyResetKeybindings_Builder*) builder {
  return [CMsgDOTANotifyResetKeybindings builder];
}
- (CMsgDOTANotifyResetKeybindings_Builder*) toBuilder {
  return [CMsgDOTANotifyResetKeybindings builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKeybindTemplate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keybindTemplate", [NSNumber numberWithInt:self.keybindTemplate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTANotifyResetKeybindings class]]) {
    return NO;
  }
  CMsgDOTANotifyResetKeybindings *otherMessage = other;
  return
      self.hasKeybindTemplate == otherMessage.hasKeybindTemplate &&
      (!self.hasKeybindTemplate || self.keybindTemplate == otherMessage.keybindTemplate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasKeybindTemplate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.keybindTemplate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTANotifyResetKeybindings_Builder()
@property (retain) CMsgDOTANotifyResetKeybindings* _builderResult;
@end

@implementation CMsgDOTANotifyResetKeybindings_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTANotifyResetKeybindings alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTANotifyResetKeybindings_Builder*) clear {
  _builderResult = [[[CMsgDOTANotifyResetKeybindings alloc] init] autorelease];
  return self;
}
- (CMsgDOTANotifyResetKeybindings_Builder*) clone {
  return [CMsgDOTANotifyResetKeybindings builderWithPrototype:_builderResult];
}
- (CMsgDOTANotifyResetKeybindings*) defaultInstance {
  return [CMsgDOTANotifyResetKeybindings defaultInstance];
}
- (CMsgDOTANotifyResetKeybindings*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTANotifyResetKeybindings*) buildPartial {
  CMsgDOTANotifyResetKeybindings* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTANotifyResetKeybindings_Builder*) mergeFrom:(CMsgDOTANotifyResetKeybindings*) other {
  if (other == [CMsgDOTANotifyResetKeybindings defaultInstance]) {
    return self;
  }
  if (other.hasKeybindTemplate) {
    [self setKeybindTemplate:other.keybindTemplate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTANotifyResetKeybindings_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTANotifyResetKeybindings_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setKeybindTemplate:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasKeybindTemplate {
  return _builderResult.hasKeybindTemplate;
}
- (uint32_t) keybindTemplate {
  return _builderResult.keybindTemplate;
}
- (CMsgDOTANotifyResetKeybindings_Builder*) setKeybindTemplate:(uint32_t) value {
  _builderResult.hasKeybindTemplate = YES;
  _builderResult.keybindTemplate = value;
  return self;
}
- (CMsgDOTANotifyResetKeybindings_Builder*) clearKeybindTemplate {
  _builderResult.hasKeybindTemplate = NO;
  _builderResult.keybindTemplate = 0;
  return self;
}
@end

@interface CMsgDOTAStorePromoPagesRequest ()
@property uint32_t versionSeen;
@end

@implementation CMsgDOTAStorePromoPagesRequest

- (BOOL) hasVersionSeen {
  return !!hasVersionSeen_;
}
- (void) setHasVersionSeen:(BOOL) value_ {
  hasVersionSeen_ = !!value_;
}
@synthesize versionSeen;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.versionSeen = 0;
  }
  return self;
}
static CMsgDOTAStorePromoPagesRequest* defaultCMsgDOTAStorePromoPagesRequestInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAStorePromoPagesRequest class]) {
    defaultCMsgDOTAStorePromoPagesRequestInstance = [[CMsgDOTAStorePromoPagesRequest alloc] init];
  }
}
+ (CMsgDOTAStorePromoPagesRequest*) defaultInstance {
  return defaultCMsgDOTAStorePromoPagesRequestInstance;
}
- (CMsgDOTAStorePromoPagesRequest*) defaultInstance {
  return defaultCMsgDOTAStorePromoPagesRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVersionSeen) {
    [output writeUInt32:1 value:self.versionSeen];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasVersionSeen) {
    size_ += computeUInt32Size(1, self.versionSeen);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAStorePromoPagesRequest*) parseFromData:(NSData*) data {
  return (CMsgDOTAStorePromoPagesRequest*)[[[CMsgDOTAStorePromoPagesRequest builder] mergeFromData:data] build];
}
+ (CMsgDOTAStorePromoPagesRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAStorePromoPagesRequest*)[[[CMsgDOTAStorePromoPagesRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAStorePromoPagesRequest*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAStorePromoPagesRequest*)[[[CMsgDOTAStorePromoPagesRequest builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAStorePromoPagesRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAStorePromoPagesRequest*)[[[CMsgDOTAStorePromoPagesRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAStorePromoPagesRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAStorePromoPagesRequest*)[[[CMsgDOTAStorePromoPagesRequest builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAStorePromoPagesRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAStorePromoPagesRequest*)[[[CMsgDOTAStorePromoPagesRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAStorePromoPagesRequest_Builder*) builder {
  return [[[CMsgDOTAStorePromoPagesRequest_Builder alloc] init] autorelease];
}
+ (CMsgDOTAStorePromoPagesRequest_Builder*) builderWithPrototype:(CMsgDOTAStorePromoPagesRequest*) prototype {
  return [[CMsgDOTAStorePromoPagesRequest builder] mergeFrom:prototype];
}
- (CMsgDOTAStorePromoPagesRequest_Builder*) builder {
  return [CMsgDOTAStorePromoPagesRequest builder];
}
- (CMsgDOTAStorePromoPagesRequest_Builder*) toBuilder {
  return [CMsgDOTAStorePromoPagesRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVersionSeen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"versionSeen", [NSNumber numberWithInt:self.versionSeen]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAStorePromoPagesRequest class]]) {
    return NO;
  }
  CMsgDOTAStorePromoPagesRequest *otherMessage = other;
  return
      self.hasVersionSeen == otherMessage.hasVersionSeen &&
      (!self.hasVersionSeen || self.versionSeen == otherMessage.versionSeen) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasVersionSeen) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.versionSeen] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAStorePromoPagesRequest_Builder()
@property (retain) CMsgDOTAStorePromoPagesRequest* _builderResult;
@end

@implementation CMsgDOTAStorePromoPagesRequest_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAStorePromoPagesRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAStorePromoPagesRequest_Builder*) clear {
  _builderResult = [[[CMsgDOTAStorePromoPagesRequest alloc] init] autorelease];
  return self;
}
- (CMsgDOTAStorePromoPagesRequest_Builder*) clone {
  return [CMsgDOTAStorePromoPagesRequest builderWithPrototype:_builderResult];
}
- (CMsgDOTAStorePromoPagesRequest*) defaultInstance {
  return [CMsgDOTAStorePromoPagesRequest defaultInstance];
}
- (CMsgDOTAStorePromoPagesRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAStorePromoPagesRequest*) buildPartial {
  CMsgDOTAStorePromoPagesRequest* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAStorePromoPagesRequest_Builder*) mergeFrom:(CMsgDOTAStorePromoPagesRequest*) other {
  if (other == [CMsgDOTAStorePromoPagesRequest defaultInstance]) {
    return self;
  }
  if (other.hasVersionSeen) {
    [self setVersionSeen:other.versionSeen];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAStorePromoPagesRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAStorePromoPagesRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setVersionSeen:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasVersionSeen {
  return _builderResult.hasVersionSeen;
}
- (uint32_t) versionSeen {
  return _builderResult.versionSeen;
}
- (CMsgDOTAStorePromoPagesRequest_Builder*) setVersionSeen:(uint32_t) value {
  _builderResult.hasVersionSeen = YES;
  _builderResult.versionSeen = value;
  return self;
}
- (CMsgDOTAStorePromoPagesRequest_Builder*) clearVersionSeen {
  _builderResult.hasVersionSeen = NO;
  _builderResult.versionSeen = 0;
  return self;
}
@end

@interface CMsgDOTAStorePromoPagesResponse ()
@property (retain) PBAppendableArray * pagesArray;
@end

@implementation CMsgDOTAStorePromoPagesResponse

@synthesize pagesArray;
@dynamic pages;
- (void) dealloc {
  self.pagesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static CMsgDOTAStorePromoPagesResponse* defaultCMsgDOTAStorePromoPagesResponseInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAStorePromoPagesResponse class]) {
    defaultCMsgDOTAStorePromoPagesResponseInstance = [[CMsgDOTAStorePromoPagesResponse alloc] init];
  }
}
+ (CMsgDOTAStorePromoPagesResponse*) defaultInstance {
  return defaultCMsgDOTAStorePromoPagesResponseInstance;
}
- (CMsgDOTAStorePromoPagesResponse*) defaultInstance {
  return defaultCMsgDOTAStorePromoPagesResponseInstance;
}
- (PBArray *)pages {
  return pagesArray;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage*)pagesAtIndex:(NSUInteger)index {
  return [pagesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (CMsgDOTAStorePromoPagesResponse_PromoPage *element in self.pagesArray) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (CMsgDOTAStorePromoPagesResponse_PromoPage *element in self.pagesArray) {
    size_ += computeMessageSize(1, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAStorePromoPagesResponse*) parseFromData:(NSData*) data {
  return (CMsgDOTAStorePromoPagesResponse*)[[[CMsgDOTAStorePromoPagesResponse builder] mergeFromData:data] build];
}
+ (CMsgDOTAStorePromoPagesResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAStorePromoPagesResponse*)[[[CMsgDOTAStorePromoPagesResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAStorePromoPagesResponse*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAStorePromoPagesResponse*)[[[CMsgDOTAStorePromoPagesResponse builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAStorePromoPagesResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAStorePromoPagesResponse*)[[[CMsgDOTAStorePromoPagesResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAStorePromoPagesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAStorePromoPagesResponse*)[[[CMsgDOTAStorePromoPagesResponse builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAStorePromoPagesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAStorePromoPagesResponse*)[[[CMsgDOTAStorePromoPagesResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAStorePromoPagesResponse_Builder*) builder {
  return [[[CMsgDOTAStorePromoPagesResponse_Builder alloc] init] autorelease];
}
+ (CMsgDOTAStorePromoPagesResponse_Builder*) builderWithPrototype:(CMsgDOTAStorePromoPagesResponse*) prototype {
  return [[CMsgDOTAStorePromoPagesResponse builder] mergeFrom:prototype];
}
- (CMsgDOTAStorePromoPagesResponse_Builder*) builder {
  return [CMsgDOTAStorePromoPagesResponse builder];
}
- (CMsgDOTAStorePromoPagesResponse_Builder*) toBuilder {
  return [CMsgDOTAStorePromoPagesResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (CMsgDOTAStorePromoPagesResponse_PromoPage* element in self.pagesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"pages"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAStorePromoPagesResponse class]]) {
    return NO;
  }
  CMsgDOTAStorePromoPagesResponse *otherMessage = other;
  return
      [self.pagesArray isEqualToArray:otherMessage.pagesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (CMsgDOTAStorePromoPagesResponse_PromoPage* element in self.pagesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAStorePromoPagesResponse_PromoPage ()
@property uint32_t promoId;
@property (retain) NSString* title;
@property (retain) NSString* url;
@end

@implementation CMsgDOTAStorePromoPagesResponse_PromoPage

- (BOOL) hasPromoId {
  return !!hasPromoId_;
}
- (void) setHasPromoId:(BOOL) value_ {
  hasPromoId_ = !!value_;
}
@synthesize promoId;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value_ {
  hasTitle_ = !!value_;
}
@synthesize title;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (void) dealloc {
  self.title = nil;
  self.url = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.promoId = 0;
    self.title = @"";
    self.url = @"";
  }
  return self;
}
static CMsgDOTAStorePromoPagesResponse_PromoPage* defaultCMsgDOTAStorePromoPagesResponse_PromoPageInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAStorePromoPagesResponse_PromoPage class]) {
    defaultCMsgDOTAStorePromoPagesResponse_PromoPageInstance = [[CMsgDOTAStorePromoPagesResponse_PromoPage alloc] init];
  }
}
+ (CMsgDOTAStorePromoPagesResponse_PromoPage*) defaultInstance {
  return defaultCMsgDOTAStorePromoPagesResponse_PromoPageInstance;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage*) defaultInstance {
  return defaultCMsgDOTAStorePromoPagesResponse_PromoPageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPromoId) {
    [output writeUInt32:1 value:self.promoId];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  if (self.hasUrl) {
    [output writeString:3 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPromoId) {
    size_ += computeUInt32Size(1, self.promoId);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(2, self.title);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(3, self.url);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAStorePromoPagesResponse_PromoPage*) parseFromData:(NSData*) data {
  return (CMsgDOTAStorePromoPagesResponse_PromoPage*)[[[CMsgDOTAStorePromoPagesResponse_PromoPage builder] mergeFromData:data] build];
}
+ (CMsgDOTAStorePromoPagesResponse_PromoPage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAStorePromoPagesResponse_PromoPage*)[[[CMsgDOTAStorePromoPagesResponse_PromoPage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAStorePromoPagesResponse_PromoPage*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAStorePromoPagesResponse_PromoPage*)[[[CMsgDOTAStorePromoPagesResponse_PromoPage builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAStorePromoPagesResponse_PromoPage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAStorePromoPagesResponse_PromoPage*)[[[CMsgDOTAStorePromoPagesResponse_PromoPage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAStorePromoPagesResponse_PromoPage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAStorePromoPagesResponse_PromoPage*)[[[CMsgDOTAStorePromoPagesResponse_PromoPage builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAStorePromoPagesResponse_PromoPage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAStorePromoPagesResponse_PromoPage*)[[[CMsgDOTAStorePromoPagesResponse_PromoPage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) builder {
  return [[[CMsgDOTAStorePromoPagesResponse_PromoPage_Builder alloc] init] autorelease];
}
+ (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) builderWithPrototype:(CMsgDOTAStorePromoPagesResponse_PromoPage*) prototype {
  return [[CMsgDOTAStorePromoPagesResponse_PromoPage builder] mergeFrom:prototype];
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) builder {
  return [CMsgDOTAStorePromoPagesResponse_PromoPage builder];
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) toBuilder {
  return [CMsgDOTAStorePromoPagesResponse_PromoPage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPromoId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"promoId", [NSNumber numberWithInt:self.promoId]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAStorePromoPagesResponse_PromoPage class]]) {
    return NO;
  }
  CMsgDOTAStorePromoPagesResponse_PromoPage *otherMessage = other;
  return
      self.hasPromoId == otherMessage.hasPromoId &&
      (!self.hasPromoId || self.promoId == otherMessage.promoId) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPromoId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.promoId] hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAStorePromoPagesResponse_PromoPage_Builder()
@property (retain) CMsgDOTAStorePromoPagesResponse_PromoPage* _builderResult;
@end

@implementation CMsgDOTAStorePromoPagesResponse_PromoPage_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAStorePromoPagesResponse_PromoPage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) clear {
  _builderResult = [[[CMsgDOTAStorePromoPagesResponse_PromoPage alloc] init] autorelease];
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) clone {
  return [CMsgDOTAStorePromoPagesResponse_PromoPage builderWithPrototype:_builderResult];
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage*) defaultInstance {
  return [CMsgDOTAStorePromoPagesResponse_PromoPage defaultInstance];
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage*) buildPartial {
  CMsgDOTAStorePromoPagesResponse_PromoPage* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) mergeFrom:(CMsgDOTAStorePromoPagesResponse_PromoPage*) other {
  if (other == [CMsgDOTAStorePromoPagesResponse_PromoPage defaultInstance]) {
    return self;
  }
  if (other.hasPromoId) {
    [self setPromoId:other.promoId];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPromoId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 26: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPromoId {
  return _builderResult.hasPromoId;
}
- (uint32_t) promoId {
  return _builderResult.promoId;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) setPromoId:(uint32_t) value {
  _builderResult.hasPromoId = YES;
  _builderResult.promoId = value;
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) clearPromoId {
  _builderResult.hasPromoId = NO;
  _builderResult.promoId = 0;
  return self;
}
- (BOOL) hasTitle {
  return _builderResult.hasTitle;
}
- (NSString*) title {
  return _builderResult.title;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) setTitle:(NSString*) value {
  _builderResult.hasTitle = YES;
  _builderResult.title = value;
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) clearTitle {
  _builderResult.hasTitle = NO;
  _builderResult.title = @"";
  return self;
}
- (BOOL) hasUrl {
  return _builderResult.hasUrl;
}
- (NSString*) url {
  return _builderResult.url;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) setUrl:(NSString*) value {
  _builderResult.hasUrl = YES;
  _builderResult.url = value;
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage_Builder*) clearUrl {
  _builderResult.hasUrl = NO;
  _builderResult.url = @"";
  return self;
}
@end

@interface CMsgDOTAStorePromoPagesResponse_Builder()
@property (retain) CMsgDOTAStorePromoPagesResponse* _builderResult;
@end

@implementation CMsgDOTAStorePromoPagesResponse_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAStorePromoPagesResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAStorePromoPagesResponse_Builder*) clear {
  _builderResult = [[[CMsgDOTAStorePromoPagesResponse alloc] init] autorelease];
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_Builder*) clone {
  return [CMsgDOTAStorePromoPagesResponse builderWithPrototype:_builderResult];
}
- (CMsgDOTAStorePromoPagesResponse*) defaultInstance {
  return [CMsgDOTAStorePromoPagesResponse defaultInstance];
}
- (CMsgDOTAStorePromoPagesResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAStorePromoPagesResponse*) buildPartial {
  CMsgDOTAStorePromoPagesResponse* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAStorePromoPagesResponse_Builder*) mergeFrom:(CMsgDOTAStorePromoPagesResponse*) other {
  if (other == [CMsgDOTAStorePromoPagesResponse defaultInstance]) {
    return self;
  }
  if (other.pagesArray.count > 0) {
    if (_builderResult.pagesArray == nil) {
      _builderResult.pagesArray = [[other.pagesArray copyWithZone:[other.pagesArray zone]] autorelease];
    } else {
      [_builderResult.pagesArray appendArray:other.pagesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAStorePromoPagesResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CMsgDOTAStorePromoPagesResponse_PromoPage_Builder* subBuilder = [CMsgDOTAStorePromoPagesResponse_PromoPage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPages:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)pages {
  return _builderResult.pagesArray;
}
- (CMsgDOTAStorePromoPagesResponse_PromoPage*)pagesAtIndex:(NSUInteger)index {
  return [_builderResult pagesAtIndex:index];
}
- (CMsgDOTAStorePromoPagesResponse_Builder *)addPages:(CMsgDOTAStorePromoPagesResponse_PromoPage*)value {
  if (_builderResult.pagesArray == nil) {
    _builderResult.pagesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [_builderResult.pagesArray addObject:value];
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_Builder *)setPagesArray:(NSArray *)array {
  _builderResult.pagesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_Builder *)setPagesValues:(const CMsgDOTAStorePromoPagesResponse_PromoPage* *)values count:(NSUInteger)count {
  _builderResult.pagesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CMsgDOTAStorePromoPagesResponse_Builder *)clearPages {
  _builderResult.pagesArray = nil;
  return self;
}
@end

@interface CMsgDOTAGCToGCMatchCompleted ()
@property uint32_t matchId;
@end

@implementation CMsgDOTAGCToGCMatchCompleted

- (BOOL) hasMatchId {
  return !!hasMatchId_;
}
- (void) setHasMatchId:(BOOL) value_ {
  hasMatchId_ = !!value_;
}
@synthesize matchId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.matchId = 0;
  }
  return self;
}
static CMsgDOTAGCToGCMatchCompleted* defaultCMsgDOTAGCToGCMatchCompletedInstance = nil;
+ (void) initialize {
  if (self == [CMsgDOTAGCToGCMatchCompleted class]) {
    defaultCMsgDOTAGCToGCMatchCompletedInstance = [[CMsgDOTAGCToGCMatchCompleted alloc] init];
  }
}
+ (CMsgDOTAGCToGCMatchCompleted*) defaultInstance {
  return defaultCMsgDOTAGCToGCMatchCompletedInstance;
}
- (CMsgDOTAGCToGCMatchCompleted*) defaultInstance {
  return defaultCMsgDOTAGCToGCMatchCompletedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMatchId) {
    [output writeUInt32:1 value:self.matchId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMatchId) {
    size_ += computeUInt32Size(1, self.matchId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CMsgDOTAGCToGCMatchCompleted*) parseFromData:(NSData*) data {
  return (CMsgDOTAGCToGCMatchCompleted*)[[[CMsgDOTAGCToGCMatchCompleted builder] mergeFromData:data] build];
}
+ (CMsgDOTAGCToGCMatchCompleted*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGCToGCMatchCompleted*)[[[CMsgDOTAGCToGCMatchCompleted builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGCToGCMatchCompleted*) parseFromInputStream:(NSInputStream*) input {
  return (CMsgDOTAGCToGCMatchCompleted*)[[[CMsgDOTAGCToGCMatchCompleted builder] mergeFromInputStream:input] build];
}
+ (CMsgDOTAGCToGCMatchCompleted*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGCToGCMatchCompleted*)[[[CMsgDOTAGCToGCMatchCompleted builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGCToGCMatchCompleted*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CMsgDOTAGCToGCMatchCompleted*)[[[CMsgDOTAGCToGCMatchCompleted builder] mergeFromCodedInputStream:input] build];
}
+ (CMsgDOTAGCToGCMatchCompleted*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CMsgDOTAGCToGCMatchCompleted*)[[[CMsgDOTAGCToGCMatchCompleted builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CMsgDOTAGCToGCMatchCompleted_Builder*) builder {
  return [[[CMsgDOTAGCToGCMatchCompleted_Builder alloc] init] autorelease];
}
+ (CMsgDOTAGCToGCMatchCompleted_Builder*) builderWithPrototype:(CMsgDOTAGCToGCMatchCompleted*) prototype {
  return [[CMsgDOTAGCToGCMatchCompleted builder] mergeFrom:prototype];
}
- (CMsgDOTAGCToGCMatchCompleted_Builder*) builder {
  return [CMsgDOTAGCToGCMatchCompleted builder];
}
- (CMsgDOTAGCToGCMatchCompleted_Builder*) toBuilder {
  return [CMsgDOTAGCToGCMatchCompleted builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMatchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"matchId", [NSNumber numberWithInt:self.matchId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CMsgDOTAGCToGCMatchCompleted class]]) {
    return NO;
  }
  CMsgDOTAGCToGCMatchCompleted *otherMessage = other;
  return
      self.hasMatchId == otherMessage.hasMatchId &&
      (!self.hasMatchId || self.matchId == otherMessage.matchId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMatchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.matchId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CMsgDOTAGCToGCMatchCompleted_Builder()
@property (retain) CMsgDOTAGCToGCMatchCompleted* _builderResult;
@end

@implementation CMsgDOTAGCToGCMatchCompleted_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[CMsgDOTAGCToGCMatchCompleted alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (CMsgDOTAGCToGCMatchCompleted_Builder*) clear {
  _builderResult = [[[CMsgDOTAGCToGCMatchCompleted alloc] init] autorelease];
  return self;
}
- (CMsgDOTAGCToGCMatchCompleted_Builder*) clone {
  return [CMsgDOTAGCToGCMatchCompleted builderWithPrototype:_builderResult];
}
- (CMsgDOTAGCToGCMatchCompleted*) defaultInstance {
  return [CMsgDOTAGCToGCMatchCompleted defaultInstance];
}
- (CMsgDOTAGCToGCMatchCompleted*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CMsgDOTAGCToGCMatchCompleted*) buildPartial {
  CMsgDOTAGCToGCMatchCompleted* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (CMsgDOTAGCToGCMatchCompleted_Builder*) mergeFrom:(CMsgDOTAGCToGCMatchCompleted*) other {
  if (other == [CMsgDOTAGCToGCMatchCompleted defaultInstance]) {
    return self;
  }
  if (other.hasMatchId) {
    [self setMatchId:other.matchId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CMsgDOTAGCToGCMatchCompleted_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CMsgDOTAGCToGCMatchCompleted_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMatchId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMatchId {
  return _builderResult.hasMatchId;
}
- (uint32_t) matchId {
  return _builderResult.matchId;
}
- (CMsgDOTAGCToGCMatchCompleted_Builder*) setMatchId:(uint32_t) value {
  _builderResult.hasMatchId = YES;
  _builderResult.matchId = value;
  return self;
}
- (CMsgDOTAGCToGCMatchCompleted_Builder*) clearMatchId {
  _builderResult.hasMatchId = NO;
  _builderResult.matchId = 0;
  return self;
}
@end

