// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "encrypted_app_ticket.pb.h"

@implementation EncryptedAppTicketRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [EncryptedAppTicketRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface EncryptedAppTicket ()
@property uint32_t ticketVersionNo;
@property uint32_t crcEncryptedticket;
@property uint32_t cbEncrypteduserdata;
@property uint32_t cbEncryptedAppownershipticket;
@property (retain) NSData* encryptedTicket;
@end

@implementation EncryptedAppTicket

- (BOOL) hasTicketVersionNo {
  return !!hasTicketVersionNo_;
}
- (void) setHasTicketVersionNo:(BOOL) value_ {
  hasTicketVersionNo_ = !!value_;
}
@synthesize ticketVersionNo;
- (BOOL) hasCrcEncryptedticket {
  return !!hasCrcEncryptedticket_;
}
- (void) setHasCrcEncryptedticket:(BOOL) value_ {
  hasCrcEncryptedticket_ = !!value_;
}
@synthesize crcEncryptedticket;
- (BOOL) hasCbEncrypteduserdata {
  return !!hasCbEncrypteduserdata_;
}
- (void) setHasCbEncrypteduserdata:(BOOL) value_ {
  hasCbEncrypteduserdata_ = !!value_;
}
@synthesize cbEncrypteduserdata;
- (BOOL) hasCbEncryptedAppownershipticket {
  return !!hasCbEncryptedAppownershipticket_;
}
- (void) setHasCbEncryptedAppownershipticket:(BOOL) value_ {
  hasCbEncryptedAppownershipticket_ = !!value_;
}
@synthesize cbEncryptedAppownershipticket;
- (BOOL) hasEncryptedTicket {
  return !!hasEncryptedTicket_;
}
- (void) setHasEncryptedTicket:(BOOL) value_ {
  hasEncryptedTicket_ = !!value_;
}
@synthesize encryptedTicket;
- (void) dealloc {
  self.encryptedTicket = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.ticketVersionNo = 0;
    self.crcEncryptedticket = 0;
    self.cbEncrypteduserdata = 0;
    self.cbEncryptedAppownershipticket = 0;
    self.encryptedTicket = [NSData data];
  }
  return self;
}
static EncryptedAppTicket* defaultEncryptedAppTicketInstance = nil;
+ (void) initialize {
  if (self == [EncryptedAppTicket class]) {
    defaultEncryptedAppTicketInstance = [[EncryptedAppTicket alloc] init];
  }
}
+ (EncryptedAppTicket*) defaultInstance {
  return defaultEncryptedAppTicketInstance;
}
- (EncryptedAppTicket*) defaultInstance {
  return defaultEncryptedAppTicketInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTicketVersionNo) {
    [output writeUInt32:1 value:self.ticketVersionNo];
  }
  if (self.hasCrcEncryptedticket) {
    [output writeUInt32:2 value:self.crcEncryptedticket];
  }
  if (self.hasCbEncrypteduserdata) {
    [output writeUInt32:3 value:self.cbEncrypteduserdata];
  }
  if (self.hasCbEncryptedAppownershipticket) {
    [output writeUInt32:4 value:self.cbEncryptedAppownershipticket];
  }
  if (self.hasEncryptedTicket) {
    [output writeData:5 value:self.encryptedTicket];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTicketVersionNo) {
    size_ += computeUInt32Size(1, self.ticketVersionNo);
  }
  if (self.hasCrcEncryptedticket) {
    size_ += computeUInt32Size(2, self.crcEncryptedticket);
  }
  if (self.hasCbEncrypteduserdata) {
    size_ += computeUInt32Size(3, self.cbEncrypteduserdata);
  }
  if (self.hasCbEncryptedAppownershipticket) {
    size_ += computeUInt32Size(4, self.cbEncryptedAppownershipticket);
  }
  if (self.hasEncryptedTicket) {
    size_ += computeDataSize(5, self.encryptedTicket);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (EncryptedAppTicket*) parseFromData:(NSData*) data {
  return (EncryptedAppTicket*)[[[EncryptedAppTicket builder] mergeFromData:data] build];
}
+ (EncryptedAppTicket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EncryptedAppTicket*)[[[EncryptedAppTicket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (EncryptedAppTicket*) parseFromInputStream:(NSInputStream*) input {
  return (EncryptedAppTicket*)[[[EncryptedAppTicket builder] mergeFromInputStream:input] build];
}
+ (EncryptedAppTicket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EncryptedAppTicket*)[[[EncryptedAppTicket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EncryptedAppTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (EncryptedAppTicket*)[[[EncryptedAppTicket builder] mergeFromCodedInputStream:input] build];
}
+ (EncryptedAppTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EncryptedAppTicket*)[[[EncryptedAppTicket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EncryptedAppTicket_Builder*) builder {
  return [[[EncryptedAppTicket_Builder alloc] init] autorelease];
}
+ (EncryptedAppTicket_Builder*) builderWithPrototype:(EncryptedAppTicket*) prototype {
  return [[EncryptedAppTicket builder] mergeFrom:prototype];
}
- (EncryptedAppTicket_Builder*) builder {
  return [EncryptedAppTicket builder];
}
- (EncryptedAppTicket_Builder*) toBuilder {
  return [EncryptedAppTicket builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTicketVersionNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ticketVersionNo", [NSNumber numberWithInt:self.ticketVersionNo]];
  }
  if (self.hasCrcEncryptedticket) {
    [output appendFormat:@"%@%@: %@\n", indent, @"crcEncryptedticket", [NSNumber numberWithInt:self.crcEncryptedticket]];
  }
  if (self.hasCbEncrypteduserdata) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cbEncrypteduserdata", [NSNumber numberWithInt:self.cbEncrypteduserdata]];
  }
  if (self.hasCbEncryptedAppownershipticket) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cbEncryptedAppownershipticket", [NSNumber numberWithInt:self.cbEncryptedAppownershipticket]];
  }
  if (self.hasEncryptedTicket) {
    [output appendFormat:@"%@%@: %@\n", indent, @"encryptedTicket", self.encryptedTicket];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[EncryptedAppTicket class]]) {
    return NO;
  }
  EncryptedAppTicket *otherMessage = other;
  return
      self.hasTicketVersionNo == otherMessage.hasTicketVersionNo &&
      (!self.hasTicketVersionNo || self.ticketVersionNo == otherMessage.ticketVersionNo) &&
      self.hasCrcEncryptedticket == otherMessage.hasCrcEncryptedticket &&
      (!self.hasCrcEncryptedticket || self.crcEncryptedticket == otherMessage.crcEncryptedticket) &&
      self.hasCbEncrypteduserdata == otherMessage.hasCbEncrypteduserdata &&
      (!self.hasCbEncrypteduserdata || self.cbEncrypteduserdata == otherMessage.cbEncrypteduserdata) &&
      self.hasCbEncryptedAppownershipticket == otherMessage.hasCbEncryptedAppownershipticket &&
      (!self.hasCbEncryptedAppownershipticket || self.cbEncryptedAppownershipticket == otherMessage.cbEncryptedAppownershipticket) &&
      self.hasEncryptedTicket == otherMessage.hasEncryptedTicket &&
      (!self.hasEncryptedTicket || [self.encryptedTicket isEqual:otherMessage.encryptedTicket]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTicketVersionNo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.ticketVersionNo] hash];
  }
  if (self.hasCrcEncryptedticket) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.crcEncryptedticket] hash];
  }
  if (self.hasCbEncrypteduserdata) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.cbEncrypteduserdata] hash];
  }
  if (self.hasCbEncryptedAppownershipticket) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.cbEncryptedAppownershipticket] hash];
  }
  if (self.hasEncryptedTicket) {
    hashCode = hashCode * 31 + [self.encryptedTicket hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface EncryptedAppTicket_Builder()
@property (retain) EncryptedAppTicket* _builderResult;
@end

@implementation EncryptedAppTicket_Builder
@synthesize _builderResult;
- (void) dealloc {
  self._builderResult = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self._builderResult = [[[EncryptedAppTicket alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return _builderResult;
}
- (EncryptedAppTicket_Builder*) clear {
  _builderResult = [[[EncryptedAppTicket alloc] init] autorelease];
  return self;
}
- (EncryptedAppTicket_Builder*) clone {
  return [EncryptedAppTicket builderWithPrototype:_builderResult];
}
- (EncryptedAppTicket*) defaultInstance {
  return [EncryptedAppTicket defaultInstance];
}
- (EncryptedAppTicket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (EncryptedAppTicket*) buildPartial {
  EncryptedAppTicket* returnMe = [[_builderResult retain] autorelease];
  self._builderResult = nil;
  return returnMe;
}
- (EncryptedAppTicket_Builder*) mergeFrom:(EncryptedAppTicket*) other {
  if (other == [EncryptedAppTicket defaultInstance]) {
    return self;
  }
  if (other.hasTicketVersionNo) {
    [self setTicketVersionNo:other.ticketVersionNo];
  }
  if (other.hasCrcEncryptedticket) {
    [self setCrcEncryptedticket:other.crcEncryptedticket];
  }
  if (other.hasCbEncrypteduserdata) {
    [self setCbEncrypteduserdata:other.cbEncrypteduserdata];
  }
  if (other.hasCbEncryptedAppownershipticket) {
    [self setCbEncryptedAppownershipticket:other.cbEncryptedAppownershipticket];
  }
  if (other.hasEncryptedTicket) {
    [self setEncryptedTicket:other.encryptedTicket];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EncryptedAppTicket_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EncryptedAppTicket_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTicketVersionNo:[input readUInt32]];
        break;
      }
      case 16: {
        [self setCrcEncryptedticket:[input readUInt32]];
        break;
      }
      case 24: {
        [self setCbEncrypteduserdata:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCbEncryptedAppownershipticket:[input readUInt32]];
        break;
      }
      case 42: {
        [self setEncryptedTicket:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasTicketVersionNo {
  return _builderResult.hasTicketVersionNo;
}
- (uint32_t) ticketVersionNo {
  return _builderResult.ticketVersionNo;
}
- (EncryptedAppTicket_Builder*) setTicketVersionNo:(uint32_t) value {
  _builderResult.hasTicketVersionNo = YES;
  _builderResult.ticketVersionNo = value;
  return self;
}
- (EncryptedAppTicket_Builder*) clearTicketVersionNo {
  _builderResult.hasTicketVersionNo = NO;
  _builderResult.ticketVersionNo = 0;
  return self;
}
- (BOOL) hasCrcEncryptedticket {
  return _builderResult.hasCrcEncryptedticket;
}
- (uint32_t) crcEncryptedticket {
  return _builderResult.crcEncryptedticket;
}
- (EncryptedAppTicket_Builder*) setCrcEncryptedticket:(uint32_t) value {
  _builderResult.hasCrcEncryptedticket = YES;
  _builderResult.crcEncryptedticket = value;
  return self;
}
- (EncryptedAppTicket_Builder*) clearCrcEncryptedticket {
  _builderResult.hasCrcEncryptedticket = NO;
  _builderResult.crcEncryptedticket = 0;
  return self;
}
- (BOOL) hasCbEncrypteduserdata {
  return _builderResult.hasCbEncrypteduserdata;
}
- (uint32_t) cbEncrypteduserdata {
  return _builderResult.cbEncrypteduserdata;
}
- (EncryptedAppTicket_Builder*) setCbEncrypteduserdata:(uint32_t) value {
  _builderResult.hasCbEncrypteduserdata = YES;
  _builderResult.cbEncrypteduserdata = value;
  return self;
}
- (EncryptedAppTicket_Builder*) clearCbEncrypteduserdata {
  _builderResult.hasCbEncrypteduserdata = NO;
  _builderResult.cbEncrypteduserdata = 0;
  return self;
}
- (BOOL) hasCbEncryptedAppownershipticket {
  return _builderResult.hasCbEncryptedAppownershipticket;
}
- (uint32_t) cbEncryptedAppownershipticket {
  return _builderResult.cbEncryptedAppownershipticket;
}
- (EncryptedAppTicket_Builder*) setCbEncryptedAppownershipticket:(uint32_t) value {
  _builderResult.hasCbEncryptedAppownershipticket = YES;
  _builderResult.cbEncryptedAppownershipticket = value;
  return self;
}
- (EncryptedAppTicket_Builder*) clearCbEncryptedAppownershipticket {
  _builderResult.hasCbEncryptedAppownershipticket = NO;
  _builderResult.cbEncryptedAppownershipticket = 0;
  return self;
}
- (BOOL) hasEncryptedTicket {
  return _builderResult.hasEncryptedTicket;
}
- (NSData*) encryptedTicket {
  return _builderResult.encryptedTicket;
}
- (EncryptedAppTicket_Builder*) setEncryptedTicket:(NSData*) value {
  _builderResult.hasEncryptedTicket = YES;
  _builderResult.encryptedTicket = value;
  return self;
}
- (EncryptedAppTicket_Builder*) clearEncryptedTicket {
  _builderResult.hasEncryptedTicket = NO;
  _builderResult.encryptedTicket = [NSData data];
  return self;
}
@end

