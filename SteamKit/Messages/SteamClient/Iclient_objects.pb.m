// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Iclient_objects.pb.h"

@implementation IclientObjectsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [IclientObjectsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ClientAppInfo ()
@property uint32_t appid;
@property BOOL favorite;
@property BOOL installed;
@property BOOL autoUpdate;
@property (retain) NSString* category;
@property (retain) NSString* appType;
@property BOOL downloading;
@property BOOL downloadPaused;
@property uint32_t bytesDownloadRate;
@property uint64_t bytesDownloaded;
@property uint64_t bytesNeeded;
@property BOOL changing;
@property BOOL availableOnPlatform;
@end

@implementation ClientAppInfo

- (BOOL) hasAppid {
  return !!hasAppid_;
}
- (void) setHasAppid:(BOOL) value_ {
  hasAppid_ = !!value_;
}
@synthesize appid;
- (BOOL) hasFavorite {
  return !!hasFavorite_;
}
- (void) setHasFavorite:(BOOL) value_ {
  hasFavorite_ = !!value_;
}
- (BOOL) favorite {
  return !!favorite_;
}
- (void) setFavorite:(BOOL) value_ {
  favorite_ = !!value_;
}
- (BOOL) hasInstalled {
  return !!hasInstalled_;
}
- (void) setHasInstalled:(BOOL) value_ {
  hasInstalled_ = !!value_;
}
- (BOOL) installed {
  return !!installed_;
}
- (void) setInstalled:(BOOL) value_ {
  installed_ = !!value_;
}
- (BOOL) hasAutoUpdate {
  return !!hasAutoUpdate_;
}
- (void) setHasAutoUpdate:(BOOL) value_ {
  hasAutoUpdate_ = !!value_;
}
- (BOOL) autoUpdate {
  return !!autoUpdate_;
}
- (void) setAutoUpdate:(BOOL) value_ {
  autoUpdate_ = !!value_;
}
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
- (BOOL) hasAppType {
  return !!hasAppType_;
}
- (void) setHasAppType:(BOOL) value_ {
  hasAppType_ = !!value_;
}
@synthesize appType;
- (BOOL) hasDownloading {
  return !!hasDownloading_;
}
- (void) setHasDownloading:(BOOL) value_ {
  hasDownloading_ = !!value_;
}
- (BOOL) downloading {
  return !!downloading_;
}
- (void) setDownloading:(BOOL) value_ {
  downloading_ = !!value_;
}
- (BOOL) hasDownloadPaused {
  return !!hasDownloadPaused_;
}
- (void) setHasDownloadPaused:(BOOL) value_ {
  hasDownloadPaused_ = !!value_;
}
- (BOOL) downloadPaused {
  return !!downloadPaused_;
}
- (void) setDownloadPaused:(BOOL) value_ {
  downloadPaused_ = !!value_;
}
- (BOOL) hasBytesDownloadRate {
  return !!hasBytesDownloadRate_;
}
- (void) setHasBytesDownloadRate:(BOOL) value_ {
  hasBytesDownloadRate_ = !!value_;
}
@synthesize bytesDownloadRate;
- (BOOL) hasBytesDownloaded {
  return !!hasBytesDownloaded_;
}
- (void) setHasBytesDownloaded:(BOOL) value_ {
  hasBytesDownloaded_ = !!value_;
}
@synthesize bytesDownloaded;
- (BOOL) hasBytesNeeded {
  return !!hasBytesNeeded_;
}
- (void) setHasBytesNeeded:(BOOL) value_ {
  hasBytesNeeded_ = !!value_;
}
@synthesize bytesNeeded;
- (BOOL) hasChanging {
  return !!hasChanging_;
}
- (void) setHasChanging:(BOOL) value_ {
  hasChanging_ = !!value_;
}
- (BOOL) changing {
  return !!changing_;
}
- (void) setChanging:(BOOL) value_ {
  changing_ = !!value_;
}
- (BOOL) hasAvailableOnPlatform {
  return !!hasAvailableOnPlatform_;
}
- (void) setHasAvailableOnPlatform:(BOOL) value_ {
  hasAvailableOnPlatform_ = !!value_;
}
- (BOOL) availableOnPlatform {
  return !!availableOnPlatform_;
}
- (void) setAvailableOnPlatform:(BOOL) value_ {
  availableOnPlatform_ = !!value_;
}
- (void) dealloc {
  self.category = nil;
  self.appType = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.appid = 0;
    self.favorite = NO;
    self.installed = NO;
    self.autoUpdate = NO;
    self.category = @"";
    self.appType = @"";
    self.downloading = NO;
    self.downloadPaused = NO;
    self.bytesDownloadRate = 0;
    self.bytesDownloaded = 0L;
    self.bytesNeeded = 0L;
    self.changing = NO;
    self.availableOnPlatform = NO;
  }
  return self;
}
static ClientAppInfo* defaultClientAppInfoInstance = nil;
+ (void) initialize {
  if (self == [ClientAppInfo class]) {
    defaultClientAppInfoInstance = [[ClientAppInfo alloc] init];
  }
}
+ (ClientAppInfo*) defaultInstance {
  return defaultClientAppInfoInstance;
}
- (ClientAppInfo*) defaultInstance {
  return defaultClientAppInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAppid) {
    [output writeUInt32:1 value:self.appid];
  }
  if (self.hasFavorite) {
    [output writeBool:2 value:self.favorite];
  }
  if (self.hasInstalled) {
    [output writeBool:3 value:self.installed];
  }
  if (self.hasAutoUpdate) {
    [output writeBool:4 value:self.autoUpdate];
  }
  if (self.hasCategory) {
    [output writeString:5 value:self.category];
  }
  if (self.hasAppType) {
    [output writeString:6 value:self.appType];
  }
  if (self.hasDownloading) {
    [output writeBool:7 value:self.downloading];
  }
  if (self.hasDownloadPaused) {
    [output writeBool:8 value:self.downloadPaused];
  }
  if (self.hasBytesDownloadRate) {
    [output writeUInt32:9 value:self.bytesDownloadRate];
  }
  if (self.hasBytesDownloaded) {
    [output writeUInt64:10 value:self.bytesDownloaded];
  }
  if (self.hasBytesNeeded) {
    [output writeUInt64:11 value:self.bytesNeeded];
  }
  if (self.hasChanging) {
    [output writeBool:12 value:self.changing];
  }
  if (self.hasAvailableOnPlatform) {
    [output writeBool:13 value:self.availableOnPlatform];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAppid) {
    size_ += computeUInt32Size(1, self.appid);
  }
  if (self.hasFavorite) {
    size_ += computeBoolSize(2, self.favorite);
  }
  if (self.hasInstalled) {
    size_ += computeBoolSize(3, self.installed);
  }
  if (self.hasAutoUpdate) {
    size_ += computeBoolSize(4, self.autoUpdate);
  }
  if (self.hasCategory) {
    size_ += computeStringSize(5, self.category);
  }
  if (self.hasAppType) {
    size_ += computeStringSize(6, self.appType);
  }
  if (self.hasDownloading) {
    size_ += computeBoolSize(7, self.downloading);
  }
  if (self.hasDownloadPaused) {
    size_ += computeBoolSize(8, self.downloadPaused);
  }
  if (self.hasBytesDownloadRate) {
    size_ += computeUInt32Size(9, self.bytesDownloadRate);
  }
  if (self.hasBytesDownloaded) {
    size_ += computeUInt64Size(10, self.bytesDownloaded);
  }
  if (self.hasBytesNeeded) {
    size_ += computeUInt64Size(11, self.bytesNeeded);
  }
  if (self.hasChanging) {
    size_ += computeBoolSize(12, self.changing);
  }
  if (self.hasAvailableOnPlatform) {
    size_ += computeBoolSize(13, self.availableOnPlatform);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClientAppInfo*) parseFromData:(NSData*) data {
  return (ClientAppInfo*)[[[ClientAppInfo builder] mergeFromData:data] build];
}
+ (ClientAppInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientAppInfo*)[[[ClientAppInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClientAppInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ClientAppInfo*)[[[ClientAppInfo builder] mergeFromInputStream:input] build];
}
+ (ClientAppInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientAppInfo*)[[[ClientAppInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientAppInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClientAppInfo*)[[[ClientAppInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ClientAppInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClientAppInfo*)[[[ClientAppInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClientAppInfo_Builder*) builder {
  return [[[ClientAppInfo_Builder alloc] init] autorelease];
}
+ (ClientAppInfo_Builder*) builderWithPrototype:(ClientAppInfo*) prototype {
  return [[ClientAppInfo builder] mergeFrom:prototype];
}
- (ClientAppInfo_Builder*) builder {
  return [ClientAppInfo builder];
}
- (ClientAppInfo_Builder*) toBuilder {
  return [ClientAppInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAppid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appid", [NSNumber numberWithInt:self.appid]];
  }
  if (self.hasFavorite) {
    [output appendFormat:@"%@%@: %@\n", indent, @"favorite", [NSNumber numberWithBool:self.favorite]];
  }
  if (self.hasInstalled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"installed", [NSNumber numberWithBool:self.installed]];
  }
  if (self.hasAutoUpdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"autoUpdate", [NSNumber numberWithBool:self.autoUpdate]];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"category", self.category];
  }
  if (self.hasAppType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appType", self.appType];
  }
  if (self.hasDownloading) {
    [output appendFormat:@"%@%@: %@\n", indent, @"downloading", [NSNumber numberWithBool:self.downloading]];
  }
  if (self.hasDownloadPaused) {
    [output appendFormat:@"%@%@: %@\n", indent, @"downloadPaused", [NSNumber numberWithBool:self.downloadPaused]];
  }
  if (self.hasBytesDownloadRate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesDownloadRate", [NSNumber numberWithInt:self.bytesDownloadRate]];
  }
  if (self.hasBytesDownloaded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesDownloaded", [NSNumber numberWithLongLong:self.bytesDownloaded]];
  }
  if (self.hasBytesNeeded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesNeeded", [NSNumber numberWithLongLong:self.bytesNeeded]];
  }
  if (self.hasChanging) {
    [output appendFormat:@"%@%@: %@\n", indent, @"changing", [NSNumber numberWithBool:self.changing]];
  }
  if (self.hasAvailableOnPlatform) {
    [output appendFormat:@"%@%@: %@\n", indent, @"availableOnPlatform", [NSNumber numberWithBool:self.availableOnPlatform]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClientAppInfo class]]) {
    return NO;
  }
  ClientAppInfo *otherMessage = other;
  return
      self.hasAppid == otherMessage.hasAppid &&
      (!self.hasAppid || self.appid == otherMessage.appid) &&
      self.hasFavorite == otherMessage.hasFavorite &&
      (!self.hasFavorite || self.favorite == otherMessage.favorite) &&
      self.hasInstalled == otherMessage.hasInstalled &&
      (!self.hasInstalled || self.installed == otherMessage.installed) &&
      self.hasAutoUpdate == otherMessage.hasAutoUpdate &&
      (!self.hasAutoUpdate || self.autoUpdate == otherMessage.autoUpdate) &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      self.hasAppType == otherMessage.hasAppType &&
      (!self.hasAppType || [self.appType isEqual:otherMessage.appType]) &&
      self.hasDownloading == otherMessage.hasDownloading &&
      (!self.hasDownloading || self.downloading == otherMessage.downloading) &&
      self.hasDownloadPaused == otherMessage.hasDownloadPaused &&
      (!self.hasDownloadPaused || self.downloadPaused == otherMessage.downloadPaused) &&
      self.hasBytesDownloadRate == otherMessage.hasBytesDownloadRate &&
      (!self.hasBytesDownloadRate || self.bytesDownloadRate == otherMessage.bytesDownloadRate) &&
      self.hasBytesDownloaded == otherMessage.hasBytesDownloaded &&
      (!self.hasBytesDownloaded || self.bytesDownloaded == otherMessage.bytesDownloaded) &&
      self.hasBytesNeeded == otherMessage.hasBytesNeeded &&
      (!self.hasBytesNeeded || self.bytesNeeded == otherMessage.bytesNeeded) &&
      self.hasChanging == otherMessage.hasChanging &&
      (!self.hasChanging || self.changing == otherMessage.changing) &&
      self.hasAvailableOnPlatform == otherMessage.hasAvailableOnPlatform &&
      (!self.hasAvailableOnPlatform || self.availableOnPlatform == otherMessage.availableOnPlatform) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAppid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.appid] hash];
  }
  if (self.hasFavorite) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.favorite] hash];
  }
  if (self.hasInstalled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.installed] hash];
  }
  if (self.hasAutoUpdate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.autoUpdate] hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  if (self.hasAppType) {
    hashCode = hashCode * 31 + [self.appType hash];
  }
  if (self.hasDownloading) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.downloading] hash];
  }
  if (self.hasDownloadPaused) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.downloadPaused] hash];
  }
  if (self.hasBytesDownloadRate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.bytesDownloadRate] hash];
  }
  if (self.hasBytesDownloaded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.bytesDownloaded] hash];
  }
  if (self.hasBytesNeeded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.bytesNeeded] hash];
  }
  if (self.hasChanging) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.changing] hash];
  }
  if (self.hasAvailableOnPlatform) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.availableOnPlatform] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClientAppInfo_Builder()
@property (retain) ClientAppInfo* result;
@end

@implementation ClientAppInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ClientAppInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClientAppInfo_Builder*) clear {
  self.result = [[[ClientAppInfo alloc] init] autorelease];
  return self;
}
- (ClientAppInfo_Builder*) clone {
  return [ClientAppInfo builderWithPrototype:result];
}
- (ClientAppInfo*) defaultInstance {
  return [ClientAppInfo defaultInstance];
}
- (ClientAppInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClientAppInfo*) buildPartial {
  ClientAppInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ClientAppInfo_Builder*) mergeFrom:(ClientAppInfo*) other {
  if (other == [ClientAppInfo defaultInstance]) {
    return self;
  }
  if (other.hasAppid) {
    [self setAppid:other.appid];
  }
  if (other.hasFavorite) {
    [self setFavorite:other.favorite];
  }
  if (other.hasInstalled) {
    [self setInstalled:other.installed];
  }
  if (other.hasAutoUpdate) {
    [self setAutoUpdate:other.autoUpdate];
  }
  if (other.hasCategory) {
    [self setCategory:other.category];
  }
  if (other.hasAppType) {
    [self setAppType:other.appType];
  }
  if (other.hasDownloading) {
    [self setDownloading:other.downloading];
  }
  if (other.hasDownloadPaused) {
    [self setDownloadPaused:other.downloadPaused];
  }
  if (other.hasBytesDownloadRate) {
    [self setBytesDownloadRate:other.bytesDownloadRate];
  }
  if (other.hasBytesDownloaded) {
    [self setBytesDownloaded:other.bytesDownloaded];
  }
  if (other.hasBytesNeeded) {
    [self setBytesNeeded:other.bytesNeeded];
  }
  if (other.hasChanging) {
    [self setChanging:other.changing];
  }
  if (other.hasAvailableOnPlatform) {
    [self setAvailableOnPlatform:other.availableOnPlatform];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClientAppInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClientAppInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAppid:[input readUInt32]];
        break;
      }
      case 16: {
        [self setFavorite:[input readBool]];
        break;
      }
      case 24: {
        [self setInstalled:[input readBool]];
        break;
      }
      case 32: {
        [self setAutoUpdate:[input readBool]];
        break;
      }
      case 42: {
        [self setCategory:[input readString]];
        break;
      }
      case 50: {
        [self setAppType:[input readString]];
        break;
      }
      case 56: {
        [self setDownloading:[input readBool]];
        break;
      }
      case 64: {
        [self setDownloadPaused:[input readBool]];
        break;
      }
      case 72: {
        [self setBytesDownloadRate:[input readUInt32]];
        break;
      }
      case 80: {
        [self setBytesDownloaded:[input readUInt64]];
        break;
      }
      case 88: {
        [self setBytesNeeded:[input readUInt64]];
        break;
      }
      case 96: {
        [self setChanging:[input readBool]];
        break;
      }
      case 104: {
        [self setAvailableOnPlatform:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasAppid {
  return result.hasAppid;
}
- (uint32_t) appid {
  return result.appid;
}
- (ClientAppInfo_Builder*) setAppid:(uint32_t) value {
  result.hasAppid = YES;
  result.appid = value;
  return self;
}
- (ClientAppInfo_Builder*) clearAppid {
  result.hasAppid = NO;
  result.appid = 0;
  return self;
}
- (BOOL) hasFavorite {
  return result.hasFavorite;
}
- (BOOL) favorite {
  return result.favorite;
}
- (ClientAppInfo_Builder*) setFavorite:(BOOL) value {
  result.hasFavorite = YES;
  result.favorite = value;
  return self;
}
- (ClientAppInfo_Builder*) clearFavorite {
  result.hasFavorite = NO;
  result.favorite = NO;
  return self;
}
- (BOOL) hasInstalled {
  return result.hasInstalled;
}
- (BOOL) installed {
  return result.installed;
}
- (ClientAppInfo_Builder*) setInstalled:(BOOL) value {
  result.hasInstalled = YES;
  result.installed = value;
  return self;
}
- (ClientAppInfo_Builder*) clearInstalled {
  result.hasInstalled = NO;
  result.installed = NO;
  return self;
}
- (BOOL) hasAutoUpdate {
  return result.hasAutoUpdate;
}
- (BOOL) autoUpdate {
  return result.autoUpdate;
}
- (ClientAppInfo_Builder*) setAutoUpdate:(BOOL) value {
  result.hasAutoUpdate = YES;
  result.autoUpdate = value;
  return self;
}
- (ClientAppInfo_Builder*) clearAutoUpdate {
  result.hasAutoUpdate = NO;
  result.autoUpdate = NO;
  return self;
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (NSString*) category {
  return result.category;
}
- (ClientAppInfo_Builder*) setCategory:(NSString*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (ClientAppInfo_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = @"";
  return self;
}
- (BOOL) hasAppType {
  return result.hasAppType;
}
- (NSString*) appType {
  return result.appType;
}
- (ClientAppInfo_Builder*) setAppType:(NSString*) value {
  result.hasAppType = YES;
  result.appType = value;
  return self;
}
- (ClientAppInfo_Builder*) clearAppType {
  result.hasAppType = NO;
  result.appType = @"";
  return self;
}
- (BOOL) hasDownloading {
  return result.hasDownloading;
}
- (BOOL) downloading {
  return result.downloading;
}
- (ClientAppInfo_Builder*) setDownloading:(BOOL) value {
  result.hasDownloading = YES;
  result.downloading = value;
  return self;
}
- (ClientAppInfo_Builder*) clearDownloading {
  result.hasDownloading = NO;
  result.downloading = NO;
  return self;
}
- (BOOL) hasDownloadPaused {
  return result.hasDownloadPaused;
}
- (BOOL) downloadPaused {
  return result.downloadPaused;
}
- (ClientAppInfo_Builder*) setDownloadPaused:(BOOL) value {
  result.hasDownloadPaused = YES;
  result.downloadPaused = value;
  return self;
}
- (ClientAppInfo_Builder*) clearDownloadPaused {
  result.hasDownloadPaused = NO;
  result.downloadPaused = NO;
  return self;
}
- (BOOL) hasBytesDownloadRate {
  return result.hasBytesDownloadRate;
}
- (uint32_t) bytesDownloadRate {
  return result.bytesDownloadRate;
}
- (ClientAppInfo_Builder*) setBytesDownloadRate:(uint32_t) value {
  result.hasBytesDownloadRate = YES;
  result.bytesDownloadRate = value;
  return self;
}
- (ClientAppInfo_Builder*) clearBytesDownloadRate {
  result.hasBytesDownloadRate = NO;
  result.bytesDownloadRate = 0;
  return self;
}
- (BOOL) hasBytesDownloaded {
  return result.hasBytesDownloaded;
}
- (uint64_t) bytesDownloaded {
  return result.bytesDownloaded;
}
- (ClientAppInfo_Builder*) setBytesDownloaded:(uint64_t) value {
  result.hasBytesDownloaded = YES;
  result.bytesDownloaded = value;
  return self;
}
- (ClientAppInfo_Builder*) clearBytesDownloaded {
  result.hasBytesDownloaded = NO;
  result.bytesDownloaded = 0L;
  return self;
}
- (BOOL) hasBytesNeeded {
  return result.hasBytesNeeded;
}
- (uint64_t) bytesNeeded {
  return result.bytesNeeded;
}
- (ClientAppInfo_Builder*) setBytesNeeded:(uint64_t) value {
  result.hasBytesNeeded = YES;
  result.bytesNeeded = value;
  return self;
}
- (ClientAppInfo_Builder*) clearBytesNeeded {
  result.hasBytesNeeded = NO;
  result.bytesNeeded = 0L;
  return self;
}
- (BOOL) hasChanging {
  return result.hasChanging;
}
- (BOOL) changing {
  return result.changing;
}
- (ClientAppInfo_Builder*) setChanging:(BOOL) value {
  result.hasChanging = YES;
  result.changing = value;
  return self;
}
- (ClientAppInfo_Builder*) clearChanging {
  result.hasChanging = NO;
  result.changing = NO;
  return self;
}
- (BOOL) hasAvailableOnPlatform {
  return result.hasAvailableOnPlatform;
}
- (BOOL) availableOnPlatform {
  return result.availableOnPlatform;
}
- (ClientAppInfo_Builder*) setAvailableOnPlatform:(BOOL) value {
  result.hasAvailableOnPlatform = YES;
  result.availableOnPlatform = value;
  return self;
}
- (ClientAppInfo_Builder*) clearAvailableOnPlatform {
  result.hasAvailableOnPlatform = NO;
  result.availableOnPlatform = NO;
  return self;
}
@end

